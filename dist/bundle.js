!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(t,e,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function a(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],o=0;o<t.length;o++){var i=t[o],c=e.base?i[0]+e.base:i[0],p=n[c]||0,l="".concat(c," ").concat(p);n[c]=p+1;var h=a(l),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==h?(s[h].references++,s[h].updater(f)):s.push({identifier:l,updater:v(f,e),references:1}),r.push(l)}return r}function p(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=i(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var l,h=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function f(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=h(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function u(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,m=0;function v(t,e){var n,r,o;if(e.singleton){var i=m++;n=d||(d=p(e)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=p(e),r=u.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=a(n[r]);s[o].references--}for(var i=c(t,e),p=0;p<n.length;p++){var l=a(n[p]);0===s[l].references&&(s[l].updater(),s.splice(l,1))}n=i}}}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([o]).join("\n")}var s,a,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.sentMessages=[],this.messageQueue=[],this.loggingEnabled=!1,this.acceptsThemes=!0,this.activeThemes=[],this.initialPermissions=e,this.onReadyCallback=n,this.coallesedSaving=!0,this.coallesedSavingDelay=250,this.registerMessageHandler()}var e,n,o;return e=t,(n=[{key:"registerMessageHandler",value:function(){var t=this,e=function(e){if(t.loggingEnabled&&console.log("Components API Message received:",e.data),!document.referrer||new URL(document.referrer).origin===new URL(e.origin).origin){if(t.origin){if(e.origin!==t.origin)return}else t.origin=e.origin;var n=e.data,r="string"==typeof n?JSON.parse(n):n;t.handleMessage(r)}};document.addEventListener("message",(function(t){e(t)}),!1),window.addEventListener("message",(function(t){e(t)}),!1)}},{key:"handleMessage",value:function(t){if("component-registered"===t.action)this.sessionKey=t.sessionKey,this.componentData=t.componentData,this.onReady(t.data),this.loggingEnabled&&console.log("Component successfully registered with payload:",t);else if("themes"===t.action)this.acceptsThemes&&this.activateThemes(t.data.themes);else if(t.original){var e=this.sentMessages.filter((function(e){return e.messageId===t.original.messageId}))[0];e||alert("This extension is attempting to communicate with Standard Notes, but an error is preventing it from doing so. Please restart this extension and try again."),e.callback&&e.callback(t.data)}}},{key:"onReady",value:function(t){this.environment=t.environment,this.platform=t.platform,this.uuid=t.uuid,this.isMobile="mobile"==this.environment,this.initialPermissions&&this.initialPermissions.length>0&&this.requestPermissions(this.initialPermissions);var e=!0,n=!1,r=void 0;try{for(var o,i=this.messageQueue[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var s=o.value;this.postMessage(s.action,s.data,s.callback)}}catch(t){n=!0,r=t}finally{try{e||null==i.return||i.return()}finally{if(n)throw r}}this.messageQueue=[],this.loggingEnabled&&console.log("onReadyData",t),this.activateThemes(t.activeThemeUrls||[]),this.onReadyCallback&&this.onReadyCallback()}},{key:"getSelfComponentUUID",value:function(){return this.uuid}},{key:"isRunningInDesktopApplication",value:function(){return"desktop"===this.environment}},{key:"setComponentDataValueForKey",value:function(t,e){this.componentData[t]=e,this.postMessage("set-component-data",{componentData:this.componentData},(function(t){}))}},{key:"clearComponentData",value:function(){this.componentData={},this.postMessage("set-component-data",{componentData:this.componentData},(function(t){}))}},{key:"componentDataValueForKey",value:function(t){return this.componentData[t]}},{key:"postMessage",value:function(t,e,n){if(this.sessionKey){var r={action:t,data:e,messageId:this.generateUUID(),sessionKey:this.sessionKey,api:"component"},o=JSON.parse(JSON.stringify(r));o.callback=n,this.sentMessages.push(o),this.isMobile&&(r=JSON.stringify(r)),this.loggingEnabled&&console.log("Posting message:",r),window.parent.postMessage(r,this.origin)}else this.messageQueue.push({action:t,data:e,callback:n})}},{key:"setSize",value:function(t,e,n){this.postMessage("set-size",{type:t,width:e,height:n},(function(t){}))}},{key:"requestPermissions",value:function(t,e){this.postMessage("request-permissions",{permissions:t},function(t){e&&e()}.bind(this))}},{key:"streamItems",value:function(t,e){Array.isArray(t)||(t=[t]),this.postMessage("stream-items",{content_types:t},function(t){e(t.items)}.bind(this))}},{key:"streamContextItem",value:function(t){var e=this;this.postMessage("stream-context-item",null,(function(n){var r=n.item;(!e.lastStreamedItem||e.lastStreamedItem.uuid!==r.uuid)&&e.pendingSaveTimeout&&(clearTimeout(e.pendingSaveTimeout),e._performSavingOfItems(e.pendingSaveParams),e.pendingSaveTimeout=null,e.pendingSaveParams=null),e.lastStreamedItem=r,t(e.lastStreamedItem)}))}},{key:"selectItem",value:function(t){this.postMessage("select-item",{item:this.jsonObjectForItem(t)})}},{key:"createItem",value:function(t,e){this.postMessage("create-item",{item:this.jsonObjectForItem(t)},function(t){var n=t.item;!n&&t.items&&t.items.length>0&&(n=t.items[0]),this.associateItem(n),e&&e(n)}.bind(this))}},{key:"createItems",value:function(t,e){var n=this,r=t.map((function(t){return n.jsonObjectForItem(t)}));this.postMessage("create-items",{items:r},function(t){e&&e(t.items)}.bind(this))}},{key:"associateItem",value:function(t){this.postMessage("associate-item",{item:this.jsonObjectForItem(t)})}},{key:"deassociateItem",value:function(t){this.postMessage("deassociate-item",{item:this.jsonObjectForItem(t)})}},{key:"clearSelection",value:function(){this.postMessage("clear-selection",{content_type:"Tag"})}},{key:"deleteItem",value:function(t,e){this.deleteItems([t],e)}},{key:"deleteItems",value:function(t,e){var n={items:t.map(function(t){return this.jsonObjectForItem(t)}.bind(this))};this.postMessage("delete-items",n,(function(t){e&&e(t)}))}},{key:"sendCustomEvent",value:function(t,e,n){this.postMessage(t,e,function(t){n&&n(t)}.bind(this))}},{key:"saveItem",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.saveItems([t],e,n)}},{key:"saveItemWithPresave",value:function(t,e,n){this.saveItemsWithPresave([t],e,n)}},{key:"saveItemsWithPresave",value:function(t,e,n){this.saveItems(t,n,!1,e)}},{key:"_performSavingOfItems",value:function(t){var e=t.items,n=t.presave,r=t.callback;n&&n();var o=[],i=!0,s=!1,a=void 0;try{for(var c,p=e[Symbol.iterator]();!(i=(c=p.next()).done);i=!0){var l=c.value;o.push(this.jsonObjectForItem(l))}}catch(t){s=!0,a=t}finally{try{i||null==p.return||p.return()}finally{if(s)throw a}}this.postMessage("save-items",{items:o},(function(t){r&&r()}))}},{key:"saveItems",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3?arguments[3]:void 0;if(this.pendingSaveItems||(this.pendingSaveItems=[]),1!=this.coallesedSaving||r)this._performSavingOfItems({items:t,presave:o,callback:e});else{this.pendingSaveTimeout&&clearTimeout(this.pendingSaveTimeout);var i=t.map((function(t){return t.uuid})),s=this.pendingSaveItems.filter((function(t){return!i.includes(t.uuid)}));this.pendingSaveItems=s.concat(t),this.pendingSaveParams={items:this.pendingSaveItems,presave:o,callback:e},this.pendingSaveTimeout=setTimeout((function(){n._performSavingOfItems(n.pendingSaveParams),n.pendingSaveItems=[],n.pendingSaveTimeout=null,n.pendingSaveParams=null}),this.coallesedSavingDelay)}}},{key:"jsonObjectForItem",value:function(t){var e=Object.assign({},t);return e.children=null,e.parent=null,e}},{key:"getItemAppDataValue",value:function(t,e){var n=t.content.appData&&t.content.appData["org.standardnotes.sn"];return n?n[e]:null}},{key:"activateThemes",value:function(t){if(this.loggingEnabled&&console.log("Incoming themes",t),this.activeThemes.sort().toString()!=t.sort().toString()){var e=t||[],n=[],r=!0,o=!1,i=void 0;try{for(var s,a=this.activeThemes[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var c=s.value;t.includes(c)?e=e.filter((function(t){return t!=c})):n.push(c)}}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}this.loggingEnabled&&(console.log("Deactivating themes:",n),console.log("Activating themes:",e));for(var p=0,l=n;p<l.length;p++){var h=l[p];this.deactivateTheme(h)}this.activeThemes=t;var f=!0,u=!1,d=void 0;try{for(var m,v=e[Symbol.iterator]();!(f=(m=v.next()).done);f=!0){var g=m.value;if(g){var y=document.createElement("link");y.id=btoa(g),y.href=g,y.type="text/css",y.rel="stylesheet",y.media="screen,print",y.className="custom-theme",document.getElementsByTagName("head")[0].appendChild(y)}}}catch(t){u=!0,d=t}finally{try{f||null==v.return||v.return()}finally{if(u)throw d}}}}},{key:"themeElementForUrl",value:function(t){return Array.from(document.getElementsByClassName("custom-theme")).slice().find((function(e){return e.id==btoa(t)}))}},{key:"deactivateTheme",value:function(t){var e=this.themeElementForUrl(t);e&&(e.disabled=!0,e.parentNode.removeChild(e))}},{key:"generateUUID",value:function(){var t=window.crypto||window.msCrypto;if(t){var e=new Uint32Array(4);t.getRandomValues(e);var n=-1;return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){n++;var r=e[n>>3]>>n%8*4&15;return("x"==t?r:3&r|8).toString(16)}))}var r=(new Date).getTime();return window.performance&&"function"==typeof window.performance.now&&(r+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=(r+16*Math.random())%16|0;return r=Math.floor(r/16),("x"==t?e:3&e|8).toString(16)}))}}])&&r(e.prototype,n),o&&r(e,o),t}();void 0!==t.exports&&(t.exports=o),window&&(window.ComponentManager=o)},function(t,e,n){var r=n(0),o=n(4);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1},s=(r(o,i),o.locals?o.locals:{});t.exports=s},function(t,e,n){(e=n(1)(!1)).push([t.i,".checklist-item p {\n  padding-left: 30px;\n}\n\n.checklist-item input {\n  position: absolute;\n}\n",""]),t.exports=e},function(t,e,n){var r=n(0),o=n(6);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1},s=(r(o,i),o.locals?o.locals:{});t.exports=s},function(t,e,n){(e=n(1)(!1)).push([t.i,'.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: "liga" 0; /* the above doesn\'t seem to work in Edge */\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\n.ProseMirror li {\n  position: relative;\n}\n\n.ProseMirror-hideselection *::selection { background: transparent; }\n.ProseMirror-hideselection *::-moz-selection { background: transparent; }\n.ProseMirror-hideselection { caret-color: transparent; }\n\n.ProseMirror-selectednode {\n  outline: 2px solid #8cf;\n}\n\n/* Make sure li selections wrap around markers */\n\nli.ProseMirror-selectednode {\n  outline: none;\n}\n\nli.ProseMirror-selectednode:after {\n  content: "";\n  position: absolute;\n  left: -32px;\n  right: -2px; top: -2px; bottom: -2px;\n  border: 2px solid #8cf;\n  pointer-events: none;\n}\n',""]),t.exports=e},function(t,e,n){"use strict";n.r(e);n(3),n(5);var r=n(2),o=n.n(r);function i(t){this.content=t}i.prototype={constructor:i,find:function(t){for(var e=0;e<this.content.length;e+=2)if(this.content[e]===t)return e;return-1},get:function(t){var e=this.find(t);return-1==e?void 0:this.content[e+1]},update:function(t,e,n){var r=n&&n!=t?this.remove(n):this,o=r.find(t),s=r.content.slice();return-1==o?s.push(n||t,e):(s[o+1]=e,n&&(s[o]=n)),new i(s)},remove:function(t){var e=this.find(t);if(-1==e)return this;var n=this.content.slice();return n.splice(e,2),new i(n)},addToStart:function(t,e){return new i([t,e].concat(this.remove(t).content))},addToEnd:function(t,e){var n=this.remove(t).content.slice();return n.push(t,e),new i(n)},addBefore:function(t,e,n){var r=this.remove(e),o=r.content.slice(),s=r.find(t);return o.splice(-1==s?o.length:s,0,e,n),new i(o)},forEach:function(t){for(var e=0;e<this.content.length;e+=2)t(this.content[e],this.content[e+1])},prepend:function(t){return(t=i.from(t)).size?new i(t.content.concat(this.subtract(t).content)):this},append:function(t){return(t=i.from(t)).size?new i(this.subtract(t).content.concat(t.content)):this},subtract:function(t){var e=this;t=i.from(t);for(var n=0;n<t.content.length;n+=2)e=e.remove(t.content[n]);return e},get size(){return this.content.length>>1}},i.from=function(t){if(t instanceof i)return t;var e=[];if(t)for(var n in t)e.push(n,t[n]);return new i(e)};var s=i;var a=function(t,e){if(this.content=t,this.size=e||0,null==e)for(var n=0;n<t.length;n++)this.size+=t[n].nodeSize},c={firstChild:{configurable:!0},lastChild:{configurable:!0},childCount:{configurable:!0}};a.prototype.nodesBetween=function(t,e,n,r,o){void 0===r&&(r=0);for(var i=0,s=0;s<e;i++){var a=this.content[i],c=s+a.nodeSize;if(c>t&&!1!==n(a,r+s,o,i)&&a.content.size){var p=s+1;a.nodesBetween(Math.max(0,t-p),Math.min(a.content.size,e-p),n,r+p)}s=c}},a.prototype.descendants=function(t){this.nodesBetween(0,this.size,t)},a.prototype.textBetween=function(t,e,n,r){var o="",i=!0;return this.nodesBetween(t,e,(function(s,a){s.isText?(o+=s.text.slice(Math.max(t,a)-a,e-a),i=!n):s.isLeaf&&r?(o+=r,i=!n):!i&&s.isBlock&&(o+=n,i=!0)}),0),o},a.prototype.append=function(t){if(!t.size)return this;if(!this.size)return t;var e=this.lastChild,n=t.firstChild,r=this.content.slice(),o=0;for(e.isText&&e.sameMarkup(n)&&(r[r.length-1]=e.withText(e.text+n.text),o=1);o<t.content.length;o++)r.push(t.content[o]);return new a(r,this.size+t.size)},a.prototype.cut=function(t,e){if(null==e&&(e=this.size),0==t&&e==this.size)return this;var n=[],r=0;if(e>t)for(var o=0,i=0;i<e;o++){var s=this.content[o],c=i+s.nodeSize;c>t&&((i<t||c>e)&&(s=s.isText?s.cut(Math.max(0,t-i),Math.min(s.text.length,e-i)):s.cut(Math.max(0,t-i-1),Math.min(s.content.size,e-i-1))),n.push(s),r+=s.nodeSize),i=c}return new a(n,r)},a.prototype.cutByIndex=function(t,e){return t==e?a.empty:0==t&&e==this.content.length?this:new a(this.content.slice(t,e))},a.prototype.replaceChild=function(t,e){var n=this.content[t];if(n==e)return this;var r=this.content.slice(),o=this.size+e.nodeSize-n.nodeSize;return r[t]=e,new a(r,o)},a.prototype.addToStart=function(t){return new a([t].concat(this.content),this.size+t.nodeSize)},a.prototype.addToEnd=function(t){return new a(this.content.concat(t),this.size+t.nodeSize)},a.prototype.eq=function(t){if(this.content.length!=t.content.length)return!1;for(var e=0;e<this.content.length;e++)if(!this.content[e].eq(t.content[e]))return!1;return!0},c.firstChild.get=function(){return this.content.length?this.content[0]:null},c.lastChild.get=function(){return this.content.length?this.content[this.content.length-1]:null},c.childCount.get=function(){return this.content.length},a.prototype.child=function(t){var e=this.content[t];if(!e)throw new RangeError("Index "+t+" out of range for "+this);return e},a.prototype.maybeChild=function(t){return this.content[t]},a.prototype.forEach=function(t){for(var e=0,n=0;e<this.content.length;e++){var r=this.content[e];t(r,n,e),n+=r.nodeSize}},a.prototype.findDiffStart=function(t,e){return void 0===e&&(e=0),function t(e,n,r){for(var o=0;;o++){if(o==e.childCount||o==n.childCount)return e.childCount==n.childCount?null:r;var i=e.child(o),s=n.child(o);if(i!=s){if(!i.sameMarkup(s))return r;if(i.isText&&i.text!=s.text){for(var a=0;i.text[a]==s.text[a];a++)r++;return r}if(i.content.size||s.content.size){var c=t(i.content,s.content,r+1);if(null!=c)return c}r+=i.nodeSize}else r+=i.nodeSize}}(this,t,e)},a.prototype.findDiffEnd=function(t,e,n){return void 0===e&&(e=this.size),void 0===n&&(n=t.size),function t(e,n,r,o){for(var i=e.childCount,s=n.childCount;;){if(0==i||0==s)return i==s?null:{a:r,b:o};var a=e.child(--i),c=n.child(--s),p=a.nodeSize;if(a!=c){if(!a.sameMarkup(c))return{a:r,b:o};if(a.isText&&a.text!=c.text){for(var l=0,h=Math.min(a.text.length,c.text.length);l<h&&a.text[a.text.length-l-1]==c.text[c.text.length-l-1];)l++,r--,o--;return{a:r,b:o}}if(a.content.size||c.content.size){var f=t(a.content,c.content,r-1,o-1);if(f)return f}r-=p,o-=p}else r-=p,o-=p}}(this,t,e,n)},a.prototype.findIndex=function(t,e){if(void 0===e&&(e=-1),0==t)return l(0,t);if(t==this.size)return l(this.content.length,t);if(t>this.size||t<0)throw new RangeError("Position "+t+" outside of fragment ("+this+")");for(var n=0,r=0;;n++){var o=r+this.child(n).nodeSize;if(o>=t)return o==t||e>0?l(n+1,o):l(n,r);r=o}},a.prototype.toString=function(){return"<"+this.toStringInner()+">"},a.prototype.toStringInner=function(){return this.content.join(", ")},a.prototype.toJSON=function(){return this.content.length?this.content.map((function(t){return t.toJSON()})):null},a.fromJSON=function(t,e){if(!e)return a.empty;if(!Array.isArray(e))throw new RangeError("Invalid input for Fragment.fromJSON");return new a(e.map(t.nodeFromJSON))},a.fromArray=function(t){if(!t.length)return a.empty;for(var e,n=0,r=0;r<t.length;r++){var o=t[r];n+=o.nodeSize,r&&o.isText&&t[r-1].sameMarkup(o)?(e||(e=t.slice(0,r)),e[e.length-1]=o.withText(e[e.length-1].text+o.text)):e&&e.push(o)}return new a(e||t,n)},a.from=function(t){if(!t)return a.empty;if(t instanceof a)return t;if(Array.isArray(t))return this.fromArray(t);if(t.attrs)return new a([t],t.nodeSize);throw new RangeError("Can not convert "+t+" to a Fragment"+(t.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))},Object.defineProperties(a.prototype,c);var p={index:0,offset:0};function l(t,e){return p.index=t,p.offset=e,p}function h(t,e){if(t===e)return!0;if(!t||"object"!=typeof t||!e||"object"!=typeof e)return!1;var n=Array.isArray(t);if(Array.isArray(e)!=n)return!1;if(n){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(!h(t[r],e[r]))return!1}else{for(var o in t)if(!(o in e&&h(t[o],e[o])))return!1;for(var i in e)if(!(i in t))return!1}return!0}a.empty=new a([],0);var f=function(t,e){this.type=t,this.attrs=e};function u(t){var e=Error.call(this,t);return e.__proto__=u.prototype,e}f.prototype.addToSet=function(t){for(var e,n=!1,r=0;r<t.length;r++){var o=t[r];if(this.eq(o))return t;if(this.type.excludes(o.type))e||(e=t.slice(0,r));else{if(o.type.excludes(this.type))return t;!n&&o.type.rank>this.type.rank&&(e||(e=t.slice(0,r)),e.push(this),n=!0),e&&e.push(o)}}return e||(e=t.slice()),n||e.push(this),e},f.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return t.slice(0,e).concat(t.slice(e+1));return t},f.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return!0;return!1},f.prototype.eq=function(t){return this==t||this.type==t.type&&h(this.attrs,t.attrs)},f.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return t},f.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Mark.fromJSON");var n=t.marks[e.type];if(!n)throw new RangeError("There is no mark type "+e.type+" in this schema");return n.create(e.attrs)},f.sameSet=function(t,e){if(t==e)return!0;if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].eq(e[n]))return!1;return!0},f.setFrom=function(t){if(!t||0==t.length)return f.none;if(t instanceof f)return[t];var e=t.slice();return e.sort((function(t,e){return t.type.rank-e.type.rank})),e},f.none=[],u.prototype=Object.create(Error.prototype),u.prototype.constructor=u,u.prototype.name="ReplaceError";var d=function(t,e,n){this.content=t,this.openStart=e,this.openEnd=n},m={size:{configurable:!0}};function v(t,e,n){if(n.openStart>t.depth)throw new u("Inserted content deeper than insertion position");if(t.depth-n.openStart!=e.depth-n.openEnd)throw new u("Inconsistent open depths");return function t(e,n,r,o){var i=e.index(o),s=e.node(o);if(i==n.index(o)&&o<e.depth-r.openStart){var c=t(e,n,r,o+1);return s.copy(s.content.replaceChild(i,c))}if(r.content.size){if(r.openStart||r.openEnd||e.depth!=o||n.depth!=o){var p=function(t,e){for(var n=e.depth-t.openStart,r=e.node(n).copy(t.content),o=n-1;o>=0;o--)r=e.node(o).copy(a.from(r));return{start:r.resolveNoCache(t.openStart+n),end:r.resolveNoCache(r.content.size-t.openEnd-n)}}(r,e),l=p.start,h=p.end;return x(s,function t(e,n,r,o,i){var s=e.depth>i&&y(e,n,i+1),c=o.depth>i&&y(r,o,i+1),p=[];b(null,e,i,p),s&&c&&n.index(i)==r.index(i)?(g(s,c),w(x(s,t(e,n,r,o,i+1)),p)):(s&&w(x(s,k(e,n,i+1)),p),b(n,r,i,p),c&&w(x(c,k(r,o,i+1)),p));return b(o,null,i,p),new a(p)}(e,l,h,n,o))}var f=e.parent,u=f.content;return x(f,u.cut(0,e.parentOffset).append(r.content).append(u.cut(n.parentOffset)))}return x(s,k(e,n,o))}(t,e,n,0)}function g(t,e){if(!e.type.compatibleContent(t.type))throw new u("Cannot join "+e.type.name+" onto "+t.type.name)}function y(t,e,n){var r=t.node(n);return g(r,e.node(n)),r}function w(t,e){var n=e.length-1;n>=0&&t.isText&&t.sameMarkup(e[n])?e[n]=t.withText(e[n].text+t.text):e.push(t)}function b(t,e,n,r){var o=(e||t).node(n),i=0,s=e?e.index(n):o.childCount;t&&(i=t.index(n),t.depth>n?i++:t.textOffset&&(w(t.nodeAfter,r),i++));for(var a=i;a<s;a++)w(o.child(a),r);e&&e.depth==n&&e.textOffset&&w(e.nodeBefore,r)}function x(t,e){if(!t.type.validContent(e))throw new u("Invalid content for node "+t.type.name);return t.copy(e)}function k(t,e,n){var r=[];(b(null,t,n,r),t.depth>n)&&w(x(y(t,e,n+1),k(t,e,n+1)),r);return b(e,null,n,r),new a(r)}m.size.get=function(){return this.content.size-this.openStart-this.openEnd},d.prototype.insertAt=function(t,e){var n=function t(e,n,r,o){var i=e.findIndex(n),s=i.index,a=i.offset,c=e.maybeChild(s);if(a==n||c.isText)return o&&!o.canReplace(s,s,r)?null:e.cut(0,n).append(r).append(e.cut(n));var p=t(c.content,n-a-1,r);return p&&e.replaceChild(s,c.copy(p))}(this.content,t+this.openStart,e,null);return n&&new d(n,this.openStart,this.openEnd)},d.prototype.removeBetween=function(t,e){return new d(function t(e,n,r){var o=e.findIndex(n),i=o.index,s=o.offset,a=e.maybeChild(i),c=e.findIndex(r),p=c.index,l=c.offset;if(s==n||a.isText){if(l!=r&&!e.child(p).isText)throw new RangeError("Removing non-flat range");return e.cut(0,n).append(e.cut(r))}if(i!=p)throw new RangeError("Removing non-flat range");return e.replaceChild(i,a.copy(t(a.content,n-s-1,r-s-1)))}(this.content,t+this.openStart,e+this.openStart),this.openStart,this.openEnd)},d.prototype.eq=function(t){return this.content.eq(t.content)&&this.openStart==t.openStart&&this.openEnd==t.openEnd},d.prototype.toString=function(){return this.content+"("+this.openStart+","+this.openEnd+")"},d.prototype.toJSON=function(){if(!this.content.size)return null;var t={content:this.content.toJSON()};return this.openStart>0&&(t.openStart=this.openStart),this.openEnd>0&&(t.openEnd=this.openEnd),t},d.fromJSON=function(t,e){if(!e)return d.empty;var n=e.openStart||0,r=e.openEnd||0;if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid input for Slice.fromJSON");return new d(a.fromJSON(t,e.content),e.openStart||0,e.openEnd||0)},d.maxOpen=function(t,e){void 0===e&&(e=!0);for(var n=0,r=0,o=t.firstChild;o&&!o.isLeaf&&(e||!o.type.spec.isolating);o=o.firstChild)n++;for(var i=t.lastChild;i&&!i.isLeaf&&(e||!i.type.spec.isolating);i=i.lastChild)r++;return new d(t,n,r)},Object.defineProperties(d.prototype,m),d.empty=new d(a.empty,0,0);var S=function(t,e,n){this.pos=t,this.path=e,this.depth=e.length/3-1,this.parentOffset=n},M={parent:{configurable:!0},doc:{configurable:!0},textOffset:{configurable:!0},nodeAfter:{configurable:!0},nodeBefore:{configurable:!0}};S.prototype.resolveDepth=function(t){return null==t?this.depth:t<0?this.depth+t:t},M.parent.get=function(){return this.node(this.depth)},M.doc.get=function(){return this.node(0)},S.prototype.node=function(t){return this.path[3*this.resolveDepth(t)]},S.prototype.index=function(t){return this.path[3*this.resolveDepth(t)+1]},S.prototype.indexAfter=function(t){return t=this.resolveDepth(t),this.index(t)+(t!=this.depth||this.textOffset?1:0)},S.prototype.start=function(t){return 0==(t=this.resolveDepth(t))?0:this.path[3*t-1]+1},S.prototype.end=function(t){return t=this.resolveDepth(t),this.start(t)+this.node(t).content.size},S.prototype.before=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position before the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]},S.prototype.after=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position after the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]+this.path[3*t].nodeSize},M.textOffset.get=function(){return this.pos-this.path[this.path.length-1]},M.nodeAfter.get=function(){var t=this.parent,e=this.index(this.depth);if(e==t.childCount)return null;var n=this.pos-this.path[this.path.length-1],r=t.child(e);return n?t.child(e).cut(n):r},M.nodeBefore.get=function(){var t=this.index(this.depth),e=this.pos-this.path[this.path.length-1];return e?this.parent.child(t).cut(0,e):0==t?null:this.parent.child(t-1)},S.prototype.marks=function(){var t=this.parent,e=this.index();if(0==t.content.size)return f.none;if(this.textOffset)return t.child(e).marks;var n=t.maybeChild(e-1),r=t.maybeChild(e);if(!n){var o=n;n=r,r=o}for(var i=n.marks,s=0;s<i.length;s++)!1!==i[s].type.spec.inclusive||r&&i[s].isInSet(r.marks)||(i=i[s--].removeFromSet(i));return i},S.prototype.marksAcross=function(t){var e=this.parent.maybeChild(this.index());if(!e||!e.isInline)return null;for(var n=e.marks,r=t.parent.maybeChild(t.index()),o=0;o<n.length;o++)!1!==n[o].type.spec.inclusive||r&&n[o].isInSet(r.marks)||(n=n[o--].removeFromSet(n));return n},S.prototype.sharedDepth=function(t){for(var e=this.depth;e>0;e--)if(this.start(e)<=t&&this.end(e)>=t)return e;return 0},S.prototype.blockRange=function(t,e){if(void 0===t&&(t=this),t.pos<this.pos)return t.blockRange(this);for(var n=this.depth-(this.parent.inlineContent||this.pos==t.pos?1:0);n>=0;n--)if(t.pos<=this.end(n)&&(!e||e(this.node(n))))return new T(this,t,n)},S.prototype.sameParent=function(t){return this.pos-this.parentOffset==t.pos-t.parentOffset},S.prototype.max=function(t){return t.pos>this.pos?t:this},S.prototype.min=function(t){return t.pos<this.pos?t:this},S.prototype.toString=function(){for(var t="",e=1;e<=this.depth;e++)t+=(t?"/":"")+this.node(e).type.name+"_"+this.index(e-1);return t+":"+this.parentOffset},S.resolve=function(t,e){if(!(e>=0&&e<=t.content.size))throw new RangeError("Position "+e+" out of range");for(var n=[],r=0,o=e,i=t;;){var s=i.content.findIndex(o),a=s.index,c=s.offset,p=o-c;if(n.push(i,a,r+c),!p)break;if((i=i.child(a)).isText)break;o=p-1,r+=c+1}return new S(e,n,o)},S.resolveCached=function(t,e){for(var n=0;n<O.length;n++){var r=O[n];if(r.pos==e&&r.doc==t)return r}var o=O[C]=S.resolve(t,e);return C=(C+1)%N,o},Object.defineProperties(S.prototype,M);var O=[],C=0,N=12,T=function(t,e,n){this.$from=t,this.$to=e,this.depth=n},D={start:{configurable:!0},end:{configurable:!0},parent:{configurable:!0},startIndex:{configurable:!0},endIndex:{configurable:!0}};D.start.get=function(){return this.$from.before(this.depth+1)},D.end.get=function(){return this.$to.after(this.depth+1)},D.parent.get=function(){return this.$from.node(this.depth)},D.startIndex.get=function(){return this.$from.index(this.depth)},D.endIndex.get=function(){return this.$to.indexAfter(this.depth)},Object.defineProperties(T.prototype,D);var E=Object.create(null),A=function(t,e,n,r){this.type=t,this.attrs=e,this.content=n||a.empty,this.marks=r||f.none},I={nodeSize:{configurable:!0},childCount:{configurable:!0},textContent:{configurable:!0},firstChild:{configurable:!0},lastChild:{configurable:!0},isBlock:{configurable:!0},isTextblock:{configurable:!0},inlineContent:{configurable:!0},isInline:{configurable:!0},isText:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};I.nodeSize.get=function(){return this.isLeaf?1:2+this.content.size},I.childCount.get=function(){return this.content.childCount},A.prototype.child=function(t){return this.content.child(t)},A.prototype.maybeChild=function(t){return this.content.maybeChild(t)},A.prototype.forEach=function(t){this.content.forEach(t)},A.prototype.nodesBetween=function(t,e,n,r){void 0===r&&(r=0),this.content.nodesBetween(t,e,n,r,this)},A.prototype.descendants=function(t){this.nodesBetween(0,this.content.size,t)},I.textContent.get=function(){return this.textBetween(0,this.content.size,"")},A.prototype.textBetween=function(t,e,n,r){return this.content.textBetween(t,e,n,r)},I.firstChild.get=function(){return this.content.firstChild},I.lastChild.get=function(){return this.content.lastChild},A.prototype.eq=function(t){return this==t||this.sameMarkup(t)&&this.content.eq(t.content)},A.prototype.sameMarkup=function(t){return this.hasMarkup(t.type,t.attrs,t.marks)},A.prototype.hasMarkup=function(t,e,n){return this.type==t&&h(this.attrs,e||t.defaultAttrs||E)&&f.sameSet(this.marks,n||f.none)},A.prototype.copy=function(t){return void 0===t&&(t=null),t==this.content?this:new this.constructor(this.type,this.attrs,t,this.marks)},A.prototype.mark=function(t){return t==this.marks?this:new this.constructor(this.type,this.attrs,this.content,t)},A.prototype.cut=function(t,e){return 0==t&&e==this.content.size?this:this.copy(this.content.cut(t,e))},A.prototype.slice=function(t,e,n){if(void 0===e&&(e=this.content.size),void 0===n&&(n=!1),t==e)return d.empty;var r=this.resolve(t),o=this.resolve(e),i=n?0:r.sharedDepth(e),s=r.start(i),a=r.node(i).content.cut(r.pos-s,o.pos-s);return new d(a,r.depth-i,o.depth-i)},A.prototype.replace=function(t,e,n){return v(this.resolve(t),this.resolve(e),n)},A.prototype.nodeAt=function(t){for(var e=this;;){var n=e.content.findIndex(t),r=n.index,o=n.offset;if(!(e=e.maybeChild(r)))return null;if(o==t||e.isText)return e;t-=o+1}},A.prototype.childAfter=function(t){var e=this.content.findIndex(t),n=e.index,r=e.offset;return{node:this.content.maybeChild(n),index:n,offset:r}},A.prototype.childBefore=function(t){if(0==t)return{node:null,index:0,offset:0};var e=this.content.findIndex(t),n=e.index,r=e.offset;if(r<t)return{node:this.content.child(n),index:n,offset:r};var o=this.content.child(n-1);return{node:o,index:n-1,offset:r-o.nodeSize}},A.prototype.resolve=function(t){return S.resolveCached(this,t)},A.prototype.resolveNoCache=function(t){return S.resolve(this,t)},A.prototype.rangeHasMark=function(t,e,n){var r=!1;return e>t&&this.nodesBetween(t,e,(function(t){return n.isInSet(t.marks)&&(r=!0),!r})),r},I.isBlock.get=function(){return this.type.isBlock},I.isTextblock.get=function(){return this.type.isTextblock},I.inlineContent.get=function(){return this.type.inlineContent},I.isInline.get=function(){return this.type.isInline},I.isText.get=function(){return this.type.isText},I.isLeaf.get=function(){return this.type.isLeaf},I.isAtom.get=function(){return this.type.isAtom},A.prototype.toString=function(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);var t=this.type.name;return this.content.size&&(t+="("+this.content.toStringInner()+")"),P(this.marks,t)},A.prototype.contentMatchAt=function(t){var e=this.type.contentMatch.matchFragment(this.content,0,t);if(!e)throw new Error("Called contentMatchAt on a node with invalid content");return e},A.prototype.canReplace=function(t,e,n,r,o){void 0===n&&(n=a.empty),void 0===r&&(r=0),void 0===o&&(o=n.childCount);var i=this.contentMatchAt(t).matchFragment(n,r,o),s=i&&i.matchFragment(this.content,e);if(!s||!s.validEnd)return!1;for(var c=r;c<o;c++)if(!this.type.allowsMarks(n.child(c).marks))return!1;return!0},A.prototype.canReplaceWith=function(t,e,n,r){if(r&&!this.type.allowsMarks(r))return!1;var o=this.contentMatchAt(t).matchType(n),i=o&&o.matchFragment(this.content,e);return!!i&&i.validEnd},A.prototype.canAppend=function(t){return t.content.size?this.canReplace(this.childCount,this.childCount,t.content):this.type.compatibleContent(t.type)},A.prototype.check=function(){if(!this.type.validContent(this.content))throw new RangeError("Invalid content for node "+this.type.name+": "+this.content.toString().slice(0,50));this.content.forEach((function(t){return t.check()}))},A.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return this.content.size&&(t.content=this.content.toJSON()),this.marks.length&&(t.marks=this.marks.map((function(t){return t.toJSON()}))),t},A.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Node.fromJSON");var n=null;if(e.marks){if(!Array.isArray(e.marks))throw new RangeError("Invalid mark data for Node.fromJSON");n=e.marks.map(t.markFromJSON)}if("text"==e.type){if("string"!=typeof e.text)throw new RangeError("Invalid text node in JSON");return t.text(e.text,n)}var r=a.fromJSON(t,e.content);return t.nodeType(e.type).create(e.attrs,r,n)},Object.defineProperties(A.prototype,I);var R=function(t){function e(e,n,r,o){if(t.call(this,e,n,null,o),!r)throw new RangeError("Empty text nodes are not allowed");this.text=r}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={textContent:{configurable:!0},nodeSize:{configurable:!0}};return e.prototype.toString=function(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):P(this.marks,JSON.stringify(this.text))},n.textContent.get=function(){return this.text},e.prototype.textBetween=function(t,e){return this.text.slice(t,e)},n.nodeSize.get=function(){return this.text.length},e.prototype.mark=function(t){return t==this.marks?this:new e(this.type,this.attrs,this.text,t)},e.prototype.withText=function(t){return t==this.text?this:new e(this.type,this.attrs,t,this.marks)},e.prototype.cut=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.text.length),0==t&&e==this.text.length?this:this.withText(this.text.slice(t,e))},e.prototype.eq=function(t){return this.sameMarkup(t)&&this.text==t.text},e.prototype.toJSON=function(){var e=t.prototype.toJSON.call(this);return e.text=this.text,e},Object.defineProperties(e.prototype,n),e}(A);function P(t,e){for(var n=t.length-1;n>=0;n--)e=t[n].type.name+"("+e+")";return e}var z=function(t){this.validEnd=t,this.next=[],this.wrapCache=[]},B={inlineContent:{configurable:!0},defaultType:{configurable:!0},edgeCount:{configurable:!0}};z.parse=function(t,e){var n=new F(t,e);if(null==n.next)return z.empty;var r=_(n);n.next&&n.err("Unexpected trailing text");var o=function(t){var e=Object.create(null);return function n(r){var o=[];r.forEach((function(e){t[e].forEach((function(e){var n=e.term,r=e.to;if(n){var i=o.indexOf(n),s=i>-1&&o[i+1];W(t,r).forEach((function(t){s||o.push(n,s=[]),-1==s.indexOf(t)&&s.push(t)}))}}))}));for(var i=e[r.join(",")]=new z(r.indexOf(t.length-1)>-1),s=0;s<o.length;s+=2){var a=o[s+1].sort(q);i.next.push(o[s],e[a.join(",")]||n(a))}return i}(W(t,0))}(function(t){var e=[[]];return o(function t(e,i){if("choice"==e.type)return e.exprs.reduce((function(e,n){return e.concat(t(n,i))}),[]);if("seq"==e.type)for(var s=0;;s++){var a=t(e.exprs[s],i);if(s==e.exprs.length-1)return a;o(a,i=n())}else{if("star"==e.type){var c=n();return r(i,c),o(t(e.expr,c),c),[r(c)]}if("plus"==e.type){var p=n();return o(t(e.expr,i),p),o(t(e.expr,p),p),[r(p)]}if("opt"==e.type)return[r(i)].concat(t(e.expr,i));if("range"==e.type){for(var l=i,h=0;h<e.min;h++){var f=n();o(t(e.expr,l),f),l=f}if(-1==e.max)o(t(e.expr,l),l);else for(var u=e.min;u<e.max;u++){var d=n();r(l,d),o(t(e.expr,l),d),l=d}return[r(l)]}if("name"==e.type)return[r(i,null,e.value)]}}(t,0),n()),e;function n(){return e.push([])-1}function r(t,n,r){var o={term:r,to:n};return e[t].push(o),o}function o(t,e){t.forEach((function(t){return t.to=e}))}}(r));return function(t,e){for(var n=0,r=[t];n<r.length;n++){for(var o=r[n],i=!o.validEnd,s=[],a=0;a<o.next.length;a+=2){var c=o.next[a],p=o.next[a+1];s.push(c.name),!i||c.isText||c.hasRequiredAttrs()||(i=!1),-1==r.indexOf(p)&&r.push(p)}i&&e.err("Only non-generatable nodes ("+s.join(", ")+") in a required position")}}(o,n),o},z.prototype.matchType=function(t){for(var e=0;e<this.next.length;e+=2)if(this.next[e]==t)return this.next[e+1];return null},z.prototype.matchFragment=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.childCount);for(var r=this,o=e;r&&o<n;o++)r=r.matchType(t.child(o).type);return r},B.inlineContent.get=function(){var t=this.next[0];return!!t&&t.isInline},B.defaultType.get=function(){for(var t=0;t<this.next.length;t+=2){var e=this.next[t];if(!e.isText&&!e.hasRequiredAttrs())return e}},z.prototype.compatible=function(t){for(var e=0;e<this.next.length;e+=2)for(var n=0;n<t.next.length;n+=2)if(this.next[e]==t.next[n])return!0;return!1},z.prototype.fillBefore=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=0);var r=[this];return function o(i,s){var c=i.matchFragment(t,n);if(c&&(!e||c.validEnd))return a.from(s.map((function(t){return t.createAndFill()})));for(var p=0;p<i.next.length;p+=2){var l=i.next[p],h=i.next[p+1];if(!l.isText&&!l.hasRequiredAttrs()&&-1==r.indexOf(h)){r.push(h);var f=o(h,s.concat(l));if(f)return f}}}(this,[])},z.prototype.findWrapping=function(t){for(var e=0;e<this.wrapCache.length;e+=2)if(this.wrapCache[e]==t)return this.wrapCache[e+1];var n=this.computeWrapping(t);return this.wrapCache.push(t,n),n},z.prototype.computeWrapping=function(t){for(var e=Object.create(null),n=[{match:this,type:null,via:null}];n.length;){var r=n.shift(),o=r.match;if(o.matchType(t)){for(var i=[],s=r;s.type;s=s.via)i.push(s.type);return i.reverse()}for(var a=0;a<o.next.length;a+=2){var c=o.next[a];c.isLeaf||c.hasRequiredAttrs()||c.name in e||r.type&&!o.next[a+1].validEnd||(n.push({match:c.contentMatch,type:c,via:r}),e[c.name]=!0)}}},B.edgeCount.get=function(){return this.next.length>>1},z.prototype.edge=function(t){var e=t<<1;if(e>=this.next.length)throw new RangeError("There's no "+t+"th edge in this content match");return{type:this.next[e],next:this.next[e+1]}},z.prototype.toString=function(){var t=[];return function e(n){t.push(n);for(var r=1;r<n.next.length;r+=2)-1==t.indexOf(n.next[r])&&e(n.next[r])}(this),t.map((function(e,n){for(var r=n+(e.validEnd?"*":" ")+" ",o=0;o<e.next.length;o+=2)r+=(o?", ":"")+e.next[o].name+"->"+t.indexOf(e.next[o+1]);return r})).join("\n")},Object.defineProperties(z.prototype,B),z.empty=new z(!0);var F=function(t,e){this.string=t,this.nodeTypes=e,this.inline=null,this.pos=0,this.tokens=t.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.unshift()},V={next:{configurable:!0}};function _(t){var e=[];do{e.push($(t))}while(t.eat("|"));return 1==e.length?e[0]:{type:"choice",exprs:e}}function $(t){var e=[];do{e.push(j(t))}while(t.next&&")"!=t.next&&"|"!=t.next);return 1==e.length?e[0]:{type:"seq",exprs:e}}function j(t){for(var e=function(t){if(t.eat("(")){var e=_(t);return t.eat(")")||t.err("Missing closing paren"),e}if(!/\W/.test(t.next)){var n=function(t,e){var n=t.nodeTypes,r=n[e];if(r)return[r];var o=[];for(var i in n){var s=n[i];s.groups.indexOf(e)>-1&&o.push(s)}0==o.length&&t.err("No node type or group '"+e+"' found");return o}(t,t.next).map((function(e){return null==t.inline?t.inline=e.isInline:t.inline!=e.isInline&&t.err("Mixing inline and block content"),{type:"name",value:e}}));return t.pos++,1==n.length?n[0]:{type:"choice",exprs:n}}t.err("Unexpected token '"+t.next+"'")}(t);;)if(t.eat("+"))e={type:"plus",expr:e};else if(t.eat("*"))e={type:"star",expr:e};else if(t.eat("?"))e={type:"opt",expr:e};else{if(!t.eat("{"))break;e=J(t,e)}return e}function L(t){/\D/.test(t.next)&&t.err("Expected number, got '"+t.next+"'");var e=Number(t.next);return t.pos++,e}function J(t,e){var n=L(t),r=n;return t.eat(",")&&(r="}"!=t.next?L(t):-1),t.eat("}")||t.err("Unclosed braced range"),{type:"range",min:n,max:r,expr:e}}function q(t,e){return e-t}function W(t,e){var n=[];return function e(r){var o=t[r];if(1==o.length&&!o[0].term)return e(o[0].to);n.push(r);for(var i=0;i<o.length;i++){var s=o[i],a=s.term,c=s.to;a||-1!=n.indexOf(c)||e(c)}}(e),n.sort(q)}function K(t){var e=Object.create(null);for(var n in t){var r=t[n];if(!r.hasDefault)return null;e[n]=r.default}return e}function U(t,e){var n=Object.create(null);for(var r in t){var o=e&&e[r];if(void 0===o){var i=t[r];if(!i.hasDefault)throw new RangeError("No value supplied for attribute "+r);o=i.default}n[r]=o}return n}function H(t){var e=Object.create(null);if(t)for(var n in t)e[n]=new X(t[n]);return e}V.next.get=function(){return this.tokens[this.pos]},F.prototype.eat=function(t){return this.next==t&&(this.pos++||!0)},F.prototype.err=function(t){throw new SyntaxError(t+" (in content expression '"+this.string+"')")},Object.defineProperties(F.prototype,V);var G=function(t,e,n){this.name=t,this.schema=e,this.spec=n,this.groups=n.group?n.group.split(" "):[],this.attrs=H(n.attrs),this.defaultAttrs=K(this.attrs),this.contentMatch=null,this.markSet=null,this.inlineContent=null,this.isBlock=!(n.inline||"text"==t),this.isText="text"==t},Q={isInline:{configurable:!0},isTextblock:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};Q.isInline.get=function(){return!this.isBlock},Q.isTextblock.get=function(){return this.isBlock&&this.inlineContent},Q.isLeaf.get=function(){return this.contentMatch==z.empty},Q.isAtom.get=function(){return this.isLeaf||this.spec.atom},G.prototype.hasRequiredAttrs=function(){for(var t in this.attrs)if(this.attrs[t].isRequired)return!0;return!1},G.prototype.compatibleContent=function(t){return this==t||this.contentMatch.compatible(t.contentMatch)},G.prototype.computeAttrs=function(t){return!t&&this.defaultAttrs?this.defaultAttrs:U(this.attrs,t)},G.prototype.create=function(t,e,n){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new A(this,this.computeAttrs(t),a.from(e),f.setFrom(n))},G.prototype.createChecked=function(t,e,n){if(e=a.from(e),!this.validContent(e))throw new RangeError("Invalid content for node "+this.name);return new A(this,this.computeAttrs(t),e,f.setFrom(n))},G.prototype.createAndFill=function(t,e,n){if(t=this.computeAttrs(t),(e=a.from(e)).size){var r=this.contentMatch.fillBefore(e);if(!r)return null;e=r.append(e)}var o=this.contentMatch.matchFragment(e).fillBefore(a.empty,!0);return o?new A(this,t,e.append(o),f.setFrom(n)):null},G.prototype.validContent=function(t){var e=this.contentMatch.matchFragment(t);if(!e||!e.validEnd)return!1;for(var n=0;n<t.childCount;n++)if(!this.allowsMarks(t.child(n).marks))return!1;return!0},G.prototype.allowsMarkType=function(t){return null==this.markSet||this.markSet.indexOf(t)>-1},G.prototype.allowsMarks=function(t){if(null==this.markSet)return!0;for(var e=0;e<t.length;e++)if(!this.allowsMarkType(t[e].type))return!1;return!0},G.prototype.allowedMarks=function(t){if(null==this.markSet)return t;for(var e,n=0;n<t.length;n++)this.allowsMarkType(t[n].type)?e&&e.push(t[n]):e||(e=t.slice(0,n));return e?e.length?e:f.empty:t},G.compile=function(t,e){var n=Object.create(null);t.forEach((function(t,r){return n[t]=new G(t,e,r)}));var r=e.spec.topNode||"doc";if(!n[r])throw new RangeError("Schema is missing its top node type ('"+r+"')");if(!n.text)throw new RangeError("Every schema needs a 'text' type");for(var o in n.text.attrs)throw new RangeError("The text node type should not have attributes");return n},Object.defineProperties(G.prototype,Q);var X=function(t){this.hasDefault=Object.prototype.hasOwnProperty.call(t,"default"),this.default=t.default},Y={isRequired:{configurable:!0}};Y.isRequired.get=function(){return!this.hasDefault},Object.defineProperties(X.prototype,Y);var Z=function(t,e,n,r){this.name=t,this.schema=n,this.spec=r,this.attrs=H(r.attrs),this.rank=e,this.excluded=null;var o=K(this.attrs);this.instance=o&&new f(this,o)};Z.prototype.create=function(t){return!t&&this.instance?this.instance:new f(this,U(this.attrs,t))},Z.compile=function(t,e){var n=Object.create(null),r=0;return t.forEach((function(t,o){return n[t]=new Z(t,r++,e,o)})),n},Z.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t.slice(0,e).concat(t.slice(e+1));return t},Z.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t[e]},Z.prototype.excludes=function(t){return this.excluded.indexOf(t)>-1};var tt=function(t){for(var e in this.spec={},t)this.spec[e]=t[e];this.spec.nodes=s.from(t.nodes),this.spec.marks=s.from(t.marks),this.nodes=G.compile(this.spec.nodes,this),this.marks=Z.compile(this.spec.marks,this);var n=Object.create(null);for(var r in this.nodes){if(r in this.marks)throw new RangeError(r+" can not be both a node and a mark");var o=this.nodes[r],i=o.spec.content||"",a=o.spec.marks;o.contentMatch=n[i]||(n[i]=z.parse(i,this.nodes)),o.inlineContent=o.contentMatch.inlineContent,o.markSet="_"==a?null:a?et(this,a.split(" ")):""!=a&&o.inlineContent?null:[]}for(var c in this.marks){var p=this.marks[c],l=p.spec.excludes;p.excluded=null==l?[p]:""==l?[]:et(this,l.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached=Object.create(null),this.cached.wrappings=Object.create(null)};function et(t,e){for(var n=[],r=0;r<e.length;r++){var o=e[r],i=t.marks[o],s=i;if(i)n.push(i);else for(var a in t.marks){var c=t.marks[a];("_"==o||c.spec.group&&c.spec.group.split(" ").indexOf(o)>-1)&&n.push(s=c)}if(!s)throw new SyntaxError("Unknown mark type: '"+e[r]+"'")}return n}tt.prototype.node=function(t,e,n,r){if("string"==typeof t)t=this.nodeType(t);else{if(!(t instanceof G))throw new RangeError("Invalid node type: "+t);if(t.schema!=this)throw new RangeError("Node type from different schema used ("+t.name+")")}return t.createChecked(e,n,r)},tt.prototype.text=function(t,e){var n=this.nodes.text;return new R(n,n.defaultAttrs,t,f.setFrom(e))},tt.prototype.mark=function(t,e){return"string"==typeof t&&(t=this.marks[t]),t.create(e)},tt.prototype.nodeFromJSON=function(t){return A.fromJSON(this,t)},tt.prototype.markFromJSON=function(t){return f.fromJSON(this,t)},tt.prototype.nodeType=function(t){var e=this.nodes[t];if(!e)throw new RangeError("Unknown node type: "+t);return e};var nt=function(t,e){var n=this;this.schema=t,this.rules=e,this.tags=[],this.styles=[],e.forEach((function(t){t.tag?n.tags.push(t):t.style&&n.styles.push(t)}))};nt.prototype.parse=function(t,e){void 0===e&&(e={});var n=new ct(this,e,!1);return n.addAll(t,null,e.from,e.to),n.finish()},nt.prototype.parseSlice=function(t,e){void 0===e&&(e={});var n=new ct(this,e,!0);return n.addAll(t,null,e.from,e.to),d.maxOpen(n.finish())},nt.prototype.matchTag=function(t,e){for(var n=0;n<this.tags.length;n++){var r=this.tags[n];if(lt(t,r.tag)&&(void 0===r.namespace||t.namespaceURI==r.namespace)&&(!r.context||e.matchesContext(r.context))){if(r.getAttrs){var o=r.getAttrs(t);if(!1===o)continue;r.attrs=o}return r}}},nt.prototype.matchStyle=function(t,e,n){for(var r=0;r<this.styles.length;r++){var o=this.styles[r];if(!(0!=o.style.indexOf(t)||o.context&&!n.matchesContext(o.context)||o.style.length>t.length&&(61!=o.style.charCodeAt(t.length)||o.style.slice(t.length+1)!=e))){if(o.getAttrs){var i=o.getAttrs(e);if(!1===i)continue;o.attrs=i}return o}}},nt.schemaRules=function(t){var e=[];function n(t){for(var n=null==t.priority?50:t.priority,r=0;r<e.length;r++){var o=e[r];if((null==o.priority?50:o.priority)<n)break}e.splice(r,0,t)}var r=function(e){var r=t.marks[e].spec.parseDOM;r&&r.forEach((function(t){n(t=ht(t)),t.mark=e}))};for(var o in t.marks)r(o);var i;for(var s in t.nodes)i=void 0,(i=t.nodes[s].spec.parseDOM)&&i.forEach((function(t){n(t=ht(t)),t.node=s}));return e},nt.fromSchema=function(t){return t.cached.domParser||(t.cached.domParser=new nt(t,nt.schemaRules(t)))};var rt={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},ot={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},it={ol:!0,ul:!0};function st(t){return(t?1:0)|("full"===t?2:0)}var at=function(t,e,n,r,o,i,s){this.type=t,this.attrs=e,this.solid=o,this.match=i||(4&s?null:t.contentMatch),this.options=s,this.content=[],this.marks=n,this.activeMarks=f.none,this.pendingMarks=r};at.prototype.findWrapping=function(t){if(!this.match){if(!this.type)return[];var e=this.type.contentMatch.fillBefore(a.from(t));if(!e){var n,r=this.type.contentMatch;return(n=r.findWrapping(t.type))?(this.match=r,n):null}this.match=this.type.contentMatch.matchFragment(e)}return this.match.findWrapping(t.type)},at.prototype.finish=function(t){if(!(1&this.options)){var e,n=this.content[this.content.length-1];n&&n.isText&&(e=/[ \t\r\n\u000c]+$/.exec(n.text))&&(n.text.length==e[0].length?this.content.pop():this.content[this.content.length-1]=n.withText(n.text.slice(0,n.text.length-e[0].length)))}var r=a.from(this.content);return!t&&this.match&&(r=r.append(this.match.fillBefore(a.empty,!0))),this.type?this.type.create(this.attrs,r,this.marks):r},at.prototype.applyPending=function(t){for(var e=0,n=this.pendingMarks;e<n.length;e++){var r=n[e];(this.type?this.type.allowsMarkType(r.type):ft(r.type,t))&&!r.isInSet(this.activeMarks)&&(this.activeMarks=r.addToSet(this.activeMarks),this.pendingMarks=r.removeFromSet(this.pendingMarks))}};var ct=function(t,e,n){this.parser=t,this.options=e,this.isOpen=n;var r,o=e.topNode,i=st(e.preserveWhitespace)|(n?4:0);r=o?new at(o.type,o.attrs,f.none,f.none,!0,e.topMatch||o.type.contentMatch,i):new at(n?null:t.schema.topNodeType,null,f.none,f.none,!0,null,i),this.nodes=[r],this.open=0,this.find=e.findPositions,this.needsBlock=!1},pt={top:{configurable:!0},currentPos:{configurable:!0}};function lt(t,e){return(t.matches||t.msMatchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector).call(t,e)}function ht(t){var e={};for(var n in t)e[n]=t[n];return e}function ft(t,e){var n=e.schema.nodes,r=function(r){var o=n[r];if(o.allowsMarkType(t)){var i=[],s=function(t){i.push(t);for(var n=0;n<t.edgeCount;n++){var r=t.edge(n),o=r.type,a=r.next;if(o==e)return!0;if(i.indexOf(a)<0&&s(a))return!0}};return s(o.contentMatch)?{v:!0}:void 0}};for(var o in n){var i=r(o);if(i)return i.v}}pt.top.get=function(){return this.nodes[this.open]},ct.prototype.addDOM=function(t){if(3==t.nodeType)this.addTextNode(t);else if(1==t.nodeType){var e=t.getAttribute("style"),n=e?this.readStyles(function(t){var e,n=/\s*([\w-]+)\s*:\s*([^;]+)/g,r=[];for(;e=n.exec(t);)r.push(e[1],e[2].trim());return r}(e)):null,r=this.top;if(null!=n)for(var o=0;o<n.length;o++)this.addPendingMark(n[o]);if(this.addElement(t),null!=n)for(var i=0;i<n.length;i++)this.removePendingMark(n[i],r)}},ct.prototype.addTextNode=function(t){var e=t.nodeValue,n=this.top;if((n.type?n.type.inlineContent:n.content.length&&n.content[0].isInline)||/[^ \t\r\n\u000c]/.test(e)){if(1&n.options)2&n.options||(e=e.replace(/\r?\n|\r/g," "));else if(e=e.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(e)&&this.open==this.nodes.length-1){var r=n.content[n.content.length-1],o=t.previousSibling;(!r||o&&"BR"==o.nodeName||r.isText&&/[ \t\r\n\u000c]$/.test(r.text))&&(e=e.slice(1))}e&&this.insertNode(this.parser.schema.text(e)),this.findInText(t)}else this.findInside(t)},ct.prototype.addElement=function(t){var e=t.nodeName.toLowerCase();it.hasOwnProperty(e)&&function(t){for(var e=t.firstChild,n=null;e;e=e.nextSibling){var r=1==e.nodeType?e.nodeName.toLowerCase():null;r&&it.hasOwnProperty(r)&&n?(n.appendChild(e),e=n):"li"==r?n=e:r&&(n=null)}}(t);var n=this.options.ruleFromNode&&this.options.ruleFromNode(t)||this.parser.matchTag(t,this);if(n?n.ignore:ot.hasOwnProperty(e))this.findInside(t);else if(!n||n.skip){n&&n.skip.nodeType&&(t=n.skip);var r,o=this.top,i=this.needsBlock;if(rt.hasOwnProperty(e))r=!0,o.type||(this.needsBlock=!0);else if(!t.firstChild)return void this.leafFallback(t);this.addAll(t),r&&this.sync(o),this.needsBlock=i}else this.addElementByRule(t,n)},ct.prototype.leafFallback=function(t){"BR"==t.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(t.ownerDocument.createTextNode("\n"))},ct.prototype.readStyles=function(t){for(var e=f.none,n=0;n<t.length;n+=2){var r=this.parser.matchStyle(t[n],t[n+1],this);if(r){if(r.ignore)return null;e=this.parser.schema.marks[r.mark].create(r.attrs).addToSet(e)}}return e},ct.prototype.addElementByRule=function(t,e){var n,r,o,i=this;e.node?(r=this.parser.schema.nodes[e.node]).isLeaf?this.insertNode(r.create(e.attrs))||this.leafFallback(t):n=this.enter(r,e.attrs,e.preserveWhitespace):(o=this.parser.schema.marks[e.mark].create(e.attrs),this.addPendingMark(o));var s=this.top;if(r&&r.isLeaf)this.findInside(t);else if(e.getContent)this.findInside(t),e.getContent(t,this.parser.schema).forEach((function(t){return i.insertNode(t)}));else{var a=e.contentElement;"string"==typeof a?a=t.querySelector(a):"function"==typeof a&&(a=a(t)),a||(a=t),this.findAround(t,a,!0),this.addAll(a,n)}n&&(this.sync(s),this.open--),o&&this.removePendingMark(o,s)},ct.prototype.addAll=function(t,e,n,r){for(var o=n||0,i=n?t.childNodes[n]:t.firstChild,s=null==r?null:t.childNodes[r];i!=s;i=i.nextSibling,++o)this.findAtPoint(t,o),this.addDOM(i),e&&rt.hasOwnProperty(i.nodeName.toLowerCase())&&this.sync(e);this.findAtPoint(t,o)},ct.prototype.findPlace=function(t){for(var e,n,r=this.open;r>=0;r--){var o=this.nodes[r],i=o.findWrapping(t);if(i&&(!e||e.length>i.length)&&(e=i,n=o,!i.length))break;if(o.solid)break}if(!e)return!1;this.sync(n);for(var s=0;s<e.length;s++)this.enterInner(e[s],null,!1);return!0},ct.prototype.insertNode=function(t){if(t.isInline&&this.needsBlock&&!this.top.type){var e=this.textblockFromContext();e&&this.enterInner(e)}if(this.findPlace(t)){this.closeExtra();var n=this.top;n.applyPending(t.type),n.match&&(n.match=n.match.matchType(t.type));for(var r=n.activeMarks,o=0;o<t.marks.length;o++)n.type&&!n.type.allowsMarkType(t.marks[o].type)||(r=t.marks[o].addToSet(r));return n.content.push(t.mark(r)),!0}return!1},ct.prototype.enter=function(t,e,n){var r=this.findPlace(t.create(e));return r&&this.enterInner(t,e,!0,n),r},ct.prototype.enterInner=function(t,e,n,r){this.closeExtra();var o=this.top;o.applyPending(t),o.match=o.match&&o.match.matchType(t,e);var i=null==r?-5&o.options:st(r);4&o.options&&0==o.content.length&&(i|=4),this.nodes.push(new at(t,e,o.activeMarks,o.pendingMarks,n,null,i)),this.open++},ct.prototype.closeExtra=function(t){var e=this.nodes.length-1;if(e>this.open){for(;e>this.open;e--)this.nodes[e-1].content.push(this.nodes[e].finish(t));this.nodes.length=this.open+1}},ct.prototype.finish=function(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)},ct.prototype.sync=function(t){for(var e=this.open;e>=0;e--)if(this.nodes[e]==t)return void(this.open=e)},pt.currentPos.get=function(){this.closeExtra();for(var t=0,e=this.open;e>=0;e--){for(var n=this.nodes[e].content,r=n.length-1;r>=0;r--)t+=n[r].nodeSize;e&&t++}return t},ct.prototype.findAtPoint=function(t,e){if(this.find)for(var n=0;n<this.find.length;n++)this.find[n].node==t&&this.find[n].offset==e&&(this.find[n].pos=this.currentPos)},ct.prototype.findInside=function(t){if(this.find)for(var e=0;e<this.find.length;e++)null==this.find[e].pos&&1==t.nodeType&&t.contains(this.find[e].node)&&(this.find[e].pos=this.currentPos)},ct.prototype.findAround=function(t,e,n){if(t!=e&&this.find)for(var r=0;r<this.find.length;r++){if(null==this.find[r].pos&&1==t.nodeType&&t.contains(this.find[r].node))e.compareDocumentPosition(this.find[r].node)&(n?2:4)&&(this.find[r].pos=this.currentPos)}},ct.prototype.findInText=function(t){if(this.find)for(var e=0;e<this.find.length;e++)this.find[e].node==t&&(this.find[e].pos=this.currentPos-(t.nodeValue.length-this.find[e].offset))},ct.prototype.matchesContext=function(t){var e=this;if(t.indexOf("|")>-1)return t.split(/\s*\|\s*/).some(this.matchesContext,this);var n=t.split("/"),r=this.options.context,o=!(this.isOpen||r&&r.parent.type!=this.nodes[0].type),i=-(r?r.depth+1:0)+(o?0:1),s=function(t,a){for(;t>=0;t--){var c=n[t];if(""==c){if(t==n.length-1||0==t)continue;for(;a>=i;a--)if(s(t-1,a))return!0;return!1}var p=a>0||0==a&&o?e.nodes[a].type:r&&a>=i?r.node(a-i).type:null;if(!p||p.name!=c&&-1==p.groups.indexOf(c))return!1;a--}return!0};return s(n.length-1,this.open)},ct.prototype.textblockFromContext=function(){var t=this.options.context;if(t)for(var e=t.depth;e>=0;e--){var n=t.node(e).contentMatchAt(t.indexAfter(e)).defaultType;if(n&&n.isTextblock&&n.defaultAttrs)return n}for(var r in this.parser.schema.nodes){var o=this.parser.schema.nodes[r];if(o.isTextblock&&o.defaultAttrs)return o}},ct.prototype.addPendingMark=function(t){this.top.pendingMarks=t.addToSet(this.top.pendingMarks)},ct.prototype.removePendingMark=function(t,e){for(var n=this.open;n>=0;n--){var r=this.nodes[n];if(r.pendingMarks.lastIndexOf(t)>-1?r.pendingMarks=t.removeFromSet(r.pendingMarks):r.activeMarks=t.removeFromSet(r.activeMarks),r==e)break}},Object.defineProperties(ct.prototype,pt);var ut=function(t,e){this.nodes=t||{},this.marks=e||{}};function dt(t){var e={};for(var n in t){var r=t[n].spec.toDOM;r&&(e[n]=r)}return e}function mt(t){return t.document||window.document}ut.prototype.serializeFragment=function(t,e,n){var r=this;void 0===e&&(e={}),n||(n=mt(e).createDocumentFragment());var o=n,i=null;return t.forEach((function(t){if(i||t.marks.length){i||(i=[]);for(var n=0,s=0;n<i.length&&s<t.marks.length;){var a=t.marks[s];if(r.marks[a.type.name]){if(!a.eq(i[n])||!1===a.type.spec.spanning)break;n+=2,s++}else s++}for(;n<i.length;)o=i.pop(),i.pop();for(;s<t.marks.length;){var c=t.marks[s++],p=r.serializeMark(c,t.isInline,e);p&&(i.push(c,o),o.appendChild(p.dom),o=p.contentDOM||p.dom)}}o.appendChild(r.serializeNode(t,e))})),n},ut.prototype.serializeNode=function(t,e){void 0===e&&(e={});var n=ut.renderSpec(mt(e),this.nodes[t.type.name](t)),r=n.dom,o=n.contentDOM;if(o){if(t.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");e.onContent?e.onContent(t,o,e):this.serializeFragment(t.content,e,o)}return r},ut.prototype.serializeNodeAndMarks=function(t,e){void 0===e&&(e={});for(var n=this.serializeNode(t,e),r=t.marks.length-1;r>=0;r--){var o=this.serializeMark(t.marks[r],t.isInline,e);o&&((o.contentDOM||o.dom).appendChild(n),n=o.dom)}return n},ut.prototype.serializeMark=function(t,e,n){void 0===n&&(n={});var r=this.marks[t.type.name];return r&&ut.renderSpec(mt(n),r(t,e))},ut.renderSpec=function(t,e,n){if(void 0===n&&(n=null),"string"==typeof e)return{dom:t.createTextNode(e)};if(null!=e.nodeType)return{dom:e};var r=e[0],o=r.indexOf(" ");o>0&&(n=r.slice(0,o),r=r.slice(o+1));var i=null,s=n?t.createElementNS(n,r):t.createElement(r),a=e[1],c=1;if(a&&"object"==typeof a&&null==a.nodeType&&!Array.isArray(a))for(var p in c=2,a)if(null!=a[p]){var l=p.indexOf(" ");l>0?s.setAttributeNS(p.slice(0,l),p.slice(l+1),a[p]):s.setAttribute(p,a[p])}for(var h=c;h<e.length;h++){var f=e[h];if(0===f){if(h<e.length-1||h>c)throw new RangeError("Content hole must be the only child of its parent node");return{dom:s,contentDOM:s}}var u=ut.renderSpec(t,f,n),d=u.dom,m=u.contentDOM;if(s.appendChild(d),m){if(i)throw new RangeError("Multiple content holes");i=m}}return{dom:s,contentDOM:i}},ut.fromSchema=function(t){return t.cached.domSerializer||(t.cached.domSerializer=new ut(this.nodesFromSchema(t),this.marksFromSchema(t)))},ut.nodesFromSchema=function(t){var e=dt(t.nodes);return e.text||(e.text=function(t){return t.text}),e},ut.marksFromSchema=function(t){return dt(t.marks)};var vt=Math.pow(2,16);function gt(t){return 65535&t}var yt=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=null),this.pos=t,this.deleted=e,this.recover=n},wt=function(t,e){void 0===e&&(e=!1),this.ranges=t,this.inverted=e};wt.prototype.recover=function(t){var e=0,n=gt(t);if(!this.inverted)for(var r=0;r<n;r++)e+=this.ranges[3*r+2]-this.ranges[3*r+1];return this.ranges[3*n]+e+function(t){return(t-(65535&t))/vt}(t)},wt.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},wt.prototype.map=function(t,e){return void 0===e&&(e=1),this._map(t,e,!0)},wt.prototype._map=function(t,e,n){for(var r=0,o=this.inverted?2:1,i=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var a=this.ranges[s]-(this.inverted?r:0);if(a>t)break;var c=this.ranges[s+o],p=this.ranges[s+i],l=a+c;if(t<=l){var h=a+r+((c?t==a?-1:t==l?1:e:e)<0?0:p);if(n)return h;var f=s/3+(t-a)*vt;return new yt(h,e<0?t!=a:t!=l,f)}r+=p-c}return n?t+r:new yt(t+r)},wt.prototype.touches=function(t,e){for(var n=0,r=gt(e),o=this.inverted?2:1,i=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var a=this.ranges[s]-(this.inverted?n:0);if(a>t)break;var c=this.ranges[s+o];if(t<=a+c&&s==3*r)return!0;n+=this.ranges[s+i]-c}return!1},wt.prototype.forEach=function(t){for(var e=this.inverted?2:1,n=this.inverted?1:2,r=0,o=0;r<this.ranges.length;r+=3){var i=this.ranges[r],s=i-(this.inverted?o:0),a=i+(this.inverted?0:o),c=this.ranges[r+e],p=this.ranges[r+n];t(s,s+c,a,a+p),o+=p-c}},wt.prototype.invert=function(){return new wt(this.ranges,!this.inverted)},wt.prototype.toString=function(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)},wt.offset=function(t){return 0==t?wt.empty:new wt(t<0?[0,-t,0]:[0,0,t])},wt.empty=new wt([]);var bt=function(t,e,n,r){this.maps=t||[],this.from=n||0,this.to=null==r?this.maps.length:r,this.mirror=e};function xt(t){var e=Error.call(this,t);return e.__proto__=xt.prototype,e}bt.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.maps.length),new bt(this.maps,this.mirror,t,e)},bt.prototype.copy=function(){return new bt(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)},bt.prototype.appendMap=function(t,e){this.to=this.maps.push(t),null!=e&&this.setMirror(this.maps.length-1,e)},bt.prototype.appendMapping=function(t){for(var e=0,n=this.maps.length;e<t.maps.length;e++){var r=t.getMirror(e);this.appendMap(t.maps[e],null!=r&&r<e?n+r:null)}},bt.prototype.getMirror=function(t){if(this.mirror)for(var e=0;e<this.mirror.length;e++)if(this.mirror[e]==t)return this.mirror[e+(e%2?-1:1)]},bt.prototype.setMirror=function(t,e){this.mirror||(this.mirror=[]),this.mirror.push(t,e)},bt.prototype.appendMappingInverted=function(t){for(var e=t.maps.length-1,n=this.maps.length+t.maps.length;e>=0;e--){var r=t.getMirror(e);this.appendMap(t.maps[e].invert(),null!=r&&r>e?n-r-1:null)}},bt.prototype.invert=function(){var t=new bt;return t.appendMappingInverted(this),t},bt.prototype.map=function(t,e){if(void 0===e&&(e=1),this.mirror)return this._map(t,e,!0);for(var n=this.from;n<this.to;n++)t=this.maps[n].map(t,e);return t},bt.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},bt.prototype._map=function(t,e,n){for(var r=!1,o=null,i=this.from;i<this.to;i++){var s=this.maps[i],a=o&&o[i];if(null!=a&&s.touches(t,a))t=s.recover(a);else{var c=s.mapResult(t,e);if(null!=c.recover){var p=this.getMirror(i);if(null!=p&&p>i&&p<this.to){if(c.deleted){i=p,t=this.maps[p].recover(c.recover);continue}(o||(o=Object.create(null)))[p]=c.recover}}c.deleted&&(r=!0),t=c.pos}}return n?t:new yt(t,r)},xt.prototype=Object.create(Error.prototype),xt.prototype.constructor=xt,xt.prototype.name="TransformError";var kt=function(t){this.doc=t,this.steps=[],this.docs=[],this.mapping=new bt},St={before:{configurable:!0},docChanged:{configurable:!0}};function Mt(){throw new Error("Override me")}St.before.get=function(){return this.docs.length?this.docs[0]:this.doc},kt.prototype.step=function(t){var e=this.maybeStep(t);if(e.failed)throw new xt(e.failed);return this},kt.prototype.maybeStep=function(t){var e=t.apply(this.doc);return e.failed||this.addStep(t,e.doc),e},St.docChanged.get=function(){return this.steps.length>0},kt.prototype.addStep=function(t,e){this.docs.push(this.doc),this.steps.push(t),this.mapping.appendMap(t.getMap()),this.doc=e},Object.defineProperties(kt.prototype,St);var Ot=Object.create(null),Ct=function(){};Ct.prototype.apply=function(t){return Mt()},Ct.prototype.getMap=function(){return wt.empty},Ct.prototype.invert=function(t){return Mt()},Ct.prototype.map=function(t){return Mt()},Ct.prototype.merge=function(t){return null},Ct.prototype.toJSON=function(){return Mt()},Ct.fromJSON=function(t,e){if(!e||!e.stepType)throw new RangeError("Invalid input for Step.fromJSON");var n=Ot[e.stepType];if(!n)throw new RangeError("No step type "+e.stepType+" defined");return n.fromJSON(t,e)},Ct.jsonID=function(t,e){if(t in Ot)throw new RangeError("Duplicate use of step JSON ID "+t);return Ot[t]=e,e.prototype.jsonID=t,e};var Nt=function(t,e){this.doc=t,this.failed=e};Nt.ok=function(t){return new Nt(t,null)},Nt.fail=function(t){return new Nt(null,t)},Nt.fromReplace=function(t,e,n,r){try{return Nt.ok(t.replace(e,n,r))}catch(t){if(t instanceof u)return Nt.fail(t.message);throw t}};var Tt=function(t){function e(e,n,r,o){t.call(this),this.from=e,this.to=n,this.slice=r,this.structure=!!o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){return this.structure&&Et(t,this.from,this.to)?Nt.fail("Structure replace would overwrite content"):Nt.fromReplace(t,this.from,this.to,this.slice)},e.prototype.getMap=function(){return new wt([this.from,this.to-this.from,this.slice.size])},e.prototype.invert=function(t){return new e(this.from,this.from+this.slice.size,t.slice(this.from,this.to))},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted?null:new e(n.pos,Math.max(n.pos,r.pos),this.slice)},e.prototype.merge=function(t){if(!(t instanceof e)||t.structure!=this.structure)return null;if(this.from+this.slice.size!=t.from||this.slice.openEnd||t.slice.openStart){if(t.to!=this.from||this.slice.openStart||t.slice.openEnd)return null;var n=this.slice.size+t.slice.size==0?d.empty:new d(t.slice.content.append(this.slice.content),t.slice.openStart,this.slice.openEnd);return new e(t.from,this.to,n,this.structure)}var r=this.slice.size+t.slice.size==0?d.empty:new d(this.slice.content.append(t.slice.content),this.slice.openStart,t.slice.openEnd);return new e(this.from,this.to+(t.to-t.from),r,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new e(n.from,n.to,d.fromJSON(t,n.slice),!!n.structure)},e}(Ct);Ct.jsonID("replace",Tt);var Dt=function(t){function e(e,n,r,o,i,s,a){t.call(this),this.from=e,this.to=n,this.gapFrom=r,this.gapTo=o,this.slice=i,this.insert=s,this.structure=!!a}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){if(this.structure&&(Et(t,this.from,this.gapFrom)||Et(t,this.gapTo,this.to)))return Nt.fail("Structure gap-replace would overwrite content");var e=t.slice(this.gapFrom,this.gapTo);if(e.openStart||e.openEnd)return Nt.fail("Gap is not a flat range");var n=this.slice.insertAt(this.insert,e.content);return n?Nt.fromReplace(t,this.from,this.to,n):Nt.fail("Content does not fit in gap")},e.prototype.getMap=function(){return new wt([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])},e.prototype.invert=function(t){var n=this.gapTo-this.gapFrom;return new e(this.from,this.from+this.slice.size+n,this.from+this.insert,this.from+this.insert+n,t.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1),o=t.map(this.gapFrom,-1),i=t.map(this.gapTo,1);return n.deleted&&r.deleted||o<n.pos||i>r.pos?null:new e(n.pos,r.pos,o,i,this.slice,this.insert,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to||"number"!=typeof n.gapFrom||"number"!=typeof n.gapTo||"number"!=typeof n.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new e(n.from,n.to,n.gapFrom,n.gapTo,d.fromJSON(t,n.slice),n.insert,!!n.structure)},e}(Ct);function Et(t,e,n){for(var r=t.resolve(e),o=n-e,i=r.depth;o>0&&i>0&&r.indexAfter(i)==r.node(i).childCount;)i--,o--;if(o>0)for(var s=r.node(i).maybeChild(r.indexAfter(i));o>0;){if(!s||s.isLeaf)return!0;s=s.firstChild,o--}return!1}function At(t,e,n){return(0==e||t.canReplace(e,t.childCount))&&(n==t.childCount||t.canReplace(0,n))}function It(t){for(var e=t.parent.content.cutByIndex(t.startIndex,t.endIndex),n=t.depth;;--n){var r=t.$from.node(n),o=t.$from.index(n),i=t.$to.indexAfter(n);if(n<t.depth&&r.canReplace(o,i,e))return n;if(0==n||r.type.spec.isolating||!At(r,o,i))break}}function Rt(t,e,n,r){void 0===r&&(r=t);var o=function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.contentMatchAt(r).findWrapping(e);if(!i)return null;var s=i.length?i[0]:e;return n.canReplaceWith(r,o,s)?i:null}(t,e),i=o&&function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.child(r),s=e.contentMatch.findWrapping(i.type);if(!s)return null;for(var a=(s.length?s[s.length-1]:e).contentMatch,c=r;a&&c<o;c++)a=a.matchType(n.child(c).type);if(!a||!a.validEnd)return null;return s}(r,e);return i?o.map(Pt).concat({type:e,attrs:n}).concat(i.map(Pt)):null}function Pt(t){return{type:t,attrs:null}}function zt(t,e,n,r){void 0===n&&(n=1);var o=t.resolve(e),i=o.depth-n,s=r&&r[r.length-1]||o.parent;if(i<0||o.parent.type.spec.isolating||!o.parent.canReplace(o.index(),o.parent.childCount)||!s.type.validContent(o.parent.content.cutByIndex(o.index(),o.parent.childCount)))return!1;for(var a=o.depth-1,c=n-2;a>i;a--,c--){var p=o.node(a),l=o.index(a);if(p.type.spec.isolating)return!1;var h=p.content.cutByIndex(l,p.childCount),f=r&&r[c]||p;if(f!=p&&(h=h.replaceChild(0,f.type.create(f.attrs))),!p.canReplace(l+1,p.childCount)||!f.type.validContent(h))return!1}var u=o.indexAfter(i),d=r&&r[0];return o.node(i).canReplaceWith(u,u,d?d.type:o.node(i+1).type)}function Bt(t,e){var n=t.resolve(e),r=n.index();return Ft(n.nodeBefore,n.nodeAfter)&&n.parent.canReplace(r,r+1)}function Ft(t,e){return t&&e&&!t.isLeaf&&t.canAppend(e)}function Vt(t,e,n){for(var r=[],o=0;o<t.childCount;o++){var i=t.child(o);i.content.size&&(i=i.copy(Vt(i.content,e,i))),i.isInline&&(i=e(i,n,o)),r.push(i)}return a.fromArray(r)}Ct.jsonID("replaceAround",Dt),kt.prototype.lift=function(t,e){for(var n=t.$from,r=t.$to,o=t.depth,i=n.before(o+1),s=r.after(o+1),c=i,p=s,l=a.empty,h=0,f=o,u=!1;f>e;f--)u||n.index(f)>0?(u=!0,l=a.from(n.node(f).copy(l)),h++):c--;for(var m=a.empty,v=0,g=o,y=!1;g>e;g--)y||r.after(g+1)<r.end(g)?(y=!0,m=a.from(r.node(g).copy(m)),v++):p++;return this.step(new Dt(c,p,i,s,new d(l.append(m),h,v),l.size-h,!0))},kt.prototype.wrap=function(t,e){for(var n=a.empty,r=e.length-1;r>=0;r--)n=a.from(e[r].type.create(e[r].attrs,n));var o=t.start,i=t.end;return this.step(new Dt(o,i,o,i,new d(n,0,0),e.length,!0))},kt.prototype.setBlockType=function(t,e,n,r){var o=this;if(void 0===e&&(e=t),!n.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");var i=this.steps.length;return this.doc.nodesBetween(t,e,(function(t,e){if(t.isTextblock&&!t.hasMarkup(n,r)&&function(t,e,n){var r=t.resolve(e),o=r.index();return r.parent.canReplaceWith(o,o+1,n)}(o.doc,o.mapping.slice(i).map(e),n)){o.clearIncompatible(o.mapping.slice(i).map(e,1),n);var s=o.mapping.slice(i),c=s.map(e,1),p=s.map(e+t.nodeSize,1);return o.step(new Dt(c,p,c+1,p-1,new d(a.from(n.create(r,null,t.marks)),0,0),1,!0)),!1}})),this},kt.prototype.setNodeMarkup=function(t,e,n,r){var o=this.doc.nodeAt(t);if(!o)throw new RangeError("No node at given position");e||(e=o.type);var i=e.create(n,null,r||o.marks);if(o.isLeaf)return this.replaceWith(t,t+o.nodeSize,i);if(!e.validContent(o.content))throw new RangeError("Invalid content for node type "+e.name);return this.step(new Dt(t,t+o.nodeSize,t+1,t+o.nodeSize-1,new d(a.from(i),0,0),1,!0))},kt.prototype.split=function(t,e,n){void 0===e&&(e=1);for(var r=this.doc.resolve(t),o=a.empty,i=a.empty,s=r.depth,c=r.depth-e,p=e-1;s>c;s--,p--){o=a.from(r.node(s).copy(o));var l=n&&n[p];i=a.from(l?l.type.create(l.attrs,i):r.node(s).copy(i))}return this.step(new Tt(t,t,new d(o.append(i),e,e),!0))},kt.prototype.join=function(t,e){void 0===e&&(e=1);var n=new Tt(t-e,t+e,d.empty,!0);return this.step(n)};var _t=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),r=t.resolve(this.from),o=r.node(r.sharedDepth(this.to)),i=new d(Vt(n.content,(function(t,n){return n.type.allowsMarkType(e.mark.type)?t.mark(e.mark.addToSet(t.marks)):t}),o),n.openStart,n.openEnd);return Nt.fromReplace(t,this.from,this.to,i)},e.prototype.invert=function(){return new $t(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(Ct);Ct.jsonID("addMark",_t);var $t=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),r=new d(Vt(n.content,(function(t){return t.mark(e.mark.removeFromSet(t.marks))})),n.openStart,n.openEnd);return Nt.fromReplace(t,this.from,this.to,r)},e.prototype.invert=function(){return new _t(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(Ct);function jt(t,e,n,r){if(void 0===n&&(n=e),void 0===r&&(r=d.empty),e==n&&!r.size)return null;var o=t.resolve(e),i=t.resolve(n);if(qt(o,i,r))return new Tt(e,n,r);var s=function(t,e){var n=function t(e,n,r,o){var i=a.empty,s=0,c=r[n];if(e.depth>n){var p=t(e,n+1,r,o||c);s=p.openEnd+1,i=a.from(e.node(n+1).copy(p.content))}c&&(i=i.append(c.content),s=c.openEnd);o&&(i=i.append(e.node(n).contentMatchAt(e.indexAfter(n)).fillBefore(a.empty,!0)),s=0);return{content:i,openEnd:s}}(t,0,e,!1),r=n.content,o=n.openEnd;return new d(r,t.depth,o||0)}(o,function(t,e){for(var n=new Wt(t),r=1;e.size&&r<=3;r++){var o=n.placeSlice(e.content,e.openStart,e.openEnd,r);3==r&&o!=e&&o.size&&(r=0),e=o}for(;n.open.length;)n.closeNode();return n.placed}(o,r)),c=Jt(o,i,s);if(!c)return null;if(s.size!=c.size&&function(t,e,n){if(!e.parent.isTextblock)return!1;var r,o=n.openEnd?function(t,e){for(var n=1;n<e;n++)t=t.lastChild.content;return t.lastChild}(n.content,n.openEnd):t.node(t.depth-(n.openStart-n.openEnd));if(!o.isTextblock)return!1;for(var i=e.index();i<e.parent.childCount;i++)if(!o.type.allowsMarks(e.parent.child(i).marks))return!1;n.openEnd?r=o.contentMatchAt(o.childCount):(r=o.contentMatchAt(o.childCount),n.size&&(r=r.matchFragment(n.content,n.openStart?1:0)));return(r=r.matchFragment(e.parent.content,e.index()))&&r.validEnd}(o,i,s)){for(var p=i.depth,l=i.after(p);p>1&&l==i.end(--p);)++l;var h=Jt(o,t.resolve(l),s);if(h)return new Dt(e,l,n,i.end(),h,s.size)}return c.size||e!=n?new Tt(e,n,c):null}function Lt(t,e,n,r,o,i,s){var c,p=t.childCount,l=p-(s>0?1:0),h=i<0?e:n.node(o);c=i<0?h.contentMatchAt(l):1==p&&s>0?h.contentMatchAt(i?n.index(o):n.indexAfter(o)):h.contentMatchAt(n.indexAfter(o)).matchFragment(t,p>0&&i?1:0,l);var f=r.node(o);if(s>0&&o<r.depth){var u=f.content.cutByIndex(r.indexAfter(o)).addToStart(t.lastChild),d=c.fillBefore(u,!0);if(d&&d.size&&i>0&&1==p&&(d=null),d){var m=Lt(t.lastChild.content,t.lastChild,n,r,o+1,1==p?i-1:-1,s-1);if(m){var v=t.lastChild.copy(m);return d.size?t.cutByIndex(0,p-1).append(d).addToEnd(v):t.replaceChild(p-1,v)}}}s>0&&(c=c.matchType((1==p&&i>0?n.node(o+1):t.lastChild).type));var g=r.index(o);if(g==f.childCount&&!f.type.compatibleContent(e.type))return null;for(var y=c.fillBefore(f.content,!0,g),w=g;y&&w<f.content.childCount;w++)h.type.allowsMarks(f.content.child(w).marks)||(y=null);if(!y)return null;if(s>0){var b=function t(e,n,r,o,i){var s,c=e.content,p=c.childCount;s=i>=0?r.node(o).contentMatchAt(r.indexAfter(o)).matchFragment(c,i>0?1:0,p):e.contentMatchAt(p);if(n>0){var l=t(c.lastChild,n-1,r,o+1,1==p?i-1:-1);c=c.replaceChild(p-1,l)}return e.copy(c.append(s.fillBefore(a.empty,!0)))}(t.lastChild,s-1,n,o+1,1==p?i-1:-1);t=t.replaceChild(p-1,b)}return t=t.append(y),r.depth>o&&(t=t.addToEnd(function t(e,n){var r=e.node(n),o=r.contentMatchAt(0).fillBefore(r.content,!0,e.index(n));e.depth>n&&(o=o.addToEnd(t(e,n+1)));return r.copy(o)}(r,o+1))),t}function Jt(t,e,n){var r=Lt(n.content,t.node(0),t,e,0,n.openStart,n.openEnd);return r?function(t,e,n){for(;e>0&&n>0&&1==t.childCount;)t=t.firstChild.content,e--,n--;return new d(t,e,n)}(r,n.openStart,e.depth):null}function qt(t,e,n){return!n.openStart&&!n.openEnd&&t.start()==e.start()&&t.parent.canReplace(t.index(),e.index(),n.content)}Ct.jsonID("removeMark",$t),kt.prototype.addMark=function(t,e,n){var r=this,o=[],i=[],s=null,a=null;return this.doc.nodesBetween(t,e,(function(r,c,p){if(r.isInline){var l=r.marks;if(!n.isInSet(l)&&p.type.allowsMarkType(n.type)){for(var h=Math.max(c,t),f=Math.min(c+r.nodeSize,e),u=n.addToSet(l),d=0;d<l.length;d++)l[d].isInSet(u)||(s&&s.to==h&&s.mark.eq(l[d])?s.to=f:o.push(s=new $t(h,f,l[d])));a&&a.to==h?a.to=f:i.push(a=new _t(h,f,n))}}})),o.forEach((function(t){return r.step(t)})),i.forEach((function(t){return r.step(t)})),this},kt.prototype.removeMark=function(t,e,n){var r=this;void 0===n&&(n=null);var o=[],i=0;return this.doc.nodesBetween(t,e,(function(r,s){if(r.isInline){i++;var a=null;if(n instanceof Z){var c=n.isInSet(r.marks);c&&(a=[c])}else n?n.isInSet(r.marks)&&(a=[n]):a=r.marks;if(a&&a.length)for(var p=Math.min(s+r.nodeSize,e),l=0;l<a.length;l++){for(var h=a[l],f=void 0,u=0;u<o.length;u++){var d=o[u];d.step==i-1&&h.eq(o[u].style)&&(f=d)}f?(f.to=p,f.step=i):o.push({style:h,from:Math.max(s,t),to:p,step:i})}}})),o.forEach((function(t){return r.step(new $t(t.from,t.to,t.style))})),this},kt.prototype.clearIncompatible=function(t,e,n){void 0===n&&(n=e.contentMatch);for(var r=this.doc.nodeAt(t),o=[],i=t+1,s=0;s<r.childCount;s++){var c=r.child(s),p=i+c.nodeSize,l=n.matchType(c.type,c.attrs);if(l){n=l;for(var h=0;h<c.marks.length;h++)e.allowsMarkType(c.marks[h].type)||this.step(new $t(i,p,c.marks[h]))}else o.push(new Tt(i,p,d.empty));i=p}if(!n.validEnd){var f=n.fillBefore(a.empty,!0);this.replace(i,i,new d(f,0,0))}for(var u=o.length-1;u>=0;u--)this.step(o[u]);return this},kt.prototype.replace=function(t,e,n){void 0===e&&(e=t),void 0===n&&(n=d.empty);var r=jt(this.doc,t,e,n);return r&&this.step(r),this},kt.prototype.replaceWith=function(t,e,n){return this.replace(t,e,new d(a.from(n),0,0))},kt.prototype.delete=function(t,e){return this.replace(t,e,d.empty)},kt.prototype.insert=function(t,e){return this.replaceWith(t,t,e)};var Wt=function(t){this.open=[];for(var e=0;e<=t.depth;e++){var n=t.node(e),r=n.contentMatchAt(t.indexAfter(e));this.open.push({parent:n,match:r,content:a.empty,wrapper:!1,openEnd:0,depth:e})}this.placed=[]};function Kt(t,e,n){var r=t.content;if(e>1){var o=Kt(t.firstChild,e-1,1==t.childCount?n-1:0);r=t.content.replaceChild(0,o)}var i=t.type.contentMatch.fillBefore(r,0==n);return t.copy(i.append(r))}function Ut(t,e,n,r,o){if(e<n){var i=t.firstChild;t=t.replaceChild(0,i.copy(Ut(i.content,e+1,n,r,i)))}if(e>r){var s=o.contentMatchAt(0),c=s.fillBefore(t).append(t);t=c.append(s.matchFragment(c).fillBefore(a.empty,!0))}return t}function Ht(t,e){for(var n=[],r=Math.min(t.depth,e.depth);r>=0;r--){var o=t.start(r);if(o<t.pos-(t.depth-r)||e.end(r)>e.pos+(e.depth-r)||t.node(r).type.spec.isolating||e.node(r).type.spec.isolating)break;o==e.start(r)&&n.push(r)}return n}Wt.prototype.placeSlice=function(t,e,n,r,o){if(e>0){var i=t.firstChild,s=this.placeSlice(i.content,Math.max(0,e-1),n&&1==t.childCount?n-1:0,r,i);s.content!=i.content&&(s.content.size?(t=t.replaceChild(0,i.copy(s.content)),e=s.openStart+1):(1==t.childCount&&(n=0),t=t.cutByIndex(1),e=0))}var c=this.placeContent(t,e,n,r,o);if(r>2&&c.size&&0==e){var p=c.content.firstChild,l=1==c.content.childCount;this.placeContent(p.content,0,n&&l?n-1:0,r,p),c=l?a.empty:new d(c.content.cutByIndex(1),0,n)}return c},Wt.prototype.placeContent=function(t,e,n,r,o){for(var i=0;i<t.childCount;i++){for(var s=t.child(i),c=!1,p=i==t.childCount-1,l=this.open.length-1;l>=0;l--){var h=this.open[l],f=void 0;if(r>1&&(f=h.match.findWrapping(s.type))&&(!o||!f.length||f[f.length-1]!=o.type)){for(;this.open.length-1>l;)this.closeNode();for(var u=0;u<f.length;u++)h.match=h.match.matchType(f[u]),l++,h={parent:f[u].create(),match:f[u].contentMatch,content:a.empty,wrapper:!0,openEnd:0,depth:l+u},this.open.push(h)}var m=h.match.matchType(s.type);if(!m){var v=h.match.fillBefore(a.from(s));if(!v){if(o&&h.match.matchType(o.type))break;continue}for(var g=0;g<v.childCount;g++){var y=v.child(g);this.addNode(h,y,0),m=h.match.matchFragment(y)}}for(;this.open.length-1>l;)this.closeNode();s=s.mark(h.parent.type.allowedMarks(s.marks)),e&&(s=Kt(s,e,p?n:0),e=0),this.addNode(h,s,p?n:0),h.match=m,p&&(n=0),c=!0;break}if(!c)break}return this.open.length>1&&(i>0&&i==t.childCount||o&&this.open[this.open.length-1].parent.type==o.type)&&this.closeNode(),new d(t.cutByIndex(i),e,n)},Wt.prototype.addNode=function(t,e,n){var r,o;t.content=(r=t.content,o=t.openEnd,o?r.replaceChild(r.childCount-1,function t(e,n){var r=e.content;if(n>1){var o=t(e.lastChild,n-1);r=e.content.replaceChild(e.childCount-1,o)}var i=e.contentMatchAt(e.childCount).fillBefore(a.empty,!0);return e.copy(r.append(i))}(r.lastChild,o)):r).addToEnd(e),t.openEnd=n},Wt.prototype.closeNode=function(){var t=this.open.pop();0==t.content.size||(t.wrapper?this.addNode(this.open[this.open.length-1],t.parent.copy(t.content),t.openEnd+1):this.placed[t.depth]={depth:t.depth,content:t.content,openEnd:t.openEnd})},kt.prototype.replaceRange=function(t,e,n){if(!n.size)return this.deleteRange(t,e);var r=this.doc.resolve(t),o=this.doc.resolve(e);if(qt(r,o,n))return this.step(new Tt(t,e,n));var i=Ht(r,this.doc.resolve(e));0==i[i.length-1]&&i.pop();var s=-(r.depth+1);i.unshift(s);for(var a=r.depth,c=r.pos-1;a>0;a--,c--){var p=r.node(a).type.spec;if(p.defining||p.isolating)break;i.indexOf(a)>-1?s=a:r.before(a)==c&&i.splice(1,0,-a)}for(var l=i.indexOf(s),h=[],f=n.openStart,u=n.content,m=0;;m++){var v=u.firstChild;if(h.push(v),m==n.openStart)break;u=v.content}f>0&&h[f-1].type.spec.defining&&r.node(l).type!=h[f-1].type?f-=1:f>=2&&h[f-1].isTextblock&&h[f-2].type.spec.defining&&r.node(l).type!=h[f-2].type&&(f-=2);for(var g=n.openStart;g>=0;g--){var y=(g+f+1)%(n.openStart+1),w=h[y];if(w)for(var b=0;b<i.length;b++){var x=i[(b+l)%i.length],k=!0;x<0&&(k=!1,x=-x);var S=r.node(x-1),M=r.index(x-1);if(S.canReplaceWith(M,M,w.type,w.marks))return this.replace(r.before(x),k?o.after(x):e,new d(Ut(n.content,0,n.openStart,y),y,n.openEnd))}}for(var O=this.steps.length,C=i.length-1;C>=0&&(this.replace(t,e,n),!(this.steps.length>O));C--){var N=i[C];C<0||(t=r.before(N),e=o.after(N))}return this},kt.prototype.replaceRangeWith=function(t,e,n){if(!n.isInline&&t==e&&this.doc.resolve(t).parent.content.size){var r=function(t,e,n){var r=t.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),n))return e;if(0==r.parentOffset)for(var o=r.depth-1;o>=0;o--){var i=r.index(o);if(r.node(o).canReplaceWith(i,i,n))return r.before(o+1);if(i>0)return null}if(r.parentOffset==r.parent.content.size)for(var s=r.depth-1;s>=0;s--){var a=r.indexAfter(s);if(r.node(s).canReplaceWith(a,a,n))return r.after(s+1);if(a<r.node(s).childCount)return null}}(this.doc,t,n.type);null!=r&&(t=e=r)}return this.replaceRange(t,e,new d(a.from(n),0,0))},kt.prototype.deleteRange=function(t,e){for(var n=this.doc.resolve(t),r=this.doc.resolve(e),o=Ht(n,r),i=0;i<o.length;i++){var s=o[i],a=i==o.length-1;if(a&&0==s||n.node(s).type.contentMatch.validEnd)return this.delete(n.start(s),r.end(s));if(s>0&&(a||n.node(s-1).canReplace(n.index(s-1),r.indexAfter(s-1))))return this.delete(n.before(s),r.after(s))}for(var c=1;c<=n.depth&&c<=r.depth;c++)if(t-n.start(c)==n.depth-c&&e>n.end(c)&&r.end(c)-e!=r.depth-c)return this.delete(n.before(c),e);return this.delete(t,e)};var Gt=Object.create(null),Qt=function(t,e,n){this.ranges=n||[new Yt(t.min(e),t.max(e))],this.$anchor=t,this.$head=e},Xt={anchor:{configurable:!0},head:{configurable:!0},from:{configurable:!0},to:{configurable:!0},$from:{configurable:!0},$to:{configurable:!0},empty:{configurable:!0}};Xt.anchor.get=function(){return this.$anchor.pos},Xt.head.get=function(){return this.$head.pos},Xt.from.get=function(){return this.$from.pos},Xt.to.get=function(){return this.$to.pos},Xt.$from.get=function(){return this.ranges[0].$from},Xt.$to.get=function(){return this.ranges[0].$to},Xt.empty.get=function(){for(var t=this.ranges,e=0;e<t.length;e++)if(t[e].$from.pos!=t[e].$to.pos)return!1;return!0},Qt.prototype.content=function(){return this.$from.node(0).slice(this.from,this.to,!0)},Qt.prototype.replace=function(t,e){void 0===e&&(e=d.empty);for(var n=e.content.lastChild,r=null,o=0;o<e.openEnd;o++)r=n,n=n.lastChild;for(var i=t.steps.length,s=this.ranges,a=0;a<s.length;a++){var c=s[a],p=c.$from,l=c.$to,h=t.mapping.slice(i);t.replaceRange(h.map(p.pos),h.map(l.pos),a?d.empty:e),0==a&&se(t,i,(n?n.isInline:r&&r.isTextblock)?-1:1)}},Qt.prototype.replaceWith=function(t,e){for(var n=t.steps.length,r=this.ranges,o=0;o<r.length;o++){var i=r[o],s=i.$from,a=i.$to,c=t.mapping.slice(n),p=c.map(s.pos),l=c.map(a.pos);o?t.deleteRange(p,l):(t.replaceRangeWith(p,l,e),se(t,n,e.isInline?-1:1))}},Qt.findFrom=function(t,e,n){var r=t.parent.inlineContent?new Zt(t):ie(t.node(0),t.parent,t.pos,t.index(),e,n);if(r)return r;for(var o=t.depth-1;o>=0;o--){var i=e<0?ie(t.node(0),t.node(o),t.before(o+1),t.index(o),e,n):ie(t.node(0),t.node(o),t.after(o+1),t.index(o)+1,e,n);if(i)return i}},Qt.near=function(t,e){return void 0===e&&(e=1),this.findFrom(t,e)||this.findFrom(t,-e)||new re(t.node(0))},Qt.atStart=function(t){return ie(t,t,0,0,1)||new re(t)},Qt.atEnd=function(t){return ie(t,t,t.content.size,t.childCount,-1)||new re(t)},Qt.fromJSON=function(t,e){if(!e||!e.type)throw new RangeError("Invalid input for Selection.fromJSON");var n=Gt[e.type];if(!n)throw new RangeError("No selection type "+e.type+" defined");return n.fromJSON(t,e)},Qt.jsonID=function(t,e){if(t in Gt)throw new RangeError("Duplicate use of selection JSON ID "+t);return Gt[t]=e,e.prototype.jsonID=t,e},Qt.prototype.getBookmark=function(){return Zt.between(this.$anchor,this.$head).getBookmark()},Object.defineProperties(Qt.prototype,Xt),Qt.prototype.visible=!0;var Yt=function(t,e){this.$from=t,this.$to=e},Zt=function(t){function e(e,n){void 0===n&&(n=e),t.call(this,e,n)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={$cursor:{configurable:!0}};return n.$cursor.get=function(){return this.$anchor.pos==this.$head.pos?this.$head:null},e.prototype.map=function(n,r){var o=n.resolve(r.map(this.head));if(!o.parent.inlineContent)return t.near(o);var i=n.resolve(r.map(this.anchor));return new e(i.parent.inlineContent?i:o,o)},e.prototype.replace=function(e,n){if(void 0===n&&(n=d.empty),t.prototype.replace.call(this,e,n),n==d.empty){var r=this.$from.marksAcross(this.$to);r&&e.ensureMarks(r)}},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor&&t.head==this.head},e.prototype.getBookmark=function(){return new te(this.anchor,this.head)},e.prototype.toJSON=function(){return{type:"text",anchor:this.anchor,head:this.head}},e.fromJSON=function(t,n){if("number"!=typeof n.anchor||"number"!=typeof n.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new e(t.resolve(n.anchor),t.resolve(n.head))},e.create=function(t,e,n){void 0===n&&(n=e);var r=t.resolve(e);return new this(r,n==e?r:t.resolve(n))},e.between=function(n,r,o){var i=n.pos-r.pos;if(o&&!i||(o=i>=0?1:-1),!r.parent.inlineContent){var s=t.findFrom(r,o,!0)||t.findFrom(r,-o,!0);if(!s)return t.near(r,o);r=s.$head}return n.parent.inlineContent||(0==i?n=r:(n=(t.findFrom(n,-o,!0)||t.findFrom(n,o,!0)).$anchor).pos<r.pos!=i<0&&(n=r)),new e(n,r)},Object.defineProperties(e.prototype,n),e}(Qt);Qt.jsonID("text",Zt);var te=function(t,e){this.anchor=t,this.head=e};te.prototype.map=function(t){return new te(t.map(this.anchor),t.map(this.head))},te.prototype.resolve=function(t){return Zt.between(t.resolve(this.anchor),t.resolve(this.head))};var ee=function(t){function e(e){var n=e.nodeAfter,r=e.node(0).resolve(e.pos+n.nodeSize);t.call(this,e,r),this.node=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(n,r){var o=r.mapResult(this.anchor),i=o.deleted,s=o.pos,a=n.resolve(s);return i?t.near(a):new e(a)},e.prototype.content=function(){return new d(a.from(this.node),0,0)},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor},e.prototype.toJSON=function(){return{type:"node",anchor:this.anchor}},e.prototype.getBookmark=function(){return new ne(this.anchor)},e.fromJSON=function(t,n){if("number"!=typeof n.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new e(t.resolve(n.anchor))},e.create=function(t,e){return new this(t.resolve(e))},e.isSelectable=function(t){return!t.isText&&!1!==t.type.spec.selectable},e}(Qt);ee.prototype.visible=!1,Qt.jsonID("node",ee);var ne=function(t){this.anchor=t};ne.prototype.map=function(t){var e=t.mapResult(this.anchor),n=e.deleted,r=e.pos;return n?new te(r,r):new ne(r)},ne.prototype.resolve=function(t){var e=t.resolve(this.anchor),n=e.nodeAfter;return n&&ee.isSelectable(n)?new ee(e):Qt.near(e)};var re=function(t){function e(e){t.call(this,e.resolve(0),e.resolve(e.content.size))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.toJSON=function(){return{type:"all"}},e.fromJSON=function(t){return new e(t)},e.prototype.map=function(t){return new e(t)},e.prototype.eq=function(t){return t instanceof e},e.prototype.getBookmark=function(){return oe},e}(Qt);Qt.jsonID("all",re);var oe={map:function(){return this},resolve:function(t){return new re(t)}};function ie(t,e,n,r,o,i){if(e.inlineContent)return Zt.create(t,n);for(var s=r-(o>0?0:1);o>0?s<e.childCount:s>=0;s+=o){var a=e.child(s);if(a.isAtom){if(!i&&ee.isSelectable(a))return ee.create(t,n-(o<0?a.nodeSize:0))}else{var c=ie(t,a,n+o,o<0?a.childCount:0,o,i);if(c)return c}n+=a.nodeSize*o}}function se(t,e,n){var r=t.steps.length-1;if(!(r<e)){var o,i=t.steps[r];if(i instanceof Tt||i instanceof Dt)t.mapping.maps[r].forEach((function(t,e,n,r){null==o&&(o=r)})),t.setSelection(Qt.near(t.doc.resolve(o),n))}}var ae=function(t){function e(e){t.call(this,e.doc),this.time=Date.now(),this.curSelection=e.selection,this.curSelectionFor=0,this.storedMarks=e.storedMarks,this.updated=0,this.meta=Object.create(null)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={selection:{configurable:!0},selectionSet:{configurable:!0},storedMarksSet:{configurable:!0},isGeneric:{configurable:!0},scrolledIntoView:{configurable:!0}};return n.selection.get=function(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection},e.prototype.setSelection=function(t){if(t.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=t,this.curSelectionFor=this.steps.length,this.updated=-3&(1|this.updated),this.storedMarks=null,this},n.selectionSet.get=function(){return(1&this.updated)>0},e.prototype.setStoredMarks=function(t){return this.storedMarks=t,this.updated|=2,this},e.prototype.ensureMarks=function(t){return f.sameSet(this.storedMarks||this.selection.$from.marks(),t)||this.setStoredMarks(t),this},e.prototype.addStoredMark=function(t){return this.ensureMarks(t.addToSet(this.storedMarks||this.selection.$head.marks()))},e.prototype.removeStoredMark=function(t){return this.ensureMarks(t.removeFromSet(this.storedMarks||this.selection.$head.marks()))},n.storedMarksSet.get=function(){return(2&this.updated)>0},e.prototype.addStep=function(e,n){t.prototype.addStep.call(this,e,n),this.updated=-3&this.updated,this.storedMarks=null},e.prototype.setTime=function(t){return this.time=t,this},e.prototype.replaceSelection=function(t){return this.selection.replace(this,t),this},e.prototype.replaceSelectionWith=function(t,e){var n=this.selection;return!1!==e&&(t=t.mark(this.storedMarks||(n.empty?n.$from.marks():n.$from.marksAcross(n.$to)||f.none))),n.replaceWith(this,t),this},e.prototype.deleteSelection=function(){return this.selection.replace(this),this},e.prototype.insertText=function(t,e,n){void 0===n&&(n=e);var r=this.doc.type.schema;if(null==e)return t?this.replaceSelectionWith(r.text(t),!0):this.deleteSelection();if(!t)return this.deleteRange(e,n);var o=this.storedMarks;if(!o){var i=this.doc.resolve(e);o=n==e?i.marks():i.marksAcross(this.doc.resolve(n))}return this.replaceRangeWith(e,n,r.text(t,o)),this.selection.empty||this.setSelection(Qt.near(this.selection.$to)),this},e.prototype.setMeta=function(t,e){return this.meta["string"==typeof t?t:t.key]=e,this},e.prototype.getMeta=function(t){return this.meta["string"==typeof t?t:t.key]},n.isGeneric.get=function(){for(var t in this.meta)return!1;return!0},e.prototype.scrollIntoView=function(){return this.updated|=4,this},n.scrolledIntoView.get=function(){return(4&this.updated)>0},Object.defineProperties(e.prototype,n),e}(kt);function ce(t,e){return e&&t?t.bind(e):t}var pe=function(t,e,n){this.name=t,this.init=ce(e.init,n),this.apply=ce(e.apply,n)},le=[new pe("doc",{init:function(t){return t.doc||t.schema.topNodeType.createAndFill()},apply:function(t){return t.doc}}),new pe("selection",{init:function(t,e){return t.selection||Qt.atStart(e.doc)},apply:function(t){return t.selection}}),new pe("storedMarks",{init:function(t){return t.storedMarks||null},apply:function(t,e,n,r){return r.selection.$cursor?t.storedMarks:null}}),new pe("scrollToSelection",{init:function(){return 0},apply:function(t,e){return t.scrolledIntoView?e+1:e}})],he=function(t,e){var n=this;this.schema=t,this.fields=le.concat(),this.plugins=[],this.pluginsByKey=Object.create(null),e&&e.forEach((function(t){if(n.pluginsByKey[t.key])throw new RangeError("Adding different instances of a keyed plugin ("+t.key+")");n.plugins.push(t),n.pluginsByKey[t.key]=t,t.spec.state&&n.fields.push(new pe(t.key,t.spec.state,t))}))},fe=function(t){this.config=t},ue={schema:{configurable:!0},plugins:{configurable:!0},tr:{configurable:!0}};ue.schema.get=function(){return this.config.schema},ue.plugins.get=function(){return this.config.plugins},fe.prototype.apply=function(t){return this.applyTransaction(t).state},fe.prototype.filterTransaction=function(t,e){void 0===e&&(e=-1);for(var n=0;n<this.config.plugins.length;n++)if(n!=e){var r=this.config.plugins[n];if(r.spec.filterTransaction&&!r.spec.filterTransaction.call(r,t,this))return!1}return!0},fe.prototype.applyTransaction=function(t){if(!this.filterTransaction(t))return{state:this,transactions:[]};for(var e=[t],n=this.applyInner(t),r=null;;){for(var o=!1,i=0;i<this.config.plugins.length;i++){var s=this.config.plugins[i];if(s.spec.appendTransaction){var a=r?r[i].n:0,c=r?r[i].state:this,p=a<e.length&&s.spec.appendTransaction.call(s,a?e.slice(a):e,c,n);if(p&&n.filterTransaction(p,i)){if(p.setMeta("appendedTransaction",t),!r){r=[];for(var l=0;l<this.config.plugins.length;l++)r.push(l<i?{state:n,n:e.length}:{state:this,n:0})}e.push(p),n=n.applyInner(p),o=!0}r&&(r[i]={state:n,n:e.length})}}if(!o)return{state:n,transactions:e}}},fe.prototype.applyInner=function(t){if(!t.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");for(var e=new fe(this.config),n=this.config.fields,r=0;r<n.length;r++){var o=n[r];e[o.name]=o.apply(t,this[o.name],this,e)}for(var i=0;i<de.length;i++)de[i](this,t,e);return e},ue.tr.get=function(){return new ae(this)},fe.create=function(t){for(var e=new he(t.schema||t.doc.type.schema,t.plugins),n=new fe(e),r=0;r<e.fields.length;r++)n[e.fields[r].name]=e.fields[r].init(t,n);return n},fe.prototype.reconfigure=function(t){for(var e=new he(t.schema||this.schema,t.plugins),n=e.fields,r=new fe(e),o=0;o<n.length;o++){var i=n[o].name;r[i]=this.hasOwnProperty(i)?this[i]:n[o].init(t,r)}return r},fe.prototype.toJSON=function(t){var e={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(e.storedMarks=this.storedMarks.map((function(t){return t.toJSON()}))),t&&"object"==typeof t)for(var n in t){if("doc"==n||"selection"==n)throw new RangeError("The JSON fields `doc` and `selection` are reserved");var r=t[n],o=r.spec.state;o&&o.toJSON&&(e[n]=o.toJSON.call(r,this[r.key]))}return e},fe.fromJSON=function(t,e,n){if(!e)throw new RangeError("Invalid input for EditorState.fromJSON");if(!t.schema)throw new RangeError("Required config field 'schema' missing");var r=new he(t.schema,t.plugins),o=new fe(r);return r.fields.forEach((function(r){if("doc"==r.name)o.doc=A.fromJSON(t.schema,e.doc);else if("selection"==r.name)o.selection=Qt.fromJSON(o.doc,e.selection);else if("storedMarks"==r.name)e.storedMarks&&(o.storedMarks=e.storedMarks.map(t.schema.markFromJSON));else{if(n)for(var i in n){var s=n[i],a=s.spec.state;if(s.key==r.name&&a&&a.fromJSON&&Object.prototype.hasOwnProperty.call(e,i))return void(o[r.name]=a.fromJSON.call(s,t,e[i],o))}o[r.name]=r.init(t,o)}})),o},fe.addApplyListener=function(t){de.push(t)},fe.removeApplyListener=function(t){var e=de.indexOf(t);e>-1&&de.splice(e,1)},Object.defineProperties(fe.prototype,ue);var de=[];var me=function(t){this.props={},t.props&&function t(e,n,r){for(var o in e){var i=e[o];i instanceof Function?i=i.bind(n):"handleDOMEvents"==o&&(i=t(i,n,{})),r[o]=i}return r}(t.props,this,this.props),this.spec=t,this.key=t.key?t.key.key:ge("plugin")};me.prototype.getState=function(t){return t[this.key]};var ve=Object.create(null);function ge(t){return t in ve?t+"$"+ ++ve[t]:(ve[t]=0,t+"$")}var ye=function(t){void 0===t&&(t="key"),this.key=ge(t)};ye.prototype.get=function(t){return t.config.pluginsByKey[this.key]},ye.prototype.getState=function(t){return t[this.key]};var we={};if("undefined"!=typeof navigator&&"undefined"!=typeof document){var be=/Edge\/(\d+)/.exec(navigator.userAgent),xe=/MSIE \d/.test(navigator.userAgent),ke=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);we.mac=/Mac/.test(navigator.platform);var Se=we.ie=!!(xe||ke||be);we.ie_version=xe?document.documentMode||6:ke?+ke[1]:be?+be[1]:null,we.gecko=!Se&&/gecko\/(\d+)/i.test(navigator.userAgent),we.gecko_version=we.gecko&&+(/Firefox\/(\d+)/.exec(navigator.userAgent)||[0,0])[1];var Me=!Se&&/Chrome\/(\d+)/.exec(navigator.userAgent);we.chrome=!!Me,we.chrome_version=Me&&+Me[1],we.ios=!Se&&/AppleWebKit/.test(navigator.userAgent)&&/Mobile\/\w+/.test(navigator.userAgent),we.android=/Android \d/.test(navigator.userAgent),we.webkit=!Se&&"WebkitAppearance"in document.documentElement.style,we.safari=/Apple Computer/.test(navigator.vendor),we.webkit_version=we.webkit&&+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]}var Oe=function(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e},Ce=function(t){var e=t.parentNode;return e&&11==e.nodeType?e.host:e},Ne=function(t,e,n){var r=document.createRange();return r.setEnd(t,null==n?t.nodeValue.length:n),r.setStart(t,e||0),r},Te=function(t,e,n,r){return n&&(Ee(t,e,n,r,-1)||Ee(t,e,n,r,1))},De=/^(img|br|input|textarea|hr)$/i;function Ee(t,e,n,r,o){for(;;){if(t==n&&e==r)return!0;if(e==(o<0?0:Ae(t))){var i=t.parentNode;if(1!=i.nodeType||Ie(t)||De.test(t.nodeName)||"false"==t.contentEditable)return!1;e=Oe(t)+(o<0?0:1),t=i}else{if(1!=t.nodeType)return!1;if("false"==(t=t.childNodes[e+(o<0?-1:0)]).contentEditable)return!1;e=o<0?Ae(t):0}}}function Ae(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Ie(t){for(var e,n=t;n&&!(e=n.pmViewDesc);n=n.parentNode);return e&&e.node&&e.node.isBlock&&(e.dom==t||e.contentDOM==t)}var Re=function(t){var e=t.isCollapsed;return e&&we.chrome&&t.rangeCount&&!t.getRangeAt(0).collapsed&&(e=!1),e};function Pe(t,e){var n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=t,n.key=n.code=e,n}function ze(t){return{left:0,right:t.innerWidth,top:0,bottom:t.innerHeight}}function Be(t,e){return"number"==typeof t?t:t[e]}function Fe(t,e,n){for(var r=t.someProp("scrollThreshold")||0,o=t.someProp("scrollMargin")||5,i=t.dom.ownerDocument,s=i.defaultView,a=n||t.dom;a;a=Ce(a))if(1==a.nodeType){var c=a==i.body||1!=a.nodeType,p=c?ze(s):a.getBoundingClientRect(),l=0,h=0;if(e.top<p.top+Be(r,"top")?h=-(p.top-e.top+Be(o,"top")):e.bottom>p.bottom-Be(r,"bottom")&&(h=e.bottom-p.bottom+Be(o,"bottom")),e.left<p.left+Be(r,"left")?l=-(p.left-e.left+Be(o,"left")):e.right>p.right-Be(r,"right")&&(l=e.right-p.right+Be(o,"right")),(l||h)&&(c?s.scrollBy(l,h):(h&&(a.scrollTop+=h),l&&(a.scrollLeft+=l),e={left:e.left-l,top:e.top-h,right:e.right-l,bottom:e.bottom-h})),c)break}}function Ve(t){for(var e=[],n=t.ownerDocument;t&&(e.push({dom:t,top:t.scrollTop,left:t.scrollLeft}),t!=n);t=Ce(t));return e}function _e(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=r.dom,i=r.top,s=r.left;o.scrollTop!=i+e&&(o.scrollTop=i+e),o.scrollLeft!=s&&(o.scrollLeft=s)}}var $e=null;function je(t,e){for(var n,r,o=2e8,i=0,s=e.top,a=e.top,c=t.firstChild,p=0;c;c=c.nextSibling,p++){var l=void 0;if(1==c.nodeType)l=c.getClientRects();else{if(3!=c.nodeType)continue;l=Ne(c).getClientRects()}for(var h=0;h<l.length;h++){var f=l[h];if(f.top<=s&&f.bottom>=a){s=Math.max(f.bottom,s),a=Math.min(f.top,a);var u=f.left>e.left?f.left-e.left:f.right<e.left?e.left-f.right:0;if(u<o){n=c,o=u,r=u&&3==n.nodeType?{left:f.right<e.left?f.right:f.left,top:e.top}:e,1==c.nodeType&&u&&(i=p+(e.left>=(f.left+f.right)/2?1:0));continue}}!n&&(e.left>=f.right&&e.top>=f.top||e.left>=f.left&&e.top>=f.bottom)&&(i=p+1)}}return n&&3==n.nodeType?function(t,e){for(var n=t.nodeValue.length,r=document.createRange(),o=0;o<n;o++){r.setEnd(t,o+1),r.setStart(t,o);var i=qe(r,1);if(i.top!=i.bottom&&Le(e,i))return{node:t,offset:o+(e.left>=(i.left+i.right)/2?1:0)}}return{node:t,offset:0}}(n,r):!n||o&&1==n.nodeType?{node:t,offset:i}:je(n,r)}function Le(t,e){return t.left>=e.left-1&&t.left<=e.right+1&&t.top>=e.top-1&&t.top<=e.bottom+1}function Je(t,e){var n,r,o,i,s=t.root;if(s.caretPositionFromPoint)try{var a=s.caretPositionFromPoint(e.left,e.top);a&&(o=(n=a).offsetNode,i=n.offset)}catch(t){}if(!o&&s.caretRangeFromPoint){var c=s.caretRangeFromPoint(e.left,e.top);c&&(o=(r=c).startContainer,i=r.startOffset)}var p,l=s.elementFromPoint(e.left,e.top+1);if(!l||!t.dom.contains(1!=l.nodeType?l.parentNode:l)){var h=t.dom.getBoundingClientRect();if(!Le(e,h))return null;if(!(l=function t(e,n,r){var o=e.childNodes.length;if(o&&r.top<r.bottom)for(var i=Math.max(0,Math.min(o-1,Math.floor(o*(n.top-r.top)/(r.bottom-r.top))-2)),s=i;;){var a=e.childNodes[s];if(1==a.nodeType)for(var c=a.getClientRects(),p=0;p<c.length;p++){var l=c[p];if(Le(n,l))return t(a,n,l)}if((s=(s+1)%o)==i)break}return e}(t.dom,e,h)))return null}if(l=function(t,e){var n=t.parentNode;return n&&/^li$/i.test(n.nodeName)&&e.left<t.getBoundingClientRect().left?n:t}(l,e),o){if(we.gecko&&1==o.nodeType&&(i=Math.min(i,o.childNodes.length))<o.childNodes.length){var f,u=o.childNodes[i];"IMG"==u.nodeName&&(f=u.getBoundingClientRect()).right<=e.left&&f.bottom>e.top&&i++}o==t.dom&&i==o.childNodes.length-1&&1==o.lastChild.nodeType&&e.top>o.lastChild.getBoundingClientRect().bottom?p=t.state.doc.content.size:0!=i&&1==o.nodeType&&"BR"==o.childNodes[i-1].nodeName||(p=function(t,e,n,r){for(var o=-1,i=e;i!=t.dom;){var s=t.docView.nearestDesc(i,!0);if(!s)return null;if(s.node.isBlock&&s.parent){var a=s.dom.getBoundingClientRect();if(a.left>r.left||a.top>r.top)o=s.posBefore;else{if(!(a.right<r.left||a.bottom<r.top))break;o=s.posAfter}}i=s.dom.parentNode}return o>-1?o:t.docView.posFromDOM(e,n)}(t,o,i,e))}null==p&&(p=function(t,e,n){var r=je(e,n),o=r.node,i=r.offset,s=-1;if(1==o.nodeType&&!o.firstChild){var a=o.getBoundingClientRect();s=a.left!=a.right&&n.left>(a.left+a.right)/2?1:-1}return t.docView.posFromDOM(o,i,s)}(t,l,e));var d=t.docView.nearestDesc(l,!0);return{pos:p,inside:d?d.posAtStart-d.border:-1}}function qe(t,e){var n=t.getClientRects();return n.length?n[e<0?0:n.length-1]:t.getBoundingClientRect()}function We(t,e){var n=t.docView.domFromPos(e),r=n.node,o=n.offset;if(3==r.nodeType&&(we.chrome||we.gecko)){var i=qe(Ne(r,o,o),0);if(we.gecko&&o&&/\s/.test(r.nodeValue[o-1])&&o<r.nodeValue.length){var s=qe(Ne(r,o-1,o-1),-1);if(Math.abs(s.left-i.left)<1&&s.top==i.top){var a=qe(Ne(r,o,o+1),-1);return Ke(a,a.left<s.left)}}return i}if(1==r.nodeType&&!t.state.doc.resolve(e).parent.inlineContent){var c,p=!0;if(o<r.childNodes.length){var l=r.childNodes[o];1==l.nodeType&&(c=l.getBoundingClientRect())}if(!c&&o){var h=r.childNodes[o-1];1==h.nodeType&&(c=h.getBoundingClientRect(),p=!1)}return function(t,e){if(0==t.height)return t;var n=e?t.top:t.bottom;return{top:n,bottom:n,left:t.left,right:t.right}}(c||r.getBoundingClientRect(),p)}for(var f=-1;f<2;f+=2)if(f<0&&o){var u=void 0,d=3==r.nodeType?Ne(r,o-1,o):3==(u=r.childNodes[o-1]).nodeType?Ne(u):1==u.nodeType&&"BR"!=u.nodeName?u:null;if(d){var m=qe(d,1);if(m.top<m.bottom)return Ke(m,!1)}}else if(f>0&&o<Ae(r)){var v=void 0,g=3==r.nodeType?Ne(r,o,o+1):3==(v=r.childNodes[o]).nodeType?Ne(v):1==v.nodeType?v:null;if(g){var y=qe(g,-1);if(y.top<y.bottom)return Ke(y,!0)}}return Ke(qe(3==r.nodeType?Ne(r):r,0),!1)}function Ke(t,e){if(0==t.width)return t;var n=e?t.left:t.right;return{top:t.top,bottom:t.bottom,left:n,right:n}}function Ue(t,e,n){var r=t.state,o=t.root.activeElement;r!=e&&t.updateState(e),o!=t.dom&&t.focus();try{return n()}finally{r!=e&&t.updateState(r),o!=t.dom&&o.focus()}}var He=/[\u0590-\u08ac]/;var Ge=null,Qe=null,Xe=!1;function Ye(t,e,n){return Ge==e&&Qe==n?Xe:(Ge=e,Qe=n,Xe="up"==n||"down"==n?function(t,e,n){var r=e.selection,o="up"==n?r.$anchor.min(r.$head):r.$anchor.max(r.$head);return Ue(t,e,(function(){for(var e=t.docView.domFromPos(o.pos).node;;){var r=t.docView.nearestDesc(e,!0);if(!r)break;if(r.node.isBlock){e=r.dom;break}e=r.dom.parentNode}for(var i=We(t,o.pos),s=e.firstChild;s;s=s.nextSibling){var a=void 0;if(1==s.nodeType)a=s.getClientRects();else{if(3!=s.nodeType)continue;a=Ne(s,0,s.nodeValue.length).getClientRects()}for(var c=0;c<a.length;c++){var p=a[c];if(p.bottom>p.top&&("up"==n?p.bottom<i.top+1:p.top>i.bottom-1))return!1}}return!0}))}(t,e,n):function(t,e,n){var r=e.selection.$head;if(!r.parent.isTextblock)return!1;var o=r.parentOffset,i=!o,s=o==r.parent.content.size,a=getSelection();return He.test(r.parent.textContent)&&a.modify?Ue(t,e,(function(){var e=a.getRangeAt(0),o=a.focusNode,i=a.focusOffset,s=a.caretBidiLevel;a.modify("move",n,"character");var c=!(r.depth?t.docView.domAfterPos(r.before()):t.dom).contains(1==a.focusNode.nodeType?a.focusNode:a.focusNode.parentNode)||o==a.focusNode&&i==a.focusOffset;return a.removeAllRanges(),a.addRange(e),null!=s&&(a.caretBidiLevel=s),c})):"left"==n||"backward"==n?i:s}(t,e,n))}var Ze=function(t,e,n,r){this.parent=t,this.children=e,this.dom=n,n.pmViewDesc=this,this.contentDOM=r,this.dirty=0},tn={beforePosition:{configurable:!0},size:{configurable:!0},border:{configurable:!0},posBefore:{configurable:!0},posAtStart:{configurable:!0},posAfter:{configurable:!0},posAtEnd:{configurable:!0},contentLost:{configurable:!0}};Ze.prototype.matchesWidget=function(){return!1},Ze.prototype.matchesMark=function(){return!1},Ze.prototype.matchesNode=function(){return!1},Ze.prototype.matchesHack=function(){return!1},tn.beforePosition.get=function(){return!1},Ze.prototype.parseRule=function(){return null},Ze.prototype.stopEvent=function(){return!1},tn.size.get=function(){for(var t=0,e=0;e<this.children.length;e++)t+=this.children[e].size;return t},tn.border.get=function(){return 0},Ze.prototype.destroy=function(){this.parent=null,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=null);for(var t=0;t<this.children.length;t++)this.children[t].destroy()},Ze.prototype.posBeforeChild=function(t){for(var e=0,n=this.posAtStart;e<this.children.length;e++){var r=this.children[e];if(r==t)return n;n+=r.size}},tn.posBefore.get=function(){return this.parent.posBeforeChild(this)},tn.posAtStart.get=function(){return this.parent?this.parent.posBeforeChild(this)+this.border:0},tn.posAfter.get=function(){return this.posBefore+this.size},tn.posAtEnd.get=function(){return this.posAtStart+this.size-2*this.border},Ze.prototype.localPosFromDOM=function(t,e,n){if(this.contentDOM&&this.contentDOM.contains(1==t.nodeType?t:t.parentNode)){if(n<0){var r,o;if(t==this.contentDOM)r=t.childNodes[e-1];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;r=t.previousSibling}for(;r&&(!(o=r.pmViewDesc)||o.parent!=this);)r=r.previousSibling;return r?this.posBeforeChild(o)+o.size:this.posAtStart}var i,s;if(t==this.contentDOM)i=t.childNodes[e];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;i=t.nextSibling}for(;i&&(!(s=i.pmViewDesc)||s.parent!=this);)i=i.nextSibling;return i?this.posBeforeChild(s):this.posAtEnd}var a;if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))a=2&t.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==e)for(var c=t;;c=c.parentNode){if(c==this.dom){a=!1;break}if(c.parentNode.firstChild!=c)break}if(null==a&&e==t.childNodes.length)for(var p=t;;p=p.parentNode){if(p==this.dom){a=!0;break}if(p.parentNode.lastChild!=p)break}}return(null==a?n>0:a)?this.posAtEnd:this.posAtStart},Ze.prototype.nearestDesc=function(t,e){for(var n=!0,r=t;r;r=r.parentNode){var o=this.getDesc(r);if(o&&(!e||o.node)){if(!n||!o.nodeDOM||(1==o.nodeDOM.nodeType?o.nodeDOM.contains(t):o.nodeDOM==t))return o;n=!1}}},Ze.prototype.getDesc=function(t){for(var e=t.pmViewDesc,n=e;n;n=n.parent)if(n==this)return e},Ze.prototype.posFromDOM=function(t,e,n){for(var r=t;;r=r.parentNode){var o=this.getDesc(r);if(o)return o.localPosFromDOM(t,e,n)}},Ze.prototype.descAt=function(t){for(var e=0,n=0;e<this.children.length;e++){var r=this.children[e],o=n+r.size;if(n==t&&o!=n){for(;!r.border&&r.children.length;)r=r.children[0];return r}if(t<o)return r.descAt(t-n-r.border);n=o}},Ze.prototype.domFromPos=function(t){if(!this.contentDOM)return{node:this.dom,offset:0};for(var e=0,n=0;;n++){if(e==t){for(;n<this.children.length&&(this.children[n].beforePosition||this.children[n].dom.parentNode!=this.contentDOM);)n++;return{node:this.contentDOM,offset:n==this.children.length?this.contentDOM.childNodes.length:Oe(this.children[n].dom)}}if(n==this.children.length)throw new Error("Invalid position "+t);var r=this.children[n],o=e+r.size;if(t<o)return r.domFromPos(t-e-r.border);e=o}},Ze.prototype.parseRange=function(t,e,n){if(void 0===n&&(n=0),0==this.children.length)return{node:this.contentDOM,from:t,to:e,fromOffset:0,toOffset:this.contentDOM.childNodes.length};for(var r=-1,o=-1,i=n,s=0;;s++){var a=this.children[s],c=i+a.size;if(-1==r&&t<=c){var p=i+a.border;if(t>=p&&e<=c-a.border&&a.node&&a.contentDOM&&this.contentDOM.contains(a.contentDOM))return a.parseRange(t,e,p);t=i;for(var l=s;l>0;l--){var h=this.children[l-1];if(h.size&&h.dom.parentNode==this.contentDOM&&!h.emptyChildAt(1)){r=Oe(h.dom)+1;break}t-=h.size}-1==r&&(r=0)}if(r>-1&&e<=c){e=c;for(var f=s+1;f<this.children.length;f++){var u=this.children[f];if(u.size&&u.dom.parentNode==this.contentDOM&&!u.emptyChildAt(-1)){o=Oe(u.dom);break}e+=u.size}-1==o&&(o=this.contentDOM.childNodes.length);break}i=c}return{node:this.contentDOM,from:t,to:e,fromOffset:r,toOffset:o}},Ze.prototype.emptyChildAt=function(t){if(this.border||!this.contentDOM||!this.children.length)return!1;var e=this.children[t<0?0:this.children.length-1];return 0==e.size||e.emptyChildAt(t)},Ze.prototype.domAfterPos=function(t){var e=this.domFromPos(t),n=e.node,r=e.offset;if(1!=n.nodeType||r==n.childNodes.length)throw new RangeError("No node after pos "+t);return n.childNodes[r]},Ze.prototype.setSelection=function(t,e,n,r){for(var o=Math.min(t,e),i=Math.max(t,e),s=0,a=0;s<this.children.length;s++){var c=this.children[s],p=a+c.size;if(o>a&&i<p)return c.setSelection(t-a-c.border,e-a-c.border,n,r);a=p}var l=this.domFromPos(t),h=this.domFromPos(e),f=n.getSelection(),u=document.createRange();if(r||!Te(l.node,l.offset,f.anchorNode,f.anchorOffset)||!Te(h.node,h.offset,f.focusNode,f.focusOffset)){if(f.extend)u.setEnd(l.node,l.offset),u.collapse(!1);else{if(t>e){var d=l;l=h,h=d}u.setEnd(h.node,h.offset),u.setStart(l.node,l.offset)}f.removeAllRanges(),f.addRange(u),f.extend&&f.extend(h.node,h.offset)}},Ze.prototype.ignoreMutation=function(t){return!this.contentDOM&&"selection"!=t.type},tn.contentLost.get=function(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)},Ze.prototype.markDirty=function(t,e){for(var n=0,r=0;r<this.children.length;r++){var o=this.children[r],i=n+o.size;if(n==i?t<=i&&e>=n:t<i&&e>n){var s=n+o.border,a=i-o.border;if(t>=s&&e<=a)return this.dirty=t==n||e==i?2:1,void(t!=s||e!=a||!o.contentLost&&o.dom.parentNode==this.contentDOM?o.markDirty(t-s,e-s):o.dirty=3);o.dirty=3}n=i}this.dirty=2},Ze.prototype.markParentsDirty=function(){for(var t=this.parent;t;t=t.parent){t.dirty<2&&(t.dirty=2)}},Object.defineProperties(Ze.prototype,tn);var en=[],nn=function(t){function e(e,n,r,o){var i,s=n.type.toDOM;if("function"==typeof s&&(s=s(r,(function(){return i?i.parent?i.parent.posBeforeChild(i):void 0:o}))),!n.type.spec.raw){if(1!=s.nodeType){var a=document.createElement("span");a.appendChild(s),s=a}s.contentEditable=!1,s.classList.add("ProseMirror-widget")}t.call(this,e,en,s,null),this.widget=n,i=this}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={beforePosition:{configurable:!0}};return n.beforePosition.get=function(){return this.widget.type.side<0},e.prototype.matchesWidget=function(t){return 0==this.dirty&&t.type.eq(this.widget.type)},e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.stopEvent=function(t){var e=this.widget.spec.stopEvent;return!!e&&e(t)},e.prototype.ignoreMutation=function(t){return"selection"!=t.type||this.widget.spec.ignoreSelection},Object.defineProperties(e.prototype,n),e}(Ze),rn=function(t){function e(e,n,r,o){t.call(this,e,en,n,null),this.textDOM=r,this.text=o}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0}};return n.size.get=function(){return this.text.length},e.prototype.localPosFromDOM=function(t,e){return t!=this.textDOM?this.posAtStart+(e?this.size:0):this.posAtStart+e},e.prototype.domFromPos=function(t){return{node:this.textDOM,offset:t}},e.prototype.ignoreMutation=function(t){return"characterData"===t.type&&t.target.nodeValue==t.oldValue},Object.defineProperties(e.prototype,n),e}(Ze),on=function(t){function e(e,n,r,o){t.call(this,e,[],r,o),this.mark=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.create=function(t,n,r,o){var i=o.nodeViews[n.type.name],s=i&&i(n,o,r);return s&&s.dom||(s=ut.renderSpec(document,n.type.spec.toDOM(n,r))),new e(t,n,s.dom,s.contentDOM||s.dom)},e.prototype.parseRule=function(){return{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM}},e.prototype.matchesMark=function(t){return 3!=this.dirty&&this.mark.eq(t)},e.prototype.markDirty=function(e,n){if(t.prototype.markDirty.call(this,e,n),0!=this.dirty){for(var r=this.parent;!r.node;)r=r.parent;r.dirty<this.dirty&&(r.dirty=this.dirty),this.dirty=0}},e.prototype.slice=function(t,n,r){var o=e.create(this.parent,this.mark,!0,r),i=this.children,s=this.size;n<s&&(i=xn(i,n,s,r)),t>0&&(i=xn(i,0,t,r));for(var a=0;a<i.length;a++)i[a].parent=o;return o.children=i,o},e}(Ze),sn=function(t){function e(e,n,r,o,i,s,a,c,p){t.call(this,e,n.isLeaf?en:[],i,s),this.nodeDOM=a,this.node=n,this.outerDeco=r,this.innerDeco=o,s&&this.updateChildren(c,p)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0},border:{configurable:!0}};return e.create=function(t,n,r,o,i,s){var a,c,p=i.nodeViews[n.type.name],l=p&&p(n,i,(function(){return c?c.parent?c.parent.posBeforeChild(c):void 0:s}),r),h=l&&l.dom,f=l&&l.contentDOM;if(n.isText)if(h){if(3!=h.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else h=document.createTextNode(n.text);else h||(h=(a=ut.renderSpec(document,n.type.spec.toDOM(n))).dom,f=a.contentDOM);f||n.isText||"BR"==h.nodeName||(h.hasAttribute("contenteditable")||(h.contentEditable=!1),n.type.spec.draggable&&(h.draggable=!0));var u=h;return h=vn(h,r,n),l?c=new ln(t,n,r,o,h,f,u,l,i,s+1):n.isText?new cn(t,n,r,o,h,u,i):new e(t,n,r,o,h,f,u,i,s+1)},e.prototype.parseRule=function(){var t=this;if(this.node.type.spec.reparseInView)return null;var e={node:this.node.type.name,attrs:this.node.attrs};return this.node.type.spec.code&&(e.preserveWhitespace="full"),this.contentDOM&&!this.contentLost?e.contentElement=this.contentDOM:e.getContent=function(){return t.contentDOM?a.empty:t.node.content},e},e.prototype.matchesNode=function(t,e,n){return 0==this.dirty&&t.eq(this.node)&&gn(e,this.outerDeco)&&n.eq(this.innerDeco)},n.size.get=function(){return this.node.nodeSize},n.border.get=function(){return this.node.isLeaf?0:1},e.prototype.updateChildren=function(t,e){var n=this,r=this.node.inlineContent,o=e,i=r&&t.composing&&this.localCompositionNode(t,e),s=new wn(this,i&&i.node);!function(t,e,n,r){var o=e.locals(t),i=0;if(0==o.length){for(var s=0;s<t.childCount;s++){var a=t.child(s);r(a,o,e.forChild(i,a),s),i+=a.nodeSize}return}for(var c=0,p=[],l=null,h=0;;){if(c<o.length&&o[c].to==i){for(var f=o[c++],u=void 0;c<o.length&&o[c].to==i;)(u||(u=[f])).push(o[c++]);if(u){u.sort(bn);for(var d=0;d<u.length;d++)n(u[d],h,!!l)}else n(f,h,!!l)}var m=void 0,v=void 0;if(l)v=-1,m=l,l=null;else{if(!(h<t.childCount))break;v=h,m=t.child(h++)}for(var g=0;g<p.length;g++)p[g].to<=i&&p.splice(g--,1);for(;c<o.length&&o[c].from==i;)p.push(o[c++]);var y=i+m.nodeSize;if(m.isText){var w=y;c<o.length&&o[c].from<w&&(w=o[c].from);for(var b=0;b<p.length;b++)p[b].to<w&&(w=p[b].to);w<y&&(l=m.cut(w-i),m=m.cut(0,w-i),y=w,v=-1)}r(m,p.length?p.slice():en,e.forChild(i,m),v),i=y}}(this.node,this.innerDeco,(function(e,i,a){e.spec.marks?s.syncToMarks(e.spec.marks,r,t):e.type.side>=0&&!a&&s.syncToMarks(i==n.node.childCount?f.none:n.node.child(i).marks,r,t),s.placeWidget(e,t,o)}),(function(e,n,i,a){s.syncToMarks(e.marks,r,t),s.findNodeMatch(e,n,i,a)||s.updateNextNode(e,n,i,t,a)||s.addNode(e,n,i,t,o),o+=e.nodeSize})),s.syncToMarks(en,r,t),this.node.isTextblock&&s.addTextblockHacks(),s.destroyRest(),(s.changed||2==this.dirty)&&(i&&this.protectLocalComposition(t,i),this.renderChildren())},e.prototype.renderChildren=function(){!function t(e,n){for(var r=e.firstChild,o=0;o<n.length;o++){var i=n[o],s=i.dom;if(s.parentNode==e){for(;s!=r;)r=yn(r);r=r.nextSibling}else e.insertBefore(s,r);if(i instanceof on){var a=r?r.previousSibling:e.lastChild;t(i.contentDOM,i.children),r=a?a.nextSibling:e.firstChild}}for(;r;)r=yn(r)}(this.contentDOM,this.children),we.ios&&function(t){if("UL"==t.nodeName||"OL"==t.nodeName){var e=t.style.cssText;t.style.cssText=e+"; list-style: square !important",window.getComputedStyle(t).listStyle,t.style.cssText=e}}(this.dom)},e.prototype.localCompositionNode=function(t,e){var n=t.state.selection,r=n.from,o=n.to;if(!(!(t.state.selection instanceof Zt)||r<e||o>e+this.node.content.size)){var i=t.root.getSelection(),s=function(t,e){for(;;){if(3==t.nodeType)return t;if(1==t.nodeType&&e>0){if(t.childNodes.length>e&&3==t.childNodes[e].nodeType)return t.childNodes[e];t=t.childNodes[e-1],e=Ae(t)}else{if(!(1==t.nodeType&&e<t.childNodes.length))return null;t=t.childNodes[e],e=0}}}(i.focusNode,i.focusOffset);if(s&&this.dom.contains(s.parentNode)){var a=s.nodeValue,c=function(t,e,n,r){for(var o=0,i=0;o<t.childCount&&i<=r;){var s=t.child(o++),a=i;if(i+=s.nodeSize,s.isText){for(var c=s.text;o<t.childCount;){var p=t.child(o++);if(i+=p.nodeSize,!p.isText)break;c+=p.text}if(i>=n){var l=c.lastIndexOf(e,r-a);if(l>=0&&l+e.length+a>=n)return a+l}}}return-1}(this.node.content,a,r-e,o-e);return c<0?null:{node:s,pos:c,text:a}}}},e.prototype.protectLocalComposition=function(t,e){var n=e.node,r=e.pos,o=e.text;if(!this.getDesc(n)){for(var i=n;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=null)}var s=new rn(this,i,n,o);t.compositionNodes.push(s),this.children=xn(this.children,r,r+o.length,t,s)}},e.prototype.update=function(t,e,n,r){return!(3==this.dirty||!t.sameMarkup(this.node))&&(this.updateInner(t,e,n,r),!0)},e.prototype.updateInner=function(t,e,n,r){this.updateOuterDeco(e),this.node=t,this.innerDeco=n,this.contentDOM&&this.updateChildren(r,this.posAtStart),this.dirty=0},e.prototype.updateOuterDeco=function(t){if(!gn(t,this.outerDeco)){var e=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=dn(this.dom,this.nodeDOM,un(this.outerDeco,this.node,e),un(t,this.node,e)),this.dom!=n&&(n.pmViewDesc=null,this.dom.pmViewDesc=this),this.outerDeco=t}},e.prototype.selectNode=function(){this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)},e.prototype.deselectNode=function(){this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!1)},Object.defineProperties(e.prototype,n),e}(Ze);function an(t,e,n,r,o){return vn(r,e,t),new sn(null,t,e,n,r,r,r,o,0)}var cn=function(t){function e(e,n,r,o,i,s,a){t.call(this,e,n,r,o,i,null,s,a)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parseRule=function(){return{skip:this.nodeDOM.parentNode||!0}},e.prototype.update=function(t,e){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!t.sameMarkup(this.node))&&(this.updateOuterDeco(e),0==this.dirty&&t.text==this.node.text||t.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=t.text),this.node=t,this.dirty=0,!0)},e.prototype.inParent=function(){for(var t=this.parent.contentDOM,e=this.nodeDOM;e;e=e.parentNode)if(e==t)return!0;return!1},e.prototype.domFromPos=function(t){return{node:this.nodeDOM,offset:t}},e.prototype.localPosFromDOM=function(e,n,r){return e==this.nodeDOM?this.posAtStart+Math.min(n,this.node.text.length):t.prototype.localPosFromDOM.call(this,e,n,r)},e.prototype.ignoreMutation=function(t){return"characterData"!=t.type&&"selection"!=t.type},e.prototype.slice=function(t,n,r){var o=this.node.cut(t,n),i=document.createTextNode(o.text);return new e(this.parent,o,this.outerDeco,this.innerDeco,i,i,r)},e}(sn),pn=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.matchesHack=function(){return 0==this.dirty},e}(Ze),ln=function(t){function e(e,n,r,o,i,s,a,c,p,l){t.call(this,e,n,r,o,i,s,a,p,l),this.spec=c}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.update=function(e,n,r,o){if(3==this.dirty)return!1;if(this.spec.update){var i=this.spec.update(e,n);return i&&this.updateInner(e,n,r,o),i}return!(!this.contentDOM&&!e.isLeaf)&&t.prototype.update.call(this,e,n,r,o)},e.prototype.selectNode=function(){this.spec.selectNode?this.spec.selectNode():t.prototype.selectNode.call(this)},e.prototype.deselectNode=function(){this.spec.deselectNode?this.spec.deselectNode():t.prototype.deselectNode.call(this)},e.prototype.setSelection=function(e,n,r,o){this.spec.setSelection?this.spec.setSelection(e,n,r):t.prototype.setSelection.call(this,e,n,r,o)},e.prototype.destroy=function(){this.spec.destroy&&this.spec.destroy(),t.prototype.destroy.call(this)},e.prototype.stopEvent=function(t){return!!this.spec.stopEvent&&this.spec.stopEvent(t)},e.prototype.ignoreMutation=function(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):t.prototype.ignoreMutation.call(this,e)},e}(sn);function hn(t){t&&(this.nodeName=t)}hn.prototype=Object.create(null);var fn=[new hn];function un(t,e,n){if(0==t.length)return fn;for(var r=n?fn[0]:new hn,o=[r],i=0;i<t.length;i++){var s=t[i].type.attrs,a=r;if(s)for(var c in s.nodeName&&o.push(a=new hn(s.nodeName)),s){var p=s[c];null!=p&&(n&&1==o.length&&o.push(a=r=new hn(e.isInline?"span":"div")),"class"==c?a.class=(a.class?a.class+" ":"")+p:"style"==c?a.style=(a.style?a.style+";":"")+p:"nodeName"!=c&&(a[c]=p))}}return o}function dn(t,e,n,r){if(n==fn&&r==fn)return e;for(var o=e,i=0;i<r.length;i++){var s=r[i],a=n[i];if(i){var c=void 0;a&&a.nodeName==s.nodeName&&o!=t&&(c=o.parentNode)&&c.tagName.toLowerCase()==s.nodeName?o=c:((c=document.createElement(s.nodeName)).appendChild(o),a=fn[0],o=c)}mn(o,a||fn[0],s)}return o}function mn(t,e,n){for(var r in e)"class"==r||"style"==r||"nodeName"==r||r in n||t.removeAttribute(r);for(var o in n)"class"!=o&&"style"!=o&&"nodeName"!=o&&n[o]!=e[o]&&t.setAttribute(o,n[o]);if(e.class!=n.class){for(var i=e.class?e.class.split(" "):en,s=n.class?n.class.split(" "):en,a=0;a<i.length;a++)-1==s.indexOf(i[a])&&t.classList.remove(i[a]);for(var c=0;c<s.length;c++)-1==i.indexOf(s[c])&&t.classList.add(s[c])}if(e.style!=n.style){if(e.style)for(var p,l=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;p=l.exec(e.style);)t.style.removeProperty(p[1]);n.style&&(t.style.cssText+=n.style)}}function vn(t,e,n){return dn(t,t,fn,un(e,n,1!=t.nodeType))}function gn(t,e){if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].type.eq(e[n].type))return!1;return!0}function yn(t){var e=t.nextSibling;return t.parentNode.removeChild(t),e}var wn=function(t,e){this.top=t,this.lock=e,this.index=0,this.stack=[],this.changed=!1;var n=function(t,e){for(var n=[],r=t.childCount,o=e.length-1;r>0&&o>=0;o--){var i=e[o],s=i.node;if(s){if(s!=t.child(r-1))break;n.push(i),--r}}return{nodes:n.reverse(),offset:r}}(t.node.content,t.children);this.preMatched=n.nodes,this.preMatchOffset=n.offset};function bn(t,e){return t.type.side-e.type.side}function xn(t,e,n,r,o){for(var i=[],s=0,a=0;s<t.length;s++){var c=t[s],p=a,l=a+=c.size;p>=n||l<=e?i.push(c):(p<e&&i.push(c.slice(0,e-p,r)),o&&(i.push(o),o=null),l>n&&i.push(c.slice(n-p,c.size,r)))}return i}function kn(t,e){var n=t.selection,r=n.$anchor,o=n.$head,i=e>0?r.max(o):r.min(o),s=i.parent.inlineContent?i.depth?t.doc.resolve(e>0?i.after():i.before()):null:i;return s&&Qt.findFrom(s,e)}function Sn(t,e){return t.dispatch(t.state.tr.setSelection(e).scrollIntoView()),!0}function Mn(t,e,n){var r=t.state.selection;if(r instanceof Zt){if(!r.empty||n.indexOf("s")>-1)return!1;if(t.endOfTextblock(e>0?"right":"left")){var o=kn(t.state,e);return!!(o&&o instanceof ee)&&Sn(t,o)}var i,s=r.$head,a=s.textOffset?null:e<0?s.nodeBefore:s.nodeAfter;if(!a||a.isText)return!1;var c=e<0?s.pos-a.nodeSize:s.pos;return!!(a.isAtom||(i=t.docView.descAt(c))&&!i.contentDOM)&&(ee.isSelectable(a)?Sn(t,new ee(e<0?t.state.doc.resolve(s.pos-a.nodeSize):s)):!!we.webkit&&Sn(t,new Zt(t.state.doc.resolve(e<0?c:c+a.nodeSize))))}if(r instanceof ee&&r.node.isInline)return Sn(t,new Zt(e>0?r.$to:r.$from));var p=kn(t.state,e);return!!p&&Sn(t,p)}function On(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Cn(t){var e=t.pmViewDesc;return e&&0==e.size&&(t.nextSibling||"BR"!=t.nodeName)}function Nn(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){var o,i,s=!1;for(we.gecko&&1==n.nodeType&&r<On(n)&&Cn(n.childNodes[r])&&(s=!0);;)if(r>0){if(1!=n.nodeType)break;var a=n.childNodes[r-1];if(Cn(a))o=n,i=--r;else{if(3!=a.nodeType)break;r=(n=a).nodeValue.length}}else{if(Dn(n))break;for(var c=n.previousSibling;c&&Cn(c);)o=n.parentNode,i=Oe(c),c=c.previousSibling;if(c)r=On(n=c);else{if((n=n.parentNode)==t.dom)break;r=0}}s?En(t,e,n,r):o&&En(t,e,o,i)}}function Tn(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){for(var o,i,s=On(n);;)if(r<s){if(1!=n.nodeType)break;if(!Cn(n.childNodes[r]))break;o=n,i=++r}else{if(Dn(n))break;for(var a=n.nextSibling;a&&Cn(a);)o=a.parentNode,i=Oe(a)+1,a=a.nextSibling;if(a)r=0,s=On(n=a);else{if((n=n.parentNode)==t.dom)break;r=s=0}}o&&En(t,e,o,i)}}function Dn(t){var e=t.pmViewDesc;return e&&e.node&&e.node.isBlock}function En(t,e,n,r){if(Re(e)){var o=document.createRange();o.setEnd(n,r),o.setStart(n,r),e.removeAllRanges(),e.addRange(o)}else e.extend&&e.extend(n,r);t.domObserver.setCurSelection()}function An(t,e,n){var r=t.state.selection;if(r instanceof Zt&&!r.empty||n.indexOf("s")>-1)return!1;var o=r.$from,i=r.$to;if(!o.parent.inlineContent||t.endOfTextblock(e<0?"up":"down")){var s=kn(t.state,e);if(s&&s instanceof ee)return Sn(t,s)}if(!o.parent.inlineContent){var a=Qt.findFrom(e<0?o:i,e);return!a||Sn(t,a)}return!1}function In(t,e){if(!(t.state.selection instanceof Zt))return!0;var n=t.state.selection,r=n.$head,o=n.$anchor,i=n.empty;if(!r.sameParent(o))return!0;if(!i)return!1;if(t.endOfTextblock(e>0?"forward":"backward"))return!0;var s=!r.textOffset&&(e<0?r.nodeBefore:r.nodeAfter);if(s&&!s.isText){var a=t.state.tr;return e<0?a.delete(r.pos-s.nodeSize,r.pos):a.delete(r.pos,r.pos+s.nodeSize),t.dispatch(a),!0}return!1}function Rn(t,e,n){t.domObserver.stop(),e.contentEditable=n,t.domObserver.start()}function Pn(t,e){var n=e.keyCode,r=function(t){var e="";return t.ctrlKey&&(e+="c"),t.metaKey&&(e+="m"),t.altKey&&(e+="a"),t.shiftKey&&(e+="s"),e}(e);return 8==n||we.mac&&72==n&&"c"==r?In(t,-1)||Nn(t):46==n||we.mac&&68==n&&"c"==r?In(t,1)||Tn(t):13==n&&!we.ios||27==n||(37==n?Mn(t,-1,r)||Nn(t):39==n?Mn(t,1,r)||Tn(t):38==n?An(t,-1,r)||Nn(t):40==n?function(t){if(we.chrome&&!(t.state.selection.$head.parentOffset>0)){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n&&1==n.nodeType&&0==r&&n.firstChild&&"false"==n.firstChild.contentEditable){var o=n.firstChild;Rn(t,o,!0),setTimeout((function(){return Rn(t,o,!1)}),20)}}}(t)||An(t,1,r)||Tn(t):r==(we.mac?"m":"c")&&(66==n||73==n||89==n||90==n))}function zn(t,e){var n,r,o=t.root.getSelection(),i=t.state.doc,s=t.docView.nearestDesc(o.focusNode),a=s&&0==s.size,c=t.docView.posFromDOM(o.focusNode,o.focusOffset),p=i.resolve(c);if(Re(o)){for(n=p;s&&!s.node;)s=s.parent;if(s&&s.node.isAtom&&ee.isSelectable(s.node)&&s.parent&&(!s.node.isInline||!function(t,e,n){for(var r=0==e,o=e==Ae(t);r||o;){if(t==n)return!0;var i=Oe(t);if(!(t=t.parentNode))return!1;r=r&&0==i,o=o&&i==Ae(t)}}(o.focusNode,o.focusOffset,s.dom))){var l=s.posBefore;r=new ee(c==l?p:i.resolve(l))}}else n=i.resolve(t.docView.posFromDOM(o.anchorNode,o.anchorOffset));r||(r=Jn(t,n,p,"pointer"==e||t.state.selection.head<p.pos&&!a?1:-1));return r}function Bn(t,e){var n=t.state.selection;if(jn(t,n),t.editable?t.hasFocus():qn(t)&&document.activeElement.contains(t.dom)){if(t.domObserver.disconnectSelection(),t.cursorWrapper)!function(t){var e=t.root.getSelection(),n=document.createRange(),r=t.cursorWrapper.dom,o="IMG"==r.nodeName;o?n.setEnd(r.parentNode,Oe(r)+1):n.setEnd(r,0);n.collapse(!1),e.removeAllRanges(),e.addRange(n),!o&&!t.state.selection.visible&&we.ie&&we.ie_version<=11&&(r.disabled=!0,r.disabled=!1)}(t);else{var r,o,i=n.anchor,s=n.head;!Fn||n instanceof Zt||(n.$from.parent.inlineContent||(r=Vn(t,n.from)),n.empty||n.$from.parent.inlineContent||(o=Vn(t,n.to))),t.docView.setSelection(i,s,t.root,e),Fn&&(r&&$n(r),o&&$n(o)),n.visible?t.dom.classList.remove("ProseMirror-hideselection"):i!=s&&(t.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(t){var e=t.dom.ownerDocument;e.removeEventListener("selectionchange",t.hideSelectionGuard);var n=t.root.getSelection(),r=n.anchorNode,o=n.anchorOffset;e.addEventListener("selectionchange",t.hideSelectionGuard=function(){n.anchorNode==r&&n.anchorOffset==o||(e.removeEventListener("selectionchange",t.hideSelectionGuard),t.dom.classList.remove("ProseMirror-hideselection"))})}(t))}t.domObserver.setCurSelection(),t.domObserver.connectSelection()}}wn.prototype.getPreMatch=function(t){return t>=this.preMatchOffset?this.preMatched[t-this.preMatchOffset]:null},wn.prototype.destroyBetween=function(t,e){if(t!=e){for(var n=t;n<e;n++)this.top.children[n].destroy();this.top.children.splice(t,e-t),this.changed=!0}},wn.prototype.destroyRest=function(){this.destroyBetween(this.index,this.top.children.length)},wn.prototype.syncToMarks=function(t,e,n){for(var r=0,o=this.stack.length>>1,i=Math.min(o,t.length);r<i&&(r==o-1?this.top:this.stack[r+1<<1]).matchesMark(t[r])&&!1!==t[r].type.spec.spanning;)r++;for(;r<o;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),o--;for(;o<t.length;){this.stack.push(this.top,this.index+1);for(var s=-1,a=this.index;a<Math.min(this.index+3,this.top.children.length);a++)if(this.top.children[a].matchesMark(t[o])){s=a;break}if(s>-1)s>this.index&&(this.changed=!0,this.destroyBetween(this.index,s)),this.top=this.top.children[this.index];else{var c=on.create(this.top,t[o],e,n);this.top.children.splice(this.index,0,c),this.top=c,this.changed=!0}this.index=0,o++}},wn.prototype.findNodeMatch=function(t,e,n,r){var o=-1,i=r<0?void 0:this.getPreMatch(r),s=this.top.children;if(i&&i.matchesNode(t,e,n))o=s.indexOf(i);else for(var a=this.index,c=Math.min(s.length,a+5);a<c;a++){var p=s[a];if(p.matchesNode(t,e,n)&&this.preMatched.indexOf(p)<0){o=a;break}}return!(o<0)&&(this.destroyBetween(this.index,o),this.index++,!0)},wn.prototype.updateNextNode=function(t,e,n,r,o){if(this.index==this.top.children.length)return!1;var i=this.top.children[this.index];if(i instanceof sn){var s=this.preMatched.indexOf(i);if(s>-1&&s+this.preMatchOffset!=o)return!1;var a=i.dom;if(!(this.lock&&(a==this.lock||1==a.nodeType&&a.contains(this.lock.parentNode))&&!(t.isText&&i.node&&i.node.isText&&i.nodeDOM.nodeValue==t.text&&3!=i.dirty&&gn(e,i.outerDeco)))&&i.update(t,e,n,r))return i.dom!=a&&(this.changed=!0),this.index++,!0}return!1},wn.prototype.addNode=function(t,e,n,r,o){this.top.children.splice(this.index++,0,sn.create(this.top,t,e,n,r,o)),this.changed=!0},wn.prototype.placeWidget=function(t,e,n){if(this.index<this.top.children.length&&this.top.children[this.index].matchesWidget(t))this.index++;else{var r=new nn(this.top,t,e,n);this.top.children.splice(this.index++,0,r),this.changed=!0}},wn.prototype.addTextblockHacks=function(){for(var t=this.top.children[this.index-1];t instanceof on;)t=t.children[t.children.length-1];if(!t||!(t instanceof cn)||/\n$/.test(t.node.text))if(this.index<this.top.children.length&&this.top.children[this.index].matchesHack())this.index++;else{var e=document.createElement("br");this.top.children.splice(this.index++,0,new pn(this.top,en,e,null)),this.changed=!0}};var Fn=we.safari||we.chrome&&we.chrome_version<63;function Vn(t,e){var n=t.docView.domFromPos(e),r=n.node,o=n.offset,i=o<r.childNodes.length?r.childNodes[o]:null,s=o?r.childNodes[o-1]:null;if(we.safari&&i&&"false"==i.contentEditable)return _n(i);if(!(i&&"false"!=i.contentEditable||s&&"false"!=s.contentEditable)){if(i)return _n(i);if(s)return _n(s)}}function _n(t){return t.contentEditable="true",we.safari&&t.draggable&&(t.draggable=!1,t.wasDraggable=!0),t}function $n(t){t.contentEditable="false",t.wasDraggable&&(t.draggable=!0,t.wasDraggable=null)}function jn(t,e){if(e instanceof ee){var n=t.docView.descAt(e.from);n!=t.lastSelectedViewDesc&&(Ln(t),n&&n.selectNode(),t.lastSelectedViewDesc=n)}else Ln(t)}function Ln(t){t.lastSelectedViewDesc&&(t.lastSelectedViewDesc.parent&&t.lastSelectedViewDesc.deselectNode(),t.lastSelectedViewDesc=null)}function Jn(t,e,n,r){return t.someProp("createSelectionBetween",(function(r){return r(t,e,n)}))||Zt.between(e,n,r)}function qn(t){var e=t.root.getSelection();if(!e.anchorNode)return!1;try{return t.dom.contains(3==e.anchorNode.nodeType?e.anchorNode.parentNode:e.anchorNode)&&(t.editable||t.dom.contains(3==e.focusNode.nodeType?e.focusNode.parentNode:e.focusNode))}catch(t){return!1}}function Wn(t){var e=t.pmViewDesc;if(e)return e.parseRule();if("BR"==t.nodeName&&t.parentNode){if(we.safari&&/^(ul|ol)$/i.test(t.parentNode.nodeName)){var n=document.createElement("div");return n.appendChild(document.createElement("li")),{skip:n}}if(t.parentNode.lastChild==t||we.safari&&/^(tr|table)$/i.test(t.parentNode.nodeName))return{ignore:!0}}else if("IMG"==t.nodeName&&t.getAttribute("mark-placeholder"))return{ignore:!0}}function Kn(t,e,n,r,o){if(e<0){var i=t.lastSelectionTime>Date.now()-50?t.lastSelectionOrigin:null,s=zn(t,i);if(!t.state.selection.eq(s)){var c=t.state.tr.setSelection(s);"pointer"==i?c.setMeta("pointer",!0):"key"==i&&c.scrollIntoView(),t.dispatch(c)}}else{var p=t.state.doc.resolve(e),l=p.sharedDepth(n);e=p.before(l+1),n=t.state.doc.resolve(n).after(l+1);var h,f,u=t.state.selection,d=function(t,e,n){var r=t.docView.parseRange(e,n),o=r.node,i=r.fromOffset,s=r.toOffset,a=r.from,c=r.to,p=t.root.getSelection(),l=null,h=p.anchorNode;if(h&&t.dom.contains(1==h.nodeType?h:h.parentNode)&&(l=[{node:h,offset:p.anchorOffset}],Re(p)||l.push({node:p.focusNode,offset:p.focusOffset})),we.chrome&&8===t.lastKeyCode)for(var f=s;f>i;f--){var u=o.childNodes[f-1],d=u.pmViewDesc;if("BR"==u.nodeType&&!d){s=f;break}if(!d||d.size)break}var m=t.state.doc,v=t.someProp("domParser")||nt.fromSchema(t.state.schema),g=m.resolve(a),y=null,w=v.parse(o,{topNode:g.parent,topMatch:g.parent.contentMatchAt(g.index()),topOpen:!0,from:i,to:s,preserveWhitespace:!g.parent.type.spec.code||"full",editableContent:!0,findPositions:l,ruleFromNode:Wn,context:g});if(l&&null!=l[0].pos){var b=l[0].pos,x=l[1]&&l[1].pos;null==x&&(x=b),y={anchor:b+a,head:x+a}}return{doc:w,sel:y,from:a,to:c}}(t,e,n),m=t.state.doc,v=m.slice(d.from,d.to);8===t.lastKeyCode&&Date.now()-100<t.lastKeyCodeTime?(h=t.state.selection.to,f="end"):(h=t.state.selection.from,f="start"),t.lastKeyCode=null;var g=function(t,e,n,r,o){var i=t.findDiffStart(e,n);if(null==i)return null;var s=t.findDiffEnd(e,n+t.size,n+e.size),a=s.a,c=s.b;if("end"==o){var p=Math.max(0,i-Math.min(a,c));r-=a+p-i}if(a<i&&t.size<e.size){c=(i-=r<=i&&r>=a?i-r:0)+(c-a),a=i}else if(c<i){a=(i-=r<=i&&r>=c?i-r:0)+(a-c),c=i}return{start:i,endA:a,endB:c}}(v.content,d.doc.content,d.from,h,f);if(!g){if(!(r&&u instanceof Zt&&!u.empty&&u.$head.sameParent(u.$anchor))||t.composing||d.sel&&d.sel.anchor!=d.sel.head){if(d.sel){var y=Un(t,t.state.doc,d.sel);y&&!y.eq(t.state.selection)&&t.dispatch(t.state.tr.setSelection(y))}return}g={start:u.from,endA:u.to,endB:u.to}}t.domChangeCount++,t.state.selection.from<t.state.selection.to&&g.start==g.endB&&t.state.selection instanceof Zt&&(g.start>t.state.selection.from&&g.start<=t.state.selection.from+2?g.start=t.state.selection.from:g.endA<t.state.selection.to&&g.endA>=t.state.selection.to-2&&(g.endB+=t.state.selection.to-g.endA,g.endA=t.state.selection.to)),we.ie&&we.ie_version<=11&&g.endB==g.start+1&&g.endA==g.start&&g.start>d.from&&"  "==d.doc.textBetween(g.start-d.from-1,g.start-d.from+1)&&(g.start--,g.endA--,g.endB--);var w,b=d.doc.resolveNoCache(g.start-d.from),x=d.doc.resolveNoCache(g.endB-d.from);if((we.ios&&t.lastIOSEnter>Date.now()-100&&(!b.sameParent(x)||o.some((function(t){return"DIV"==t.nodeName})))||!b.sameParent(x)&&b.pos<d.doc.content.size&&(w=Qt.findFrom(d.doc.resolve(b.pos+1),1,!0))&&w.head==x.pos)&&t.someProp("handleKeyDown",(function(e){return e(t,Pe(13,"Enter"))})))t.lastIOSEnter=0;else if(t.state.selection.anchor>g.start&&function(t,e,n,r,o){if(!r.parent.isTextblock||n-e<=o.pos-r.pos||Hn(r,!0,!1)<o.pos)return!1;var i=t.resolve(e);if(i.parentOffset<i.parent.content.size||!i.parent.isTextblock)return!1;var s=t.resolve(Hn(i,!0,!0));if(!s.parent.isTextblock||s.pos>n||Hn(s,!0,!1)<n)return!1;return r.parent.content.cut(r.parentOffset).eq(s.parent.content)}(m,g.start,g.endA,b,x)&&t.someProp("handleKeyDown",(function(e){return e(t,Pe(8,"Backspace"))})))we.android&&we.chrome&&t.domObserver.suppressSelectionUpdates();else{var k,S,M,O,C=g.start,N=g.endA;if(b.sameParent(x)&&b.parent.inlineContent)if(b.pos==x.pos)we.ie&&we.ie_version<=11&&0==b.parentOffset&&(t.domObserver.suppressSelectionUpdates(),setTimeout((function(){return Bn(t)}),20)),k=t.state.tr.delete(C,N),S=m.resolve(g.start).marksAcross(m.resolve(g.endA));else if(g.endA==g.endB&&(O=m.resolve(g.start))&&(M=function(t,e){for(var n,r,o,i=t.firstChild.marks,s=e.firstChild.marks,c=i,p=s,l=0;l<s.length;l++)c=s[l].removeFromSet(c);for(var h=0;h<i.length;h++)p=i[h].removeFromSet(p);if(1==c.length&&0==p.length)r=c[0],n="add",o=function(t){return t.mark(r.addToSet(t.marks))};else{if(0!=c.length||1!=p.length)return null;r=p[0],n="remove",o=function(t){return t.mark(r.removeFromSet(t.marks))}}for(var f=[],u=0;u<e.childCount;u++)f.push(o(e.child(u)));if(a.from(f).eq(t))return{mark:r,type:n}}(b.parent.content.cut(b.parentOffset,x.parentOffset),O.parent.content.cut(O.parentOffset,g.endA-O.start()))))k=t.state.tr,"add"==M.type?k.addMark(C,N,M.mark):k.removeMark(C,N,M.mark);else if(b.parent.child(b.index()).isText&&b.index()==x.index()-(x.textOffset?0:1)){var T=b.parent.textBetween(b.parentOffset,x.parentOffset);if(t.someProp("handleTextInput",(function(e){return e(t,C,N,T)})))return;k=t.state.tr.insertText(T,C,N)}if(k||(k=t.state.tr.replace(C,N,d.doc.slice(g.start-d.from,g.endB-d.from))),d.sel){var D=Un(t,k.doc,d.sel);D&&!(we.chrome&&we.android&&t.composing&&D.empty&&D.head==C||we.ie&&D.empty&&D.head==C)&&k.setSelection(D)}S&&k.ensureMarks(S),t.dispatch(k.scrollIntoView())}}}function Un(t,e,n){return Math.max(n.anchor,n.head)>e.content.size?null:Jn(t,e.resolve(n.anchor),e.resolve(n.head))}function Hn(t,e,n){for(var r=t.depth,o=e?t.end():t.pos;r>0&&(e||t.indexAfter(r)==t.node(r).childCount);)r--,o++,e=!1;if(n)for(var i=t.node(r).maybeChild(t.indexAfter(r));i&&!i.isLeaf;)i=i.firstChild,o++;return o}function Gn(t,e){for(var n=[],r=e.content,o=e.openStart,i=e.openEnd;o>1&&i>1&&1==r.childCount&&1==r.firstChild.childCount;){o--,i--;var s=r.firstChild;n.push(s.type.name,s.type.hasRequiredAttrs()?s.attrs:null),r=s.content}var a=t.someProp("clipboardSerializer")||ut.fromSchema(t.state.schema),c=er(),p=c.createElement("div");p.appendChild(a.serializeFragment(r,{document:c}));for(var l,h=p.firstChild;h&&1==h.nodeType&&(l=Zn[h.nodeName.toLowerCase()]);){for(var f=l.length-1;f>=0;f--){for(var u=c.createElement(l[f]);p.firstChild;)u.appendChild(p.firstChild);p.appendChild(u)}h=p.firstChild}return h&&1==h.nodeType&&h.setAttribute("data-pm-slice",o+" "+i+" "+JSON.stringify(n)),{dom:p,text:t.someProp("clipboardTextSerializer",(function(t){return t(e)}))||e.content.textBetween(0,e.content.size,"\n\n")}}function Qn(t,e,n,r,o){var i,s,c=o.parent.type.spec.code;if(!n&&!e)return null;var p=e&&(r||c||!n);if(p){if(t.someProp("transformPastedText",(function(t){e=t(e)})),c)return new d(a.from(t.state.schema.text(e)),0,0);var l=t.someProp("clipboardTextParser",(function(t){return t(e,o)}));l?s=l:(i=document.createElement("div"),e.trim().split(/(?:\r\n?|\n)+/).forEach((function(t){i.appendChild(document.createElement("p")).textContent=t})))}else t.someProp("transformPastedHTML",(function(t){n=t(n)})),i=function(t){var e=/(\s*<meta [^>]*>)*/.exec(t);e&&(t=t.slice(e[0].length));var n,r=er().createElement("div"),o=/(?:<meta [^>]*>)*<([a-z][^>\s]+)/i.exec(t),i=0;(n=o&&Zn[o[1].toLowerCase()])&&(t=n.map((function(t){return"<"+t+">"})).join("")+t+n.map((function(t){return"</"+t+">"})).reverse().join(""),i=n.length);r.innerHTML=t;for(var s=0;s<i;s++)r=r.firstChild;return r}(n);var h=i&&i.querySelector("[data-pm-slice]"),f=h&&/^(\d+) (\d+) (.*)/.exec(h.getAttribute("data-pm-slice"));if(!s){var u=t.someProp("clipboardParser")||t.someProp("domParser")||nt.fromSchema(t.state.schema);s=u.parseSlice(i,{preserveWhitespace:!(!p&&!f),context:o})}return s=f?function(t,e){if(!t.size)return t;var n,r=t.content.firstChild.type.schema;try{n=JSON.parse(e)}catch(e){return t}for(var o=t.content,i=t.openStart,s=t.openEnd,c=n.length-2;c>=0;c-=2){var p=r.nodes[n[c]];if(!p||p.hasRequiredAttrs())break;o=a.from(p.create(n[c+1],o)),i++,s++}return new d(o,i,s)}(function(t,e,n){e<t.openStart&&(t=new d(Yn(t.content,-1,e,t.openStart,0,t.openEnd),e,t.openEnd));n<t.openEnd&&(t=new d(Yn(t.content,1,n,t.openEnd,0,0),t.openStart,n));return t}(s,+f[1],+f[2]),f[3]):d.maxOpen(function(t,e){if(t.childCount<2)return t;for(var n=function(n){var r=e.node(n).contentMatchAt(e.index(n)),o=void 0,i=[];if(t.forEach((function(t){if(i){var e,n=r.findWrapping(t.type);if(!n)return i=null;if(e=i.length&&o.length&&function t(e,n,r,o,i){if(i<e.length&&i<n.length&&e[i]==n[i]){var s=t(e,n,r,o.lastChild,i+1);if(s)return o.copy(o.content.replaceChild(o.childCount-1,s));if(o.contentMatchAt(o.childCount).matchType(i==e.length-1?r.type:e[i+1]))return o.copy(o.content.append(a.from(Xn(r,e,i+1))))}}(n,o,t,i[i.length-1],0))i[i.length-1]=e;else{i.length&&(i[i.length-1]=function t(e,n){if(0==n)return e;var r=e.content.replaceChild(e.childCount-1,t(e.lastChild,n-1)),o=e.contentMatchAt(e.childCount).fillBefore(a.empty,!0);return e.copy(r.append(o))}(i[i.length-1],o.length));var s=Xn(t,n);i.push(s),r=r.matchType(s.type,s.attrs),o=n}}})),i)return{v:a.from(i)}},r=e.depth;r>=0;r--){var o=n(r);if(o)return o.v}return t}(s.content,o),!1),t.someProp("transformPasted",(function(t){s=t(s)})),s}function Xn(t,e,n){void 0===n&&(n=0);for(var r=e.length-1;r>=n;r--)t=e[r].create(null,a.from(t));return t}function Yn(t,e,n,r,o,i){var s=e<0?t.firstChild:t.lastChild,c=s.content;return o<r-1&&(c=Yn(c,e,n,r,o+1,i)),o>=n&&(c=e<0?s.contentMatchAt(0).fillBefore(c,t.childCount>1||i<=o).append(c):c.append(s.contentMatchAt(s.childCount).fillBefore(a.empty,!0))),t.replaceChild(e<0?0:t.childCount-1,s.copy(c))}var Zn={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]},tr=null;function er(){return tr||(tr=document.implementation.createHTMLDocument("title"))}var nr={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},rr=we.ie&&we.ie_version<=11,or=function(){this.anchorNode=this.anchorOffset=this.focusNode=this.focusOffset=null};or.prototype.set=function(t){this.anchorNode=t.anchorNode,this.anchorOffset=t.anchorOffset,this.focusNode=t.focusNode,this.focusOffset=t.focusOffset},or.prototype.eq=function(t){return t.anchorNode==this.anchorNode&&t.anchorOffset==this.anchorOffset&&t.focusNode==this.focusNode&&t.focusOffset==this.focusOffset};var ir=function(t,e){var n=this;this.view=t,this.handleDOMChange=e,this.queue=[],this.flushingSoon=!1,this.observer=window.MutationObserver&&new window.MutationObserver((function(t){for(var e=0;e<t.length;e++)n.queue.push(t[e]);we.ie&&we.ie_version<=11&&t.some((function(t){return"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length}))?n.flushSoon():n.flush()})),this.currentSelection=new or,rr&&(this.onCharData=function(t){n.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),n.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.suppressingSelectionUpdates=!1};ir.prototype.flushSoon=function(){var t=this;this.flushingSoon||(this.flushingSoon=!0,window.setTimeout((function(){t.flushingSoon=!1,t.flush()}),20))},ir.prototype.start=function(){this.observer&&this.observer.observe(this.view.dom,nr),rr&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()},ir.prototype.stop=function(){var t=this;if(this.observer){var e=this.observer.takeRecords();if(e.length){for(var n=0;n<e.length;n++)this.queue.push(e[n]);window.setTimeout((function(){return t.flush()}),20)}this.observer.disconnect()}rr&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()},ir.prototype.connectSelection=function(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)},ir.prototype.disconnectSelection=function(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)},ir.prototype.suppressSelectionUpdates=function(){var t=this;this.suppressingSelectionUpdates=!0,setTimeout((function(){return t.suppressingSelectionUpdates=!1}),50)},ir.prototype.onSelectionChange=function(){if((!(t=this.view).editable||t.root.activeElement==t.dom)&&qn(t)){var t;if(this.suppressingSelectionUpdates)return Bn(this.view);if(we.ie&&we.ie_version<=11&&!this.view.state.selection.empty){var e=this.view.root.getSelection();if(e.focusNode&&Te(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset))return this.flushSoon()}this.flush()}},ir.prototype.setCurSelection=function(){this.currentSelection.set(this.view.root.getSelection())},ir.prototype.ignoreSelectionChange=function(t){if(0==t.rangeCount)return!0;var e=t.getRangeAt(0).commonAncestorContainer,n=this.view.docView.nearestDesc(e);return n&&n.ignoreMutation({type:"selection",target:3==e.nodeType?e.parentNode:e})?(this.setCurSelection(),!0):void 0},ir.prototype.flush=function(){if(this.view.docView&&!this.flushingSoon){var t=this.observer?this.observer.takeRecords():[];this.queue.length&&(t=this.queue.concat(t),this.queue.length=0);var e=this.view.root.getSelection(),n=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(e)&&qn(this.view)&&!this.ignoreSelectionChange(e),r=-1,o=-1,i=!1,s=[];if(this.view.editable)for(var a=0;a<t.length;a++){var c=this.registerMutation(t[a],s);c&&(r=r<0?c.from:Math.min(c.from,r),o=o<0?c.to:Math.max(c.to,o),c.typeOver&&!this.view.composing&&(i=!0))}if(we.gecko&&s.length>1){var p=s.filter((function(t){return"BR"==t.nodeName}));if(2==p.length){var l=p[0],h=p[1];l.parentNode&&l.parentNode.parentNode==h.parentNode?h.remove():l.remove()}}(r>-1||n)&&(r>-1&&(this.view.docView.markDirty(r,o),function(t){if(sr)return;sr=!0,"normal"==getComputedStyle(t.dom).whiteSpace&&console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.")}(this.view)),this.handleDOMChange(r,o,i,s),this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(e)||Bn(this.view))}},ir.prototype.registerMutation=function(t,e){if(e.indexOf(t.target)>-1)return null;var n=this.view.docView.nearestDesc(t.target);if("attributes"==t.type&&(n==this.view.docView||"contenteditable"==t.attributeName||"style"==t.attributeName&&!t.oldValue&&!t.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(t))return null;if("childList"==t.type){var r=t.previousSibling,o=t.nextSibling;if(we.ie&&we.ie_version<=11&&t.addedNodes.length)for(var i=0;i<t.addedNodes.length;i++){var s=t.addedNodes[i],a=s.previousSibling,c=s.nextSibling;(!a||Array.prototype.indexOf.call(t.addedNodes,a)<0)&&(r=a),(!c||Array.prototype.indexOf.call(t.addedNodes,c)<0)&&(o=c)}for(var p=r&&r.parentNode==t.target?Oe(r)+1:0,l=n.localPosFromDOM(t.target,p,-1),h=o&&o.parentNode==t.target?Oe(o):t.target.childNodes.length,f=0;f<t.addedNodes.length;f++)e.push(t.addedNodes[f]);return{from:l,to:n.localPosFromDOM(t.target,h,1)}}return"attributes"==t.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:{from:n.posAtStart,to:n.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}};var sr=!1;var ar={},cr={};function pr(t,e){t.lastSelectionOrigin=e,t.lastSelectionTime=Date.now()}function lr(t){t.someProp("handleDOMEvents",(function(e){for(var n in e)t.eventHandlers[n]||t.dom.addEventListener(n,t.eventHandlers[n]=function(e){return hr(t,e)})}))}function hr(t,e){return t.someProp("handleDOMEvents",(function(n){var r=n[e.type];return!!r&&(r(t,e)||e.defaultPrevented)}))}function fr(t){return{left:t.clientX,top:t.clientY}}function ur(t,e,n,r,o){if(-1==r)return!1;for(var i=t.state.doc.resolve(r),s=function(r){if(t.someProp(e,(function(e){return r>i.depth?e(t,n,i.nodeAfter,i.before(r),o,!0):e(t,n,i.node(r),i.before(r),o,!1)})))return{v:!0}},a=i.depth+1;a>0;a--){var c=s(a);if(c)return c.v}return!1}function dr(t,e,n){t.focused||t.focus();var r=t.state.tr.setSelection(e);"pointer"==n&&r.setMeta("pointer",!0),t.dispatch(r)}function mr(t,e,n,r,o){return ur(t,"handleClickOn",e,n,r)||t.someProp("handleClick",(function(n){return n(t,e,r)}))||(o?function(t,e){if(-1==e)return!1;var n,r,o=t.state.selection;o instanceof ee&&(n=o.node);for(var i=t.state.doc.resolve(e),s=i.depth+1;s>0;s--){var a=s>i.depth?i.nodeAfter:i.node(s);if(ee.isSelectable(a)){r=n&&o.$from.depth>0&&s>=o.$from.depth&&i.before(o.$from.depth+1)==o.$from.pos?i.before(o.$from.depth):i.before(s);break}}return null!=r&&(dr(t,ee.create(t.state.doc,r),"pointer"),!0)}(t,n):function(t,e){if(-1==e)return!1;var n=t.state.doc.resolve(e),r=n.nodeAfter;return!!(r&&r.isAtom&&ee.isSelectable(r))&&(dr(t,new ee(n),"pointer"),!0)}(t,n))}function vr(t,e,n,r){return ur(t,"handleDoubleClickOn",e,n,r)||t.someProp("handleDoubleClick",(function(n){return n(t,e,r)}))}function gr(t,e,n,r){return ur(t,"handleTripleClickOn",e,n,r)||t.someProp("handleTripleClick",(function(n){return n(t,e,r)}))||function(t,e){var n=t.state.doc;if(-1==e)return!!n.inlineContent&&(dr(t,Zt.create(n,0,n.content.size),"pointer"),!0);for(var r=n.resolve(e),o=r.depth+1;o>0;o--){var i=o>r.depth?r.nodeAfter:r.node(o),s=r.before(o);if(i.inlineContent)dr(t,Zt.create(n,s+1,s+1+i.content.size),"pointer");else{if(!ee.isSelectable(i))continue;dr(t,ee.create(n,s),"pointer")}return!0}}(t,n)}function yr(t){return Mr(t)}cr.keydown=function(t,e){t.shiftKey=16==e.keyCode||e.shiftKey,xr(t,e)||(t.lastKeyCode=e.keyCode,t.lastKeyCodeTime=Date.now(),!we.ios||13!=e.keyCode||e.ctrlKey||e.altKey||e.metaKey?t.someProp("handleKeyDown",(function(n){return n(t,e)}))||Pn(t,e)?e.preventDefault():pr(t,"key"):t.lastIOSEnter=Date.now())},cr.keyup=function(t,e){16==e.keyCode&&(t.shiftKey=!1)},cr.keypress=function(t,e){if(!(xr(t,e)||!e.charCode||e.ctrlKey&&!e.altKey||we.mac&&e.metaKey))if(t.someProp("handleKeyPress",(function(n){return n(t,e)})))e.preventDefault();else{var n=t.state.selection;if(!(n instanceof Zt&&n.$from.sameParent(n.$to))){var r=String.fromCharCode(e.charCode);t.someProp("handleTextInput",(function(e){return e(t,n.$from.pos,n.$to.pos,r)}))||t.dispatch(t.state.tr.insertText(r).scrollIntoView()),e.preventDefault()}}};var wr=we.mac?"metaKey":"ctrlKey";ar.mousedown=function(t,e){t.shiftKey=e.shiftKey;var n=yr(t),r=Date.now(),o="singleClick";r-t.lastClick.time<500&&function(t,e){var n=e.x-t.clientX,r=e.y-t.clientY;return n*n+r*r<100}(e,t.lastClick)&&!e[wr]&&("singleClick"==t.lastClick.type?o="doubleClick":"doubleClick"==t.lastClick.type&&(o="tripleClick")),t.lastClick={time:r,x:e.clientX,y:e.clientY,type:o};var i=t.posAtCoords(fr(e));i&&("singleClick"==o?t.mouseDown=new br(t,i,e,n):("doubleClick"==o?vr:gr)(t,i.pos,i.inside,e)?e.preventDefault():pr(t,"pointer"))};var br=function(t,e,n,r){var o,i,s=this;if(this.view=t,this.startDoc=t.state.doc,this.pos=e,this.event=n,this.flushed=r,this.selectNode=n[wr],this.allowDefault=n.shiftKey,e.inside>-1)o=t.state.doc.nodeAt(e.inside),i=e.inside;else{var a=t.state.doc.resolve(e.pos);o=a.parent,i=a.depth?a.before():0}this.mightDrag=null;var c=r?null:n.target,p=c?t.docView.nearestDesc(c,!0):null;this.target=p?p.dom:null,(o.type.spec.draggable&&!1!==o.type.spec.selectable||t.state.selection instanceof ee&&i==t.state.selection.from)&&(this.mightDrag={node:o,pos:i,addAttr:this.target&&!this.target.draggable,setUneditable:this.target&&we.gecko&&!this.target.hasAttribute("contentEditable")}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((function(){return s.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),t.root.addEventListener("mouseup",this.up=this.up.bind(this)),t.root.addEventListener("mousemove",this.move=this.move.bind(this)),pr(t,"pointer")};function xr(t,e){return!!t.composing||!!(we.safari&&Math.abs(e.timeStamp-t.compositionEndedAt)<500)&&(t.compositionEndedAt=-2e8,!0)}br.prototype.done=function(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!1),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.view.mouseDown=null},br.prototype.up=function(t){if(this.done(),this.view.dom.contains(3==t.target.nodeType?t.target.parentNode:t.target)){var e=this.pos;this.view.state.doc!=this.startDoc&&(e=this.view.posAtCoords(fr(t))),this.allowDefault||!e?pr(this.view,"pointer"):mr(this.view,e.pos,e.inside,t,this.selectNode)?t.preventDefault():!this.flushed&&(!we.chrome||this.view.state.selection instanceof Zt||e.pos!=this.view.state.selection.from&&e.pos!=this.view.state.selection.to)?pr(this.view,"pointer"):(dr(this.view,Qt.near(this.view.state.doc.resolve(e.pos)),"pointer"),t.preventDefault())}},br.prototype.move=function(t){!this.allowDefault&&(Math.abs(this.event.x-t.clientX)>4||Math.abs(this.event.y-t.clientY)>4)&&(this.allowDefault=!0),pr(this.view,"pointer")},ar.touchdown=function(t){yr(t),pr(t,"pointer")},ar.contextmenu=function(t){return yr(t)};var kr=we.android?5e3:-1;function Sr(t,e){clearTimeout(t.composingTimeout),e>-1&&(t.composingTimeout=setTimeout((function(){return Mr(t)}),e))}function Mr(t,e){for(t.composing=!1;t.compositionNodes.length>0;)t.compositionNodes.pop().markParentsDirty();return!(!e&&!t.docView.dirty)&&(t.updateState(t.state),!0)}cr.compositionstart=cr.compositionupdate=function(t){if(!t.composing){t.domObserver.flush();var e=t.state,n=e.selection.$from;if(e.selection.empty&&(e.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((function(t){return!1===t.type.spec.inclusive}))))t.markCursor=t.state.storedMarks||n.marks(),Mr(t,!0),t.markCursor=null;else if(Mr(t),we.gecko&&e.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length)for(var r=t.root.getSelection(),o=r.focusNode,i=r.focusOffset;o&&1==o.nodeType&&0!=i;){var s=i<0?o.lastChild:o.childNodes[i-1];if(!s)break;if(3==s.nodeType){r.collapse(s,s.nodeValue.length);break}o=s,i=-1}t.composing=!0}Sr(t,kr)},cr.compositionend=function(t,e){t.composing&&(t.composing=!1,t.compositionEndedAt=e.timeStamp,Sr(t,20))};var Or=we.ie&&we.ie_version<15||we.ios&&we.webkit_version<604;function Cr(t,e,n,r){var o=Qn(t,e,n,t.shiftKey,t.state.selection.$from);if(!t.someProp("handlePaste",(function(e){return e(t,r,o||d.empty)}))&&o){var i=function(t){return 0==t.openStart&&0==t.openEnd&&1==t.content.childCount?t.content.firstChild:null}(o),s=i?t.state.tr.replaceSelectionWith(i,t.shiftKey):t.state.tr.replaceSelection(o);t.dispatch(s.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste"))}}ar.copy=cr.cut=function(t,e){var n=t.state.selection,r="cut"==e.type;if(!n.empty){var o=Or?null:e.clipboardData,i=Gn(t,n.content()),s=i.dom,a=i.text;o?(e.preventDefault(),o.clearData(),o.setData("text/html",s.innerHTML),o.setData("text/plain",a)):function(t,e){var n=t.dom.ownerDocument,r=n.body.appendChild(n.createElement("div"));r.appendChild(e),r.style.cssText="position: fixed; left: -10000px; top: 10px";var o=getSelection(),i=n.createRange();i.selectNodeContents(e),t.dom.blur(),o.removeAllRanges(),o.addRange(i),setTimeout((function(){n.body.removeChild(r),t.focus()}),50)}(t,s),r&&t.dispatch(t.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))}},cr.paste=function(t,e){var n=Or?null:e.clipboardData,r=n&&n.getData("text/html"),o=n&&n.getData("text/plain");n&&(r||o||n.files.length)?(Cr(t,o,r,e),e.preventDefault()):function(t,e){var n=t.dom.ownerDocument,r=t.shiftKey||t.state.selection.$from.parent.type.spec.code,o=n.body.appendChild(n.createElement(r?"textarea":"div"));r||(o.contentEditable="true"),o.style.cssText="position: fixed; left: -10000px; top: 10px",o.focus(),setTimeout((function(){t.focus(),n.body.removeChild(o),r?Cr(t,o.value,null,e):Cr(t,o.textContent,o.innerHTML,e)}),50)}(t,e)};var Nr=function(t,e){this.slice=t,this.move=e},Tr=we.mac?"altKey":"ctrlKey";for(var Dr in ar.dragstart=function(t,e){var n=t.mouseDown;if(n&&n.done(),e.dataTransfer){var r=t.state.selection,o=r.empty?null:t.posAtCoords(fr(e));if(o&&o.pos>=r.from&&o.pos<=(r instanceof ee?r.to-1:r.to));else if(n&&n.mightDrag)t.dispatch(t.state.tr.setSelection(ee.create(t.state.doc,n.mightDrag.pos)));else if(e.target&&1==e.target.nodeType){var i=t.docView.nearestDesc(e.target,!0);if(!i||!i.node.type.spec.draggable||i==t.docView)return;t.dispatch(t.state.tr.setSelection(ee.create(t.state.doc,i.posBefore)))}var s=t.state.selection.content(),a=Gn(t,s),c=a.dom,p=a.text;e.dataTransfer.clearData(),e.dataTransfer.setData(Or?"Text":"text/html",c.innerHTML),Or||e.dataTransfer.setData("text/plain",p),t.dragging=new Nr(s,!e[Tr])}},ar.dragend=function(t){window.setTimeout((function(){return t.dragging=null}),50)},cr.dragover=cr.dragenter=function(t,e){return e.preventDefault()},cr.drop=function(t,e){var n=t.dragging;if(t.dragging=null,e.dataTransfer){var r=t.posAtCoords(fr(e));if(r){var o=t.state.doc.resolve(r.pos);if(o){var i=n&&n.slice||Qn(t,e.dataTransfer.getData(Or?"Text":"text/plain"),Or?null:e.dataTransfer.getData("text/html"),!1,o);if(i&&(e.preventDefault(),!t.someProp("handleDrop",(function(r){return r(t,e,i,n&&n.move)})))){var s=i?function(t,e,n){var r=t.resolve(e);if(!n.content.size)return e;for(var o=n.content,i=0;i<n.openStart;i++)o=o.firstChild.content;for(var s=1;s<=(0==n.openStart&&n.size?2:1);s++)for(var a=r.depth;a>=0;a--){var c=a==r.depth?0:r.pos<=(r.start(a+1)+r.end(a+1))/2?-1:1,p=r.index(a)+(c>0?1:0);if(1==s?r.node(a).canReplace(p,p,o):r.node(a).contentMatchAt(p).findWrapping(o.firstChild.type))return 0==c?r.pos:c<0?r.before(a+1):r.after(a+1)}return null}(t.state.doc,o.pos,i):o.pos;null==s&&(s=o.pos);var a=t.state.tr;n&&n.move&&a.deleteSelection();var c=a.mapping.map(s),p=0==i.openStart&&0==i.openEnd&&1==i.content.childCount,l=a.doc;if(p?a.replaceRangeWith(c,c,i.content.firstChild):a.replaceRange(c,c,i),!a.doc.eq(l)){var h=a.doc.resolve(c);p&&ee.isSelectable(i.content.firstChild)&&h.nodeAfter&&h.nodeAfter.sameMarkup(i.content.firstChild)?a.setSelection(new ee(h)):a.setSelection(Jn(t,h,a.doc.resolve(a.mapping.map(s)))),t.focus(),t.dispatch(a.setMeta("uiEvent","drop"))}}}}}},ar.focus=function(t){t.focused||(t.domObserver.stop(),t.dom.classList.add("ProseMirror-focused"),t.domObserver.start(),t.focused=!0,setTimeout((function(){t.docView&&t.hasFocus()&&!t.domObserver.currentSelection.eq(t.root.getSelection())&&Bn(t)}),20))},ar.blur=function(t){t.focused&&(t.domObserver.stop(),t.dom.classList.remove("ProseMirror-focused"),t.domObserver.start(),t.domObserver.currentSelection.set({}),t.focused=!1)},ar.beforeinput=function(t,e){if(we.chrome&&we.android&&"deleteContentBackward"==e.inputType){var n=t.domChangeCount;setTimeout((function(){if(t.domChangeCount==n&&(t.dom.blur(),t.focus(),!t.someProp("handleKeyDown",(function(e){return e(t,Pe(8,"Backspace"))})))){var e=t.state.selection.$cursor;e&&e.pos>0&&t.dispatch(t.state.tr.delete(e.pos-1,e.pos).scrollIntoView())}}),50)}},cr)ar[Dr]=cr[Dr];function Er(t,e){if(t==e)return!0;for(var n in t)if(t[n]!==e[n])return!1;for(var r in e)if(!(r in t))return!1;return!0}var Ar=function(t,e){this.spec=e||Fr,this.side=this.spec.side||0,this.toDOM=t};Ar.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,this.side<0?-1:1),i=o.pos;return o.deleted?null:new Pr(i-n,i-n,this)},Ar.prototype.valid=function(){return!0},Ar.prototype.eq=function(t){return this==t||t instanceof Ar&&(this.spec.key&&this.spec.key==t.spec.key||this.toDOM==t.toDOM&&Er(this.spec,t.spec))};var Ir=function(t,e){this.spec=e||Fr,this.attrs=t};Ir.prototype.map=function(t,e,n,r){var o=t.map(e.from+r,this.spec.inclusiveStart?-1:1)-n,i=t.map(e.to+r,this.spec.inclusiveEnd?1:-1)-n;return o>=i?null:new Pr(o,i,this)},Ir.prototype.valid=function(t,e){return e.from<e.to},Ir.prototype.eq=function(t){return this==t||t instanceof Ir&&Er(this.attrs,t.attrs)&&Er(this.spec,t.spec)},Ir.is=function(t){return t.type instanceof Ir};var Rr=function(t,e){this.spec=e||Fr,this.attrs=t};Rr.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,1);if(o.deleted)return null;var i=t.mapResult(e.to+r,-1);return i.deleted||i.pos<=o.pos?null:new Pr(o.pos-n,i.pos-n,this)},Rr.prototype.valid=function(t,e){var n=t.content.findIndex(e.from),r=n.index,o=n.offset;return o==e.from&&o+t.child(r).nodeSize==e.to},Rr.prototype.eq=function(t){return this==t||t instanceof Rr&&Er(this.attrs,t.attrs)&&Er(this.spec,t.spec)};var Pr=function(t,e,n){this.from=t,this.to=e,this.type=n},zr={spec:{configurable:!0}};Pr.prototype.copy=function(t,e){return new Pr(t,e,this.type)},Pr.prototype.eq=function(t){return this.type.eq(t.type)&&this.from==t.from&&this.to==t.to},Pr.prototype.map=function(t,e,n){return this.type.map(t,this,e,n)},Pr.widget=function(t,e,n){return new Pr(t,t,new Ar(e,n))},Pr.inline=function(t,e,n,r){return new Pr(t,e,new Ir(n,r))},Pr.node=function(t,e,n,r){return new Pr(t,e,new Rr(n,r))},zr.spec.get=function(){return this.type.spec},Object.defineProperties(Pr.prototype,zr);var Br=[],Fr={},Vr=function(t,e){this.local=t&&t.length?t:Br,this.children=e&&e.length?e:Br};Vr.create=function(t,e){return e.length?qr(e,t,0,Fr):_r},Vr.prototype.find=function(t,e,n){var r=[];return this.findInner(null==t?0:t,null==e?1e9:e,r,0,n),r},Vr.prototype.findInner=function(t,e,n,r,o){for(var i=0;i<this.local.length;i++){var s=this.local[i];s.from<=e&&s.to>=t&&(!o||o(s.spec))&&n.push(s.copy(s.from+r,s.to+r))}for(var a=0;a<this.children.length;a+=3)if(this.children[a]<e&&this.children[a+1]>t){var c=this.children[a]+1;this.children[a+2].findInner(t-c,e-c,n,r+c,o)}},Vr.prototype.map=function(t,e,n){return this==_r||0==t.maps.length?this:this.mapInner(t,e,0,0,n||Fr)},Vr.prototype.mapInner=function(t,e,n,r,o){for(var i,s=0;s<this.local.length;s++){var a=this.local[s].map(t,n,r);a&&a.type.valid(e,a)?(i||(i=[])).push(a):o.onRemove&&o.onRemove(this.local[s].spec)}return this.children.length?function(t,e,n,r,o,i,s){for(var a=t.slice(),c=function(t,e,n,r){for(var s=0;s<a.length;s+=3){var c=a[s+1],p=void 0;-1==c||t>c+i||(e>=a[s]+i?a[s+1]=-1:(p=r-n-(e-t)+(i-o))&&(a[s]+=p,a[s+1]+=p))}},p=0;p<n.maps.length;p++)n.maps[p].forEach(c);for(var l=!1,h=0;h<a.length;h+=3)if(-1==a[h+1]){var f=n.map(a[h]+i),u=f-o;if(u<0||u>=r.content.size){l=!0;continue}var d=n.map(t[h+1]+i,-1)-o,m=r.content.findIndex(u),v=m.index,g=m.offset,y=r.maybeChild(v);if(y&&g==u&&g+y.nodeSize==d){var w=a[h+2].mapInner(n,y,f+1,a[h]+i+1,s);w!=_r?(a[h]=u,a[h+1]=d,a[h+2]=w):(a[h+1]=-2,l=!0)}else l=!0}if(l){var b=qr(function(t,e,n,r,o,i,s){function a(t,e){for(var i=0;i<t.local.length;i++){var c=t.local[i].map(r,o,e);c?n.push(c):s.onRemove&&s.onRemove(t.local[i].spec)}for(var p=0;p<t.children.length;p+=3)a(t.children[p+2],t.children[p]+e+1)}for(var c=0;c<t.length;c+=3)-1==t[c+1]&&a(t[c+2],e[c]+i+1);return n}(a,t,e||[],n,o,i,s),r,0,s);e=b.local;for(var x=0;x<a.length;x+=3)a[x+1]<0&&(a.splice(x,3),x-=3);for(var k=0,S=0;k<b.children.length;k+=3){for(var M=b.children[k];S<a.length&&a[S]<M;)S+=3;a.splice(S,0,b.children[k],b.children[k+1],b.children[k+2])}}return new Vr(e&&e.sort(Wr),a)}(this.children,i,t,e,n,r,o):i?new Vr(i.sort(Wr)):_r},Vr.prototype.add=function(t,e){return e.length?this==_r?Vr.create(t,e):this.addInner(t,e,0):this},Vr.prototype.addInner=function(t,e,n){var r,o=this,i=0;t.forEach((function(t,s){var a,c=s+n;if(a=Lr(e,t,c)){for(r||(r=o.children.slice());i<r.length&&r[i]<s;)i+=3;r[i]==s?r[i+2]=r[i+2].addInner(t,a,c+1):r.splice(i,0,s,s+t.nodeSize,qr(a,t,c+1,Fr)),i+=3}}));var s=jr(i?Jr(e):e,-n);return new Vr(s.length?this.local.concat(s).sort(Wr):this.local,r||this.children)},Vr.prototype.remove=function(t){return 0==t.length||this==_r?this:this.removeInner(t,0)},Vr.prototype.removeInner=function(t,e){for(var n=this.children,r=this.local,o=0;o<n.length;o+=3){for(var i=void 0,s=n[o]+e,a=n[o+1]+e,c=0,p=void 0;c<t.length;c++)(p=t[c])&&p.from>s&&p.to<a&&(t[c]=null,(i||(i=[])).push(p));if(i){n==this.children&&(n=this.children.slice());var l=n[o+2].removeInner(i,s+1);l!=_r?n[o+2]=l:(n.splice(o,3),o-=3)}}if(r.length)for(var h=0,f=void 0;h<t.length;h++)if(f=t[h])for(var u=0;u<r.length;u++)r[u].type.eq(f.type)&&(r==this.local&&(r=this.local.slice()),r.splice(u--,1));return n==this.children&&r==this.local?this:r.length||n.length?new Vr(r,n):_r},Vr.prototype.forChild=function(t,e){if(this==_r)return this;if(e.isLeaf)return Vr.empty;for(var n,r,o=0;o<this.children.length;o+=3)if(this.children[o]>=t){this.children[o]==t&&(n=this.children[o+2]);break}for(var i=t+1,s=i+e.content.size,a=0;a<this.local.length;a++){var c=this.local[a];if(c.from<s&&c.to>i&&c.type instanceof Ir){var p=Math.max(i,c.from)-i,l=Math.min(s,c.to)-i;p<l&&(r||(r=[])).push(c.copy(p,l))}}if(r){var h=new Vr(r.sort(Wr));return n?new $r([h,n]):h}return n||_r},Vr.prototype.eq=function(t){if(this==t)return!0;if(!(t instanceof Vr)||this.local.length!=t.local.length||this.children.length!=t.children.length)return!1;for(var e=0;e<this.local.length;e++)if(!this.local[e].eq(t.local[e]))return!1;for(var n=0;n<this.children.length;n+=3)if(this.children[n]!=t.children[n]||this.children[n+1]!=t.children[n+1]||!this.children[n+2].eq(t.children[n+2]))return!1;return!0},Vr.prototype.locals=function(t){return Kr(this.localsInner(t))},Vr.prototype.localsInner=function(t){if(this==_r)return Br;if(t.inlineContent||!this.local.some(Ir.is))return this.local;for(var e=[],n=0;n<this.local.length;n++)this.local[n].type instanceof Ir||e.push(this.local[n]);return e};var _r=new Vr;Vr.empty=_r,Vr.removeOverlap=Kr;var $r=function(t){this.members=t};function jr(t,e){if(!e||!t.length)return t;for(var n=[],r=0;r<t.length;r++){var o=t[r];n.push(new Pr(o.from+e,o.to+e,o.type))}return n}function Lr(t,e,n){if(e.isLeaf)return null;for(var r=n+e.nodeSize,o=null,i=0,s=void 0;i<t.length;i++)(s=t[i])&&s.from>n&&s.to<r&&((o||(o=[])).push(s),t[i]=null);return o}function Jr(t){for(var e=[],n=0;n<t.length;n++)null!=t[n]&&e.push(t[n]);return e}function qr(t,e,n,r){var o=[],i=!1;e.forEach((function(e,s){var a=Lr(t,e,s+n);if(a){i=!0;var c=qr(a,e,n+s+1,r);c!=_r&&o.push(s,s+e.nodeSize,c)}}));for(var s=jr(i?Jr(t):t,-n).sort(Wr),a=0;a<s.length;a++)s[a].type.valid(e,s[a])||(r.onRemove&&r.onRemove(s[a].spec),s.splice(a--,1));return s.length||o.length?new Vr(s,o):_r}function Wr(t,e){return t.from-e.from||t.to-e.to}function Kr(t){for(var e=t,n=0;n<e.length-1;n++){var r=e[n];if(r.from!=r.to)for(var o=n+1;o<e.length;o++){var i=e[o];if(i.from!=r.from){i.from<r.to&&(e==t&&(e=t.slice()),e[n]=r.copy(r.from,i.from),Ur(e,o,r.copy(i.from,r.to)));break}i.to!=r.to&&(e==t&&(e=t.slice()),e[o]=i.copy(i.from,r.to),Ur(e,o+1,i.copy(r.to,i.to)))}}return e}function Ur(t,e,n){for(;e<t.length&&Wr(n,t[e])>0;)e++;t.splice(e,0,n)}function Hr(t){var e=[];return t.someProp("decorations",(function(n){var r=n(t.state);r&&r!=_r&&e.push(r)})),t.cursorWrapper&&e.push(Vr.create(t.state.doc,[t.cursorWrapper.deco])),$r.from(e)}$r.prototype.forChild=function(t,e){if(e.isLeaf)return Vr.empty;for(var n=[],r=0;r<this.members.length;r++){var o=this.members[r].forChild(t,e);o!=_r&&(o instanceof $r?n=n.concat(o.members):n.push(o))}return $r.from(n)},$r.prototype.eq=function(t){if(!(t instanceof $r)||t.members.length!=this.members.length)return!1;for(var e=0;e<this.members.length;e++)if(!this.members[e].eq(t.members[e]))return!1;return!0},$r.prototype.locals=function(t){for(var e,n=!0,r=0;r<this.members.length;r++){var o=this.members[r].localsInner(t);if(o.length)if(e){n&&(e=e.slice(),n=!1);for(var i=0;i<o.length;i++)e.push(o[i])}else e=o}return e?Kr(n?e:e.sort(Wr)):Br},$r.from=function(t){switch(t.length){case 0:return _r;case 1:return t[0];default:return new $r(t)}};var Gr=function(t,e){this._props=e,this.state=e.state,this.dispatch=this.dispatch.bind(this),this._root=null,this.focused=!1,this.dom=t&&t.mount||document.createElement("div"),t&&(t.appendChild?t.appendChild(this.dom):t.apply?t(this.dom):t.mount&&(this.mounted=!0)),this.editable=Zr(this),this.markCursor=null,this.cursorWrapper=null,Yr(this),this.nodeViews=to(this),this.docView=an(this.state.doc,Xr(this),Hr(this),this.dom,this),this.lastSelectedViewDesc=null,this.dragging=null,function(t){t.shiftKey=!1,t.mouseDown=null,t.lastKeyCode=null,t.lastKeyCodeTime=0,t.lastClick={time:0,x:0,y:0,type:""},t.lastSelectionOrigin=null,t.lastSelectionTime=0,t.lastIOSEnter=0,t.composing=!1,t.composingTimeout=null,t.compositionNodes=[],t.compositionEndedAt=-2e8,t.domObserver=new ir(t,(function(e,n,r,o){return Kn(t,e,n,r,o)})),t.domObserver.start(),t.domChangeCount=0,t.eventHandlers=Object.create(null);var e=function(e){var n=ar[e];t.dom.addEventListener(e,t.eventHandlers[e]=function(e){!function(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(var n=e.target;n!=t.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(e))return!1;return!0}(t,e)||hr(t,e)||!t.editable&&e.type in cr||n(t,e)})};for(var n in ar)e(n);we.safari&&t.dom.addEventListener("input",(function(){return null})),lr(t)}(this),this.pluginViews=[],this.updatePluginViews()},Qr={props:{configurable:!0},root:{configurable:!0}};function Xr(t){var e=Object.create(null);return e.class="ProseMirror",e.contenteditable=String(t.editable),t.someProp("attributes",(function(n){if("function"==typeof n&&(n=n(t.state)),n)for(var r in n)"class"==r?e.class+=" "+n[r]:e[r]||"contenteditable"==r||"nodeName"==r||(e[r]=String(n[r]))})),[Pr.node(0,t.state.doc.content.size,e)]}function Yr(t){var e=t.state.selection,n=e.$head,r=e.$anchor,o=e.visible;if(t.markCursor){var i=document.createElement("img");i.setAttribute("mark-placeholder","true"),t.cursorWrapper={dom:i,deco:Pr.widget(n.pos,i,{raw:!0,marks:t.markCursor})}}else if(o||n.pos!=r.pos)t.cursorWrapper=null;else{var s;!t.cursorWrapper||t.cursorWrapper.dom.childNodes.length?((s=document.createElement("div")).style.position="absolute",s.style.left="-100000px"):t.cursorWrapper.deco.pos!=n.pos&&(s=t.cursorWrapper.dom),s&&(t.cursorWrapper={dom:s,deco:Pr.widget(n.pos,s,{raw:!0})})}}function Zr(t){return!t.someProp("editable",(function(e){return!1===e(t.state)}))}function to(t){var e={};return t.someProp("nodeViews",(function(t){for(var n in t)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=t[n])})),e}Qr.props.get=function(){if(this._props.state!=this.state){var t=this._props;for(var e in this._props={},t)this._props[e]=t[e];this._props.state=this.state}return this._props},Gr.prototype.update=function(t){t.handleDOMEvents!=this._props.handleDOMEvents&&lr(this),this._props=t,this.updateStateInner(t.state,!0)},Gr.prototype.setProps=function(t){var e={};for(var n in this._props)e[n]=this._props[n];for(var r in e.state=this.state,t)e[r]=t[r];this.update(e)},Gr.prototype.updateState=function(t){this.updateStateInner(t,this.state.plugins!=t.plugins)},Gr.prototype.updateStateInner=function(t,e){var n=this,r=this.state,o=!1;if(this.state=t,e){var i=to(this);(function(t,e){var n=0,r=0;for(var o in t){if(t[o]!=e[o])return!0;n++}for(var i in e)r++;return n!=r})(i,this.nodeViews)&&(this.nodeViews=i,o=!0),lr(this)}this.editable=Zr(this),Yr(this);var s,a,c,p,l,h,f,u,d,m,v,g=Hr(this),y=Xr(this),w=e?"reset":t.scrollToSelection>r.scrollToSelection?"to selection":"preserve",b=o||!this.docView.matchesNode(t.doc,y,g),x=b||!t.selection.eq(r.selection),k="preserve"==w&&x&&null==this.dom.style.overflowAnchor&&function(t){for(var e,n,r=t.dom.getBoundingClientRect(),o=Math.max(0,r.top),i=(r.left+r.right)/2,s=o+1;s<Math.min(innerHeight,r.bottom);s+=5){var a=t.root.elementFromPoint(i,s);if(a!=t.dom&&t.dom.contains(a)){var c=a.getBoundingClientRect();if(c.top>=o-20){e=a,n=c.top;break}}}return{refDOM:e,refTop:n,stack:Ve(t.dom)}}(this);if(x){this.domObserver.stop();var S=b&&(we.ie||we.chrome)&&!r.selection.empty&&!t.selection.empty&&(p=r.selection,l=t.selection,h=Math.min(p.$anchor.sharedDepth(p.head),l.$anchor.sharedDepth(l.head)),p.$anchor.node(h)!=l.$anchor.node(h));b&&(!o&&this.docView.update(t.doc,y,g,this)||(this.docView.destroy(),this.docView=an(t.doc,y,g,this.dom,this))),S||!(this.mouseDown&&this.domObserver.currentSelection.eq(this.root.getSelection())&&(s=this,a=s.docView.domFromPos(s.state.selection.anchor),c=s.root.getSelection(),Te(a.node,a.offset,c.anchorNode,c.anchorOffset)))?Bn(this,S):(jn(this,t.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(r),"reset"==w)this.dom.scrollTop=0;else if("to selection"==w){var M=this.root.getSelection().focusNode;this.someProp("handleScrollToSelection",(function(t){return t(n)}))||(t.selection instanceof ee?Fe(this,this.docView.domAfterPos(t.selection.from).getBoundingClientRect(),M):Fe(this,this.coordsAtPos(t.selection.head),M))}else k&&(u=(f=k).refDOM,d=f.refTop,m=f.stack,v=u?u.getBoundingClientRect().top:0,_e(m,0==v?0:v-d))},Gr.prototype.destroyPluginViews=function(){for(var t;t=this.pluginViews.pop();)t.destroy&&t.destroy()},Gr.prototype.updatePluginViews=function(t){if(t&&t.plugins==this.state.plugins)for(var e=0;e<this.pluginViews.length;e++){var n=this.pluginViews[e];n.update&&n.update(this,t)}else{this.destroyPluginViews();for(var r=0;r<this.state.plugins.length;r++){var o=this.state.plugins[r];o.spec.view&&this.pluginViews.push(o.spec.view(this))}}},Gr.prototype.someProp=function(t,e){var n,r=this._props&&this._props[t];if(null!=r&&(n=e?e(r):r))return n;var o=this.state.plugins;if(o)for(var i=0;i<o.length;i++){var s=o[i].props[t];if(null!=s&&(n=e?e(s):s))return n}},Gr.prototype.hasFocus=function(){return this.root.activeElement==this.dom},Gr.prototype.focus=function(){this.domObserver.stop(),this.editable&&function(t){if(t.setActive)return t.setActive();if($e)return t.focus($e);var e=Ve(t);t.focus(null==$e?{get preventScroll(){return $e={preventScroll:!0},!0}}:void 0),$e||($e=!1,_e(e,0))}(this.dom),Bn(this),this.domObserver.start()},Qr.root.get=function(){var t=this._root;if(null==t)for(var e=this.dom.parentNode;e;e=e.parentNode)if(9==e.nodeType||11==e.nodeType&&e.host)return e.getSelection||(Object.getPrototypeOf(e).getSelection=function(){return document.getSelection()}),this._root=e;return t||document},Gr.prototype.posAtCoords=function(t){return Je(this,t)},Gr.prototype.coordsAtPos=function(t){return We(this,t)},Gr.prototype.domAtPos=function(t){return this.docView.domFromPos(t)},Gr.prototype.nodeDOM=function(t){var e=this.docView.descAt(t);return e?e.nodeDOM:null},Gr.prototype.posAtDOM=function(t,e,n){void 0===n&&(n=-1);var r=this.docView.posFromDOM(t,e,n);if(null==r)throw new RangeError("DOM position not inside the editor");return r},Gr.prototype.endOfTextblock=function(t,e){return Ye(this,e||this.state,t)},Gr.prototype.destroy=function(){this.docView&&(!function(t){for(var e in t.domObserver.stop(),t.eventHandlers)t.dom.removeEventListener(e,t.eventHandlers[e]);clearTimeout(t.composingTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],Hr(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)},Gr.prototype.dispatchEvent=function(t){return function(t,e){hr(t,e)||!ar[e.type]||!t.editable&&e.type in cr||ar[e.type](t,e)}(this,t)},Gr.prototype.dispatch=function(t){var e=this._props.dispatchTransaction;e?e.call(this,t):this.updateState(this.state.apply(t))},Object.defineProperties(Gr.prototype,Qr);var eo=["ul",0],no=["li",0],ro={parseDOM:[{tag:"ul"}],toDOM:function(){return eo}},oo={parseDOM:[{tag:"li"}],toDOM:function(){return no},defining:!0};function io(t,e){return function(n,r){var o=n.selection,i=o.$from,s=o.$to,c=i.blockRange(s),p=!1,l=c;if(!c)return!1;if(c.depth>=2&&i.node(c.depth-1).type.compatibleContent(t)&&0==c.startIndex){if(0==i.index(c.depth-1))return!1;var h=n.doc.resolve(c.start-2);l=new T(h,h,c.depth),c.endIndex<c.parent.childCount&&(c=new T(i,n.doc.resolve(s.end(c.depth)),c.depth)),p=!0}var f=Rt(l,t,e,c);return!!f&&(r&&r(function(t,e,n,r,o){for(var i=a.empty,s=n.length-1;s>=0;s--)i=a.from(n[s].type.create(n[s].attrs,i));t.step(new Dt(e.start-(r?2:0),e.end,e.start,e.end,new d(i,0,0),n.length,!0));for(var c=0,p=0;p<n.length;p++)n[p].type==o&&(c=p+1);for(var l=n.length-c,h=e.start+n.length-(r?2:0),f=e.parent,u=e.startIndex,m=e.endIndex,v=!0;u<m;u++,v=!1)!v&&zt(t.doc,h,l)&&(t.split(h,l),h+=2*l),h+=f.child(u).nodeSize;return t}(n.tr,c,f,p,t).scrollIntoView()),!0)}}function so(t){return function(e,n){var r=e.selection,o=r.$from,i=r.$to,s=o.blockRange(i,(function(e){return e.childCount&&e.firstChild.type==t}));return!!s&&(!n||(o.node(s.depth-1).type==t?function(t,e,n,r){var o=t.tr,i=r.end,s=r.$to.end(r.depth);i<s&&(o.step(new Dt(i-1,s,i,s,new d(a.from(n.create(null,r.parent.copy())),1,0),1,!0)),r=new T(o.doc.resolve(r.$from.pos),o.doc.resolve(s),r.depth));return e(o.lift(r,It(r)).scrollIntoView()),!0}(e,n,t,s):function(t,e,n){for(var r=t.tr,o=n.parent,i=n.end,s=n.endIndex-1,c=n.startIndex;s>c;s--)i-=o.child(s).nodeSize,r.delete(i-1,i+1);var p=r.doc.resolve(n.start),l=p.nodeAfter,h=0==n.startIndex,f=n.endIndex==o.childCount,u=p.node(-1),m=p.index(-1);if(!u.canReplace(m+(h?0:1),m+1,l.content.append(f?a.empty:a.from(o))))return!1;var v=p.pos,g=v+l.nodeSize;return r.step(new Dt(v-(h?1:0),g+(f?1:0),v+1,g-1,new d((h?a.empty:a.from(o.copy(a.empty))).append(f?a.empty:a.from(o.copy(a.empty))),h?0:1,f?0:1),h?0:1)),e(r.scrollIntoView()),!0}(e,n,s)))}}const ao={content:"inline*",defining:!0,group:"block",toDOM:t=>["h1",{class:"sn-prose-editor"},0],parseDOM:[{tag:"h1"}]},co={content:"inline*",defining:!0,group:"block",toDOM:t=>["h2",{class:"sn-prose-editor"},0],parseDOM:[{tag:"h2"}]},po=new tt({nodes:{doc:{content:"block+",toDOM:t=>["main",{class:"sn-prose-editor"},0],parseDOM:[{tag:"main"}]},paragraph:{content:"inline*",group:"block",toDOM:t=>["p",{class:"sn-prose-editor"},0],parseDOM:[{tag:"p"}]},checklist_item:{attrs:{checked:{default:!1}},content:"inline*",defining:!0,group:"block",toDOM:t=>["div",{class:"checklist-item"},["input",Object.assign({type:"checkbox"},t.attrs.checked&&{checked:"true"})],["p",0]],parseDOM:[{contentElement:"p",tag:"div.checklist-item",getAttrs:t=>({checked:!!t.querySelector("input").checked})}]},unordered_list:Object.assign(Object.assign({},ro),{content:"list_item+",group:"block"}),list_item:Object.assign(Object.assign({},oo),{content:"paragraph+"}),heading1:ao,heading2:co,text:{group:"inline"}},marks:{}});function lo(t,e){return!t.selection.empty&&(e&&e(t.tr.deleteSelection().scrollIntoView()),!0)}function ho(t,e){for(;t;t="start"==e?t.firstChild:t.lastChild)if(t.isTextblock)return!0;return!1}function fo(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){if(t.index(e)>0)return t.doc.resolve(t.before(e+1));if(t.node(e).type.spec.isolating)break}return null}function uo(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){var n=t.node(e);if(t.index(e)+1<n.childCount)return t.doc.resolve(t.after(e+1));if(n.type.spec.isolating)break}return null}function mo(t){for(var e=0;e<t.edgeCount;e++){var n=t.edge(e).type;if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}function vo(t,e){var n=t.selection,r=n.$from,o=n.$to;if(t.selection instanceof ee&&t.selection.node.isBlock)return!(!r.parentOffset||!zt(t.doc,r.pos))&&(e&&e(t.tr.split(r.pos).scrollIntoView()),!0);if(!r.parent.isBlock)return!1;if(e){var i=o.parentOffset==o.parent.content.size,s=t.tr;t.selection instanceof Zt&&s.deleteSelection();var c=0==r.depth?null:mo(r.node(-1).contentMatchAt(r.indexAfter(-1))),p=i&&c?[{type:c}]:null,l=zt(s.doc,s.mapping.map(r.pos),1,p);p||l||!zt(s.doc,s.mapping.map(r.pos),1,c&&[{type:c}])||(p=[{type:c}],l=!0),l&&(s.split(s.mapping.map(r.pos),1,p),i||r.parentOffset||r.parent.type==c||!r.node(-1).canReplace(r.index(-1),r.indexAfter(-1),a.from(c.create(),r.parent))||s.setNodeMarkup(s.mapping.map(r.before()),c)),e(s.scrollIntoView())}return!0}function go(t,e,n){var r,o,i=e.nodeBefore,s=e.nodeAfter;if(i.type.spec.isolating||s.type.spec.isolating)return!1;if(function(t,e,n){var r=e.nodeBefore,o=e.nodeAfter,i=e.index();return!!(r&&o&&r.type.compatibleContent(o.type))&&(!r.content.size&&e.parent.canReplace(i-1,i)?(n&&n(t.tr.delete(e.pos-r.nodeSize,e.pos).scrollIntoView()),!0):!(!e.parent.canReplace(i,i+1)||!o.isTextblock&&!Bt(t.doc,e.pos))&&(n&&n(t.tr.clearIncompatible(e.pos,r.type,r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()),!0))}(t,e,n))return!0;if(e.parent.canReplace(e.index(),e.index()+1)&&(r=(o=i.contentMatchAt(i.childCount)).findWrapping(s.type))&&o.matchType(r[0]||s.type).validEnd){if(n){for(var c=e.pos+s.nodeSize,p=a.empty,l=r.length-1;l>=0;l--)p=a.from(r[l].create(null,p));p=a.from(i.copy(p));var h=t.tr.step(new Dt(e.pos-1,c,e.pos,c,new d(p,1,0),r.length,!0)),f=c+2*r.length;Bt(h.doc,f)&&h.join(f),n(h.scrollIntoView())}return!0}var u=Qt.findFrom(e,1),m=u&&u.$from.blockRange(u.$to),v=m&&It(m);return null!=v&&v>=e.depth&&(n&&n(t.tr.lift(m,v).scrollIntoView()),!0)}function yo(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return function(e,n,r){for(var o=0;o<t.length;o++)if(t[o](e,n,r))return!0;return!1}}var wo=yo(lo,(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("backward",t):r.parentOffset>0))return!1;var o=fo(r);if(!o){var i=r.blockRange(),s=i&&It(i);return null!=s&&(e&&e(t.tr.lift(i,s).scrollIntoView()),!0)}var a=o.nodeBefore;if(!a.type.spec.isolating&&go(t,o,e))return!0;if(0==r.parent.content.size&&(ho(a,"end")||ee.isSelectable(a))){if(e){var c=t.tr.deleteRange(r.before(),r.after());c.setSelection(ho(a,"end")?Qt.findFrom(c.doc.resolve(c.mapping.map(o.pos,-1)),-1):ee.create(c.doc,o.pos-a.nodeSize)),e(c.scrollIntoView())}return!0}return!(!a.isAtom||o.depth!=r.depth-1)&&(e&&e(t.tr.delete(o.pos-a.nodeSize,o.pos).scrollIntoView()),!0)}),(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("backward",t):r.parentOffset>0))return!1;var o=fo(r),i=o&&o.nodeBefore;return!(!i||!ee.isSelectable(i))&&(e&&e(t.tr.setSelection(ee.create(t.doc,o.pos-i.nodeSize)).scrollIntoView()),!0)})),bo=yo(lo,(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=uo(r);if(!o)return!1;var i=o.nodeAfter;if(go(t,o,e))return!0;if(0==r.parent.content.size&&(ho(i,"start")||ee.isSelectable(i))){if(e){var s=t.tr.deleteRange(r.before(),r.after());s.setSelection(ho(i,"start")?Qt.findFrom(s.doc.resolve(s.mapping.map(o.pos)),1):ee.create(s.doc,s.mapping.map(o.pos))),e(s.scrollIntoView())}return!0}return!(!i.isAtom||o.depth!=r.depth-1)&&(e&&e(t.tr.delete(o.pos,o.pos+i.nodeSize).scrollIntoView()),!0)}),(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=uo(r),i=o&&o.nodeAfter;return!(!i||!ee.isSelectable(i))&&(e&&e(t.tr.setSelection(ee.create(t.doc,o.pos)).scrollIntoView()),!0)})),xo={Enter:yo((function(t,e){var n=t.selection,r=n.$head,o=n.$anchor;return!(!r.parent.type.spec.code||!r.sameParent(o))&&(e&&e(t.tr.insertText("\n").scrollIntoView()),!0)}),(function(t,e){var n=t.selection,r=n.$from,o=n.$to;if(r.parent.inlineContent||o.parent.inlineContent)return!1;var i=mo(r.parent.contentMatchAt(o.indexAfter()));if(!i||!i.isTextblock)return!1;if(e){var s=(!r.parentOffset&&o.index()<o.parent.childCount?r:o).pos,a=t.tr.insert(s,i.createAndFill());a.setSelection(Zt.create(a.doc,s+1)),e(a.scrollIntoView())}return!0}),(function(t,e){var n=t.selection.$cursor;if(!n||n.parent.content.size)return!1;if(n.depth>1&&n.after()!=n.end(-1)){var r=n.before();if(zt(t.doc,r))return e&&e(t.tr.split(r).scrollIntoView()),!0}var o=n.blockRange(),i=o&&It(o);return null!=i&&(e&&e(t.tr.lift(o,i).scrollIntoView()),!0)}),vo),"Mod-Enter":function(t,e){var n=t.selection,r=n.$head,o=n.$anchor;if(!r.parent.type.spec.code||!r.sameParent(o))return!1;var i=r.node(-1),s=r.indexAfter(-1),a=mo(i.contentMatchAt(s));if(!i.canReplaceWith(s,s,a))return!1;if(e){var c=r.after(),p=t.tr.replaceWith(c,c,a.createAndFill());p.setSelection(Qt.near(p.doc.resolve(c),1)),e(p.scrollIntoView())}return!0},Backspace:wo,"Mod-Backspace":wo,Delete:bo,"Mod-Delete":bo,"Mod-a":function(t,e){return e&&e(t.tr.setSelection(new re(t.doc))),!0}},ko={"Ctrl-h":xo.Backspace,"Alt-Backspace":xo["Mod-Backspace"],"Ctrl-d":xo.Delete,"Ctrl-Alt-Backspace":xo["Mod-Delete"],"Alt-Delete":xo["Mod-Delete"],"Alt-d":xo["Mod-Delete"]};for(var So in xo)ko[So]=xo[So];var Mo=("undefined"!=typeof navigator?/Mac/.test(navigator.platform):"undefined"!=typeof os&&"darwin"==os.platform())?ko:xo;class Oo extends me{constructor(t){super({view:e=>(this.view=e,t.addEventListener("click",this.handleToolbarClick),{destroy(){t.removeEventListener("click",this.handleToolbarClick)}}),props:{handleKeyDown:(t,e)=>!1}}),this.swapTextBlock=t=>{const{dispatch:e,state:n}=this.view,{tr:r}=n,{from:o,to:i}=n.selection;r.setBlockType(o,i,t),e(r),this.view.focus()},this.toggleList=(t,e)=>{const{dispatch:n,state:r}=this.view;yo(io(t),so(e))(r,n)},this.toggleChecklistItem=()=>{const{dispatch:t,state:e}=this.view,{doc:n,tr:r}=e,{$from:o,$to:i}=e.selection,s=o.blockRange(i);for(let t=s.startIndex;t<s.endIndex;t+=1)if(s.parent.child(t).type===po.nodes.checklist_item)return void this.swapTextBlock(po.nodes.paragraph);this.swapTextBlock(po.nodes.checklist_item)},this.handleToolbarClick=t=>{const e=t.target;e.hasAttribute("data-format")&&this.applyFormat(e.getAttribute("data-format"))},this.applyFormat=t=>{switch(t){case"paragraph":this.swapTextBlock(po.nodes.paragraph);case"heading1":this.swapTextBlock(po.nodes.heading1);break;case"heading2":this.swapTextBlock(po.nodes.heading2);break;case"unordered_list":this.toggleList(po.nodes.unordered_list,po.nodes.list_item);break;case"checklist_item":this.toggleChecklistItem()}}}}const Co={checklist_item(t,e,n){const r=document.createElement("div");r.classList.add("checklist-item");const o=document.createElement("input");o.type="checkbox",o.checked=t.attrs.checked,o.contentEditable="false";const i=document.createElement("p");r.appendChild(o),r.appendChild(i);const s=()=>{const t=o.checked,{tr:r}=e.state,i=n();e.dispatch(r.setNodeMarkup(i,void 0,{checked:t}))};return o.addEventListener("click",s),{dom:r,contentDOM:i,destroy(){o.removeEventListener("click",s)}}}};for(var No={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},To=No,Do={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:";",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},Eo="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),Ao="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),Io="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),Ro="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),Po="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),zo=Eo&&(Ro||+Eo[1]<57)||Io&&Ro,Bo=0;Bo<10;Bo++)No[48+Bo]=No[96+Bo]=String(Bo);for(Bo=1;Bo<=24;Bo++)No[Bo+111]="F"+Bo;for(Bo=65;Bo<=90;Bo++)No[Bo]=String.fromCharCode(Bo+32),Do[Bo]=String.fromCharCode(Bo);for(var Fo in No)Do.hasOwnProperty(Fo)||(Do[Fo]=No[Fo]);var Vo=function(t){var e=!(zo&&(t.ctrlKey||t.altKey||t.metaKey)||(Ao||Po)&&t.shiftKey&&t.key&&1==t.key.length)&&t.key||(t.shiftKey?Do:No)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e},_o="undefined"!=typeof navigator&&/Mac/.test(navigator.platform);function $o(t){var e,n,r,o,i=t.split(/-(?!$)/),s=i[i.length-1];"Space"==s&&(s=" ");for(var a=0;a<i.length-1;a++){var c=i[a];if(/^(cmd|meta|m)$/i.test(c))o=!0;else if(/^a(lt)?$/i.test(c))e=!0;else if(/^(c|ctrl|control)$/i.test(c))n=!0;else if(/^s(hift)?$/i.test(c))r=!0;else{if(!/^mod$/i.test(c))throw new Error("Unrecognized modifier name: "+c);_o?o=!0:n=!0}}return e&&(s="Alt-"+s),n&&(s="Ctrl-"+s),o&&(s="Meta-"+s),r&&(s="Shift-"+s),s}function jo(t,e,n){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==n&&e.shiftKey&&(t="Shift-"+t),t}function Lo(t){return new me({props:{handleKeyDown:Jo(t)}})}function Jo(t){var e=function(t){var e=Object.create(null);for(var n in t)e[$o(n)]=t[n];return e}(t);return function(t,n){var r,o=Vo(n),i=1==o.length&&" "!=o,s=e[jo(o,n,!i)];if(s&&s(t.state,t.dispatch,t))return!0;if(i&&(n.shiftKey||n.altKey||n.metaKey)&&(r=To[n.keyCode])&&r!=o){var a=e[jo(r,n,!0)];if(a&&a(t.state,t.dispatch,t))return!0}else if(i&&n.shiftKey){var c=e[jo(o,n,!0)];if(c&&c(t.state,t.dispatch,t))return!0}return!1}}const qo=[Lo({Enter:(Wo=po.nodes.bullet_list,function(t,e){var n=t.selection,r=n.$from,o=n.$to,i=n.node;if(i&&i.isBlock||r.depth<2||!r.sameParent(o))return!1;var s=r.node(-1);if(s.type!=Wo)return!1;if(0==r.parent.content.size){if(2==r.depth||r.node(-3).type!=Wo||r.index(-2)!=r.node(-2).childCount-1)return!1;if(e){for(var c=a.empty,p=r.index(-1)>0,l=r.depth-(p?1:2);l>=r.depth-3;l--)c=a.from(r.node(l).copy(c));c=c.append(a.from(Wo.createAndFill()));var h=t.tr.replace(r.before(p?null:-1),r.after(-3),new d(c,p?3:2,2));h.setSelection(t.selection.constructor.near(h.doc.resolve(r.pos+(p?3:2)))),e(h.scrollIntoView())}return!0}var f=o.pos==r.end()?s.contentMatchAt(0).defaultType:null,u=t.tr.delete(r.pos,o.pos),m=f&&[null,{type:f}];return!!zt(u.doc,r.pos,2,m)&&(e&&e(u.split(r.pos,2,m).scrollIntoView()),!0)})}),Lo({Enter:(t,e)=>{const{selection:{$from:n,from:r},tr:o}=t;return n.parent.type===po.nodes.checklist_item&&(o.deleteSelection(),o.split(r,void 0,[{type:po.nodes.checklist_item,attrs:{checked:!1}}]),e(o),!0)}}),Lo(Mo)];var Wo;const Ko=document.createElement("template");Ko.innerHTML='<main>\n  <h1>\n    Alice’s Adventures in Wonderland\n  </h1>\n  <h2>\n    Characters\n  </h2>\n  <ul>\n    <li><p>Alice</p></li>\n    <li><p>The Mad Hatter</p></li>\n    <li><p>The March Hare</p></li>\n    <li><p>Bill</p></li>\n    <li><p>The Queen of Hearts</p></li>\n    <li><p>The King of Hearts</p></li>\n  </ul>\n  <h2>Chapter 1: Down the Rabbit Hole</h2>\n  <p>\n  Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, “and what is the use of a book,” thought Alice “without pictures or conversations?”\n  </p>\n  <p>\n  So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.\n  </p>\n  <div class="checklist-item" data-checked="true">\n    <input type="checkbox" />\n    <span>Drink the potion</span>\n  </div>\n  <div class="checklist-item">\n    <input type="checkbox" checked />\n    <span>Eat the cake</span>\n  </div>\n  <div class="checklist-item">\n    <input type="checkbox" />\n    <span>Nibble the mushroom</span>\n  </div>\n</main>\n';Ko.content.firstElementChild;new o.a([{name:"stream-context-item"}]),window.view=new Gr(document.querySelector("#editor"),{state:fe.create({doc:po.nodes.doc.create({},po.nodes.paragraph.createAndFill()),plugins:[...qo,new Oo(document.querySelector("#toolbar")),new me({props:{nodeViews:Co}})]})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,