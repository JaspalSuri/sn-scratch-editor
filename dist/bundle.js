/*! For license information please see bundle.js.LICENSE.txt */
!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=28)}([function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(t,e){return r.call(t,e)}function i(t){return!(t>=55296&&t<=57343)&&(!(t>=64976&&t<=65007)&&(65535!=(65535&t)&&65534!=(65535&t)&&(!(t>=0&&t<=8)&&(11!==t&&(!(t>=14&&t<=31)&&(!(t>=127&&t<=159)&&!(t>1114111)))))))}function s(t){if(t>65535){var e=55296+((t-=65536)>>10),n=56320+(1023&t);return String.fromCharCode(e,n)}return String.fromCharCode(t)}var a=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,c=new RegExp(a.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),l=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,u=n(14);var p=/[&<>"]/,h=/[&<>"]/g,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function d(t){return f[t]}var m=/[.?*+^$[\]\\(){}|-]/g;var g=n(3);e.lib={},e.lib.mdurl=n(4),e.lib.ucmicro=n(16),e.assign=function(t){var e=Array.prototype.slice.call(arguments,1);return e.forEach((function(e){if(e){if("object"!=typeof e)throw new TypeError(e+"must be object");Object.keys(e).forEach((function(n){t[n]=e[n]}))}})),t},e.isString=function(t){return"[object String]"===function(t){return Object.prototype.toString.call(t)}(t)},e.has=o,e.unescapeMd=function(t){return t.indexOf("\\")<0?t:t.replace(a,"$1")},e.unescapeAll=function(t){return t.indexOf("\\")<0&&t.indexOf("&")<0?t:t.replace(c,(function(t,e,n){return e||function(t,e){var n=0;return o(u,e)?u[e]:35===e.charCodeAt(0)&&l.test(e)&&i(n="x"===e[1].toLowerCase()?parseInt(e.slice(2),16):parseInt(e.slice(1),10))?s(n):t}(t,n)}))},e.isValidEntityCode=i,e.fromCodePoint=s,e.escapeHtml=function(t){return p.test(t)?t.replace(h,d):t},e.arrayReplaceAt=function(t,e,n){return[].concat(t.slice(0,e),n,t.slice(e+1))},e.isSpace=function(t){switch(t){case 9:case 32:return!0}return!1},e.isWhiteSpace=function(t){if(t>=8192&&t<=8202)return!0;switch(t){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return!0}return!1},e.isMdAsciiPunct=function(t){switch(t){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return!0;default:return!1}},e.isPunctChar=function(t){return g.test(t)},e.escapeRE=function(t){return t.replace(m,"\\$&")},e.normalizeReference=function(t){return t=t.trim().replace(/\s+/g," "),"Ṿ"==="ẞ".toLowerCase()&&(t=t.replace(/ẞ/g,"ß")),t.toLowerCase().toUpperCase()}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(t,e){return r.call(t,e)}function i(t){return!(t>=55296&&t<=57343)&&(!(t>=64976&&t<=65007)&&(65535!=(65535&t)&&65534!=(65535&t)&&(!(t>=0&&t<=8)&&(11!==t&&(!(t>=14&&t<=31)&&(!(t>=127&&t<=159)&&!(t>1114111)))))))}function s(t){if(t>65535){var e=55296+((t-=65536)>>10),n=56320+(1023&t);return String.fromCharCode(e,n)}return String.fromCharCode(t)}var a=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,c=new RegExp(a.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),l=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,u=n(21);var p=/[&<>"]/,h=/[&<>"]/g,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function d(t){return f[t]}var m=/[.?*+^$[\]\\(){}|-]/g;var g=n(3);e.lib={},e.lib.mdurl=n(4),e.lib.ucmicro=n(16),e.assign=function(t){var e=Array.prototype.slice.call(arguments,1);return e.forEach((function(e){if(e){if("object"!=typeof e)throw new TypeError(e+"must be object");Object.keys(e).forEach((function(n){t[n]=e[n]}))}})),t},e.isString=function(t){return"[object String]"===function(t){return Object.prototype.toString.call(t)}(t)},e.has=o,e.unescapeMd=function(t){return t.indexOf("\\")<0?t:t.replace(a,"$1")},e.unescapeAll=function(t){return t.indexOf("\\")<0&&t.indexOf("&")<0?t:t.replace(c,(function(t,e,n){return e||function(t,e){var n=0;return o(u,e)?u[e]:35===e.charCodeAt(0)&&l.test(e)&&i(n="x"===e[1].toLowerCase()?parseInt(e.slice(2),16):parseInt(e.slice(1),10))?s(n):t}(t,n)}))},e.isValidEntityCode=i,e.fromCodePoint=s,e.escapeHtml=function(t){return p.test(t)?t.replace(h,d):t},e.arrayReplaceAt=function(t,e,n){return[].concat(t.slice(0,e),n,t.slice(e+1))},e.isSpace=function(t){switch(t){case 9:case 32:return!0}return!1},e.isWhiteSpace=function(t){if(t>=8192&&t<=8202)return!0;switch(t){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return!0}return!1},e.isMdAsciiPunct=function(t){switch(t){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return!0;default:return!1}},e.isPunctChar=function(t){return g.test(t)},e.escapeRE=function(t){return t.replace(m,"\\$&")},e.normalizeReference=function(t){return t=t.trim().replace(/\s+/g," "),"Ṿ"==="ẞ".toLowerCase()&&(t=t.replace(/ẞ/g,"ß")),t.toLowerCase().toUpperCase()}},function(t,e,n){"use strict";function r(t,e,n){this.type=t,this.tag=e,this.attrs=null,this.map=null,this.nesting=n,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1}r.prototype.attrIndex=function(t){var e,n,r;if(!this.attrs)return-1;for(n=0,r=(e=this.attrs).length;n<r;n++)if(e[n][0]===t)return n;return-1},r.prototype.attrPush=function(t){this.attrs?this.attrs.push(t):this.attrs=[t]},r.prototype.attrSet=function(t,e){var n=this.attrIndex(t),r=[t,e];n<0?this.attrPush(r):this.attrs[n]=r},r.prototype.attrGet=function(t){var e=this.attrIndex(t),n=null;return e>=0&&(n=this.attrs[e][1]),n},r.prototype.attrJoin=function(t,e){var n=this.attrIndex(t);n<0?this.attrPush([t,e]):this.attrs[n][1]=this.attrs[n][1]+" "+e},t.exports=r},function(t,e){t.exports=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/},function(t,e,n){"use strict";t.exports.encode=n(30),t.exports.decode=n(31),t.exports.format=n(32),t.exports.parse=n(33)},function(t,e){t.exports=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/},function(t,e){t.exports=/[\0-\x1F\x7F-\x9F]/},function(t,e){t.exports=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/},function(t,e,n){"use strict";function r(){this.__rules__=[],this.__cache__=null}r.prototype.__find__=function(t){for(var e=0;e<this.__rules__.length;e++)if(this.__rules__[e].name===t)return e;return-1},r.prototype.__compile__=function(){var t=this,e=[""];t.__rules__.forEach((function(t){t.enabled&&t.alt.forEach((function(t){e.indexOf(t)<0&&e.push(t)}))})),t.__cache__={},e.forEach((function(e){t.__cache__[e]=[],t.__rules__.forEach((function(n){n.enabled&&(e&&n.alt.indexOf(e)<0||t.__cache__[e].push(n.fn))}))}))},r.prototype.at=function(t,e,n){var r=this.__find__(t),o=n||{};if(-1===r)throw new Error("Parser rule not found: "+t);this.__rules__[r].fn=e,this.__rules__[r].alt=o.alt||[],this.__cache__=null},r.prototype.before=function(t,e,n,r){var o=this.__find__(t),i=r||{};if(-1===o)throw new Error("Parser rule not found: "+t);this.__rules__.splice(o,0,{name:e,enabled:!0,fn:n,alt:i.alt||[]}),this.__cache__=null},r.prototype.after=function(t,e,n,r){var o=this.__find__(t),i=r||{};if(-1===o)throw new Error("Parser rule not found: "+t);this.__rules__.splice(o+1,0,{name:e,enabled:!0,fn:n,alt:i.alt||[]}),this.__cache__=null},r.prototype.push=function(t,e,n){var r=n||{};this.__rules__.push({name:t,enabled:!0,fn:e,alt:r.alt||[]}),this.__cache__=null},r.prototype.enable=function(t,e){Array.isArray(t)||(t=[t]);var n=[];return t.forEach((function(t){var r=this.__find__(t);if(r<0){if(e)return;throw new Error("Rules manager: invalid rule name "+t)}this.__rules__[r].enabled=!0,n.push(t)}),this),this.__cache__=null,n},r.prototype.enableOnly=function(t,e){Array.isArray(t)||(t=[t]),this.__rules__.forEach((function(t){t.enabled=!1})),this.enable(t,e)},r.prototype.disable=function(t,e){Array.isArray(t)||(t=[t]);var n=[];return t.forEach((function(t){var r=this.__find__(t);if(r<0){if(e)return;throw new Error("Rules manager: invalid rule name "+t)}this.__rules__[r].enabled=!1,n.push(t)}),this),this.__cache__=null,n},r.prototype.getRules=function(t){return null===this.__cache__&&this.__compile__(),this.__cache__[t]||[]},t.exports=r},function(t,e,n){"use strict";function r(){this.__rules__=[],this.__cache__=null}r.prototype.__find__=function(t){for(var e=0;e<this.__rules__.length;e++)if(this.__rules__[e].name===t)return e;return-1},r.prototype.__compile__=function(){var t=this,e=[""];t.__rules__.forEach((function(t){t.enabled&&t.alt.forEach((function(t){e.indexOf(t)<0&&e.push(t)}))})),t.__cache__={},e.forEach((function(e){t.__cache__[e]=[],t.__rules__.forEach((function(n){n.enabled&&(e&&n.alt.indexOf(e)<0||t.__cache__[e].push(n.fn))}))}))},r.prototype.at=function(t,e,n){var r=this.__find__(t),o=n||{};if(-1===r)throw new Error("Parser rule not found: "+t);this.__rules__[r].fn=e,this.__rules__[r].alt=o.alt||[],this.__cache__=null},r.prototype.before=function(t,e,n,r){var o=this.__find__(t),i=r||{};if(-1===o)throw new Error("Parser rule not found: "+t);this.__rules__.splice(o,0,{name:e,enabled:!0,fn:n,alt:i.alt||[]}),this.__cache__=null},r.prototype.after=function(t,e,n,r){var o=this.__find__(t),i=r||{};if(-1===o)throw new Error("Parser rule not found: "+t);this.__rules__.splice(o+1,0,{name:e,enabled:!0,fn:n,alt:i.alt||[]}),this.__cache__=null},r.prototype.push=function(t,e,n){var r=n||{};this.__rules__.push({name:t,enabled:!0,fn:e,alt:r.alt||[]}),this.__cache__=null},r.prototype.enable=function(t,e){Array.isArray(t)||(t=[t]);var n=[];return t.forEach((function(t){var r=this.__find__(t);if(r<0){if(e)return;throw new Error("Rules manager: invalid rule name "+t)}this.__rules__[r].enabled=!0,n.push(t)}),this),this.__cache__=null,n},r.prototype.enableOnly=function(t,e){Array.isArray(t)||(t=[t]),this.__rules__.forEach((function(t){t.enabled=!1})),this.enable(t,e)},r.prototype.disable=function(t,e){Array.isArray(t)||(t=[t]);var n=[];return t.forEach((function(t){var r=this.__find__(t);if(r<0){if(e)return;throw new Error("Rules manager: invalid rule name "+t)}this.__rules__[r].enabled=!1,n.push(t)}),this),this.__cache__=null,n},r.prototype.getRules=function(t){return null===this.__cache__&&this.__compile__(),this.__cache__[t]||[]},t.exports=r},function(t,e,n){"use strict";function r(t,e,n){this.type=t,this.tag=e,this.attrs=null,this.map=null,this.nesting=n,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1}r.prototype.attrIndex=function(t){var e,n,r;if(!this.attrs)return-1;for(n=0,r=(e=this.attrs).length;n<r;n++)if(e[n][0]===t)return n;return-1},r.prototype.attrPush=function(t){this.attrs?this.attrs.push(t):this.attrs=[t]},r.prototype.attrSet=function(t,e){var n=this.attrIndex(t),r=[t,e];n<0?this.attrPush(r):this.attrs[n]=r},r.prototype.attrGet=function(t){var e=this.attrIndex(t),n=null;return e>=0&&(n=this.attrs[e][1]),n},r.prototype.attrJoin=function(t,e){var n=this.attrIndex(t);n<0?this.attrPush([t,e]):this.attrs[n][1]=this.attrs[n][1]+" "+e},t.exports=r},function(t,e,n){"use strict";var r=n(0).normalizeReference,o=n(0).isSpace;t.exports=function(t,e){var n,i,s,a,c,l,u,p,h,f,d,m,g,v="",y=t.pos,k=t.posMax;if(33!==t.src.charCodeAt(t.pos))return!1;if(91!==t.src.charCodeAt(t.pos+1))return!1;if(l=t.pos+2,(c=t.md.helpers.parseLinkLabel(t,t.pos+1,!1))<0)return!1;if((u=c+1)<k&&40===t.src.charCodeAt(u)){for(u++;u<k&&(i=t.src.charCodeAt(u),o(i)||10===i);u++);if(u>=k)return!1;for(g=u,(h=t.md.helpers.parseLinkDestination(t.src,u,t.posMax)).ok&&(v=t.md.normalizeLink(h.str),t.md.validateLink(v)?u=h.pos:v=""),g=u;u<k&&(i=t.src.charCodeAt(u),o(i)||10===i);u++);if(h=t.md.helpers.parseLinkTitle(t.src,u,t.posMax),u<k&&g!==u&&h.ok)for(f=h.str,u=h.pos;u<k&&(i=t.src.charCodeAt(u),o(i)||10===i);u++);else f="";if(u>=k||41!==t.src.charCodeAt(u))return t.pos=y,!1;u++}else{if(void 0===t.env.references)return!1;if(u<k&&91===t.src.charCodeAt(u)?(g=u+1,(u=t.md.helpers.parseLinkLabel(t,u))>=0?a=t.src.slice(g,u++):u=c+1):u=c+1,a||(a=t.src.slice(l,c)),!(p=t.env.references[r(a)]))return t.pos=y,!1;v=p.href,f=p.title}return e||(s=t.src.slice(l,c),t.md.inline.parse(s,t.md,t.env,m=[]),(d=t.push("image","img",0)).attrs=n=[["src",v],["alt",""]],d.children=m,d.content=s,f&&n.push(["title",f])),t.pos=u,t.posMax=k,!0}},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"></path><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg>'},function(t,e,n){"use strict";t.exports=n(15)},function(t){t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(t,e,n){"use strict";e.Any=n(5),e.Cc=n(6),e.Cf=n(34),e.P=n(3),e.Z=n(7)},function(t,e,n){"use strict";var r="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",o="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",i=new RegExp("^(?:"+r+"|"+o+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),s=new RegExp("^(?:"+r+"|"+o+")");t.exports.HTML_TAG_RE=i,t.exports.HTML_OPEN_CLOSE_TAG_RE=s},function(t,e,n){"use strict";function r(t,e){var n,r,o,i,s,a=[],c=e.length;for(n=0;n<c;n++)126===(o=e[n]).marker&&-1!==o.end&&(i=e[o.end],(s=t.tokens[o.token]).type="s_open",s.tag="s",s.nesting=1,s.markup="~~",s.content="",(s=t.tokens[i.token]).type="s_close",s.tag="s",s.nesting=-1,s.markup="~~",s.content="","text"===t.tokens[i.token-1].type&&"~"===t.tokens[i.token-1].content&&a.push(i.token-1));for(;a.length;){for(r=(n=a.pop())+1;r<t.tokens.length&&"s_close"===t.tokens[r].type;)r++;n!==--r&&(s=t.tokens[r],t.tokens[r]=t.tokens[n],t.tokens[n]=s)}}t.exports.tokenize=function(t,e){var n,r,o,i,s=t.pos,a=t.src.charCodeAt(s);if(e)return!1;if(126!==a)return!1;if(o=(r=t.scanDelims(t.pos,!0)).length,i=String.fromCharCode(a),o<2)return!1;for(o%2&&(t.push("text","",0).content=i,o--),n=0;n<o;n+=2)t.push("text","",0).content=i+i,t.delimiters.push({marker:a,length:0,jump:n,token:t.tokens.length-1,end:-1,open:r.can_open,close:r.can_close});return t.pos+=r.length,!0},t.exports.postProcess=function(t){var e,n=t.tokens_meta,o=t.tokens_meta.length;for(r(t,t.delimiters),e=0;e<o;e++)n[e]&&n[e].delimiters&&r(t,n[e].delimiters)}},function(t,e,n){"use strict";function r(t,e){var n,r,o,i,s,a;for(n=e.length-1;n>=0;n--)95!==(r=e[n]).marker&&42!==r.marker||-1!==r.end&&(o=e[r.end],a=n>0&&e[n-1].end===r.end+1&&e[n-1].token===r.token-1&&e[r.end+1].token===o.token+1&&e[n-1].marker===r.marker,s=String.fromCharCode(r.marker),(i=t.tokens[r.token]).type=a?"strong_open":"em_open",i.tag=a?"strong":"em",i.nesting=1,i.markup=a?s+s:s,i.content="",(i=t.tokens[o.token]).type=a?"strong_close":"em_close",i.tag=a?"strong":"em",i.nesting=-1,i.markup=a?s+s:s,i.content="",a&&(t.tokens[e[n-1].token].content="",t.tokens[e[r.end+1].token].content="",n--))}t.exports.tokenize=function(t,e){var n,r,o=t.pos,i=t.src.charCodeAt(o);if(e)return!1;if(95!==i&&42!==i)return!1;for(r=t.scanDelims(t.pos,42===i),n=0;n<r.length;n++)t.push("text","",0).content=String.fromCharCode(i),t.delimiters.push({marker:i,length:r.length,jump:n,token:t.tokens.length-1,end:-1,open:r.can_open,close:r.can_close});return t.pos+=r.length,!0},t.exports.postProcess=function(t){var e,n=t.tokens_meta,o=t.tokens_meta.length;for(r(t,t.delimiters),e=0;e<o;e++)n[e]&&n[e].delimiters&&r(t,n[e].delimiters)}},function(t,e,n){(function(t,r){var o;!function(i){e&&e.nodeType,t&&t.nodeType;var s="object"==typeof r&&r;s.global!==s&&s.window!==s&&s.self;var a,c=2147483647,l=/^xn--/,u=/[^\x20-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},f=Math.floor,d=String.fromCharCode;function m(t){throw new RangeError(h[t])}function g(t,e){for(var n=t.length,r=[];n--;)r[n]=e(t[n]);return r}function v(t,e){var n=t.split("@"),r="";return n.length>1&&(r=n[0]+"@",t=n[1]),r+g((t=t.replace(p,".")).split("."),e).join(".")}function y(t){for(var e,n,r=[],o=0,i=t.length;o<i;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<i?56320==(64512&(n=t.charCodeAt(o++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--):r.push(e);return r}function k(t){return g(t,(function(t){var e="";return t>65535&&(e+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=d(t)})).join("")}function _(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function b(t,e,n){var r=0;for(t=n?f(t/700):t>>1,t+=f(t/e);t>455;r+=36)t=f(t/35);return f(r+36*t/(t+38))}function x(t){var e,n,r,o,i,s,a,l,u,p,h,d=[],g=t.length,v=0,y=128,_=72;for((n=t.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)t.charCodeAt(r)>=128&&m("not-basic"),d.push(t.charCodeAt(r));for(o=n>0?n+1:0;o<g;){for(i=v,s=1,a=36;o>=g&&m("invalid-input"),((l=(h=t.charCodeAt(o++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:36)>=36||l>f((c-v)/s))&&m("overflow"),v+=l*s,!(l<(u=a<=_?1:a>=_+26?26:a-_));a+=36)s>f(c/(p=36-u))&&m("overflow"),s*=p;_=b(v-i,e=d.length+1,0==i),f(v/e)>c-y&&m("overflow"),y+=f(v/e),v%=e,d.splice(v++,0,y)}return k(d)}function w(t){var e,n,r,o,i,s,a,l,u,p,h,g,v,k,x,w=[];for(g=(t=y(t)).length,e=128,n=0,i=72,s=0;s<g;++s)(h=t[s])<128&&w.push(d(h));for(r=o=w.length,o&&w.push("-");r<g;){for(a=c,s=0;s<g;++s)(h=t[s])>=e&&h<a&&(a=h);for(a-e>f((c-n)/(v=r+1))&&m("overflow"),n+=(a-e)*v,e=a,s=0;s<g;++s)if((h=t[s])<e&&++n>c&&m("overflow"),h==e){for(l=n,u=36;!(l<(p=u<=i?1:u>=i+26?26:u-i));u+=36)x=l-p,k=36-p,w.push(d(_(p+x%k,0))),l=f(x/k);w.push(d(_(l,0))),i=b(n,v,r==o),n=0,++r}++n,++e}return w.join("")}a={version:"1.4.1",ucs2:{decode:y,encode:k},decode:x,encode:w,toASCII:function(t){return v(t,(function(t){return u.test(t)?"xn--"+w(t):t}))},toUnicode:function(t){return v(t,(function(t){return l.test(t)?x(t.slice(4).toLowerCase()):t}))}},void 0===(o=function(){return a}.call(e,n,e,t))||(t.exports=o)}()}).call(this,n(76)(t),n(77))},function(t,e,n){"use strict";t.exports=n(15)},function(t,e,n){"use strict";var r="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",o="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",i=new RegExp("^(?:"+r+"|"+o+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),s=new RegExp("^(?:"+r+"|"+o+")");t.exports.HTML_TAG_RE=i,t.exports.HTML_OPEN_CLOSE_TAG_RE=s},function(t,e,n){"use strict";function r(t,e){var n,r,o,i,s,a=[],c=e.length;for(n=0;n<c;n++)126===(o=e[n]).marker&&-1!==o.end&&(i=e[o.end],(s=t.tokens[o.token]).type="s_open",s.tag="s",s.nesting=1,s.markup="~~",s.content="",(s=t.tokens[i.token]).type="s_close",s.tag="s",s.nesting=-1,s.markup="~~",s.content="","text"===t.tokens[i.token-1].type&&"~"===t.tokens[i.token-1].content&&a.push(i.token-1));for(;a.length;){for(r=(n=a.pop())+1;r<t.tokens.length&&"s_close"===t.tokens[r].type;)r++;n!==--r&&(s=t.tokens[r],t.tokens[r]=t.tokens[n],t.tokens[n]=s)}}t.exports.tokenize=function(t,e){var n,r,o,i,s=t.pos,a=t.src.charCodeAt(s);if(e)return!1;if(126!==a)return!1;if(o=(r=t.scanDelims(t.pos,!0)).length,i=String.fromCharCode(a),o<2)return!1;for(o%2&&(t.push("text","",0).content=i,o--),n=0;n<o;n+=2)t.push("text","",0).content=i+i,t.delimiters.push({marker:a,length:0,jump:n,token:t.tokens.length-1,end:-1,open:r.can_open,close:r.can_close});return t.pos+=r.length,!0},t.exports.postProcess=function(t){var e,n=t.tokens_meta,o=t.tokens_meta.length;for(r(t,t.delimiters),e=0;e<o;e++)n[e]&&n[e].delimiters&&r(t,n[e].delimiters)}},function(t,e,n){"use strict";function r(t,e){var n,r,o,i,s,a;for(n=e.length-1;n>=0;n--)95!==(r=e[n]).marker&&42!==r.marker||-1!==r.end&&(o=e[r.end],a=n>0&&e[n-1].end===r.end+1&&e[n-1].token===r.token-1&&e[r.end+1].token===o.token+1&&e[n-1].marker===r.marker,s=String.fromCharCode(r.marker),(i=t.tokens[r.token]).type=a?"strong_open":"em_open",i.tag=a?"strong":"em",i.nesting=1,i.markup=a?s+s:s,i.content="",(i=t.tokens[o.token]).type=a?"strong_close":"em_close",i.tag=a?"strong":"em",i.nesting=-1,i.markup=a?s+s:s,i.content="",a&&(t.tokens[e[n-1].token].content="",t.tokens[e[r.end+1].token].content="",n--))}t.exports.tokenize=function(t,e){var n,r,o=t.pos,i=t.src.charCodeAt(o);if(e)return!1;if(95!==i&&42!==i)return!1;for(r=t.scanDelims(t.pos,42===i),n=0;n<r.length;n++)t.push("text","",0).content=String.fromCharCode(i),t.delimiters.push({marker:i,length:r.length,jump:n,token:t.tokens.length-1,end:-1,open:r.can_open,close:r.can_close});return t.pos+=r.length,!0},t.exports.postProcess=function(t){var e,n=t.tokens_meta,o=t.tokens_meta.length;for(r(t,t.delimiters),e=0;e<o;e++)n[e]&&n[e].delimiters&&r(t,n[e].delimiters)}},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.sentMessages=[],this.messageQueue=[],this.loggingEnabled=!1,this.acceptsThemes=!0,this.activeThemes=[],this.initialPermissions=e,this.onReadyCallback=n,this.coallesedSaving=!0,this.coallesedSavingDelay=250,this.registerMessageHandler()}var e,n,o;return e=t,(n=[{key:"registerMessageHandler",value:function(){var t=this,e=function(e){if(t.loggingEnabled&&console.log("Components API Message received:",e.data),!document.referrer||new URL(document.referrer).origin===new URL(e.origin).origin){if(t.origin){if(e.origin!==t.origin)return}else t.origin=e.origin;var n=e.data,r="string"==typeof n?JSON.parse(n):n;t.handleMessage(r)}};document.addEventListener("message",(function(t){e(t)}),!1),window.addEventListener("message",(function(t){e(t)}),!1)}},{key:"handleMessage",value:function(t){if("component-registered"===t.action)this.sessionKey=t.sessionKey,this.componentData=t.componentData,this.onReady(t.data),this.loggingEnabled&&console.log("Component successfully registered with payload:",t);else if("themes"===t.action)this.acceptsThemes&&this.activateThemes(t.data.themes);else if(t.original){var e=this.sentMessages.filter((function(e){return e.messageId===t.original.messageId}))[0];e||alert("This extension is attempting to communicate with Standard Notes, but an error is preventing it from doing so. Please restart this extension and try again."),e.callback&&e.callback(t.data)}}},{key:"onReady",value:function(t){this.environment=t.environment,this.platform=t.platform,this.uuid=t.uuid,this.isMobile="mobile"==this.environment,this.initialPermissions&&this.initialPermissions.length>0&&this.requestPermissions(this.initialPermissions);var e=!0,n=!1,r=void 0;try{for(var o,i=this.messageQueue[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var s=o.value;this.postMessage(s.action,s.data,s.callback)}}catch(t){n=!0,r=t}finally{try{e||null==i.return||i.return()}finally{if(n)throw r}}this.messageQueue=[],this.loggingEnabled&&console.log("onReadyData",t),this.activateThemes(t.activeThemeUrls||[]),this.onReadyCallback&&this.onReadyCallback()}},{key:"getSelfComponentUUID",value:function(){return this.uuid}},{key:"isRunningInDesktopApplication",value:function(){return"desktop"===this.environment}},{key:"setComponentDataValueForKey",value:function(t,e){this.componentData[t]=e,this.postMessage("set-component-data",{componentData:this.componentData},(function(t){}))}},{key:"clearComponentData",value:function(){this.componentData={},this.postMessage("set-component-data",{componentData:this.componentData},(function(t){}))}},{key:"componentDataValueForKey",value:function(t){return this.componentData[t]}},{key:"postMessage",value:function(t,e,n){if(this.sessionKey){var r={action:t,data:e,messageId:this.generateUUID(),sessionKey:this.sessionKey,api:"component"},o=JSON.parse(JSON.stringify(r));o.callback=n,this.sentMessages.push(o),this.isMobile&&(r=JSON.stringify(r)),this.loggingEnabled&&console.log("Posting message:",r),window.parent.postMessage(r,this.origin)}else this.messageQueue.push({action:t,data:e,callback:n})}},{key:"setSize",value:function(t,e,n){this.postMessage("set-size",{type:t,width:e,height:n},(function(t){}))}},{key:"requestPermissions",value:function(t,e){this.postMessage("request-permissions",{permissions:t},function(t){e&&e()}.bind(this))}},{key:"streamItems",value:function(t,e){Array.isArray(t)||(t=[t]),this.postMessage("stream-items",{content_types:t},function(t){e(t.items)}.bind(this))}},{key:"streamContextItem",value:function(t){var e=this;this.postMessage("stream-context-item",null,(function(n){var r=n.item;(!e.lastStreamedItem||e.lastStreamedItem.uuid!==r.uuid)&&e.pendingSaveTimeout&&(clearTimeout(e.pendingSaveTimeout),e._performSavingOfItems(e.pendingSaveParams),e.pendingSaveTimeout=null,e.pendingSaveParams=null),e.lastStreamedItem=r,t(e.lastStreamedItem)}))}},{key:"selectItem",value:function(t){this.postMessage("select-item",{item:this.jsonObjectForItem(t)})}},{key:"createItem",value:function(t,e){this.postMessage("create-item",{item:this.jsonObjectForItem(t)},function(t){var n=t.item;!n&&t.items&&t.items.length>0&&(n=t.items[0]),this.associateItem(n),e&&e(n)}.bind(this))}},{key:"createItems",value:function(t,e){var n=this,r=t.map((function(t){return n.jsonObjectForItem(t)}));this.postMessage("create-items",{items:r},function(t){e&&e(t.items)}.bind(this))}},{key:"associateItem",value:function(t){this.postMessage("associate-item",{item:this.jsonObjectForItem(t)})}},{key:"deassociateItem",value:function(t){this.postMessage("deassociate-item",{item:this.jsonObjectForItem(t)})}},{key:"clearSelection",value:function(){this.postMessage("clear-selection",{content_type:"Tag"})}},{key:"deleteItem",value:function(t,e){this.deleteItems([t],e)}},{key:"deleteItems",value:function(t,e){var n={items:t.map(function(t){return this.jsonObjectForItem(t)}.bind(this))};this.postMessage("delete-items",n,(function(t){e&&e(t)}))}},{key:"sendCustomEvent",value:function(t,e,n){this.postMessage(t,e,function(t){n&&n(t)}.bind(this))}},{key:"saveItem",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.saveItems([t],e,n)}},{key:"saveItemWithPresave",value:function(t,e,n){this.saveItemsWithPresave([t],e,n)}},{key:"saveItemsWithPresave",value:function(t,e,n){this.saveItems(t,n,!1,e)}},{key:"_performSavingOfItems",value:function(t){var e=t.items,n=t.presave,r=t.callback;n&&n();var o=[],i=!0,s=!1,a=void 0;try{for(var c,l=e[Symbol.iterator]();!(i=(c=l.next()).done);i=!0){var u=c.value;o.push(this.jsonObjectForItem(u))}}catch(t){s=!0,a=t}finally{try{i||null==l.return||l.return()}finally{if(s)throw a}}this.postMessage("save-items",{items:o},(function(t){r&&r()}))}},{key:"saveItems",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3?arguments[3]:void 0;if(this.pendingSaveItems||(this.pendingSaveItems=[]),1!=this.coallesedSaving||r)this._performSavingOfItems({items:t,presave:o,callback:e});else{this.pendingSaveTimeout&&clearTimeout(this.pendingSaveTimeout);var i=t.map((function(t){return t.uuid})),s=this.pendingSaveItems.filter((function(t){return!i.includes(t.uuid)}));this.pendingSaveItems=s.concat(t),this.pendingSaveParams={items:this.pendingSaveItems,presave:o,callback:e},this.pendingSaveTimeout=setTimeout((function(){n._performSavingOfItems(n.pendingSaveParams),n.pendingSaveItems=[],n.pendingSaveTimeout=null,n.pendingSaveParams=null}),this.coallesedSavingDelay)}}},{key:"jsonObjectForItem",value:function(t){var e=Object.assign({},t);return e.children=null,e.parent=null,e}},{key:"getItemAppDataValue",value:function(t,e){var n=t.content.appData&&t.content.appData["org.standardnotes.sn"];return n?n[e]:null}},{key:"activateThemes",value:function(t){if(this.loggingEnabled&&console.log("Incoming themes",t),this.activeThemes.sort().toString()!=t.sort().toString()){var e=t||[],n=[],r=!0,o=!1,i=void 0;try{for(var s,a=this.activeThemes[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var c=s.value;t.includes(c)?e=e.filter((function(t){return t!=c})):n.push(c)}}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}this.loggingEnabled&&(console.log("Deactivating themes:",n),console.log("Activating themes:",e));for(var l=0,u=n;l<u.length;l++){var p=u[l];this.deactivateTheme(p)}this.activeThemes=t;var h=!0,f=!1,d=void 0;try{for(var m,g=e[Symbol.iterator]();!(h=(m=g.next()).done);h=!0){var v=m.value;if(v){var y=document.createElement("link");y.id=btoa(v),y.href=v,y.type="text/css",y.rel="stylesheet",y.media="screen,print",y.className="custom-theme",document.getElementsByTagName("head")[0].appendChild(y)}}}catch(t){f=!0,d=t}finally{try{h||null==g.return||g.return()}finally{if(f)throw d}}}}},{key:"themeElementForUrl",value:function(t){return Array.from(document.getElementsByClassName("custom-theme")).slice().find((function(e){return e.id==btoa(t)}))}},{key:"deactivateTheme",value:function(t){var e=this.themeElementForUrl(t);e&&(e.disabled=!0,e.parentNode.removeChild(e))}},{key:"generateUUID",value:function(){var t=window.crypto||window.msCrypto;if(t){var e=new Uint32Array(4);t.getRandomValues(e);var n=-1;return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){n++;var r=e[n>>3]>>n%8*4&15;return("x"==t?r:3&r|8).toString(16)}))}var r=(new Date).getTime();return window.performance&&"function"==typeof window.performance.now&&(r+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=(r+16*Math.random())%16|0;return r=Math.floor(r/16),("x"==t?e:3&e|8).toString(16)}))}}])&&r(e.prototype,n),o&&r(e,o),t}();void 0!==t.exports&&(t.exports=o),window&&(window.ComponentManager=o)},function(t,e,n){"use strict";t.exports=n(29)},function(t,e,n){"use strict";t.exports=n(81)},function(t,e,n){n(128),t.exports=n(127)},function(t,e,n){"use strict";var r=n(0),o=n(35),i=n(39),s=n(40),a=n(48),c=n(62),l=n(74),u=n(4),p=n(20),h={default:n(78),zero:n(79),commonmark:n(80)},f=/^(vbscript|javascript|file|data):/,d=/^data:image\/(gif|png|jpeg|webp);/;function m(t){var e=t.trim().toLowerCase();return!f.test(e)||!!d.test(e)}var g=["http:","https:","mailto:"];function v(t){var e=u.parse(t,!0);if(e.hostname&&(!e.protocol||g.indexOf(e.protocol)>=0))try{e.hostname=p.toASCII(e.hostname)}catch(t){}return u.encode(u.format(e))}function y(t){var e=u.parse(t,!0);if(e.hostname&&(!e.protocol||g.indexOf(e.protocol)>=0))try{e.hostname=p.toUnicode(e.hostname)}catch(t){}return u.decode(u.format(e))}function k(t,e){if(!(this instanceof k))return new k(t,e);e||r.isString(t)||(e=t||{},t="default"),this.inline=new c,this.block=new a,this.core=new s,this.renderer=new i,this.linkify=new l,this.validateLink=m,this.normalizeLink=v,this.normalizeLinkText=y,this.utils=r,this.helpers=r.assign({},o),this.options={},this.configure(t),e&&this.set(e)}k.prototype.set=function(t){return r.assign(this.options,t),this},k.prototype.configure=function(t){var e,n=this;if(r.isString(t)&&!(t=h[e=t]))throw new Error('Wrong `markdown-it` preset "'+e+'", check name');if(!t)throw new Error("Wrong `markdown-it` preset, can't be empty");return t.options&&n.set(t.options),t.components&&Object.keys(t.components).forEach((function(e){t.components[e].rules&&n[e].ruler.enableOnly(t.components[e].rules),t.components[e].rules2&&n[e].ruler2.enableOnly(t.components[e].rules2)})),this},k.prototype.enable=function(t,e){var n=[];Array.isArray(t)||(t=[t]),["core","block","inline"].forEach((function(e){n=n.concat(this[e].ruler.enable(t,!0))}),this),n=n.concat(this.inline.ruler2.enable(t,!0));var r=t.filter((function(t){return n.indexOf(t)<0}));if(r.length&&!e)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+r);return this},k.prototype.disable=function(t,e){var n=[];Array.isArray(t)||(t=[t]),["core","block","inline"].forEach((function(e){n=n.concat(this[e].ruler.disable(t,!0))}),this),n=n.concat(this.inline.ruler2.disable(t,!0));var r=t.filter((function(t){return n.indexOf(t)<0}));if(r.length&&!e)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+r);return this},k.prototype.use=function(t){var e=[this].concat(Array.prototype.slice.call(arguments,1));return t.apply(t,e),this},k.prototype.parse=function(t,e){if("string"!=typeof t)throw new Error("Input data should be a String");var n=new this.core.State(t,this,e);return this.core.process(n),n.tokens},k.prototype.render=function(t,e){return e=e||{},this.renderer.render(this.parse(t,e),this.options,e)},k.prototype.parseInline=function(t,e){var n=new this.core.State(t,this,e);return n.inlineMode=!0,this.core.process(n),n.tokens},k.prototype.renderInline=function(t,e){return e=e||{},this.renderer.render(this.parseInline(t,e),this.options,e)},t.exports=k},function(t,e,n){"use strict";var r={};function o(t,e,n){var i,s,a,c,l,u="";for("string"!=typeof e&&(n=e,e=o.defaultChars),void 0===n&&(n=!0),l=function(t){var e,n,o=r[t];if(o)return o;for(o=r[t]=[],e=0;e<128;e++)n=String.fromCharCode(e),/^[0-9a-z]$/i.test(n)?o.push(n):o.push("%"+("0"+e.toString(16).toUpperCase()).slice(-2));for(e=0;e<t.length;e++)o[t.charCodeAt(e)]=t[e];return o}(e),i=0,s=t.length;i<s;i++)if(a=t.charCodeAt(i),n&&37===a&&i+2<s&&/^[0-9a-f]{2}$/i.test(t.slice(i+1,i+3)))u+=t.slice(i,i+3),i+=2;else if(a<128)u+=l[a];else if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&i+1<s&&(c=t.charCodeAt(i+1))>=56320&&c<=57343){u+=encodeURIComponent(t[i]+t[i+1]),i++;continue}u+="%EF%BF%BD"}else u+=encodeURIComponent(t[i]);return u}o.defaultChars=";/?:@&=+$,-_.!~*'()#",o.componentChars="-_.!~*'()",t.exports=o},function(t,e,n){"use strict";var r={};function o(t,e){var n;return"string"!=typeof e&&(e=o.defaultChars),n=function(t){var e,n,o=r[t];if(o)return o;for(o=r[t]=[],e=0;e<128;e++)n=String.fromCharCode(e),o.push(n);for(e=0;e<t.length;e++)o[n=t.charCodeAt(e)]="%"+("0"+n.toString(16).toUpperCase()).slice(-2);return o}(e),t.replace(/(%[a-f0-9]{2})+/gi,(function(t){var e,r,o,i,s,a,c,l="";for(e=0,r=t.length;e<r;e+=3)(o=parseInt(t.slice(e+1,e+3),16))<128?l+=n[o]:192==(224&o)&&e+3<r&&128==(192&(i=parseInt(t.slice(e+4,e+6),16)))?(l+=(c=o<<6&1984|63&i)<128?"��":String.fromCharCode(c),e+=3):224==(240&o)&&e+6<r&&(i=parseInt(t.slice(e+4,e+6),16),s=parseInt(t.slice(e+7,e+9),16),128==(192&i)&&128==(192&s))?(l+=(c=o<<12&61440|i<<6&4032|63&s)<2048||c>=55296&&c<=57343?"���":String.fromCharCode(c),e+=6):240==(248&o)&&e+9<r&&(i=parseInt(t.slice(e+4,e+6),16),s=parseInt(t.slice(e+7,e+9),16),a=parseInt(t.slice(e+10,e+12),16),128==(192&i)&&128==(192&s)&&128==(192&a))?((c=o<<18&1835008|i<<12&258048|s<<6&4032|63&a)<65536||c>1114111?l+="����":(c-=65536,l+=String.fromCharCode(55296+(c>>10),56320+(1023&c))),e+=9):l+="�";return l}))}o.defaultChars=";/?:@&=+$,#",o.componentChars="",t.exports=o},function(t,e,n){"use strict";t.exports=function(t){var e="";return e+=t.protocol||"",e+=t.slashes?"//":"",e+=t.auth?t.auth+"@":"",t.hostname&&-1!==t.hostname.indexOf(":")?e+="["+t.hostname+"]":e+=t.hostname||"",e+=t.port?":"+t.port:"",e+=t.pathname||"",e+=t.search||"",e+=t.hash||""}},function(t,e,n){"use strict";function r(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null}var o=/^([a-z0-9.+-]+:)/i,i=/:[0-9]*$/,s=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,a=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(a),l=["%","/","?",";","#"].concat(c),u=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,f={javascript:!0,"javascript:":!0},d={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};r.prototype.parse=function(t,e){var n,r,i,a,c,m=t;if(m=m.trim(),!e&&1===t.split("#").length){var g=s.exec(m);if(g)return this.pathname=g[1],g[2]&&(this.search=g[2]),this}var v=o.exec(m);if(v&&(i=(v=v[0]).toLowerCase(),this.protocol=v,m=m.substr(v.length)),(e||v||m.match(/^\/\/[^@\/]+@[^@\/]+/))&&(!(c="//"===m.substr(0,2))||v&&f[v]||(m=m.substr(2),this.slashes=!0)),!f[v]&&(c||v&&!d[v])){var y,k,_=-1;for(n=0;n<u.length;n++)-1!==(a=m.indexOf(u[n]))&&(-1===_||a<_)&&(_=a);for(-1!==(k=-1===_?m.lastIndexOf("@"):m.lastIndexOf("@",_))&&(y=m.slice(0,k),m=m.slice(k+1),this.auth=y),_=-1,n=0;n<l.length;n++)-1!==(a=m.indexOf(l[n]))&&(-1===_||a<_)&&(_=a);-1===_&&(_=m.length),":"===m[_-1]&&_--;var b=m.slice(0,_);m=m.slice(_),this.parseHost(b),this.hostname=this.hostname||"";var x="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!x){var w=this.hostname.split(/\./);for(n=0,r=w.length;n<r;n++){var C=w[n];if(C&&!C.match(p)){for(var S="",A=0,M=C.length;A<M;A++)C.charCodeAt(A)>127?S+="x":S+=C[A];if(!S.match(p)){var D=w.slice(0,n),E=w.slice(n+1),O=C.match(h);O&&(D.push(O[1]),E.unshift(O[2])),E.length&&(m=E.join(".")+m),this.hostname=D.join(".");break}}}}this.hostname.length>255&&(this.hostname=""),x&&(this.hostname=this.hostname.substr(1,this.hostname.length-2))}var T=m.indexOf("#");-1!==T&&(this.hash=m.substr(T),m=m.slice(0,T));var z=m.indexOf("?");return-1!==z&&(this.search=m.substr(z),m=m.slice(0,z)),m&&(this.pathname=m),d[i]&&this.hostname&&!this.pathname&&(this.pathname=""),this},r.prototype.parseHost=function(t){var e=i.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)},t.exports=function(t,e){if(t&&t instanceof r)return t;var n=new r;return n.parse(t,e),n}},function(t,e){t.exports=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/},function(t,e,n){"use strict";e.parseLinkLabel=n(36),e.parseLinkDestination=n(37),e.parseLinkTitle=n(38)},function(t,e,n){"use strict";t.exports=function(t,e,n){var r,o,i,s,a=-1,c=t.posMax,l=t.pos;for(t.pos=e+1,r=1;t.pos<c;){if(93===(i=t.src.charCodeAt(t.pos))&&0===--r){o=!0;break}if(s=t.pos,t.md.inline.skipToken(t),91===i)if(s===t.pos-1)r++;else if(n)return t.pos=l,-1}return o&&(a=t.pos),t.pos=l,a}},function(t,e,n){"use strict";var r=n(0).unescapeAll;t.exports=function(t,e,n){var o,i,s=e,a={ok:!1,pos:0,lines:0,str:""};if(60===t.charCodeAt(e)){for(e++;e<n;){if(10===(o=t.charCodeAt(e)))return a;if(62===o)return a.pos=e+1,a.str=r(t.slice(s+1,e)),a.ok=!0,a;92===o&&e+1<n?e+=2:e++}return a}for(i=0;e<n&&32!==(o=t.charCodeAt(e))&&!(o<32||127===o);)if(92===o&&e+1<n)e+=2;else{if(40===o&&i++,41===o){if(0===i)break;i--}e++}return s===e||0!==i||(a.str=r(t.slice(s,e)),a.lines=0,a.pos=e,a.ok=!0),a}},function(t,e,n){"use strict";var r=n(0).unescapeAll;t.exports=function(t,e,n){var o,i,s=0,a=e,c={ok:!1,pos:0,lines:0,str:""};if(e>=n)return c;if(34!==(i=t.charCodeAt(e))&&39!==i&&40!==i)return c;for(e++,40===i&&(i=41);e<n;){if((o=t.charCodeAt(e))===i)return c.pos=e+1,c.lines=s,c.str=r(t.slice(a+1,e)),c.ok=!0,c;10===o?s++:92===o&&e+1<n&&(e++,10===t.charCodeAt(e)&&s++),e++}return c}},function(t,e,n){"use strict";var r=n(0).assign,o=n(0).unescapeAll,i=n(0).escapeHtml,s={};function a(){this.rules=r({},s)}s.code_inline=function(t,e,n,r,o){var s=t[e];return"<code"+o.renderAttrs(s)+">"+i(t[e].content)+"</code>"},s.code_block=function(t,e,n,r,o){var s=t[e];return"<pre"+o.renderAttrs(s)+"><code>"+i(t[e].content)+"</code></pre>\n"},s.fence=function(t,e,n,r,s){var a,c,l,u,p=t[e],h=p.info?o(p.info).trim():"",f="";return h&&(f=h.split(/\s+/g)[0]),0===(a=n.highlight&&n.highlight(p.content,f)||i(p.content)).indexOf("<pre")?a+"\n":h?(c=p.attrIndex("class"),l=p.attrs?p.attrs.slice():[],c<0?l.push(["class",n.langPrefix+f]):l[c][1]+=" "+n.langPrefix+f,u={attrs:l},"<pre><code"+s.renderAttrs(u)+">"+a+"</code></pre>\n"):"<pre><code"+s.renderAttrs(p)+">"+a+"</code></pre>\n"},s.image=function(t,e,n,r,o){var i=t[e];return i.attrs[i.attrIndex("alt")][1]=o.renderInlineAsText(i.children,n,r),o.renderToken(t,e,n)},s.hardbreak=function(t,e,n){return n.xhtmlOut?"<br />\n":"<br>\n"},s.softbreak=function(t,e,n){return n.breaks?n.xhtmlOut?"<br />\n":"<br>\n":"\n"},s.text=function(t,e){return i(t[e].content)},s.html_block=function(t,e){return t[e].content},s.html_inline=function(t,e){return t[e].content},a.prototype.renderAttrs=function(t){var e,n,r;if(!t.attrs)return"";for(r="",e=0,n=t.attrs.length;e<n;e++)r+=" "+i(t.attrs[e][0])+'="'+i(t.attrs[e][1])+'"';return r},a.prototype.renderToken=function(t,e,n){var r,o="",i=!1,s=t[e];return s.hidden?"":(s.block&&-1!==s.nesting&&e&&t[e-1].hidden&&(o+="\n"),o+=(-1===s.nesting?"</":"<")+s.tag,o+=this.renderAttrs(s),0===s.nesting&&n.xhtmlOut&&(o+=" /"),s.block&&(i=!0,1===s.nesting&&e+1<t.length&&("inline"===(r=t[e+1]).type||r.hidden||-1===r.nesting&&r.tag===s.tag)&&(i=!1)),o+=i?">\n":">")},a.prototype.renderInline=function(t,e,n){for(var r,o="",i=this.rules,s=0,a=t.length;s<a;s++)void 0!==i[r=t[s].type]?o+=i[r](t,s,e,n,this):o+=this.renderToken(t,s,e);return o},a.prototype.renderInlineAsText=function(t,e,n){for(var r="",o=0,i=t.length;o<i;o++)"text"===t[o].type?r+=t[o].content:"image"===t[o].type&&(r+=this.renderInlineAsText(t[o].children,e,n));return r},a.prototype.render=function(t,e,n){var r,o,i,s="",a=this.rules;for(r=0,o=t.length;r<o;r++)"inline"===(i=t[r].type)?s+=this.renderInline(t[r].children,e,n):void 0!==a[i]?s+=a[t[r].type](t,r,e,n,this):s+=this.renderToken(t,r,e,n);return s},t.exports=a},function(t,e,n){"use strict";var r=n(8),o=[["normalize",n(41)],["block",n(42)],["inline",n(43)],["linkify",n(44)],["replacements",n(45)],["smartquotes",n(46)]];function i(){this.ruler=new r;for(var t=0;t<o.length;t++)this.ruler.push(o[t][0],o[t][1])}i.prototype.process=function(t){var e,n,r;for(e=0,n=(r=this.ruler.getRules("")).length;e<n;e++)r[e](t)},i.prototype.State=n(47),t.exports=i},function(t,e,n){"use strict";var r=/\r\n?|\n/g,o=/\0/g;t.exports=function(t){var e;e=(e=t.src.replace(r,"\n")).replace(o,"�"),t.src=e}},function(t,e,n){"use strict";t.exports=function(t){var e;t.inlineMode?((e=new t.Token("inline","",0)).content=t.src,e.map=[0,1],e.children=[],t.tokens.push(e)):t.md.block.parse(t.src,t.md,t.env,t.tokens)}},function(t,e,n){"use strict";t.exports=function(t){var e,n,r,o=t.tokens;for(n=0,r=o.length;n<r;n++)"inline"===(e=o[n]).type&&t.md.inline.parse(e.content,t.md,t.env,e.children)}},function(t,e,n){"use strict";var r=n(0).arrayReplaceAt;function o(t){return/^<\/a\s*>/i.test(t)}t.exports=function(t){var e,n,i,s,a,c,l,u,p,h,f,d,m,g,v,y,k,_,b=t.tokens;if(t.md.options.linkify)for(n=0,i=b.length;n<i;n++)if("inline"===b[n].type&&t.md.linkify.pretest(b[n].content))for(m=0,e=(s=b[n].children).length-1;e>=0;e--)if("link_close"!==(c=s[e]).type){if("html_inline"===c.type&&(_=c.content,/^<a[>\s]/i.test(_)&&m>0&&m--,o(c.content)&&m++),!(m>0)&&"text"===c.type&&t.md.linkify.test(c.content)){for(p=c.content,k=t.md.linkify.match(p),l=[],d=c.level,f=0,u=0;u<k.length;u++)g=k[u].url,v=t.md.normalizeLink(g),t.md.validateLink(v)&&(y=k[u].text,y=k[u].schema?"mailto:"!==k[u].schema||/^mailto:/i.test(y)?t.md.normalizeLinkText(y):t.md.normalizeLinkText("mailto:"+y).replace(/^mailto:/,""):t.md.normalizeLinkText("http://"+y).replace(/^http:\/\//,""),(h=k[u].index)>f&&((a=new t.Token("text","",0)).content=p.slice(f,h),a.level=d,l.push(a)),(a=new t.Token("link_open","a",1)).attrs=[["href",v]],a.level=d++,a.markup="linkify",a.info="auto",l.push(a),(a=new t.Token("text","",0)).content=y,a.level=d,l.push(a),(a=new t.Token("link_close","a",-1)).level=--d,a.markup="linkify",a.info="auto",l.push(a),f=k[u].lastIndex);f<p.length&&((a=new t.Token("text","",0)).content=p.slice(f),a.level=d,l.push(a)),b[n].children=s=r(s,e,l)}}else for(e--;s[e].level!==c.level&&"link_open"!==s[e].type;)e--}},function(t,e,n){"use strict";var r=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,o=/\((c|tm|r|p)\)/i,i=/\((c|tm|r|p)\)/gi,s={c:"©",r:"®",p:"§",tm:"™"};function a(t,e){return s[e.toLowerCase()]}function c(t){var e,n,r=0;for(e=t.length-1;e>=0;e--)"text"!==(n=t[e]).type||r||(n.content=n.content.replace(i,a)),"link_open"===n.type&&"auto"===n.info&&r--,"link_close"===n.type&&"auto"===n.info&&r++}function l(t){var e,n,o=0;for(e=t.length-1;e>=0;e--)"text"!==(n=t[e]).type||o||r.test(n.content)&&(n.content=n.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---(?=[^-]|$)/gm,"$1—").replace(/(^|\s)--(?=\s|$)/gm,"$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/gm,"$1–")),"link_open"===n.type&&"auto"===n.info&&o--,"link_close"===n.type&&"auto"===n.info&&o++}t.exports=function(t){var e;if(t.md.options.typographer)for(e=t.tokens.length-1;e>=0;e--)"inline"===t.tokens[e].type&&(o.test(t.tokens[e].content)&&c(t.tokens[e].children),r.test(t.tokens[e].content)&&l(t.tokens[e].children))}},function(t,e,n){"use strict";var r=n(0).isWhiteSpace,o=n(0).isPunctChar,i=n(0).isMdAsciiPunct,s=/['"]/,a=/['"]/g;function c(t,e,n){return t.substr(0,e)+n+t.substr(e+1)}function l(t,e){var n,s,l,u,p,h,f,d,m,g,v,y,k,_,b,x,w,C,S,A,M;for(S=[],n=0;n<t.length;n++){for(s=t[n],f=t[n].level,w=S.length-1;w>=0&&!(S[w].level<=f);w--);if(S.length=w+1,"text"===s.type){p=0,h=(l=s.content).length;t:for(;p<h&&(a.lastIndex=p,u=a.exec(l));){if(b=x=!0,p=u.index+1,C="'"===u[0],m=32,u.index-1>=0)m=l.charCodeAt(u.index-1);else for(w=n-1;w>=0&&("softbreak"!==t[w].type&&"hardbreak"!==t[w].type);w--)if("text"===t[w].type){m=t[w].content.charCodeAt(t[w].content.length-1);break}if(g=32,p<h)g=l.charCodeAt(p);else for(w=n+1;w<t.length&&("softbreak"!==t[w].type&&"hardbreak"!==t[w].type);w++)if("text"===t[w].type){g=t[w].content.charCodeAt(0);break}if(v=i(m)||o(String.fromCharCode(m)),y=i(g)||o(String.fromCharCode(g)),k=r(m),(_=r(g))?b=!1:y&&(k||v||(b=!1)),k?x=!1:v&&(_||y||(x=!1)),34===g&&'"'===u[0]&&m>=48&&m<=57&&(x=b=!1),b&&x&&(b=v,x=y),b||x){if(x)for(w=S.length-1;w>=0&&(d=S[w],!(S[w].level<f));w--)if(d.single===C&&S[w].level===f){d=S[w],C?(A=e.md.options.quotes[2],M=e.md.options.quotes[3]):(A=e.md.options.quotes[0],M=e.md.options.quotes[1]),s.content=c(s.content,u.index,M),t[d.token].content=c(t[d.token].content,d.pos,A),p+=M.length-1,d.token===n&&(p+=A.length-1),h=(l=s.content).length,S.length=w;continue t}b?S.push({token:n,pos:u.index,single:C,level:f}):x&&C&&(s.content=c(s.content,u.index,"’"))}else C&&(s.content=c(s.content,u.index,"’"))}}}}t.exports=function(t){var e;if(t.md.options.typographer)for(e=t.tokens.length-1;e>=0;e--)"inline"===t.tokens[e].type&&s.test(t.tokens[e].content)&&l(t.tokens[e].children,t)}},function(t,e,n){"use strict";var r=n(2);function o(t,e,n){this.src=t,this.env=n,this.tokens=[],this.inlineMode=!1,this.md=e}o.prototype.Token=r,t.exports=o},function(t,e,n){"use strict";var r=n(8),o=[["table",n(49),["paragraph","reference"]],["code",n(50)],["fence",n(51),["paragraph","reference","blockquote","list"]],["blockquote",n(52),["paragraph","reference","blockquote","list"]],["hr",n(53),["paragraph","reference","blockquote","list"]],["list",n(54),["paragraph","reference","blockquote"]],["reference",n(55)],["heading",n(56),["paragraph","reference","blockquote"]],["lheading",n(57)],["html_block",n(58),["paragraph","reference","blockquote"]],["paragraph",n(60)]];function i(){this.ruler=new r;for(var t=0;t<o.length;t++)this.ruler.push(o[t][0],o[t][1],{alt:(o[t][2]||[]).slice()})}i.prototype.tokenize=function(t,e,n){for(var r,o=this.ruler.getRules(""),i=o.length,s=e,a=!1,c=t.md.options.maxNesting;s<n&&(t.line=s=t.skipEmptyLines(s),!(s>=n))&&!(t.sCount[s]<t.blkIndent);){if(t.level>=c){t.line=n;break}for(r=0;r<i&&!o[r](t,s,n,!1);r++);t.tight=!a,t.isEmpty(t.line-1)&&(a=!0),(s=t.line)<n&&t.isEmpty(s)&&(a=!0,s++,t.line=s)}},i.prototype.parse=function(t,e,n,r){var o;t&&(o=new this.State(t,e,n,r),this.tokenize(o,o.line,o.lineMax))},i.prototype.State=n(61),t.exports=i},function(t,e,n){"use strict";var r=n(0).isSpace;function o(t,e){var n=t.bMarks[e]+t.blkIndent,r=t.eMarks[e];return t.src.substr(n,r-n)}function i(t){var e,n=[],r=0,o=t.length,i=0,s=0,a=!1,c=0;for(e=t.charCodeAt(r);r<o;)96===e?a?(a=!1,c=r):i%2==0&&(a=!0,c=r):124!==e||i%2!=0||a||(n.push(t.substring(s,r)),s=r+1),92===e?i++:i=0,++r===o&&a&&(a=!1,r=c+1),e=t.charCodeAt(r);return n.push(t.substring(s)),n}t.exports=function(t,e,n,s){var a,c,l,u,p,h,f,d,m,g,v,y;if(e+2>n)return!1;if(p=e+1,t.sCount[p]<t.blkIndent)return!1;if(t.sCount[p]-t.blkIndent>=4)return!1;if((l=t.bMarks[p]+t.tShift[p])>=t.eMarks[p])return!1;if(124!==(a=t.src.charCodeAt(l++))&&45!==a&&58!==a)return!1;for(;l<t.eMarks[p];){if(124!==(a=t.src.charCodeAt(l))&&45!==a&&58!==a&&!r(a))return!1;l++}for(h=(c=o(t,e+1)).split("|"),m=[],u=0;u<h.length;u++){if(!(g=h[u].trim())){if(0===u||u===h.length-1)continue;return!1}if(!/^:?-+:?$/.test(g))return!1;58===g.charCodeAt(g.length-1)?m.push(58===g.charCodeAt(0)?"center":"right"):58===g.charCodeAt(0)?m.push("left"):m.push("")}if(-1===(c=o(t,e).trim()).indexOf("|"))return!1;if(t.sCount[e]-t.blkIndent>=4)return!1;if((f=(h=i(c.replace(/^\||\|$/g,""))).length)>m.length)return!1;if(s)return!0;for((d=t.push("table_open","table",1)).map=v=[e,0],(d=t.push("thead_open","thead",1)).map=[e,e+1],(d=t.push("tr_open","tr",1)).map=[e,e+1],u=0;u<h.length;u++)(d=t.push("th_open","th",1)).map=[e,e+1],m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=t.push("inline","",0)).content=h[u].trim(),d.map=[e,e+1],d.children=[],d=t.push("th_close","th",-1);for(d=t.push("tr_close","tr",-1),d=t.push("thead_close","thead",-1),(d=t.push("tbody_open","tbody",1)).map=y=[e+2,0],p=e+2;p<n&&!(t.sCount[p]<t.blkIndent)&&-1!==(c=o(t,p).trim()).indexOf("|")&&!(t.sCount[p]-t.blkIndent>=4);p++){for(h=i(c.replace(/^\||\|$/g,"")),d=t.push("tr_open","tr",1),u=0;u<f;u++)d=t.push("td_open","td",1),m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=t.push("inline","",0)).content=h[u]?h[u].trim():"",d.children=[],d=t.push("td_close","td",-1);d=t.push("tr_close","tr",-1)}return d=t.push("tbody_close","tbody",-1),d=t.push("table_close","table",-1),v[1]=y[1]=p,t.line=p,!0}},function(t,e,n){"use strict";t.exports=function(t,e,n){var r,o,i;if(t.sCount[e]-t.blkIndent<4)return!1;for(o=r=e+1;r<n;)if(t.isEmpty(r))r++;else{if(!(t.sCount[r]-t.blkIndent>=4))break;o=++r}return t.line=o,(i=t.push("code_block","code",0)).content=t.getLines(e,o,4+t.blkIndent,!0),i.map=[e,t.line],!0}},function(t,e,n){"use strict";t.exports=function(t,e,n,r){var o,i,s,a,c,l,u,p=!1,h=t.bMarks[e]+t.tShift[e],f=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(h+3>f)return!1;if(126!==(o=t.src.charCodeAt(h))&&96!==o)return!1;if(c=h,(i=(h=t.skipChars(h,o))-c)<3)return!1;if(u=t.src.slice(c,h),s=t.src.slice(h,f),96===o&&s.indexOf(String.fromCharCode(o))>=0)return!1;if(r)return!0;for(a=e;!(++a>=n)&&!((h=c=t.bMarks[a]+t.tShift[a])<(f=t.eMarks[a])&&t.sCount[a]<t.blkIndent);)if(t.src.charCodeAt(h)===o&&!(t.sCount[a]-t.blkIndent>=4||(h=t.skipChars(h,o))-c<i||(h=t.skipSpaces(h))<f)){p=!0;break}return i=t.sCount[e],t.line=a+(p?1:0),(l=t.push("fence","code",0)).info=s,l.content=t.getLines(e+1,a,i,!0),l.markup=u,l.map=[e,t.line],!0}},function(t,e,n){"use strict";var r=n(0).isSpace;t.exports=function(t,e,n,o){var i,s,a,c,l,u,p,h,f,d,m,g,v,y,k,_,b,x,w,C,S=t.lineMax,A=t.bMarks[e]+t.tShift[e],M=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(62!==t.src.charCodeAt(A++))return!1;if(o)return!0;for(c=f=t.sCount[e]+A-(t.bMarks[e]+t.tShift[e]),32===t.src.charCodeAt(A)?(A++,c++,f++,i=!1,_=!0):9===t.src.charCodeAt(A)?(_=!0,(t.bsCount[e]+f)%4==3?(A++,c++,f++,i=!1):i=!0):_=!1,d=[t.bMarks[e]],t.bMarks[e]=A;A<M&&(s=t.src.charCodeAt(A),r(s));)9===s?f+=4-(f+t.bsCount[e]+(i?1:0))%4:f++,A++;for(m=[t.bsCount[e]],t.bsCount[e]=t.sCount[e]+1+(_?1:0),u=A>=M,y=[t.sCount[e]],t.sCount[e]=f-c,k=[t.tShift[e]],t.tShift[e]=A-t.bMarks[e],x=t.md.block.ruler.getRules("blockquote"),v=t.parentType,t.parentType="blockquote",C=!1,h=e+1;h<n&&(t.sCount[h]<t.blkIndent&&(C=!0),!((A=t.bMarks[h]+t.tShift[h])>=(M=t.eMarks[h])));h++)if(62!==t.src.charCodeAt(A++)||C){if(u)break;for(b=!1,a=0,l=x.length;a<l;a++)if(x[a](t,h,n,!0)){b=!0;break}if(b){t.lineMax=h,0!==t.blkIndent&&(d.push(t.bMarks[h]),m.push(t.bsCount[h]),k.push(t.tShift[h]),y.push(t.sCount[h]),t.sCount[h]-=t.blkIndent);break}d.push(t.bMarks[h]),m.push(t.bsCount[h]),k.push(t.tShift[h]),y.push(t.sCount[h]),t.sCount[h]=-1}else{for(c=f=t.sCount[h]+A-(t.bMarks[h]+t.tShift[h]),32===t.src.charCodeAt(A)?(A++,c++,f++,i=!1,_=!0):9===t.src.charCodeAt(A)?(_=!0,(t.bsCount[h]+f)%4==3?(A++,c++,f++,i=!1):i=!0):_=!1,d.push(t.bMarks[h]),t.bMarks[h]=A;A<M&&(s=t.src.charCodeAt(A),r(s));)9===s?f+=4-(f+t.bsCount[h]+(i?1:0))%4:f++,A++;u=A>=M,m.push(t.bsCount[h]),t.bsCount[h]=t.sCount[h]+1+(_?1:0),y.push(t.sCount[h]),t.sCount[h]=f-c,k.push(t.tShift[h]),t.tShift[h]=A-t.bMarks[h]}for(g=t.blkIndent,t.blkIndent=0,(w=t.push("blockquote_open","blockquote",1)).markup=">",w.map=p=[e,0],t.md.block.tokenize(t,e,h),(w=t.push("blockquote_close","blockquote",-1)).markup=">",t.lineMax=S,t.parentType=v,p[1]=t.line,a=0;a<k.length;a++)t.bMarks[a+e]=d[a],t.tShift[a+e]=k[a],t.sCount[a+e]=y[a],t.bsCount[a+e]=m[a];return t.blkIndent=g,!0}},function(t,e,n){"use strict";var r=n(0).isSpace;t.exports=function(t,e,n,o){var i,s,a,c,l=t.bMarks[e]+t.tShift[e],u=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(42!==(i=t.src.charCodeAt(l++))&&45!==i&&95!==i)return!1;for(s=1;l<u;){if((a=t.src.charCodeAt(l++))!==i&&!r(a))return!1;a===i&&s++}return!(s<3)&&(o||(t.line=e+1,(c=t.push("hr","hr",0)).map=[e,t.line],c.markup=Array(s+1).join(String.fromCharCode(i))),!0)}},function(t,e,n){"use strict";var r=n(0).isSpace;function o(t,e){var n,o,i,s;return o=t.bMarks[e]+t.tShift[e],i=t.eMarks[e],42!==(n=t.src.charCodeAt(o++))&&45!==n&&43!==n||o<i&&(s=t.src.charCodeAt(o),!r(s))?-1:o}function i(t,e){var n,o=t.bMarks[e]+t.tShift[e],i=o,s=t.eMarks[e];if(i+1>=s)return-1;if((n=t.src.charCodeAt(i++))<48||n>57)return-1;for(;;){if(i>=s)return-1;if(!((n=t.src.charCodeAt(i++))>=48&&n<=57)){if(41===n||46===n)break;return-1}if(i-o>=10)return-1}return i<s&&(n=t.src.charCodeAt(i),!r(n))?-1:i}t.exports=function(t,e,n,r){var s,a,c,l,u,p,h,f,d,m,g,v,y,k,_,b,x,w,C,S,A,M,D,E,O,T,z,I,N=!1,R=!0;if(t.sCount[e]-t.blkIndent>=4)return!1;if(t.listIndent>=0&&t.sCount[e]-t.listIndent>=4&&t.sCount[e]<t.blkIndent)return!1;if(r&&"paragraph"===t.parentType&&t.tShift[e]>=t.blkIndent&&(N=!0),(D=i(t,e))>=0){if(h=!0,O=t.bMarks[e]+t.tShift[e],y=Number(t.src.substr(O,D-O-1)),N&&1!==y)return!1}else{if(!((D=o(t,e))>=0))return!1;h=!1}if(N&&t.skipSpaces(D)>=t.eMarks[e])return!1;if(v=t.src.charCodeAt(D-1),r)return!0;for(g=t.tokens.length,h?(I=t.push("ordered_list_open","ol",1),1!==y&&(I.attrs=[["start",y]])):I=t.push("bullet_list_open","ul",1),I.map=m=[e,0],I.markup=String.fromCharCode(v),_=e,E=!1,z=t.md.block.ruler.getRules("list"),w=t.parentType,t.parentType="list";_<n;){for(M=D,k=t.eMarks[_],p=b=t.sCount[_]+D-(t.bMarks[e]+t.tShift[e]);M<k;){if(9===(s=t.src.charCodeAt(M)))b+=4-(b+t.bsCount[_])%4;else{if(32!==s)break;b++}M++}if((u=(a=M)>=k?1:b-p)>4&&(u=1),l=p+u,(I=t.push("list_item_open","li",1)).markup=String.fromCharCode(v),I.map=f=[e,0],A=t.tight,S=t.tShift[e],C=t.sCount[e],x=t.listIndent,t.listIndent=t.blkIndent,t.blkIndent=l,t.tight=!0,t.tShift[e]=a-t.bMarks[e],t.sCount[e]=b,a>=k&&t.isEmpty(e+1)?t.line=Math.min(t.line+2,n):t.md.block.tokenize(t,e,n,!0),t.tight&&!E||(R=!1),E=t.line-e>1&&t.isEmpty(t.line-1),t.blkIndent=t.listIndent,t.listIndent=x,t.tShift[e]=S,t.sCount[e]=C,t.tight=A,(I=t.push("list_item_close","li",-1)).markup=String.fromCharCode(v),_=e=t.line,f[1]=_,a=t.bMarks[e],_>=n)break;if(t.sCount[_]<t.blkIndent)break;if(t.sCount[e]-t.blkIndent>=4)break;for(T=!1,c=0,d=z.length;c<d;c++)if(z[c](t,_,n,!0)){T=!0;break}if(T)break;if(h){if((D=i(t,_))<0)break}else if((D=o(t,_))<0)break;if(v!==t.src.charCodeAt(D-1))break}return(I=h?t.push("ordered_list_close","ol",-1):t.push("bullet_list_close","ul",-1)).markup=String.fromCharCode(v),m[1]=_,t.line=_,t.parentType=w,R&&function(t,e){var n,r,o=t.level+2;for(n=e+2,r=t.tokens.length-2;n<r;n++)t.tokens[n].level===o&&"paragraph_open"===t.tokens[n].type&&(t.tokens[n+2].hidden=!0,t.tokens[n].hidden=!0,n+=2)}(t,g),!0}},function(t,e,n){"use strict";var r=n(0).normalizeReference,o=n(0).isSpace;t.exports=function(t,e,n,i){var s,a,c,l,u,p,h,f,d,m,g,v,y,k,_,b,x=0,w=t.bMarks[e]+t.tShift[e],C=t.eMarks[e],S=e+1;if(t.sCount[e]-t.blkIndent>=4)return!1;if(91!==t.src.charCodeAt(w))return!1;for(;++w<C;)if(93===t.src.charCodeAt(w)&&92!==t.src.charCodeAt(w-1)){if(w+1===C)return!1;if(58!==t.src.charCodeAt(w+1))return!1;break}for(l=t.lineMax,_=t.md.block.ruler.getRules("reference"),m=t.parentType,t.parentType="reference";S<l&&!t.isEmpty(S);S++)if(!(t.sCount[S]-t.blkIndent>3||t.sCount[S]<0)){for(k=!1,p=0,h=_.length;p<h;p++)if(_[p](t,S,l,!0)){k=!0;break}if(k)break}for(C=(y=t.getLines(e,S,t.blkIndent,!1).trim()).length,w=1;w<C;w++){if(91===(s=y.charCodeAt(w)))return!1;if(93===s){d=w;break}(10===s||92===s&&++w<C&&10===y.charCodeAt(w))&&x++}if(d<0||58!==y.charCodeAt(d+1))return!1;for(w=d+2;w<C;w++)if(10===(s=y.charCodeAt(w)))x++;else if(!o(s))break;if(!(g=t.md.helpers.parseLinkDestination(y,w,C)).ok)return!1;if(u=t.md.normalizeLink(g.str),!t.md.validateLink(u))return!1;for(a=w=g.pos,c=x+=g.lines,v=w;w<C;w++)if(10===(s=y.charCodeAt(w)))x++;else if(!o(s))break;for(g=t.md.helpers.parseLinkTitle(y,w,C),w<C&&v!==w&&g.ok?(b=g.str,w=g.pos,x+=g.lines):(b="",w=a,x=c);w<C&&(s=y.charCodeAt(w),o(s));)w++;if(w<C&&10!==y.charCodeAt(w)&&b)for(b="",w=a,x=c;w<C&&(s=y.charCodeAt(w),o(s));)w++;return!(w<C&&10!==y.charCodeAt(w))&&(!!(f=r(y.slice(1,d)))&&(i||(void 0===t.env.references&&(t.env.references={}),void 0===t.env.references[f]&&(t.env.references[f]={title:b,href:u}),t.parentType=m,t.line=e+x+1),!0))}},function(t,e,n){"use strict";var r=n(0).isSpace;t.exports=function(t,e,n,o){var i,s,a,c,l=t.bMarks[e]+t.tShift[e],u=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(35!==(i=t.src.charCodeAt(l))||l>=u)return!1;for(s=1,i=t.src.charCodeAt(++l);35===i&&l<u&&s<=6;)s++,i=t.src.charCodeAt(++l);return!(s>6||l<u&&!r(i))&&(o||(u=t.skipSpacesBack(u,l),(a=t.skipCharsBack(u,35,l))>l&&r(t.src.charCodeAt(a-1))&&(u=a),t.line=e+1,(c=t.push("heading_open","h"+String(s),1)).markup="########".slice(0,s),c.map=[e,t.line],(c=t.push("inline","",0)).content=t.src.slice(l,u).trim(),c.map=[e,t.line],c.children=[],(c=t.push("heading_close","h"+String(s),-1)).markup="########".slice(0,s)),!0)}},function(t,e,n){"use strict";t.exports=function(t,e,n){var r,o,i,s,a,c,l,u,p,h,f=e+1,d=t.md.block.ruler.getRules("paragraph");if(t.sCount[e]-t.blkIndent>=4)return!1;for(h=t.parentType,t.parentType="paragraph";f<n&&!t.isEmpty(f);f++)if(!(t.sCount[f]-t.blkIndent>3)){if(t.sCount[f]>=t.blkIndent&&(c=t.bMarks[f]+t.tShift[f])<(l=t.eMarks[f])&&(45===(p=t.src.charCodeAt(c))||61===p)&&(c=t.skipChars(c,p),(c=t.skipSpaces(c))>=l)){u=61===p?1:2;break}if(!(t.sCount[f]<0)){for(o=!1,i=0,s=d.length;i<s;i++)if(d[i](t,f,n,!0)){o=!0;break}if(o)break}}return!!u&&(r=t.getLines(e,f,t.blkIndent,!1).trim(),t.line=f+1,(a=t.push("heading_open","h"+String(u),1)).markup=String.fromCharCode(p),a.map=[e,t.line],(a=t.push("inline","",0)).content=r,a.map=[e,t.line-1],a.children=[],(a=t.push("heading_close","h"+String(u),-1)).markup=String.fromCharCode(p),t.parentType=h,!0)}},function(t,e,n){"use strict";var r=n(59),o=n(17).HTML_OPEN_CLOSE_TAG_RE,i=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+r.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(o.source+"\\s*$"),/^$/,!1]];t.exports=function(t,e,n,r){var o,s,a,c,l=t.bMarks[e]+t.tShift[e],u=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(!t.md.options.html)return!1;if(60!==t.src.charCodeAt(l))return!1;for(c=t.src.slice(l,u),o=0;o<i.length&&!i[o][0].test(c);o++);if(o===i.length)return!1;if(r)return i[o][2];if(s=e+1,!i[o][1].test(c))for(;s<n&&!(t.sCount[s]<t.blkIndent);s++)if(l=t.bMarks[s]+t.tShift[s],u=t.eMarks[s],c=t.src.slice(l,u),i[o][1].test(c)){0!==c.length&&s++;break}return t.line=s,(a=t.push("html_block","",0)).map=[e,s],a.content=t.getLines(e,s,t.blkIndent,!0),!0}},function(t,e,n){"use strict";t.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]},function(t,e,n){"use strict";t.exports=function(t,e){var n,r,o,i,s,a,c=e+1,l=t.md.block.ruler.getRules("paragraph"),u=t.lineMax;for(a=t.parentType,t.parentType="paragraph";c<u&&!t.isEmpty(c);c++)if(!(t.sCount[c]-t.blkIndent>3||t.sCount[c]<0)){for(r=!1,o=0,i=l.length;o<i;o++)if(l[o](t,c,u,!0)){r=!0;break}if(r)break}return n=t.getLines(e,c,t.blkIndent,!1).trim(),t.line=c,(s=t.push("paragraph_open","p",1)).map=[e,t.line],(s=t.push("inline","",0)).content=n,s.map=[e,t.line],s.children=[],s=t.push("paragraph_close","p",-1),t.parentType=a,!0}},function(t,e,n){"use strict";var r=n(2),o=n(0).isSpace;function i(t,e,n,r){var i,s,a,c,l,u,p,h;for(this.src=t,this.md=e,this.env=n,this.tokens=r,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",h=!1,a=c=u=p=0,l=(s=this.src).length;c<l;c++){if(i=s.charCodeAt(c),!h){if(o(i)){u++,9===i?p+=4-p%4:p++;continue}h=!0}10!==i&&c!==l-1||(10!==i&&c++,this.bMarks.push(a),this.eMarks.push(c),this.tShift.push(u),this.sCount.push(p),this.bsCount.push(0),h=!1,u=0,p=0,a=c+1)}this.bMarks.push(s.length),this.eMarks.push(s.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1}i.prototype.push=function(t,e,n){var o=new r(t,e,n);return o.block=!0,n<0&&this.level--,o.level=this.level,n>0&&this.level++,this.tokens.push(o),o},i.prototype.isEmpty=function(t){return this.bMarks[t]+this.tShift[t]>=this.eMarks[t]},i.prototype.skipEmptyLines=function(t){for(var e=this.lineMax;t<e&&!(this.bMarks[t]+this.tShift[t]<this.eMarks[t]);t++);return t},i.prototype.skipSpaces=function(t){for(var e,n=this.src.length;t<n&&(e=this.src.charCodeAt(t),o(e));t++);return t},i.prototype.skipSpacesBack=function(t,e){if(t<=e)return t;for(;t>e;)if(!o(this.src.charCodeAt(--t)))return t+1;return t},i.prototype.skipChars=function(t,e){for(var n=this.src.length;t<n&&this.src.charCodeAt(t)===e;t++);return t},i.prototype.skipCharsBack=function(t,e,n){if(t<=n)return t;for(;t>n;)if(e!==this.src.charCodeAt(--t))return t+1;return t},i.prototype.getLines=function(t,e,n,r){var i,s,a,c,l,u,p,h=t;if(t>=e)return"";for(u=new Array(e-t),i=0;h<e;h++,i++){for(s=0,p=c=this.bMarks[h],l=h+1<e||r?this.eMarks[h]+1:this.eMarks[h];c<l&&s<n;){if(a=this.src.charCodeAt(c),o(a))9===a?s+=4-(s+this.bsCount[h])%4:s++;else{if(!(c-p<this.tShift[h]))break;s++}c++}u[i]=s>n?new Array(s-n+1).join(" ")+this.src.slice(c,l):this.src.slice(c,l)}return u.join("")},i.prototype.Token=r,t.exports=i},function(t,e,n){"use strict";var r=n(8),o=[["text",n(63)],["newline",n(64)],["escape",n(65)],["backticks",n(66)],["strikethrough",n(18).tokenize],["emphasis",n(19).tokenize],["link",n(67)],["image",n(11)],["autolink",n(68)],["html_inline",n(69)],["entity",n(70)]],i=[["balance_pairs",n(71)],["strikethrough",n(18).postProcess],["emphasis",n(19).postProcess],["text_collapse",n(72)]];function s(){var t;for(this.ruler=new r,t=0;t<o.length;t++)this.ruler.push(o[t][0],o[t][1]);for(this.ruler2=new r,t=0;t<i.length;t++)this.ruler2.push(i[t][0],i[t][1])}s.prototype.skipToken=function(t){var e,n,r=t.pos,o=this.ruler.getRules(""),i=o.length,s=t.md.options.maxNesting,a=t.cache;if(void 0===a[r]){if(t.level<s)for(n=0;n<i&&(t.level++,e=o[n](t,!0),t.level--,!e);n++);else t.pos=t.posMax;e||t.pos++,a[r]=t.pos}else t.pos=a[r]},s.prototype.tokenize=function(t){for(var e,n,r=this.ruler.getRules(""),o=r.length,i=t.posMax,s=t.md.options.maxNesting;t.pos<i;){if(t.level<s)for(n=0;n<o&&!(e=r[n](t,!1));n++);if(e){if(t.pos>=i)break}else t.pending+=t.src[t.pos++]}t.pending&&t.pushPending()},s.prototype.parse=function(t,e,n,r){var o,i,s,a=new this.State(t,e,n,r);for(this.tokenize(a),s=(i=this.ruler2.getRules("")).length,o=0;o<s;o++)i[o](a)},s.prototype.State=n(73),t.exports=s},function(t,e,n){"use strict";function r(t){switch(t){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return!0;default:return!1}}t.exports=function(t,e){for(var n=t.pos;n<t.posMax&&!r(t.src.charCodeAt(n));)n++;return n!==t.pos&&(e||(t.pending+=t.src.slice(t.pos,n)),t.pos=n,!0)}},function(t,e,n){"use strict";var r=n(0).isSpace;t.exports=function(t,e){var n,o,i=t.pos;if(10!==t.src.charCodeAt(i))return!1;for(n=t.pending.length-1,o=t.posMax,e||(n>=0&&32===t.pending.charCodeAt(n)?n>=1&&32===t.pending.charCodeAt(n-1)?(t.pending=t.pending.replace(/ +$/,""),t.push("hardbreak","br",0)):(t.pending=t.pending.slice(0,-1),t.push("softbreak","br",0)):t.push("softbreak","br",0)),i++;i<o&&r(t.src.charCodeAt(i));)i++;return t.pos=i,!0}},function(t,e,n){"use strict";for(var r=n(0).isSpace,o=[],i=0;i<256;i++)o.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach((function(t){o[t.charCodeAt(0)]=1})),t.exports=function(t,e){var n,i=t.pos,s=t.posMax;if(92!==t.src.charCodeAt(i))return!1;if(++i<s){if((n=t.src.charCodeAt(i))<256&&0!==o[n])return e||(t.pending+=t.src[i]),t.pos+=2,!0;if(10===n){for(e||t.push("hardbreak","br",0),i++;i<s&&(n=t.src.charCodeAt(i),r(n));)i++;return t.pos=i,!0}}return e||(t.pending+="\\"),t.pos++,!0}},function(t,e,n){"use strict";t.exports=function(t,e){var n,r,o,i,s,a,c=t.pos;if(96!==t.src.charCodeAt(c))return!1;for(n=c,c++,r=t.posMax;c<r&&96===t.src.charCodeAt(c);)c++;for(o=t.src.slice(n,c),i=s=c;-1!==(i=t.src.indexOf("`",s));){for(s=i+1;s<r&&96===t.src.charCodeAt(s);)s++;if(s-i===o.length)return e||((a=t.push("code_inline","code",0)).markup=o,a.content=t.src.slice(c,i).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),t.pos=s,!0}return e||(t.pending+=o),t.pos+=o.length,!0}},function(t,e,n){"use strict";var r=n(0).normalizeReference,o=n(0).isSpace;t.exports=function(t,e){var n,i,s,a,c,l,u,p,h,f="",d=t.pos,m=t.posMax,g=t.pos,v=!0;if(91!==t.src.charCodeAt(t.pos))return!1;if(c=t.pos+1,(a=t.md.helpers.parseLinkLabel(t,t.pos,!0))<0)return!1;if((l=a+1)<m&&40===t.src.charCodeAt(l)){for(v=!1,l++;l<m&&(i=t.src.charCodeAt(l),o(i)||10===i);l++);if(l>=m)return!1;for(g=l,(u=t.md.helpers.parseLinkDestination(t.src,l,t.posMax)).ok&&(f=t.md.normalizeLink(u.str),t.md.validateLink(f)?l=u.pos:f=""),g=l;l<m&&(i=t.src.charCodeAt(l),o(i)||10===i);l++);if(u=t.md.helpers.parseLinkTitle(t.src,l,t.posMax),l<m&&g!==l&&u.ok)for(h=u.str,l=u.pos;l<m&&(i=t.src.charCodeAt(l),o(i)||10===i);l++);else h="";(l>=m||41!==t.src.charCodeAt(l))&&(v=!0),l++}if(v){if(void 0===t.env.references)return!1;if(l<m&&91===t.src.charCodeAt(l)?(g=l+1,(l=t.md.helpers.parseLinkLabel(t,l))>=0?s=t.src.slice(g,l++):l=a+1):l=a+1,s||(s=t.src.slice(c,a)),!(p=t.env.references[r(s)]))return t.pos=d,!1;f=p.href,h=p.title}return e||(t.pos=c,t.posMax=a,t.push("link_open","a",1).attrs=n=[["href",f]],h&&n.push(["title",h]),t.md.inline.tokenize(t),t.push("link_close","a",-1)),t.pos=l,t.posMax=m,!0}},function(t,e,n){"use strict";var r=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,o=/^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;t.exports=function(t,e){var n,i,s,a,c,l,u=t.pos;return 60===t.src.charCodeAt(u)&&(!((n=t.src.slice(u)).indexOf(">")<0)&&(o.test(n)?(a=(i=n.match(o))[0].slice(1,-1),c=t.md.normalizeLink(a),!!t.md.validateLink(c)&&(e||((l=t.push("link_open","a",1)).attrs=[["href",c]],l.markup="autolink",l.info="auto",(l=t.push("text","",0)).content=t.md.normalizeLinkText(a),(l=t.push("link_close","a",-1)).markup="autolink",l.info="auto"),t.pos+=i[0].length,!0)):!!r.test(n)&&(a=(s=n.match(r))[0].slice(1,-1),c=t.md.normalizeLink("mailto:"+a),!!t.md.validateLink(c)&&(e||((l=t.push("link_open","a",1)).attrs=[["href",c]],l.markup="autolink",l.info="auto",(l=t.push("text","",0)).content=t.md.normalizeLinkText(a),(l=t.push("link_close","a",-1)).markup="autolink",l.info="auto"),t.pos+=s[0].length,!0))))}},function(t,e,n){"use strict";var r=n(17).HTML_TAG_RE;t.exports=function(t,e){var n,o,i,s=t.pos;return!!t.md.options.html&&(i=t.posMax,!(60!==t.src.charCodeAt(s)||s+2>=i)&&(!(33!==(n=t.src.charCodeAt(s+1))&&63!==n&&47!==n&&!function(t){var e=32|t;return e>=97&&e<=122}(n))&&(!!(o=t.src.slice(s).match(r))&&(e||(t.push("html_inline","",0).content=t.src.slice(s,s+o[0].length)),t.pos+=o[0].length,!0))))}},function(t,e,n){"use strict";var r=n(14),o=n(0).has,i=n(0).isValidEntityCode,s=n(0).fromCodePoint,a=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,c=/^&([a-z][a-z0-9]{1,31});/i;t.exports=function(t,e){var n,l,u=t.pos,p=t.posMax;if(38!==t.src.charCodeAt(u))return!1;if(u+1<p)if(35===t.src.charCodeAt(u+1)){if(l=t.src.slice(u).match(a))return e||(n="x"===l[1][0].toLowerCase()?parseInt(l[1].slice(1),16):parseInt(l[1],10),t.pending+=i(n)?s(n):s(65533)),t.pos+=l[0].length,!0}else if((l=t.src.slice(u).match(c))&&o(r,l[1]))return e||(t.pending+=r[l[1]]),t.pos+=l[0].length,!0;return e||(t.pending+="&"),t.pos++,!0}},function(t,e,n){"use strict";function r(t,e){var n,r,o,i,s,a,c,l,u={},p=e.length;for(n=0;n<p;n++)if((o=e[n]).length=o.length||0,o.close){for(u.hasOwnProperty(o.marker)||(u[o.marker]=[-1,-1,-1]),s=u[o.marker][o.length%3],a=-1,r=n-o.jump-1;r>s;r-=i.jump+1)if((i=e[r]).marker===o.marker&&(-1===a&&(a=r),i.open&&i.end<0&&i.level===o.level&&(c=!1,(i.close||o.open)&&(i.length+o.length)%3==0&&(i.length%3==0&&o.length%3==0||(c=!0)),!c))){l=r>0&&!e[r-1].open?e[r-1].jump+1:0,o.jump=n-r+l,o.open=!1,i.end=n,i.jump=l,i.close=!1,a=-1;break}-1!==a&&(u[o.marker][(o.length||0)%3]=a)}}t.exports=function(t){var e,n=t.tokens_meta,o=t.tokens_meta.length;for(r(0,t.delimiters),e=0;e<o;e++)n[e]&&n[e].delimiters&&r(0,n[e].delimiters)}},function(t,e,n){"use strict";t.exports=function(t){var e,n,r=0,o=t.tokens,i=t.tokens.length;for(e=n=0;e<i;e++)o[e].nesting<0&&r--,o[e].level=r,o[e].nesting>0&&r++,"text"===o[e].type&&e+1<i&&"text"===o[e+1].type?o[e+1].content=o[e].content+o[e+1].content:(e!==n&&(o[n]=o[e]),n++);e!==n&&(o.length=n)}},function(t,e,n){"use strict";var r=n(2),o=n(0).isWhiteSpace,i=n(0).isPunctChar,s=n(0).isMdAsciiPunct;function a(t,e,n,r){this.src=t,this.env=n,this.md=e,this.tokens=r,this.tokens_meta=Array(r.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[]}a.prototype.pushPending=function(){var t=new r("text","",0);return t.content=this.pending,t.level=this.pendingLevel,this.tokens.push(t),this.pending="",t},a.prototype.push=function(t,e,n){this.pending&&this.pushPending();var o=new r(t,e,n),i=null;return n<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),o.level=this.level,n>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],i={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(o),this.tokens_meta.push(i),o},a.prototype.scanDelims=function(t,e){var n,r,a,c,l,u,p,h,f,d=t,m=!0,g=!0,v=this.posMax,y=this.src.charCodeAt(t);for(n=t>0?this.src.charCodeAt(t-1):32;d<v&&this.src.charCodeAt(d)===y;)d++;return a=d-t,r=d<v?this.src.charCodeAt(d):32,p=s(n)||i(String.fromCharCode(n)),f=s(r)||i(String.fromCharCode(r)),u=o(n),(h=o(r))?m=!1:f&&(u||p||(m=!1)),u?g=!1:p&&(h||f||(g=!1)),e?(c=m,l=g):(c=m&&(!g||p),l=g&&(!m||f)),{can_open:c,can_close:l,length:a}},a.prototype.Token=r,t.exports=a},function(t,e,n){"use strict";function r(t){var e=Array.prototype.slice.call(arguments,1);return e.forEach((function(e){e&&Object.keys(e).forEach((function(n){t[n]=e[n]}))})),t}function o(t){return Object.prototype.toString.call(t)}function i(t){return"[object Function]"===o(t)}function s(t){return t.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var a={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1};var c={"http:":{validate:function(t,e,n){var r=t.slice(e);return n.re.http||(n.re.http=new RegExp("^\\/\\/"+n.re.src_auth+n.re.src_host_port_strict+n.re.src_path,"i")),n.re.http.test(r)?r.match(n.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(t,e,n){var r=t.slice(e);return n.re.no_http||(n.re.no_http=new RegExp("^"+n.re.src_auth+"(?:localhost|(?:(?:"+n.re.src_domain+")\\.)+"+n.re.src_domain_root+")"+n.re.src_port+n.re.src_host_terminator+n.re.src_path,"i")),n.re.no_http.test(r)?e>=3&&":"===t[e-3]||e>=3&&"/"===t[e-3]?0:r.match(n.re.no_http)[0].length:0}},"mailto:":{validate:function(t,e,n){var r=t.slice(e);return n.re.mailto||(n.re.mailto=new RegExp("^"+n.re.src_email_name+"@"+n.re.src_host_strict,"i")),n.re.mailto.test(r)?r.match(n.re.mailto)[0].length:0}}},l="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function u(t){var e=t.re=n(75)(t.__opts__),r=t.__tlds__.slice();function a(t){return t.replace("%TLDS%",e.src_tlds)}t.onCompile(),t.__tlds_replaced__||r.push("a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]"),r.push(e.src_xn),e.src_tlds=r.join("|"),e.email_fuzzy=RegExp(a(e.tpl_email_fuzzy),"i"),e.link_fuzzy=RegExp(a(e.tpl_link_fuzzy),"i"),e.link_no_ip_fuzzy=RegExp(a(e.tpl_link_no_ip_fuzzy),"i"),e.host_fuzzy_test=RegExp(a(e.tpl_host_fuzzy_test),"i");var c=[];function l(t,e){throw new Error('(LinkifyIt) Invalid schema "'+t+'": '+e)}t.__compiled__={},Object.keys(t.__schemas__).forEach((function(e){var n=t.__schemas__[e];if(null!==n){var r={validate:null,link:null};if(t.__compiled__[e]=r,"[object Object]"===o(n))return!function(t){return"[object RegExp]"===o(t)}(n.validate)?i(n.validate)?r.validate=n.validate:l(e,n):r.validate=function(t){return function(e,n){var r=e.slice(n);return t.test(r)?r.match(t)[0].length:0}}(n.validate),void(i(n.normalize)?r.normalize=n.normalize:n.normalize?l(e,n):r.normalize=function(t,e){e.normalize(t)});!function(t){return"[object String]"===o(t)}(n)?l(e,n):c.push(e)}})),c.forEach((function(e){t.__compiled__[t.__schemas__[e]]&&(t.__compiled__[e].validate=t.__compiled__[t.__schemas__[e]].validate,t.__compiled__[e].normalize=t.__compiled__[t.__schemas__[e]].normalize)})),t.__compiled__[""]={validate:null,normalize:function(t,e){e.normalize(t)}};var u=Object.keys(t.__compiled__).filter((function(e){return e.length>0&&t.__compiled__[e]})).map(s).join("|");t.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+e.src_ZPCc+"))("+u+")","i"),t.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+e.src_ZPCc+"))("+u+")","ig"),t.re.pretest=RegExp("("+t.re.schema_test.source+")|("+t.re.host_fuzzy_test.source+")|@","i"),function(t){t.__index__=-1,t.__text_cache__=""}(t)}function p(t,e){var n=t.__index__,r=t.__last_index__,o=t.__text_cache__.slice(n,r);this.schema=t.__schema__.toLowerCase(),this.index=n+e,this.lastIndex=r+e,this.raw=o,this.text=o,this.url=o}function h(t,e){var n=new p(t,e);return t.__compiled__[n.schema].normalize(n,t),n}function f(t,e){if(!(this instanceof f))return new f(t,e);var n;e||(n=t,Object.keys(n||{}).reduce((function(t,e){return t||a.hasOwnProperty(e)}),!1)&&(e=t,t={})),this.__opts__=r({},a,e),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=r({},c,t),this.__compiled__={},this.__tlds__=l,this.__tlds_replaced__=!1,this.re={},u(this)}f.prototype.add=function(t,e){return this.__schemas__[t]=e,u(this),this},f.prototype.set=function(t){return this.__opts__=r(this.__opts__,t),this},f.prototype.test=function(t){if(this.__text_cache__=t,this.__index__=-1,!t.length)return!1;var e,n,r,o,i,s,a,c;if(this.re.schema_test.test(t))for((a=this.re.schema_search).lastIndex=0;null!==(e=a.exec(t));)if(o=this.testSchemaAt(t,e[2],a.lastIndex)){this.__schema__=e[2],this.__index__=e.index+e[1].length,this.__last_index__=e.index+e[0].length+o;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(c=t.search(this.re.host_fuzzy_test))>=0&&(this.__index__<0||c<this.__index__)&&null!==(n=t.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(i=n.index+n[1].length,(this.__index__<0||i<this.__index__)&&(this.__schema__="",this.__index__=i,this.__last_index__=n.index+n[0].length)),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&t.indexOf("@")>=0&&null!==(r=t.match(this.re.email_fuzzy))&&(i=r.index+r[1].length,s=r.index+r[0].length,(this.__index__<0||i<this.__index__||i===this.__index__&&s>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=i,this.__last_index__=s)),this.__index__>=0},f.prototype.pretest=function(t){return this.re.pretest.test(t)},f.prototype.testSchemaAt=function(t,e,n){return this.__compiled__[e.toLowerCase()]?this.__compiled__[e.toLowerCase()].validate(t,n,this):0},f.prototype.match=function(t){var e=0,n=[];this.__index__>=0&&this.__text_cache__===t&&(n.push(h(this,e)),e=this.__last_index__);for(var r=e?t.slice(e):t;this.test(r);)n.push(h(this,e)),r=r.slice(this.__last_index__),e+=this.__last_index__;return n.length?n:null},f.prototype.tlds=function(t,e){return t=Array.isArray(t)?t:[t],e?(this.__tlds__=this.__tlds__.concat(t).sort().filter((function(t,e,n){return t!==n[e-1]})).reverse(),u(this),this):(this.__tlds__=t.slice(),this.__tlds_replaced__=!0,u(this),this)},f.prototype.normalize=function(t){t.schema||(t.url="http://"+t.url),"mailto:"!==t.schema||/^mailto:/i.test(t.url)||(t.url="mailto:"+t.url)},f.prototype.onCompile=function(){},t.exports=f},function(t,e,n){"use strict";t.exports=function(t){var e={};e.src_Any=n(5).source,e.src_Cc=n(6).source,e.src_Z=n(7).source,e.src_P=n(3).source,e.src_ZPCc=[e.src_Z,e.src_P,e.src_Cc].join("|"),e.src_ZCc=[e.src_Z,e.src_Cc].join("|");return e.src_pseudo_letter="(?:(?![><｜]|"+e.src_ZPCc+")"+e.src_Any+")",e.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",e.src_auth="(?:(?:(?!"+e.src_ZCc+"|[@/\\[\\]()]).)+@)?",e.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",e.src_host_terminator="(?=$|[><｜]|"+e.src_ZPCc+")(?!-|_|:\\d|\\.-|\\.(?!$|"+e.src_ZPCc+"))",e.src_path="(?:[/?#](?:(?!"+e.src_ZCc+"|[><｜]|[()[\\]{}.,\"'?!\\-]).|\\[(?:(?!"+e.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+e.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+e.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+e.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+e.src_ZCc+"|[']).)+\\'|\\'(?="+e.src_pseudo_letter+"|[-]).|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!"+e.src_ZCc+"|[.]).|"+(t&&t["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+"\\,(?!"+e.src_ZCc+").|\\!+(?!"+e.src_ZCc+"|[!]).|\\?(?!"+e.src_ZCc+"|[?]).)+|\\/)?",e.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',e.src_xn="xn--[a-z0-9\\-]{1,59}",e.src_domain_root="(?:"+e.src_xn+"|"+e.src_pseudo_letter+"{1,63})",e.src_domain="(?:"+e.src_xn+"|(?:"+e.src_pseudo_letter+")|(?:"+e.src_pseudo_letter+"(?:-|"+e.src_pseudo_letter+"){0,61}"+e.src_pseudo_letter+"))",e.src_host="(?:(?:(?:(?:"+e.src_domain+")\\.)*"+e.src_domain+"))",e.tpl_host_fuzzy="(?:"+e.src_ip4+"|(?:(?:(?:"+e.src_domain+")\\.)+(?:%TLDS%)))",e.tpl_host_no_ip_fuzzy="(?:(?:(?:"+e.src_domain+")\\.)+(?:%TLDS%))",e.src_host_strict=e.src_host+e.src_host_terminator,e.tpl_host_fuzzy_strict=e.tpl_host_fuzzy+e.src_host_terminator,e.src_host_port_strict=e.src_host+e.src_port+e.src_host_terminator,e.tpl_host_port_fuzzy_strict=e.tpl_host_fuzzy+e.src_port+e.src_host_terminator,e.tpl_host_port_no_ip_fuzzy_strict=e.tpl_host_no_ip_fuzzy+e.src_port+e.src_host_terminator,e.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+e.src_ZPCc+"|>|$))",e.tpl_email_fuzzy='(^|[><｜]|"|\\(|'+e.src_ZCc+")("+e.src_email_name+"@"+e.tpl_host_fuzzy_strict+")",e.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+e.src_ZPCc+"))((?![$+<=>^`|｜])"+e.tpl_host_port_fuzzy_strict+e.src_path+")",e.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+e.src_ZPCc+"))((?![$+<=>^`|｜])"+e.tpl_host_port_no_ip_fuzzy_strict+e.src_path+")",e}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";t.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}}},function(t,e,n){"use strict";t.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","text_collapse"]}}}},function(t,e,n){"use strict";t.exports={options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","text_collapse"]}}}},function(t,e,n){"use strict";var r=n(1),o=n(82),i=n(86),s=n(87),a=n(95),c=n(109),l=n(122),u=n(4),p=n(20),h={default:n(124),zero:n(125),commonmark:n(126)},f=/^(vbscript|javascript|file|data):/,d=/^data:image\/(gif|png|jpeg|webp);/;function m(t){var e=t.trim().toLowerCase();return!f.test(e)||!!d.test(e)}var g=["http:","https:","mailto:"];function v(t){var e=u.parse(t,!0);if(e.hostname&&(!e.protocol||g.indexOf(e.protocol)>=0))try{e.hostname=p.toASCII(e.hostname)}catch(t){}return u.encode(u.format(e))}function y(t){var e=u.parse(t,!0);if(e.hostname&&(!e.protocol||g.indexOf(e.protocol)>=0))try{e.hostname=p.toUnicode(e.hostname)}catch(t){}return u.decode(u.format(e))}function k(t,e){if(!(this instanceof k))return new k(t,e);e||r.isString(t)||(e=t||{},t="default"),this.inline=new c,this.block=new a,this.core=new s,this.renderer=new i,this.linkify=new l,this.validateLink=m,this.normalizeLink=v,this.normalizeLinkText=y,this.utils=r,this.helpers=r.assign({},o),this.options={},this.configure(t),e&&this.set(e)}k.prototype.set=function(t){return r.assign(this.options,t),this},k.prototype.configure=function(t){var e,n=this;if(r.isString(t)&&!(t=h[e=t]))throw new Error('Wrong `markdown-it` preset "'+e+'", check name');if(!t)throw new Error("Wrong `markdown-it` preset, can't be empty");return t.options&&n.set(t.options),t.components&&Object.keys(t.components).forEach((function(e){t.components[e].rules&&n[e].ruler.enableOnly(t.components[e].rules),t.components[e].rules2&&n[e].ruler2.enableOnly(t.components[e].rules2)})),this},k.prototype.enable=function(t,e){var n=[];Array.isArray(t)||(t=[t]),["core","block","inline"].forEach((function(e){n=n.concat(this[e].ruler.enable(t,!0))}),this),n=n.concat(this.inline.ruler2.enable(t,!0));var r=t.filter((function(t){return n.indexOf(t)<0}));if(r.length&&!e)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+r);return this},k.prototype.disable=function(t,e){var n=[];Array.isArray(t)||(t=[t]),["core","block","inline"].forEach((function(e){n=n.concat(this[e].ruler.disable(t,!0))}),this),n=n.concat(this.inline.ruler2.disable(t,!0));var r=t.filter((function(t){return n.indexOf(t)<0}));if(r.length&&!e)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+r);return this},k.prototype.use=function(t){var e=[this].concat(Array.prototype.slice.call(arguments,1));return t.apply(t,e),this},k.prototype.parse=function(t,e){if("string"!=typeof t)throw new Error("Input data should be a String");var n=new this.core.State(t,this,e);return this.core.process(n),n.tokens},k.prototype.render=function(t,e){return e=e||{},this.renderer.render(this.parse(t,e),this.options,e)},k.prototype.parseInline=function(t,e){var n=new this.core.State(t,this,e);return n.inlineMode=!0,this.core.process(n),n.tokens},k.prototype.renderInline=function(t,e){return e=e||{},this.renderer.render(this.parseInline(t,e),this.options,e)},t.exports=k},function(t,e,n){"use strict";e.parseLinkLabel=n(83),e.parseLinkDestination=n(84),e.parseLinkTitle=n(85)},function(t,e,n){"use strict";t.exports=function(t,e,n){var r,o,i,s,a=-1,c=t.posMax,l=t.pos;for(t.pos=e+1,r=1;t.pos<c;){if(93===(i=t.src.charCodeAt(t.pos))&&0===--r){o=!0;break}if(s=t.pos,t.md.inline.skipToken(t),91===i)if(s===t.pos-1)r++;else if(n)return t.pos=l,-1}return o&&(a=t.pos),t.pos=l,a}},function(t,e,n){"use strict";var r=n(1).unescapeAll;t.exports=function(t,e,n){var o,i,s=e,a={ok:!1,pos:0,lines:0,str:""};if(60===t.charCodeAt(e)){for(e++;e<n;){if(10===(o=t.charCodeAt(e)))return a;if(62===o)return a.pos=e+1,a.str=r(t.slice(s+1,e)),a.ok=!0,a;92===o&&e+1<n?e+=2:e++}return a}for(i=0;e<n&&32!==(o=t.charCodeAt(e))&&!(o<32||127===o);)if(92===o&&e+1<n)e+=2;else{if(40===o&&i++,41===o){if(0===i)break;i--}e++}return s===e||0!==i||(a.str=r(t.slice(s,e)),a.lines=0,a.pos=e,a.ok=!0),a}},function(t,e,n){"use strict";var r=n(1).unescapeAll;t.exports=function(t,e,n){var o,i,s=0,a=e,c={ok:!1,pos:0,lines:0,str:""};if(e>=n)return c;if(34!==(i=t.charCodeAt(e))&&39!==i&&40!==i)return c;for(e++,40===i&&(i=41);e<n;){if((o=t.charCodeAt(e))===i)return c.pos=e+1,c.lines=s,c.str=r(t.slice(a+1,e)),c.ok=!0,c;10===o?s++:92===o&&e+1<n&&(e++,10===t.charCodeAt(e)&&s++),e++}return c}},function(t,e,n){"use strict";var r=n(1).assign,o=n(1).unescapeAll,i=n(1).escapeHtml,s={};function a(){this.rules=r({},s)}s.code_inline=function(t,e,n,r,o){var s=t[e];return"<code"+o.renderAttrs(s)+">"+i(t[e].content)+"</code>"},s.code_block=function(t,e,n,r,o){var s=t[e];return"<pre"+o.renderAttrs(s)+"><code>"+i(t[e].content)+"</code></pre>\n"},s.fence=function(t,e,n,r,s){var a,c,l,u,p=t[e],h=p.info?o(p.info).trim():"",f="";return h&&(f=h.split(/\s+/g)[0]),0===(a=n.highlight&&n.highlight(p.content,f)||i(p.content)).indexOf("<pre")?a+"\n":h?(c=p.attrIndex("class"),l=p.attrs?p.attrs.slice():[],c<0?l.push(["class",n.langPrefix+f]):l[c][1]+=" "+n.langPrefix+f,u={attrs:l},"<pre><code"+s.renderAttrs(u)+">"+a+"</code></pre>\n"):"<pre><code"+s.renderAttrs(p)+">"+a+"</code></pre>\n"},s.image=function(t,e,n,r,o){var i=t[e];return i.attrs[i.attrIndex("alt")][1]=o.renderInlineAsText(i.children,n,r),o.renderToken(t,e,n)},s.hardbreak=function(t,e,n){return n.xhtmlOut?"<br />\n":"<br>\n"},s.softbreak=function(t,e,n){return n.breaks?n.xhtmlOut?"<br />\n":"<br>\n":"\n"},s.text=function(t,e){return i(t[e].content)},s.html_block=function(t,e){return t[e].content},s.html_inline=function(t,e){return t[e].content},a.prototype.renderAttrs=function(t){var e,n,r;if(!t.attrs)return"";for(r="",e=0,n=t.attrs.length;e<n;e++)r+=" "+i(t.attrs[e][0])+'="'+i(t.attrs[e][1])+'"';return r},a.prototype.renderToken=function(t,e,n){var r,o="",i=!1,s=t[e];return s.hidden?"":(s.block&&-1!==s.nesting&&e&&t[e-1].hidden&&(o+="\n"),o+=(-1===s.nesting?"</":"<")+s.tag,o+=this.renderAttrs(s),0===s.nesting&&n.xhtmlOut&&(o+=" /"),s.block&&(i=!0,1===s.nesting&&e+1<t.length&&("inline"===(r=t[e+1]).type||r.hidden||-1===r.nesting&&r.tag===s.tag)&&(i=!1)),o+=i?">\n":">")},a.prototype.renderInline=function(t,e,n){for(var r,o="",i=this.rules,s=0,a=t.length;s<a;s++)void 0!==i[r=t[s].type]?o+=i[r](t,s,e,n,this):o+=this.renderToken(t,s,e);return o},a.prototype.renderInlineAsText=function(t,e,n){for(var r="",o=0,i=t.length;o<i;o++)"text"===t[o].type?r+=t[o].content:"image"===t[o].type&&(r+=this.renderInlineAsText(t[o].children,e,n));return r},a.prototype.render=function(t,e,n){var r,o,i,s="",a=this.rules;for(r=0,o=t.length;r<o;r++)"inline"===(i=t[r].type)?s+=this.renderInline(t[r].children,e,n):void 0!==a[i]?s+=a[t[r].type](t,r,e,n,this):s+=this.renderToken(t,r,e,n);return s},t.exports=a},function(t,e,n){"use strict";var r=n(9),o=[["normalize",n(88)],["block",n(89)],["inline",n(90)],["linkify",n(91)],["replacements",n(92)],["smartquotes",n(93)]];function i(){this.ruler=new r;for(var t=0;t<o.length;t++)this.ruler.push(o[t][0],o[t][1])}i.prototype.process=function(t){var e,n,r;for(e=0,n=(r=this.ruler.getRules("")).length;e<n;e++)r[e](t)},i.prototype.State=n(94),t.exports=i},function(t,e,n){"use strict";var r=/\r\n?|\n/g,o=/\0/g;t.exports=function(t){var e;e=(e=t.src.replace(r,"\n")).replace(o,"�"),t.src=e}},function(t,e,n){"use strict";t.exports=function(t){var e;t.inlineMode?((e=new t.Token("inline","",0)).content=t.src,e.map=[0,1],e.children=[],t.tokens.push(e)):t.md.block.parse(t.src,t.md,t.env,t.tokens)}},function(t,e,n){"use strict";t.exports=function(t){var e,n,r,o=t.tokens;for(n=0,r=o.length;n<r;n++)"inline"===(e=o[n]).type&&t.md.inline.parse(e.content,t.md,t.env,e.children)}},function(t,e,n){"use strict";var r=n(1).arrayReplaceAt;function o(t){return/^<\/a\s*>/i.test(t)}t.exports=function(t){var e,n,i,s,a,c,l,u,p,h,f,d,m,g,v,y,k,_,b=t.tokens;if(t.md.options.linkify)for(n=0,i=b.length;n<i;n++)if("inline"===b[n].type&&t.md.linkify.pretest(b[n].content))for(m=0,e=(s=b[n].children).length-1;e>=0;e--)if("link_close"!==(c=s[e]).type){if("html_inline"===c.type&&(_=c.content,/^<a[>\s]/i.test(_)&&m>0&&m--,o(c.content)&&m++),!(m>0)&&"text"===c.type&&t.md.linkify.test(c.content)){for(p=c.content,k=t.md.linkify.match(p),l=[],d=c.level,f=0,u=0;u<k.length;u++)g=k[u].url,v=t.md.normalizeLink(g),t.md.validateLink(v)&&(y=k[u].text,y=k[u].schema?"mailto:"!==k[u].schema||/^mailto:/i.test(y)?t.md.normalizeLinkText(y):t.md.normalizeLinkText("mailto:"+y).replace(/^mailto:/,""):t.md.normalizeLinkText("http://"+y).replace(/^http:\/\//,""),(h=k[u].index)>f&&((a=new t.Token("text","",0)).content=p.slice(f,h),a.level=d,l.push(a)),(a=new t.Token("link_open","a",1)).attrs=[["href",v]],a.level=d++,a.markup="linkify",a.info="auto",l.push(a),(a=new t.Token("text","",0)).content=y,a.level=d,l.push(a),(a=new t.Token("link_close","a",-1)).level=--d,a.markup="linkify",a.info="auto",l.push(a),f=k[u].lastIndex);f<p.length&&((a=new t.Token("text","",0)).content=p.slice(f),a.level=d,l.push(a)),b[n].children=s=r(s,e,l)}}else for(e--;s[e].level!==c.level&&"link_open"!==s[e].type;)e--}},function(t,e,n){"use strict";var r=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,o=/\((c|tm|r|p)\)/i,i=/\((c|tm|r|p)\)/gi,s={c:"©",r:"®",p:"§",tm:"™"};function a(t,e){return s[e.toLowerCase()]}function c(t){var e,n,r=0;for(e=t.length-1;e>=0;e--)"text"!==(n=t[e]).type||r||(n.content=n.content.replace(i,a)),"link_open"===n.type&&"auto"===n.info&&r--,"link_close"===n.type&&"auto"===n.info&&r++}function l(t){var e,n,o=0;for(e=t.length-1;e>=0;e--)"text"!==(n=t[e]).type||o||r.test(n.content)&&(n.content=n.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---([^-]|$)/gm,"$1—$2").replace(/(^|\s)--(\s|$)/gm,"$1–$2").replace(/(^|[^-\s])--([^-\s]|$)/gm,"$1–$2")),"link_open"===n.type&&"auto"===n.info&&o--,"link_close"===n.type&&"auto"===n.info&&o++}t.exports=function(t){var e;if(t.md.options.typographer)for(e=t.tokens.length-1;e>=0;e--)"inline"===t.tokens[e].type&&(o.test(t.tokens[e].content)&&c(t.tokens[e].children),r.test(t.tokens[e].content)&&l(t.tokens[e].children))}},function(t,e,n){"use strict";var r=n(1).isWhiteSpace,o=n(1).isPunctChar,i=n(1).isMdAsciiPunct,s=/['"]/,a=/['"]/g;function c(t,e,n){return t.substr(0,e)+n+t.substr(e+1)}function l(t,e){var n,s,l,u,p,h,f,d,m,g,v,y,k,_,b,x,w,C,S,A,M;for(S=[],n=0;n<t.length;n++){for(s=t[n],f=t[n].level,w=S.length-1;w>=0&&!(S[w].level<=f);w--);if(S.length=w+1,"text"===s.type){p=0,h=(l=s.content).length;t:for(;p<h&&(a.lastIndex=p,u=a.exec(l));){if(b=x=!0,p=u.index+1,C="'"===u[0],m=32,u.index-1>=0)m=l.charCodeAt(u.index-1);else for(w=n-1;w>=0&&("softbreak"!==t[w].type&&"hardbreak"!==t[w].type);w--)if("text"===t[w].type){m=t[w].content.charCodeAt(t[w].content.length-1);break}if(g=32,p<h)g=l.charCodeAt(p);else for(w=n+1;w<t.length&&("softbreak"!==t[w].type&&"hardbreak"!==t[w].type);w++)if("text"===t[w].type){g=t[w].content.charCodeAt(0);break}if(v=i(m)||o(String.fromCharCode(m)),y=i(g)||o(String.fromCharCode(g)),k=r(m),(_=r(g))?b=!1:y&&(k||v||(b=!1)),k?x=!1:v&&(_||y||(x=!1)),34===g&&'"'===u[0]&&m>=48&&m<=57&&(x=b=!1),b&&x&&(b=!1,x=y),b||x){if(x)for(w=S.length-1;w>=0&&(d=S[w],!(S[w].level<f));w--)if(d.single===C&&S[w].level===f){d=S[w],C?(A=e.md.options.quotes[2],M=e.md.options.quotes[3]):(A=e.md.options.quotes[0],M=e.md.options.quotes[1]),s.content=c(s.content,u.index,M),t[d.token].content=c(t[d.token].content,d.pos,A),p+=M.length-1,d.token===n&&(p+=A.length-1),h=(l=s.content).length,S.length=w;continue t}b?S.push({token:n,pos:u.index,single:C,level:f}):x&&C&&(s.content=c(s.content,u.index,"’"))}else C&&(s.content=c(s.content,u.index,"’"))}}}}t.exports=function(t){var e;if(t.md.options.typographer)for(e=t.tokens.length-1;e>=0;e--)"inline"===t.tokens[e].type&&s.test(t.tokens[e].content)&&l(t.tokens[e].children,t)}},function(t,e,n){"use strict";var r=n(10);function o(t,e,n){this.src=t,this.env=n,this.tokens=[],this.inlineMode=!1,this.md=e}o.prototype.Token=r,t.exports=o},function(t,e,n){"use strict";var r=n(9),o=[["table",n(96),["paragraph","reference"]],["code",n(97)],["fence",n(98),["paragraph","reference","blockquote","list"]],["blockquote",n(99),["paragraph","reference","blockquote","list"]],["hr",n(100),["paragraph","reference","blockquote","list"]],["list",n(101),["paragraph","reference","blockquote"]],["reference",n(102)],["heading",n(103),["paragraph","reference","blockquote"]],["lheading",n(104)],["html_block",n(105),["paragraph","reference","blockquote"]],["paragraph",n(107)]];function i(){this.ruler=new r;for(var t=0;t<o.length;t++)this.ruler.push(o[t][0],o[t][1],{alt:(o[t][2]||[]).slice()})}i.prototype.tokenize=function(t,e,n){for(var r,o=this.ruler.getRules(""),i=o.length,s=e,a=!1,c=t.md.options.maxNesting;s<n&&(t.line=s=t.skipEmptyLines(s),!(s>=n))&&!(t.sCount[s]<t.blkIndent);){if(t.level>=c){t.line=n;break}for(r=0;r<i&&!o[r](t,s,n,!1);r++);t.tight=!a,t.isEmpty(t.line-1)&&(a=!0),(s=t.line)<n&&t.isEmpty(s)&&(a=!0,s++,t.line=s)}},i.prototype.parse=function(t,e,n,r){var o;t&&(o=new this.State(t,e,n,r),this.tokenize(o,o.line,o.lineMax))},i.prototype.State=n(108),t.exports=i},function(t,e,n){"use strict";var r=n(1).isSpace;function o(t,e){var n=t.bMarks[e]+t.blkIndent,r=t.eMarks[e];return t.src.substr(n,r-n)}function i(t){var e,n=[],r=0,o=t.length,i=0,s=0,a=!1,c=0;for(e=t.charCodeAt(r);r<o;)96===e?a?(a=!1,c=r):i%2==0&&(a=!0,c=r):124!==e||i%2!=0||a||(n.push(t.substring(s,r)),s=r+1),92===e?i++:i=0,++r===o&&a&&(a=!1,r=c+1),e=t.charCodeAt(r);return n.push(t.substring(s)),n}t.exports=function(t,e,n,s){var a,c,l,u,p,h,f,d,m,g,v,y;if(e+2>n)return!1;if(p=e+1,t.sCount[p]<t.blkIndent)return!1;if(t.sCount[p]-t.blkIndent>=4)return!1;if((l=t.bMarks[p]+t.tShift[p])>=t.eMarks[p])return!1;if(124!==(a=t.src.charCodeAt(l++))&&45!==a&&58!==a)return!1;for(;l<t.eMarks[p];){if(124!==(a=t.src.charCodeAt(l))&&45!==a&&58!==a&&!r(a))return!1;l++}for(h=(c=o(t,e+1)).split("|"),m=[],u=0;u<h.length;u++){if(!(g=h[u].trim())){if(0===u||u===h.length-1)continue;return!1}if(!/^:?-+:?$/.test(g))return!1;58===g.charCodeAt(g.length-1)?m.push(58===g.charCodeAt(0)?"center":"right"):58===g.charCodeAt(0)?m.push("left"):m.push("")}if(-1===(c=o(t,e).trim()).indexOf("|"))return!1;if(t.sCount[e]-t.blkIndent>=4)return!1;if((f=(h=i(c.replace(/^\||\|$/g,""))).length)>m.length)return!1;if(s)return!0;for((d=t.push("table_open","table",1)).map=v=[e,0],(d=t.push("thead_open","thead",1)).map=[e,e+1],(d=t.push("tr_open","tr",1)).map=[e,e+1],u=0;u<h.length;u++)(d=t.push("th_open","th",1)).map=[e,e+1],m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=t.push("inline","",0)).content=h[u].trim(),d.map=[e,e+1],d.children=[],d=t.push("th_close","th",-1);for(d=t.push("tr_close","tr",-1),d=t.push("thead_close","thead",-1),(d=t.push("tbody_open","tbody",1)).map=y=[e+2,0],p=e+2;p<n&&!(t.sCount[p]<t.blkIndent)&&-1!==(c=o(t,p).trim()).indexOf("|")&&!(t.sCount[p]-t.blkIndent>=4);p++){for(h=i(c.replace(/^\||\|$/g,"")),d=t.push("tr_open","tr",1),u=0;u<f;u++)d=t.push("td_open","td",1),m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=t.push("inline","",0)).content=h[u]?h[u].trim():"",d.children=[],d=t.push("td_close","td",-1);d=t.push("tr_close","tr",-1)}return d=t.push("tbody_close","tbody",-1),d=t.push("table_close","table",-1),v[1]=y[1]=p,t.line=p,!0}},function(t,e,n){"use strict";t.exports=function(t,e,n){var r,o,i;if(t.sCount[e]-t.blkIndent<4)return!1;for(o=r=e+1;r<n;)if(t.isEmpty(r))r++;else{if(!(t.sCount[r]-t.blkIndent>=4))break;o=++r}return t.line=o,(i=t.push("code_block","code",0)).content=t.getLines(e,o,4+t.blkIndent,!0),i.map=[e,t.line],!0}},function(t,e,n){"use strict";t.exports=function(t,e,n,r){var o,i,s,a,c,l,u,p=!1,h=t.bMarks[e]+t.tShift[e],f=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(h+3>f)return!1;if(126!==(o=t.src.charCodeAt(h))&&96!==o)return!1;if(c=h,(i=(h=t.skipChars(h,o))-c)<3)return!1;if(u=t.src.slice(c,h),s=t.src.slice(h,f),96===o&&s.indexOf(String.fromCharCode(o))>=0)return!1;if(r)return!0;for(a=e;!(++a>=n)&&!((h=c=t.bMarks[a]+t.tShift[a])<(f=t.eMarks[a])&&t.sCount[a]<t.blkIndent);)if(t.src.charCodeAt(h)===o&&!(t.sCount[a]-t.blkIndent>=4||(h=t.skipChars(h,o))-c<i||(h=t.skipSpaces(h))<f)){p=!0;break}return i=t.sCount[e],t.line=a+(p?1:0),(l=t.push("fence","code",0)).info=s,l.content=t.getLines(e+1,a,i,!0),l.markup=u,l.map=[e,t.line],!0}},function(t,e,n){"use strict";var r=n(1).isSpace;t.exports=function(t,e,n,o){var i,s,a,c,l,u,p,h,f,d,m,g,v,y,k,_,b,x,w,C,S=t.lineMax,A=t.bMarks[e]+t.tShift[e],M=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(62!==t.src.charCodeAt(A++))return!1;if(o)return!0;for(c=f=t.sCount[e]+A-(t.bMarks[e]+t.tShift[e]),32===t.src.charCodeAt(A)?(A++,c++,f++,i=!1,_=!0):9===t.src.charCodeAt(A)?(_=!0,(t.bsCount[e]+f)%4==3?(A++,c++,f++,i=!1):i=!0):_=!1,d=[t.bMarks[e]],t.bMarks[e]=A;A<M&&(s=t.src.charCodeAt(A),r(s));)9===s?f+=4-(f+t.bsCount[e]+(i?1:0))%4:f++,A++;for(m=[t.bsCount[e]],t.bsCount[e]=t.sCount[e]+1+(_?1:0),u=A>=M,y=[t.sCount[e]],t.sCount[e]=f-c,k=[t.tShift[e]],t.tShift[e]=A-t.bMarks[e],x=t.md.block.ruler.getRules("blockquote"),v=t.parentType,t.parentType="blockquote",C=!1,h=e+1;h<n&&(t.sCount[h]<t.blkIndent&&(C=!0),!((A=t.bMarks[h]+t.tShift[h])>=(M=t.eMarks[h])));h++)if(62!==t.src.charCodeAt(A++)||C){if(u)break;for(b=!1,a=0,l=x.length;a<l;a++)if(x[a](t,h,n,!0)){b=!0;break}if(b){t.lineMax=h,0!==t.blkIndent&&(d.push(t.bMarks[h]),m.push(t.bsCount[h]),k.push(t.tShift[h]),y.push(t.sCount[h]),t.sCount[h]-=t.blkIndent);break}d.push(t.bMarks[h]),m.push(t.bsCount[h]),k.push(t.tShift[h]),y.push(t.sCount[h]),t.sCount[h]=-1}else{for(c=f=t.sCount[h]+A-(t.bMarks[h]+t.tShift[h]),32===t.src.charCodeAt(A)?(A++,c++,f++,i=!1,_=!0):9===t.src.charCodeAt(A)?(_=!0,(t.bsCount[h]+f)%4==3?(A++,c++,f++,i=!1):i=!0):_=!1,d.push(t.bMarks[h]),t.bMarks[h]=A;A<M&&(s=t.src.charCodeAt(A),r(s));)9===s?f+=4-(f+t.bsCount[h]+(i?1:0))%4:f++,A++;u=A>=M,m.push(t.bsCount[h]),t.bsCount[h]=t.sCount[h]+1+(_?1:0),y.push(t.sCount[h]),t.sCount[h]=f-c,k.push(t.tShift[h]),t.tShift[h]=A-t.bMarks[h]}for(g=t.blkIndent,t.blkIndent=0,(w=t.push("blockquote_open","blockquote",1)).markup=">",w.map=p=[e,0],t.md.block.tokenize(t,e,h),(w=t.push("blockquote_close","blockquote",-1)).markup=">",t.lineMax=S,t.parentType=v,p[1]=t.line,a=0;a<k.length;a++)t.bMarks[a+e]=d[a],t.tShift[a+e]=k[a],t.sCount[a+e]=y[a],t.bsCount[a+e]=m[a];return t.blkIndent=g,!0}},function(t,e,n){"use strict";var r=n(1).isSpace;t.exports=function(t,e,n,o){var i,s,a,c,l=t.bMarks[e]+t.tShift[e],u=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(42!==(i=t.src.charCodeAt(l++))&&45!==i&&95!==i)return!1;for(s=1;l<u;){if((a=t.src.charCodeAt(l++))!==i&&!r(a))return!1;a===i&&s++}return!(s<3)&&(o||(t.line=e+1,(c=t.push("hr","hr",0)).map=[e,t.line],c.markup=Array(s+1).join(String.fromCharCode(i))),!0)}},function(t,e,n){"use strict";var r=n(1).isSpace;function o(t,e){var n,o,i,s;return o=t.bMarks[e]+t.tShift[e],i=t.eMarks[e],42!==(n=t.src.charCodeAt(o++))&&45!==n&&43!==n||o<i&&(s=t.src.charCodeAt(o),!r(s))?-1:o}function i(t,e){var n,o=t.bMarks[e]+t.tShift[e],i=o,s=t.eMarks[e];if(i+1>=s)return-1;if((n=t.src.charCodeAt(i++))<48||n>57)return-1;for(;;){if(i>=s)return-1;if(!((n=t.src.charCodeAt(i++))>=48&&n<=57)){if(41===n||46===n)break;return-1}if(i-o>=10)return-1}return i<s&&(n=t.src.charCodeAt(i),!r(n))?-1:i}t.exports=function(t,e,n,r){var s,a,c,l,u,p,h,f,d,m,g,v,y,k,_,b,x,w,C,S,A,M,D,E,O,T,z,I,N=!1,R=!0;if(t.sCount[e]-t.blkIndent>=4)return!1;if(t.listIndent>=0&&t.sCount[e]-t.listIndent>=4&&t.sCount[e]<t.blkIndent)return!1;if(r&&"paragraph"===t.parentType&&t.tShift[e]>=t.blkIndent&&(N=!0),(D=i(t,e))>=0){if(h=!0,O=t.bMarks[e]+t.tShift[e],y=Number(t.src.substr(O,D-O-1)),N&&1!==y)return!1}else{if(!((D=o(t,e))>=0))return!1;h=!1}if(N&&t.skipSpaces(D)>=t.eMarks[e])return!1;if(v=t.src.charCodeAt(D-1),r)return!0;for(g=t.tokens.length,h?(I=t.push("ordered_list_open","ol",1),1!==y&&(I.attrs=[["start",y]])):I=t.push("bullet_list_open","ul",1),I.map=m=[e,0],I.markup=String.fromCharCode(v),_=e,E=!1,z=t.md.block.ruler.getRules("list"),w=t.parentType,t.parentType="list";_<n;){for(M=D,k=t.eMarks[_],p=b=t.sCount[_]+D-(t.bMarks[e]+t.tShift[e]);M<k;){if(9===(s=t.src.charCodeAt(M)))b+=4-(b+t.bsCount[_])%4;else{if(32!==s)break;b++}M++}if((u=(a=M)>=k?1:b-p)>4&&(u=1),l=p+u,(I=t.push("list_item_open","li",1)).markup=String.fromCharCode(v),I.map=f=[e,0],A=t.tight,S=t.tShift[e],C=t.sCount[e],x=t.listIndent,t.listIndent=t.blkIndent,t.blkIndent=l,t.tight=!0,t.tShift[e]=a-t.bMarks[e],t.sCount[e]=b,a>=k&&t.isEmpty(e+1)?t.line=Math.min(t.line+2,n):t.md.block.tokenize(t,e,n,!0),t.tight&&!E||(R=!1),E=t.line-e>1&&t.isEmpty(t.line-1),t.blkIndent=t.listIndent,t.listIndent=x,t.tShift[e]=S,t.sCount[e]=C,t.tight=A,(I=t.push("list_item_close","li",-1)).markup=String.fromCharCode(v),_=e=t.line,f[1]=_,a=t.bMarks[e],_>=n)break;if(t.sCount[_]<t.blkIndent)break;if(t.sCount[e]-t.blkIndent>=4)break;for(T=!1,c=0,d=z.length;c<d;c++)if(z[c](t,_,n,!0)){T=!0;break}if(T)break;if(h){if((D=i(t,_))<0)break}else if((D=o(t,_))<0)break;if(v!==t.src.charCodeAt(D-1))break}return(I=h?t.push("ordered_list_close","ol",-1):t.push("bullet_list_close","ul",-1)).markup=String.fromCharCode(v),m[1]=_,t.line=_,t.parentType=w,R&&function(t,e){var n,r,o=t.level+2;for(n=e+2,r=t.tokens.length-2;n<r;n++)t.tokens[n].level===o&&"paragraph_open"===t.tokens[n].type&&(t.tokens[n+2].hidden=!0,t.tokens[n].hidden=!0,n+=2)}(t,g),!0}},function(t,e,n){"use strict";var r=n(1).normalizeReference,o=n(1).isSpace;t.exports=function(t,e,n,i){var s,a,c,l,u,p,h,f,d,m,g,v,y,k,_,b,x=0,w=t.bMarks[e]+t.tShift[e],C=t.eMarks[e],S=e+1;if(t.sCount[e]-t.blkIndent>=4)return!1;if(91!==t.src.charCodeAt(w))return!1;for(;++w<C;)if(93===t.src.charCodeAt(w)&&92!==t.src.charCodeAt(w-1)){if(w+1===C)return!1;if(58!==t.src.charCodeAt(w+1))return!1;break}for(l=t.lineMax,_=t.md.block.ruler.getRules("reference"),m=t.parentType,t.parentType="reference";S<l&&!t.isEmpty(S);S++)if(!(t.sCount[S]-t.blkIndent>3||t.sCount[S]<0)){for(k=!1,p=0,h=_.length;p<h;p++)if(_[p](t,S,l,!0)){k=!0;break}if(k)break}for(C=(y=t.getLines(e,S,t.blkIndent,!1).trim()).length,w=1;w<C;w++){if(91===(s=y.charCodeAt(w)))return!1;if(93===s){d=w;break}(10===s||92===s&&++w<C&&10===y.charCodeAt(w))&&x++}if(d<0||58!==y.charCodeAt(d+1))return!1;for(w=d+2;w<C;w++)if(10===(s=y.charCodeAt(w)))x++;else if(!o(s))break;if(!(g=t.md.helpers.parseLinkDestination(y,w,C)).ok)return!1;if(u=t.md.normalizeLink(g.str),!t.md.validateLink(u))return!1;for(a=w=g.pos,c=x+=g.lines,v=w;w<C;w++)if(10===(s=y.charCodeAt(w)))x++;else if(!o(s))break;for(g=t.md.helpers.parseLinkTitle(y,w,C),w<C&&v!==w&&g.ok?(b=g.str,w=g.pos,x+=g.lines):(b="",w=a,x=c);w<C&&(s=y.charCodeAt(w),o(s));)w++;if(w<C&&10!==y.charCodeAt(w)&&b)for(b="",w=a,x=c;w<C&&(s=y.charCodeAt(w),o(s));)w++;return!(w<C&&10!==y.charCodeAt(w))&&(!!(f=r(y.slice(1,d)))&&(i||(void 0===t.env.references&&(t.env.references={}),void 0===t.env.references[f]&&(t.env.references[f]={title:b,href:u}),t.parentType=m,t.line=e+x+1),!0))}},function(t,e,n){"use strict";var r=n(1).isSpace;t.exports=function(t,e,n,o){var i,s,a,c,l=t.bMarks[e]+t.tShift[e],u=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(35!==(i=t.src.charCodeAt(l))||l>=u)return!1;for(s=1,i=t.src.charCodeAt(++l);35===i&&l<u&&s<=6;)s++,i=t.src.charCodeAt(++l);return!(s>6||l<u&&!r(i))&&(o||(u=t.skipSpacesBack(u,l),(a=t.skipCharsBack(u,35,l))>l&&r(t.src.charCodeAt(a-1))&&(u=a),t.line=e+1,(c=t.push("heading_open","h"+String(s),1)).markup="########".slice(0,s),c.map=[e,t.line],(c=t.push("inline","",0)).content=t.src.slice(l,u).trim(),c.map=[e,t.line],c.children=[],(c=t.push("heading_close","h"+String(s),-1)).markup="########".slice(0,s)),!0)}},function(t,e,n){"use strict";t.exports=function(t,e,n){var r,o,i,s,a,c,l,u,p,h,f=e+1,d=t.md.block.ruler.getRules("paragraph");if(t.sCount[e]-t.blkIndent>=4)return!1;for(h=t.parentType,t.parentType="paragraph";f<n&&!t.isEmpty(f);f++)if(!(t.sCount[f]-t.blkIndent>3)){if(t.sCount[f]>=t.blkIndent&&(c=t.bMarks[f]+t.tShift[f])<(l=t.eMarks[f])&&(45===(p=t.src.charCodeAt(c))||61===p)&&(c=t.skipChars(c,p),(c=t.skipSpaces(c))>=l)){u=61===p?1:2;break}if(!(t.sCount[f]<0)){for(o=!1,i=0,s=d.length;i<s;i++)if(d[i](t,f,n,!0)){o=!0;break}if(o)break}}return!!u&&(r=t.getLines(e,f,t.blkIndent,!1).trim(),t.line=f+1,(a=t.push("heading_open","h"+String(u),1)).markup=String.fromCharCode(p),a.map=[e,t.line],(a=t.push("inline","",0)).content=r,a.map=[e,t.line-1],a.children=[],(a=t.push("heading_close","h"+String(u),-1)).markup=String.fromCharCode(p),t.parentType=h,!0)}},function(t,e,n){"use strict";var r=n(106),o=n(22).HTML_OPEN_CLOSE_TAG_RE,i=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+r.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(o.source+"\\s*$"),/^$/,!1]];t.exports=function(t,e,n,r){var o,s,a,c,l=t.bMarks[e]+t.tShift[e],u=t.eMarks[e];if(t.sCount[e]-t.blkIndent>=4)return!1;if(!t.md.options.html)return!1;if(60!==t.src.charCodeAt(l))return!1;for(c=t.src.slice(l,u),o=0;o<i.length&&!i[o][0].test(c);o++);if(o===i.length)return!1;if(r)return i[o][2];if(s=e+1,!i[o][1].test(c))for(;s<n&&!(t.sCount[s]<t.blkIndent);s++)if(l=t.bMarks[s]+t.tShift[s],u=t.eMarks[s],c=t.src.slice(l,u),i[o][1].test(c)){0!==c.length&&s++;break}return t.line=s,(a=t.push("html_block","",0)).map=[e,s],a.content=t.getLines(e,s,t.blkIndent,!0),!0}},function(t,e,n){"use strict";t.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]},function(t,e,n){"use strict";t.exports=function(t,e){var n,r,o,i,s,a,c=e+1,l=t.md.block.ruler.getRules("paragraph"),u=t.lineMax;for(a=t.parentType,t.parentType="paragraph";c<u&&!t.isEmpty(c);c++)if(!(t.sCount[c]-t.blkIndent>3||t.sCount[c]<0)){for(r=!1,o=0,i=l.length;o<i;o++)if(l[o](t,c,u,!0)){r=!0;break}if(r)break}return n=t.getLines(e,c,t.blkIndent,!1).trim(),t.line=c,(s=t.push("paragraph_open","p",1)).map=[e,t.line],(s=t.push("inline","",0)).content=n,s.map=[e,t.line],s.children=[],s=t.push("paragraph_close","p",-1),t.parentType=a,!0}},function(t,e,n){"use strict";var r=n(10),o=n(1).isSpace;function i(t,e,n,r){var i,s,a,c,l,u,p,h;for(this.src=t,this.md=e,this.env=n,this.tokens=r,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",h=!1,a=c=u=p=0,l=(s=this.src).length;c<l;c++){if(i=s.charCodeAt(c),!h){if(o(i)){u++,9===i?p+=4-p%4:p++;continue}h=!0}10!==i&&c!==l-1||(10!==i&&c++,this.bMarks.push(a),this.eMarks.push(c),this.tShift.push(u),this.sCount.push(p),this.bsCount.push(0),h=!1,u=0,p=0,a=c+1)}this.bMarks.push(s.length),this.eMarks.push(s.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1}i.prototype.push=function(t,e,n){var o=new r(t,e,n);return o.block=!0,n<0&&this.level--,o.level=this.level,n>0&&this.level++,this.tokens.push(o),o},i.prototype.isEmpty=function(t){return this.bMarks[t]+this.tShift[t]>=this.eMarks[t]},i.prototype.skipEmptyLines=function(t){for(var e=this.lineMax;t<e&&!(this.bMarks[t]+this.tShift[t]<this.eMarks[t]);t++);return t},i.prototype.skipSpaces=function(t){for(var e,n=this.src.length;t<n&&(e=this.src.charCodeAt(t),o(e));t++);return t},i.prototype.skipSpacesBack=function(t,e){if(t<=e)return t;for(;t>e;)if(!o(this.src.charCodeAt(--t)))return t+1;return t},i.prototype.skipChars=function(t,e){for(var n=this.src.length;t<n&&this.src.charCodeAt(t)===e;t++);return t},i.prototype.skipCharsBack=function(t,e,n){if(t<=n)return t;for(;t>n;)if(e!==this.src.charCodeAt(--t))return t+1;return t},i.prototype.getLines=function(t,e,n,r){var i,s,a,c,l,u,p,h=t;if(t>=e)return"";for(u=new Array(e-t),i=0;h<e;h++,i++){for(s=0,p=c=this.bMarks[h],l=h+1<e||r?this.eMarks[h]+1:this.eMarks[h];c<l&&s<n;){if(a=this.src.charCodeAt(c),o(a))9===a?s+=4-(s+this.bsCount[h])%4:s++;else{if(!(c-p<this.tShift[h]))break;s++}c++}u[i]=s>n?new Array(s-n+1).join(" ")+this.src.slice(c,l):this.src.slice(c,l)}return u.join("")},i.prototype.Token=r,t.exports=i},function(t,e,n){"use strict";var r=n(9),o=[["text",n(110)],["newline",n(111)],["escape",n(112)],["backticks",n(113)],["strikethrough",n(23).tokenize],["emphasis",n(24).tokenize],["link",n(114)],["image",n(115)],["autolink",n(116)],["html_inline",n(117)],["entity",n(118)]],i=[["balance_pairs",n(119)],["strikethrough",n(23).postProcess],["emphasis",n(24).postProcess],["text_collapse",n(120)]];function s(){var t;for(this.ruler=new r,t=0;t<o.length;t++)this.ruler.push(o[t][0],o[t][1]);for(this.ruler2=new r,t=0;t<i.length;t++)this.ruler2.push(i[t][0],i[t][1])}s.prototype.skipToken=function(t){var e,n,r=t.pos,o=this.ruler.getRules(""),i=o.length,s=t.md.options.maxNesting,a=t.cache;if(void 0===a[r]){if(t.level<s)for(n=0;n<i&&(t.level++,e=o[n](t,!0),t.level--,!e);n++);else t.pos=t.posMax;e||t.pos++,a[r]=t.pos}else t.pos=a[r]},s.prototype.tokenize=function(t){for(var e,n,r=this.ruler.getRules(""),o=r.length,i=t.posMax,s=t.md.options.maxNesting;t.pos<i;){if(t.level<s)for(n=0;n<o&&!(e=r[n](t,!1));n++);if(e){if(t.pos>=i)break}else t.pending+=t.src[t.pos++]}t.pending&&t.pushPending()},s.prototype.parse=function(t,e,n,r){var o,i,s,a=new this.State(t,e,n,r);for(this.tokenize(a),s=(i=this.ruler2.getRules("")).length,o=0;o<s;o++)i[o](a)},s.prototype.State=n(121),t.exports=s},function(t,e,n){"use strict";function r(t){switch(t){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return!0;default:return!1}}t.exports=function(t,e){for(var n=t.pos;n<t.posMax&&!r(t.src.charCodeAt(n));)n++;return n!==t.pos&&(e||(t.pending+=t.src.slice(t.pos,n)),t.pos=n,!0)}},function(t,e,n){"use strict";var r=n(1).isSpace;t.exports=function(t,e){var n,o,i=t.pos;if(10!==t.src.charCodeAt(i))return!1;for(n=t.pending.length-1,o=t.posMax,e||(n>=0&&32===t.pending.charCodeAt(n)?n>=1&&32===t.pending.charCodeAt(n-1)?(t.pending=t.pending.replace(/ +$/,""),t.push("hardbreak","br",0)):(t.pending=t.pending.slice(0,-1),t.push("softbreak","br",0)):t.push("softbreak","br",0)),i++;i<o&&r(t.src.charCodeAt(i));)i++;return t.pos=i,!0}},function(t,e,n){"use strict";for(var r=n(1).isSpace,o=[],i=0;i<256;i++)o.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach((function(t){o[t.charCodeAt(0)]=1})),t.exports=function(t,e){var n,i=t.pos,s=t.posMax;if(92!==t.src.charCodeAt(i))return!1;if(++i<s){if((n=t.src.charCodeAt(i))<256&&0!==o[n])return e||(t.pending+=t.src[i]),t.pos+=2,!0;if(10===n){for(e||t.push("hardbreak","br",0),i++;i<s&&(n=t.src.charCodeAt(i),r(n));)i++;return t.pos=i,!0}}return e||(t.pending+="\\"),t.pos++,!0}},function(t,e,n){"use strict";t.exports=function(t,e){var n,r,o,i,s,a,c=t.pos;if(96!==t.src.charCodeAt(c))return!1;for(n=c,c++,r=t.posMax;c<r&&96===t.src.charCodeAt(c);)c++;for(o=t.src.slice(n,c),i=s=c;-1!==(i=t.src.indexOf("`",s));){for(s=i+1;s<r&&96===t.src.charCodeAt(s);)s++;if(s-i===o.length)return e||((a=t.push("code_inline","code",0)).markup=o,a.content=t.src.slice(c,i).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),t.pos=s,!0}return e||(t.pending+=o),t.pos+=o.length,!0}},function(t,e,n){"use strict";var r=n(1).normalizeReference,o=n(1).isSpace;t.exports=function(t,e){var n,i,s,a,c,l,u,p,h,f="",d=t.pos,m=t.posMax,g=t.pos,v=!0;if(91!==t.src.charCodeAt(t.pos))return!1;if(c=t.pos+1,(a=t.md.helpers.parseLinkLabel(t,t.pos,!0))<0)return!1;if((l=a+1)<m&&40===t.src.charCodeAt(l)){for(v=!1,l++;l<m&&(i=t.src.charCodeAt(l),o(i)||10===i);l++);if(l>=m)return!1;for(g=l,(u=t.md.helpers.parseLinkDestination(t.src,l,t.posMax)).ok&&(f=t.md.normalizeLink(u.str),t.md.validateLink(f)?l=u.pos:f=""),g=l;l<m&&(i=t.src.charCodeAt(l),o(i)||10===i);l++);if(u=t.md.helpers.parseLinkTitle(t.src,l,t.posMax),l<m&&g!==l&&u.ok)for(h=u.str,l=u.pos;l<m&&(i=t.src.charCodeAt(l),o(i)||10===i);l++);else h="";(l>=m||41!==t.src.charCodeAt(l))&&(v=!0),l++}if(v){if(void 0===t.env.references)return!1;if(l<m&&91===t.src.charCodeAt(l)?(g=l+1,(l=t.md.helpers.parseLinkLabel(t,l))>=0?s=t.src.slice(g,l++):l=a+1):l=a+1,s||(s=t.src.slice(c,a)),!(p=t.env.references[r(s)]))return t.pos=d,!1;f=p.href,h=p.title}return e||(t.pos=c,t.posMax=a,t.push("link_open","a",1).attrs=n=[["href",f]],h&&n.push(["title",h]),t.md.inline.tokenize(t),t.push("link_close","a",-1)),t.pos=l,t.posMax=m,!0}},function(t,e,n){"use strict";var r=n(1).normalizeReference,o=n(1).isSpace;t.exports=function(t,e){var n,i,s,a,c,l,u,p,h,f,d,m,g,v="",y=t.pos,k=t.posMax;if(33!==t.src.charCodeAt(t.pos))return!1;if(91!==t.src.charCodeAt(t.pos+1))return!1;if(l=t.pos+2,(c=t.md.helpers.parseLinkLabel(t,t.pos+1,!1))<0)return!1;if((u=c+1)<k&&40===t.src.charCodeAt(u)){for(u++;u<k&&(i=t.src.charCodeAt(u),o(i)||10===i);u++);if(u>=k)return!1;for(g=u,(h=t.md.helpers.parseLinkDestination(t.src,u,t.posMax)).ok&&(v=t.md.normalizeLink(h.str),t.md.validateLink(v)?u=h.pos:v=""),g=u;u<k&&(i=t.src.charCodeAt(u),o(i)||10===i);u++);if(h=t.md.helpers.parseLinkTitle(t.src,u,t.posMax),u<k&&g!==u&&h.ok)for(f=h.str,u=h.pos;u<k&&(i=t.src.charCodeAt(u),o(i)||10===i);u++);else f="";if(u>=k||41!==t.src.charCodeAt(u))return t.pos=y,!1;u++}else{if(void 0===t.env.references)return!1;if(u<k&&91===t.src.charCodeAt(u)?(g=u+1,(u=t.md.helpers.parseLinkLabel(t,u))>=0?a=t.src.slice(g,u++):u=c+1):u=c+1,a||(a=t.src.slice(l,c)),!(p=t.env.references[r(a)]))return t.pos=y,!1;v=p.href,f=p.title}return e||(s=t.src.slice(l,c),t.md.inline.parse(s,t.md,t.env,m=[]),(d=t.push("image","img",0)).attrs=n=[["src",v],["alt",""]],d.children=m,d.content=s,f&&n.push(["title",f])),t.pos=u,t.posMax=k,!0}},function(t,e,n){"use strict";var r=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,o=/^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;t.exports=function(t,e){var n,i,s,a,c,l,u=t.pos;return 60===t.src.charCodeAt(u)&&(!((n=t.src.slice(u)).indexOf(">")<0)&&(o.test(n)?(a=(i=n.match(o))[0].slice(1,-1),c=t.md.normalizeLink(a),!!t.md.validateLink(c)&&(e||((l=t.push("link_open","a",1)).attrs=[["href",c]],l.markup="autolink",l.info="auto",(l=t.push("text","",0)).content=t.md.normalizeLinkText(a),(l=t.push("link_close","a",-1)).markup="autolink",l.info="auto"),t.pos+=i[0].length,!0)):!!r.test(n)&&(a=(s=n.match(r))[0].slice(1,-1),c=t.md.normalizeLink("mailto:"+a),!!t.md.validateLink(c)&&(e||((l=t.push("link_open","a",1)).attrs=[["href",c]],l.markup="autolink",l.info="auto",(l=t.push("text","",0)).content=t.md.normalizeLinkText(a),(l=t.push("link_close","a",-1)).markup="autolink",l.info="auto"),t.pos+=s[0].length,!0))))}},function(t,e,n){"use strict";var r=n(22).HTML_TAG_RE;t.exports=function(t,e){var n,o,i,s=t.pos;return!!t.md.options.html&&(i=t.posMax,!(60!==t.src.charCodeAt(s)||s+2>=i)&&(!(33!==(n=t.src.charCodeAt(s+1))&&63!==n&&47!==n&&!function(t){var e=32|t;return e>=97&&e<=122}(n))&&(!!(o=t.src.slice(s).match(r))&&(e||(t.push("html_inline","",0).content=t.src.slice(s,s+o[0].length)),t.pos+=o[0].length,!0))))}},function(t,e,n){"use strict";var r=n(21),o=n(1).has,i=n(1).isValidEntityCode,s=n(1).fromCodePoint,a=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,c=/^&([a-z][a-z0-9]{1,31});/i;t.exports=function(t,e){var n,l,u=t.pos,p=t.posMax;if(38!==t.src.charCodeAt(u))return!1;if(u+1<p)if(35===t.src.charCodeAt(u+1)){if(l=t.src.slice(u).match(a))return e||(n="x"===l[1][0].toLowerCase()?parseInt(l[1].slice(1),16):parseInt(l[1],10),t.pending+=i(n)?s(n):s(65533)),t.pos+=l[0].length,!0}else if((l=t.src.slice(u).match(c))&&o(r,l[1]))return e||(t.pending+=r[l[1]]),t.pos+=l[0].length,!0;return e||(t.pending+="&"),t.pos++,!0}},function(t,e,n){"use strict";function r(t,e){var n,r,o,i,s,a,c,l,u={},p=e.length;for(n=0;n<p;n++)if((o=e[n]).length=o.length||0,o.close){for(u.hasOwnProperty(o.marker)||(u[o.marker]=[-1,-1,-1]),s=u[o.marker][o.length%3],a=-1,r=n-o.jump-1;r>s;r-=i.jump+1)if((i=e[r]).marker===o.marker&&(-1===a&&(a=r),i.open&&i.end<0&&i.level===o.level&&(c=!1,(i.close||o.open)&&(i.length+o.length)%3==0&&(i.length%3==0&&o.length%3==0||(c=!0)),!c))){l=r>0&&!e[r-1].open?e[r-1].jump+1:0,o.jump=n-r+l,o.open=!1,i.end=n,i.jump=l,i.close=!1,a=-1;break}-1!==a&&(u[o.marker][(o.length||0)%3]=a)}}t.exports=function(t){var e,n=t.tokens_meta,o=t.tokens_meta.length;for(r(0,t.delimiters),e=0;e<o;e++)n[e]&&n[e].delimiters&&r(0,n[e].delimiters)}},function(t,e,n){"use strict";t.exports=function(t){var e,n,r=0,o=t.tokens,i=t.tokens.length;for(e=n=0;e<i;e++)o[e].nesting<0&&r--,o[e].level=r,o[e].nesting>0&&r++,"text"===o[e].type&&e+1<i&&"text"===o[e+1].type?o[e+1].content=o[e].content+o[e+1].content:(e!==n&&(o[n]=o[e]),n++);e!==n&&(o.length=n)}},function(t,e,n){"use strict";var r=n(10),o=n(1).isWhiteSpace,i=n(1).isPunctChar,s=n(1).isMdAsciiPunct;function a(t,e,n,r){this.src=t,this.env=n,this.md=e,this.tokens=r,this.tokens_meta=Array(r.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[]}a.prototype.pushPending=function(){var t=new r("text","",0);return t.content=this.pending,t.level=this.pendingLevel,this.tokens.push(t),this.pending="",t},a.prototype.push=function(t,e,n){this.pending&&this.pushPending();var o=new r(t,e,n),i=null;return n<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),o.level=this.level,n>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],i={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(o),this.tokens_meta.push(i),o},a.prototype.scanDelims=function(t,e){var n,r,a,c,l,u,p,h,f,d=t,m=!0,g=!0,v=this.posMax,y=this.src.charCodeAt(t);for(n=t>0?this.src.charCodeAt(t-1):32;d<v&&this.src.charCodeAt(d)===y;)d++;return a=d-t,r=d<v?this.src.charCodeAt(d):32,p=s(n)||i(String.fromCharCode(n)),f=s(r)||i(String.fromCharCode(r)),u=o(n),(h=o(r))?m=!1:f&&(u||p||(m=!1)),u?g=!1:p&&(h||f||(g=!1)),e?(c=m,l=g):(c=m&&(!g||p),l=g&&(!m||f)),{can_open:c,can_close:l,length:a}},a.prototype.Token=r,t.exports=a},function(t,e,n){"use strict";function r(t){var e=Array.prototype.slice.call(arguments,1);return e.forEach((function(e){e&&Object.keys(e).forEach((function(n){t[n]=e[n]}))})),t}function o(t){return Object.prototype.toString.call(t)}function i(t){return"[object Function]"===o(t)}function s(t){return t.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var a={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1};var c={"http:":{validate:function(t,e,n){var r=t.slice(e);return n.re.http||(n.re.http=new RegExp("^\\/\\/"+n.re.src_auth+n.re.src_host_port_strict+n.re.src_path,"i")),n.re.http.test(r)?r.match(n.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(t,e,n){var r=t.slice(e);return n.re.no_http||(n.re.no_http=new RegExp("^"+n.re.src_auth+"(?:localhost|(?:(?:"+n.re.src_domain+")\\.)+"+n.re.src_domain_root+")"+n.re.src_port+n.re.src_host_terminator+n.re.src_path,"i")),n.re.no_http.test(r)?e>=3&&":"===t[e-3]||e>=3&&"/"===t[e-3]?0:r.match(n.re.no_http)[0].length:0}},"mailto:":{validate:function(t,e,n){var r=t.slice(e);return n.re.mailto||(n.re.mailto=new RegExp("^"+n.re.src_email_name+"@"+n.re.src_host_strict,"i")),n.re.mailto.test(r)?r.match(n.re.mailto)[0].length:0}}},l="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function u(t){var e=t.re=n(123)(t.__opts__),r=t.__tlds__.slice();function a(t){return t.replace("%TLDS%",e.src_tlds)}t.onCompile(),t.__tlds_replaced__||r.push("a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]"),r.push(e.src_xn),e.src_tlds=r.join("|"),e.email_fuzzy=RegExp(a(e.tpl_email_fuzzy),"i"),e.link_fuzzy=RegExp(a(e.tpl_link_fuzzy),"i"),e.link_no_ip_fuzzy=RegExp(a(e.tpl_link_no_ip_fuzzy),"i"),e.host_fuzzy_test=RegExp(a(e.tpl_host_fuzzy_test),"i");var c=[];function l(t,e){throw new Error('(LinkifyIt) Invalid schema "'+t+'": '+e)}t.__compiled__={},Object.keys(t.__schemas__).forEach((function(e){var n=t.__schemas__[e];if(null!==n){var r={validate:null,link:null};if(t.__compiled__[e]=r,"[object Object]"===o(n))return!function(t){return"[object RegExp]"===o(t)}(n.validate)?i(n.validate)?r.validate=n.validate:l(e,n):r.validate=function(t){return function(e,n){var r=e.slice(n);return t.test(r)?r.match(t)[0].length:0}}(n.validate),void(i(n.normalize)?r.normalize=n.normalize:n.normalize?l(e,n):r.normalize=function(t,e){e.normalize(t)});!function(t){return"[object String]"===o(t)}(n)?l(e,n):c.push(e)}})),c.forEach((function(e){t.__compiled__[t.__schemas__[e]]&&(t.__compiled__[e].validate=t.__compiled__[t.__schemas__[e]].validate,t.__compiled__[e].normalize=t.__compiled__[t.__schemas__[e]].normalize)})),t.__compiled__[""]={validate:null,normalize:function(t,e){e.normalize(t)}};var u=Object.keys(t.__compiled__).filter((function(e){return e.length>0&&t.__compiled__[e]})).map(s).join("|");t.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+e.src_ZPCc+"))("+u+")","i"),t.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+e.src_ZPCc+"))("+u+")","ig"),t.re.pretest=RegExp("("+t.re.schema_test.source+")|("+t.re.host_fuzzy_test.source+")|@","i"),function(t){t.__index__=-1,t.__text_cache__=""}(t)}function p(t,e){var n=t.__index__,r=t.__last_index__,o=t.__text_cache__.slice(n,r);this.schema=t.__schema__.toLowerCase(),this.index=n+e,this.lastIndex=r+e,this.raw=o,this.text=o,this.url=o}function h(t,e){var n=new p(t,e);return t.__compiled__[n.schema].normalize(n,t),n}function f(t,e){if(!(this instanceof f))return new f(t,e);var n;e||(n=t,Object.keys(n||{}).reduce((function(t,e){return t||a.hasOwnProperty(e)}),!1)&&(e=t,t={})),this.__opts__=r({},a,e),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=r({},c,t),this.__compiled__={},this.__tlds__=l,this.__tlds_replaced__=!1,this.re={},u(this)}f.prototype.add=function(t,e){return this.__schemas__[t]=e,u(this),this},f.prototype.set=function(t){return this.__opts__=r(this.__opts__,t),this},f.prototype.test=function(t){if(this.__text_cache__=t,this.__index__=-1,!t.length)return!1;var e,n,r,o,i,s,a,c;if(this.re.schema_test.test(t))for((a=this.re.schema_search).lastIndex=0;null!==(e=a.exec(t));)if(o=this.testSchemaAt(t,e[2],a.lastIndex)){this.__schema__=e[2],this.__index__=e.index+e[1].length,this.__last_index__=e.index+e[0].length+o;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(c=t.search(this.re.host_fuzzy_test))>=0&&(this.__index__<0||c<this.__index__)&&null!==(n=t.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(i=n.index+n[1].length,(this.__index__<0||i<this.__index__)&&(this.__schema__="",this.__index__=i,this.__last_index__=n.index+n[0].length)),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&t.indexOf("@")>=0&&null!==(r=t.match(this.re.email_fuzzy))&&(i=r.index+r[1].length,s=r.index+r[0].length,(this.__index__<0||i<this.__index__||i===this.__index__&&s>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=i,this.__last_index__=s)),this.__index__>=0},f.prototype.pretest=function(t){return this.re.pretest.test(t)},f.prototype.testSchemaAt=function(t,e,n){return this.__compiled__[e.toLowerCase()]?this.__compiled__[e.toLowerCase()].validate(t,n,this):0},f.prototype.match=function(t){var e=0,n=[];this.__index__>=0&&this.__text_cache__===t&&(n.push(h(this,e)),e=this.__last_index__);for(var r=e?t.slice(e):t;this.test(r);)n.push(h(this,e)),r=r.slice(this.__last_index__),e+=this.__last_index__;return n.length?n:null},f.prototype.tlds=function(t,e){return t=Array.isArray(t)?t:[t],e?(this.__tlds__=this.__tlds__.concat(t).sort().filter((function(t,e,n){return t!==n[e-1]})).reverse(),u(this),this):(this.__tlds__=t.slice(),this.__tlds_replaced__=!0,u(this),this)},f.prototype.normalize=function(t){t.schema||(t.url="http://"+t.url),"mailto:"!==t.schema||/^mailto:/i.test(t.url)||(t.url="mailto:"+t.url)},f.prototype.onCompile=function(){},t.exports=f},function(t,e,n){"use strict";t.exports=function(t){var e={};e.src_Any=n(5).source,e.src_Cc=n(6).source,e.src_Z=n(7).source,e.src_P=n(3).source,e.src_ZPCc=[e.src_Z,e.src_P,e.src_Cc].join("|"),e.src_ZCc=[e.src_Z,e.src_Cc].join("|");return e.src_pseudo_letter="(?:(?![><｜]|"+e.src_ZPCc+")"+e.src_Any+")",e.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",e.src_auth="(?:(?:(?!"+e.src_ZCc+"|[@/\\[\\]()]).)+@)?",e.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",e.src_host_terminator="(?=$|[><｜]|"+e.src_ZPCc+")(?!-|_|:\\d|\\.-|\\.(?!$|"+e.src_ZPCc+"))",e.src_path="(?:[/?#](?:(?!"+e.src_ZCc+"|[><｜]|[()[\\]{}.,\"'?!\\-]).|\\[(?:(?!"+e.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+e.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+e.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+e.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+e.src_ZCc+"|[']).)+\\'|\\'(?="+e.src_pseudo_letter+"|[-]).|\\.{2,4}[a-zA-Z0-9%/]|\\.(?!"+e.src_ZCc+"|[.]).|"+(t&&t["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+"\\,(?!"+e.src_ZCc+").|\\!(?!"+e.src_ZCc+"|[!]).|\\?(?!"+e.src_ZCc+"|[?]).)+|\\/)?",e.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',e.src_xn="xn--[a-z0-9\\-]{1,59}",e.src_domain_root="(?:"+e.src_xn+"|"+e.src_pseudo_letter+"{1,63})",e.src_domain="(?:"+e.src_xn+"|(?:"+e.src_pseudo_letter+")|(?:"+e.src_pseudo_letter+"(?:-|"+e.src_pseudo_letter+"){0,61}"+e.src_pseudo_letter+"))",e.src_host="(?:(?:(?:(?:"+e.src_domain+")\\.)*"+e.src_domain+"))",e.tpl_host_fuzzy="(?:"+e.src_ip4+"|(?:(?:(?:"+e.src_domain+")\\.)+(?:%TLDS%)))",e.tpl_host_no_ip_fuzzy="(?:(?:(?:"+e.src_domain+")\\.)+(?:%TLDS%))",e.src_host_strict=e.src_host+e.src_host_terminator,e.tpl_host_fuzzy_strict=e.tpl_host_fuzzy+e.src_host_terminator,e.src_host_port_strict=e.src_host+e.src_port+e.src_host_terminator,e.tpl_host_port_fuzzy_strict=e.tpl_host_fuzzy+e.src_port+e.src_host_terminator,e.tpl_host_port_no_ip_fuzzy_strict=e.tpl_host_no_ip_fuzzy+e.src_port+e.src_host_terminator,e.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+e.src_ZPCc+"|>|$))",e.tpl_email_fuzzy='(^|[><｜]|"|\\(|'+e.src_ZCc+")("+e.src_email_name+"@"+e.tpl_host_fuzzy_strict+")",e.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+e.src_ZPCc+"))((?![$+<=>^`|｜])"+e.tpl_host_port_fuzzy_strict+e.src_path+")",e.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+e.src_ZPCc+"))((?![$+<=>^`|｜])"+e.tpl_host_port_no_ip_fuzzy_strict+e.src_path+")",e}},function(t,e,n){"use strict";t.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}}},function(t,e,n){"use strict";t.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","text_collapse"]}}}},function(t,e,n){"use strict";t.exports={options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","text_collapse"]}}}},function(t,e,n){},function(t,e,n){"use strict";function r(t){this.content=t}n.r(e),r.prototype={constructor:r,find:function(t){for(var e=0;e<this.content.length;e+=2)if(this.content[e]===t)return e;return-1},get:function(t){var e=this.find(t);return-1==e?void 0:this.content[e+1]},update:function(t,e,n){var o=n&&n!=t?this.remove(n):this,i=o.find(t),s=o.content.slice();return-1==i?s.push(n||t,e):(s[i+1]=e,n&&(s[i]=n)),new r(s)},remove:function(t){var e=this.find(t);if(-1==e)return this;var n=this.content.slice();return n.splice(e,2),new r(n)},addToStart:function(t,e){return new r([t,e].concat(this.remove(t).content))},addToEnd:function(t,e){var n=this.remove(t).content.slice();return n.push(t,e),new r(n)},addBefore:function(t,e,n){var o=this.remove(e),i=o.content.slice(),s=o.find(t);return i.splice(-1==s?i.length:s,0,e,n),new r(i)},forEach:function(t){for(var e=0;e<this.content.length;e+=2)t(this.content[e],this.content[e+1])},prepend:function(t){return(t=r.from(t)).size?new r(t.content.concat(this.subtract(t).content)):this},append:function(t){return(t=r.from(t)).size?new r(this.subtract(t).content.concat(t.content)):this},subtract:function(t){var e=this;t=r.from(t);for(var n=0;n<t.content.length;n+=2)e=e.remove(t.content[n]);return e},get size(){return this.content.length>>1}},r.from=function(t){if(t instanceof r)return t;var e=[];if(t)for(var n in t)e.push(n,t[n]);return new r(e)};var o=r;var i=function(t,e){if(this.content=t,this.size=e||0,null==e)for(var n=0;n<t.length;n++)this.size+=t[n].nodeSize},s={firstChild:{configurable:!0},lastChild:{configurable:!0},childCount:{configurable:!0}};i.prototype.nodesBetween=function(t,e,n,r,o){void 0===r&&(r=0);for(var i=0,s=0;s<e;i++){var a=this.content[i],c=s+a.nodeSize;if(c>t&&!1!==n(a,r+s,o,i)&&a.content.size){var l=s+1;a.nodesBetween(Math.max(0,t-l),Math.min(a.content.size,e-l),n,r+l)}s=c}},i.prototype.descendants=function(t){this.nodesBetween(0,this.size,t)},i.prototype.textBetween=function(t,e,n,r){var o="",i=!0;return this.nodesBetween(t,e,(function(s,a){s.isText?(o+=s.text.slice(Math.max(t,a)-a,e-a),i=!n):s.isLeaf&&r?(o+=r,i=!n):!i&&s.isBlock&&(o+=n,i=!0)}),0),o},i.prototype.append=function(t){if(!t.size)return this;if(!this.size)return t;var e=this.lastChild,n=t.firstChild,r=this.content.slice(),o=0;for(e.isText&&e.sameMarkup(n)&&(r[r.length-1]=e.withText(e.text+n.text),o=1);o<t.content.length;o++)r.push(t.content[o]);return new i(r,this.size+t.size)},i.prototype.cut=function(t,e){if(null==e&&(e=this.size),0==t&&e==this.size)return this;var n=[],r=0;if(e>t)for(var o=0,s=0;s<e;o++){var a=this.content[o],c=s+a.nodeSize;c>t&&((s<t||c>e)&&(a=a.isText?a.cut(Math.max(0,t-s),Math.min(a.text.length,e-s)):a.cut(Math.max(0,t-s-1),Math.min(a.content.size,e-s-1))),n.push(a),r+=a.nodeSize),s=c}return new i(n,r)},i.prototype.cutByIndex=function(t,e){return t==e?i.empty:0==t&&e==this.content.length?this:new i(this.content.slice(t,e))},i.prototype.replaceChild=function(t,e){var n=this.content[t];if(n==e)return this;var r=this.content.slice(),o=this.size+e.nodeSize-n.nodeSize;return r[t]=e,new i(r,o)},i.prototype.addToStart=function(t){return new i([t].concat(this.content),this.size+t.nodeSize)},i.prototype.addToEnd=function(t){return new i(this.content.concat(t),this.size+t.nodeSize)},i.prototype.eq=function(t){if(this.content.length!=t.content.length)return!1;for(var e=0;e<this.content.length;e++)if(!this.content[e].eq(t.content[e]))return!1;return!0},s.firstChild.get=function(){return this.content.length?this.content[0]:null},s.lastChild.get=function(){return this.content.length?this.content[this.content.length-1]:null},s.childCount.get=function(){return this.content.length},i.prototype.child=function(t){var e=this.content[t];if(!e)throw new RangeError("Index "+t+" out of range for "+this);return e},i.prototype.maybeChild=function(t){return this.content[t]},i.prototype.forEach=function(t){for(var e=0,n=0;e<this.content.length;e++){var r=this.content[e];t(r,n,e),n+=r.nodeSize}},i.prototype.findDiffStart=function(t,e){return void 0===e&&(e=0),function t(e,n,r){for(var o=0;;o++){if(o==e.childCount||o==n.childCount)return e.childCount==n.childCount?null:r;var i=e.child(o),s=n.child(o);if(i!=s){if(!i.sameMarkup(s))return r;if(i.isText&&i.text!=s.text){for(var a=0;i.text[a]==s.text[a];a++)r++;return r}if(i.content.size||s.content.size){var c=t(i.content,s.content,r+1);if(null!=c)return c}r+=i.nodeSize}else r+=i.nodeSize}}(this,t,e)},i.prototype.findDiffEnd=function(t,e,n){return void 0===e&&(e=this.size),void 0===n&&(n=t.size),function t(e,n,r,o){for(var i=e.childCount,s=n.childCount;;){if(0==i||0==s)return i==s?null:{a:r,b:o};var a=e.child(--i),c=n.child(--s),l=a.nodeSize;if(a!=c){if(!a.sameMarkup(c))return{a:r,b:o};if(a.isText&&a.text!=c.text){for(var u=0,p=Math.min(a.text.length,c.text.length);u<p&&a.text[a.text.length-u-1]==c.text[c.text.length-u-1];)u++,r--,o--;return{a:r,b:o}}if(a.content.size||c.content.size){var h=t(a.content,c.content,r-1,o-1);if(h)return h}r-=l,o-=l}else r-=l,o-=l}}(this,t,e,n)},i.prototype.findIndex=function(t,e){if(void 0===e&&(e=-1),0==t)return c(0,t);if(t==this.size)return c(this.content.length,t);if(t>this.size||t<0)throw new RangeError("Position "+t+" outside of fragment ("+this+")");for(var n=0,r=0;;n++){var o=r+this.child(n).nodeSize;if(o>=t)return o==t||e>0?c(n+1,o):c(n,r);r=o}},i.prototype.toString=function(){return"<"+this.toStringInner()+">"},i.prototype.toStringInner=function(){return this.content.join(", ")},i.prototype.toJSON=function(){return this.content.length?this.content.map((function(t){return t.toJSON()})):null},i.fromJSON=function(t,e){if(!e)return i.empty;if(!Array.isArray(e))throw new RangeError("Invalid input for Fragment.fromJSON");return new i(e.map(t.nodeFromJSON))},i.fromArray=function(t){if(!t.length)return i.empty;for(var e,n=0,r=0;r<t.length;r++){var o=t[r];n+=o.nodeSize,r&&o.isText&&t[r-1].sameMarkup(o)?(e||(e=t.slice(0,r)),e[e.length-1]=o.withText(e[e.length-1].text+o.text)):e&&e.push(o)}return new i(e||t,n)},i.from=function(t){if(!t)return i.empty;if(t instanceof i)return t;if(Array.isArray(t))return this.fromArray(t);if(t.attrs)return new i([t],t.nodeSize);throw new RangeError("Can not convert "+t+" to a Fragment"+(t.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))},Object.defineProperties(i.prototype,s);var a={index:0,offset:0};function c(t,e){return a.index=t,a.offset=e,a}function l(t,e){if(t===e)return!0;if(!t||"object"!=typeof t||!e||"object"!=typeof e)return!1;var n=Array.isArray(t);if(Array.isArray(e)!=n)return!1;if(n){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(!l(t[r],e[r]))return!1}else{for(var o in t)if(!(o in e)||!l(t[o],e[o]))return!1;for(var i in e)if(!(i in t))return!1}return!0}i.empty=new i([],0);var u=function(t,e){this.type=t,this.attrs=e};function p(t){var e=Error.call(this,t);return e.__proto__=p.prototype,e}u.prototype.addToSet=function(t){for(var e,n=!1,r=0;r<t.length;r++){var o=t[r];if(this.eq(o))return t;if(this.type.excludes(o.type))e||(e=t.slice(0,r));else{if(o.type.excludes(this.type))return t;!n&&o.type.rank>this.type.rank&&(e||(e=t.slice(0,r)),e.push(this),n=!0),e&&e.push(o)}}return e||(e=t.slice()),n||e.push(this),e},u.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return t.slice(0,e).concat(t.slice(e+1));return t},u.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return!0;return!1},u.prototype.eq=function(t){return this==t||this.type==t.type&&l(this.attrs,t.attrs)},u.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return t},u.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Mark.fromJSON");var n=t.marks[e.type];if(!n)throw new RangeError("There is no mark type "+e.type+" in this schema");return n.create(e.attrs)},u.sameSet=function(t,e){if(t==e)return!0;if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].eq(e[n]))return!1;return!0},u.setFrom=function(t){if(!t||0==t.length)return u.none;if(t instanceof u)return[t];var e=t.slice();return e.sort((function(t,e){return t.type.rank-e.type.rank})),e},u.none=[],p.prototype=Object.create(Error.prototype),p.prototype.constructor=p,p.prototype.name="ReplaceError";var h=function(t,e,n){this.content=t,this.openStart=e,this.openEnd=n},f={size:{configurable:!0}};function d(t,e,n){if(n.openStart>t.depth)throw new p("Inserted content deeper than insertion position");if(t.depth-n.openStart!=e.depth-n.openEnd)throw new p("Inconsistent open depths");return function t(e,n,r,o){var s=e.index(o),a=e.node(o);if(s==n.index(o)&&o<e.depth-r.openStart){var c=t(e,n,r,o+1);return a.copy(a.content.replaceChild(s,c))}if(r.content.size){if(r.openStart||r.openEnd||e.depth!=o||n.depth!=o){var l=function(t,e){for(var n=e.depth-t.openStart,r=e.node(n).copy(t.content),o=n-1;o>=0;o--)r=e.node(o).copy(i.from(r));return{start:r.resolveNoCache(t.openStart+n),end:r.resolveNoCache(r.content.size-t.openEnd-n)}}(r,e),u=l.start,p=l.end;return k(a,function t(e,n,r,o,s){var a=e.depth>s&&g(e,n,s+1),c=o.depth>s&&g(r,o,s+1),l=[];y(null,e,s,l),a&&c&&n.index(s)==r.index(s)?(m(a,c),v(k(a,t(e,n,r,o,s+1)),l)):(a&&v(k(a,_(e,n,s+1)),l),y(n,r,s,l),c&&v(k(c,_(r,o,s+1)),l));return y(o,null,s,l),new i(l)}(e,u,p,n,o))}var h=e.parent,f=h.content;return k(h,f.cut(0,e.parentOffset).append(r.content).append(f.cut(n.parentOffset)))}return k(a,_(e,n,o))}(t,e,n,0)}function m(t,e){if(!e.type.compatibleContent(t.type))throw new p("Cannot join "+e.type.name+" onto "+t.type.name)}function g(t,e,n){var r=t.node(n);return m(r,e.node(n)),r}function v(t,e){var n=e.length-1;n>=0&&t.isText&&t.sameMarkup(e[n])?e[n]=t.withText(e[n].text+t.text):e.push(t)}function y(t,e,n,r){var o=(e||t).node(n),i=0,s=e?e.index(n):o.childCount;t&&(i=t.index(n),t.depth>n?i++:t.textOffset&&(v(t.nodeAfter,r),i++));for(var a=i;a<s;a++)v(o.child(a),r);e&&e.depth==n&&e.textOffset&&v(e.nodeBefore,r)}function k(t,e){if(!t.type.validContent(e))throw new p("Invalid content for node "+t.type.name);return t.copy(e)}function _(t,e,n){var r=[];(y(null,t,n,r),t.depth>n)&&v(k(g(t,e,n+1),_(t,e,n+1)),r);return y(e,null,n,r),new i(r)}f.size.get=function(){return this.content.size-this.openStart-this.openEnd},h.prototype.insertAt=function(t,e){var n=function t(e,n,r,o){var i=e.findIndex(n),s=i.index,a=i.offset,c=e.maybeChild(s);if(a==n||c.isText)return o&&!o.canReplace(s,s,r)?null:e.cut(0,n).append(r).append(e.cut(n));var l=t(c.content,n-a-1,r);return l&&e.replaceChild(s,c.copy(l))}(this.content,t+this.openStart,e,null);return n&&new h(n,this.openStart,this.openEnd)},h.prototype.removeBetween=function(t,e){return new h(function t(e,n,r){var o=e.findIndex(n),i=o.index,s=o.offset,a=e.maybeChild(i),c=e.findIndex(r),l=c.index,u=c.offset;if(s==n||a.isText){if(u!=r&&!e.child(l).isText)throw new RangeError("Removing non-flat range");return e.cut(0,n).append(e.cut(r))}if(i!=l)throw new RangeError("Removing non-flat range");return e.replaceChild(i,a.copy(t(a.content,n-s-1,r-s-1)))}(this.content,t+this.openStart,e+this.openStart),this.openStart,this.openEnd)},h.prototype.eq=function(t){return this.content.eq(t.content)&&this.openStart==t.openStart&&this.openEnd==t.openEnd},h.prototype.toString=function(){return this.content+"("+this.openStart+","+this.openEnd+")"},h.prototype.toJSON=function(){if(!this.content.size)return null;var t={content:this.content.toJSON()};return this.openStart>0&&(t.openStart=this.openStart),this.openEnd>0&&(t.openEnd=this.openEnd),t},h.fromJSON=function(t,e){if(!e)return h.empty;var n=e.openStart||0,r=e.openEnd||0;if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid input for Slice.fromJSON");return new h(i.fromJSON(t,e.content),e.openStart||0,e.openEnd||0)},h.maxOpen=function(t,e){void 0===e&&(e=!0);for(var n=0,r=0,o=t.firstChild;o&&!o.isLeaf&&(e||!o.type.spec.isolating);o=o.firstChild)n++;for(var i=t.lastChild;i&&!i.isLeaf&&(e||!i.type.spec.isolating);i=i.lastChild)r++;return new h(t,n,r)},Object.defineProperties(h.prototype,f),h.empty=new h(i.empty,0,0);var b=function(t,e,n){this.pos=t,this.path=e,this.depth=e.length/3-1,this.parentOffset=n},x={parent:{configurable:!0},doc:{configurable:!0},textOffset:{configurable:!0},nodeAfter:{configurable:!0},nodeBefore:{configurable:!0}};b.prototype.resolveDepth=function(t){return null==t?this.depth:t<0?this.depth+t:t},x.parent.get=function(){return this.node(this.depth)},x.doc.get=function(){return this.node(0)},b.prototype.node=function(t){return this.path[3*this.resolveDepth(t)]},b.prototype.index=function(t){return this.path[3*this.resolveDepth(t)+1]},b.prototype.indexAfter=function(t){return t=this.resolveDepth(t),this.index(t)+(t!=this.depth||this.textOffset?1:0)},b.prototype.start=function(t){return 0==(t=this.resolveDepth(t))?0:this.path[3*t-1]+1},b.prototype.end=function(t){return t=this.resolveDepth(t),this.start(t)+this.node(t).content.size},b.prototype.before=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position before the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]},b.prototype.after=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position after the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]+this.path[3*t].nodeSize},x.textOffset.get=function(){return this.pos-this.path[this.path.length-1]},x.nodeAfter.get=function(){var t=this.parent,e=this.index(this.depth);if(e==t.childCount)return null;var n=this.pos-this.path[this.path.length-1],r=t.child(e);return n?t.child(e).cut(n):r},x.nodeBefore.get=function(){var t=this.index(this.depth),e=this.pos-this.path[this.path.length-1];return e?this.parent.child(t).cut(0,e):0==t?null:this.parent.child(t-1)},b.prototype.marks=function(){var t=this.parent,e=this.index();if(0==t.content.size)return u.none;if(this.textOffset)return t.child(e).marks;var n=t.maybeChild(e-1),r=t.maybeChild(e);if(!n){var o=n;n=r,r=o}for(var i=n.marks,s=0;s<i.length;s++)!1!==i[s].type.spec.inclusive||r&&i[s].isInSet(r.marks)||(i=i[s--].removeFromSet(i));return i},b.prototype.marksAcross=function(t){var e=this.parent.maybeChild(this.index());if(!e||!e.isInline)return null;for(var n=e.marks,r=t.parent.maybeChild(t.index()),o=0;o<n.length;o++)!1!==n[o].type.spec.inclusive||r&&n[o].isInSet(r.marks)||(n=n[o--].removeFromSet(n));return n},b.prototype.sharedDepth=function(t){for(var e=this.depth;e>0;e--)if(this.start(e)<=t&&this.end(e)>=t)return e;return 0},b.prototype.blockRange=function(t,e){if(void 0===t&&(t=this),t.pos<this.pos)return t.blockRange(this);for(var n=this.depth-(this.parent.inlineContent||this.pos==t.pos?1:0);n>=0;n--)if(t.pos<=this.end(n)&&(!e||e(this.node(n))))return new A(this,t,n)},b.prototype.sameParent=function(t){return this.pos-this.parentOffset==t.pos-t.parentOffset},b.prototype.max=function(t){return t.pos>this.pos?t:this},b.prototype.min=function(t){return t.pos<this.pos?t:this},b.prototype.toString=function(){for(var t="",e=1;e<=this.depth;e++)t+=(t?"/":"")+this.node(e).type.name+"_"+this.index(e-1);return t+":"+this.parentOffset},b.resolve=function(t,e){if(!(e>=0&&e<=t.content.size))throw new RangeError("Position "+e+" out of range");for(var n=[],r=0,o=e,i=t;;){var s=i.content.findIndex(o),a=s.index,c=s.offset,l=o-c;if(n.push(i,a,r+c),!l)break;if((i=i.child(a)).isText)break;o=l-1,r+=c+1}return new b(e,n,o)},b.resolveCached=function(t,e){for(var n=0;n<w.length;n++){var r=w[n];if(r.pos==e&&r.doc==t)return r}var o=w[C]=b.resolve(t,e);return C=(C+1)%S,o},Object.defineProperties(b.prototype,x);var w=[],C=0,S=12,A=function(t,e,n){this.$from=t,this.$to=e,this.depth=n},M={start:{configurable:!0},end:{configurable:!0},parent:{configurable:!0},startIndex:{configurable:!0},endIndex:{configurable:!0}};M.start.get=function(){return this.$from.before(this.depth+1)},M.end.get=function(){return this.$to.after(this.depth+1)},M.parent.get=function(){return this.$from.node(this.depth)},M.startIndex.get=function(){return this.$from.index(this.depth)},M.endIndex.get=function(){return this.$to.indexAfter(this.depth)},Object.defineProperties(A.prototype,M);var D=Object.create(null),E=function(t,e,n,r){this.type=t,this.attrs=e,this.content=n||i.empty,this.marks=r||u.none},O={nodeSize:{configurable:!0},childCount:{configurable:!0},textContent:{configurable:!0},firstChild:{configurable:!0},lastChild:{configurable:!0},isBlock:{configurable:!0},isTextblock:{configurable:!0},inlineContent:{configurable:!0},isInline:{configurable:!0},isText:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};O.nodeSize.get=function(){return this.isLeaf?1:2+this.content.size},O.childCount.get=function(){return this.content.childCount},E.prototype.child=function(t){return this.content.child(t)},E.prototype.maybeChild=function(t){return this.content.maybeChild(t)},E.prototype.forEach=function(t){this.content.forEach(t)},E.prototype.nodesBetween=function(t,e,n,r){void 0===r&&(r=0),this.content.nodesBetween(t,e,n,r,this)},E.prototype.descendants=function(t){this.nodesBetween(0,this.content.size,t)},O.textContent.get=function(){return this.textBetween(0,this.content.size,"")},E.prototype.textBetween=function(t,e,n,r){return this.content.textBetween(t,e,n,r)},O.firstChild.get=function(){return this.content.firstChild},O.lastChild.get=function(){return this.content.lastChild},E.prototype.eq=function(t){return this==t||this.sameMarkup(t)&&this.content.eq(t.content)},E.prototype.sameMarkup=function(t){return this.hasMarkup(t.type,t.attrs,t.marks)},E.prototype.hasMarkup=function(t,e,n){return this.type==t&&l(this.attrs,e||t.defaultAttrs||D)&&u.sameSet(this.marks,n||u.none)},E.prototype.copy=function(t){return void 0===t&&(t=null),t==this.content?this:new this.constructor(this.type,this.attrs,t,this.marks)},E.prototype.mark=function(t){return t==this.marks?this:new this.constructor(this.type,this.attrs,this.content,t)},E.prototype.cut=function(t,e){return 0==t&&e==this.content.size?this:this.copy(this.content.cut(t,e))},E.prototype.slice=function(t,e,n){if(void 0===e&&(e=this.content.size),void 0===n&&(n=!1),t==e)return h.empty;var r=this.resolve(t),o=this.resolve(e),i=n?0:r.sharedDepth(e),s=r.start(i),a=r.node(i).content.cut(r.pos-s,o.pos-s);return new h(a,r.depth-i,o.depth-i)},E.prototype.replace=function(t,e,n){return d(this.resolve(t),this.resolve(e),n)},E.prototype.nodeAt=function(t){for(var e=this;;){var n=e.content.findIndex(t),r=n.index,o=n.offset;if(!(e=e.maybeChild(r)))return null;if(o==t||e.isText)return e;t-=o+1}},E.prototype.childAfter=function(t){var e=this.content.findIndex(t),n=e.index,r=e.offset;return{node:this.content.maybeChild(n),index:n,offset:r}},E.prototype.childBefore=function(t){if(0==t)return{node:null,index:0,offset:0};var e=this.content.findIndex(t),n=e.index,r=e.offset;if(r<t)return{node:this.content.child(n),index:n,offset:r};var o=this.content.child(n-1);return{node:o,index:n-1,offset:r-o.nodeSize}},E.prototype.resolve=function(t){return b.resolveCached(this,t)},E.prototype.resolveNoCache=function(t){return b.resolve(this,t)},E.prototype.rangeHasMark=function(t,e,n){var r=!1;return e>t&&this.nodesBetween(t,e,(function(t){return n.isInSet(t.marks)&&(r=!0),!r})),r},O.isBlock.get=function(){return this.type.isBlock},O.isTextblock.get=function(){return this.type.isTextblock},O.inlineContent.get=function(){return this.type.inlineContent},O.isInline.get=function(){return this.type.isInline},O.isText.get=function(){return this.type.isText},O.isLeaf.get=function(){return this.type.isLeaf},O.isAtom.get=function(){return this.type.isAtom},E.prototype.toString=function(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);var t=this.type.name;return this.content.size&&(t+="("+this.content.toStringInner()+")"),z(this.marks,t)},E.prototype.contentMatchAt=function(t){var e=this.type.contentMatch.matchFragment(this.content,0,t);if(!e)throw new Error("Called contentMatchAt on a node with invalid content");return e},E.prototype.canReplace=function(t,e,n,r,o){void 0===n&&(n=i.empty),void 0===r&&(r=0),void 0===o&&(o=n.childCount);var s=this.contentMatchAt(t).matchFragment(n,r,o),a=s&&s.matchFragment(this.content,e);if(!a||!a.validEnd)return!1;for(var c=r;c<o;c++)if(!this.type.allowsMarks(n.child(c).marks))return!1;return!0},E.prototype.canReplaceWith=function(t,e,n,r){if(r&&!this.type.allowsMarks(r))return!1;var o=this.contentMatchAt(t).matchType(n),i=o&&o.matchFragment(this.content,e);return!!i&&i.validEnd},E.prototype.canAppend=function(t){return t.content.size?this.canReplace(this.childCount,this.childCount,t.content):this.type.compatibleContent(t.type)},E.prototype.check=function(){if(!this.type.validContent(this.content))throw new RangeError("Invalid content for node "+this.type.name+": "+this.content.toString().slice(0,50));this.content.forEach((function(t){return t.check()}))},E.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return this.content.size&&(t.content=this.content.toJSON()),this.marks.length&&(t.marks=this.marks.map((function(t){return t.toJSON()}))),t},E.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Node.fromJSON");var n=null;if(e.marks){if(!Array.isArray(e.marks))throw new RangeError("Invalid mark data for Node.fromJSON");n=e.marks.map(t.markFromJSON)}if("text"==e.type){if("string"!=typeof e.text)throw new RangeError("Invalid text node in JSON");return t.text(e.text,n)}var r=i.fromJSON(t,e.content);return t.nodeType(e.type).create(e.attrs,r,n)},Object.defineProperties(E.prototype,O);var T=function(t){function e(e,n,r,o){if(t.call(this,e,n,null,o),!r)throw new RangeError("Empty text nodes are not allowed");this.text=r}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={textContent:{configurable:!0},nodeSize:{configurable:!0}};return e.prototype.toString=function(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):z(this.marks,JSON.stringify(this.text))},n.textContent.get=function(){return this.text},e.prototype.textBetween=function(t,e){return this.text.slice(t,e)},n.nodeSize.get=function(){return this.text.length},e.prototype.mark=function(t){return t==this.marks?this:new e(this.type,this.attrs,this.text,t)},e.prototype.withText=function(t){return t==this.text?this:new e(this.type,this.attrs,t,this.marks)},e.prototype.cut=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.text.length),0==t&&e==this.text.length?this:this.withText(this.text.slice(t,e))},e.prototype.eq=function(t){return this.sameMarkup(t)&&this.text==t.text},e.prototype.toJSON=function(){var e=t.prototype.toJSON.call(this);return e.text=this.text,e},Object.defineProperties(e.prototype,n),e}(E);function z(t,e){for(var n=t.length-1;n>=0;n--)e=t[n].type.name+"("+e+")";return e}var I=function(t){this.validEnd=t,this.next=[],this.wrapCache=[]},N={inlineContent:{configurable:!0},defaultType:{configurable:!0},edgeCount:{configurable:!0}};I.parse=function(t,e){var n=new R(t,e);if(null==n.next)return I.empty;var r=q(n);n.next&&n.err("Unexpected trailing text");var o=function(t){var e=Object.create(null);return function n(r){var o=[];r.forEach((function(e){t[e].forEach((function(e){var n=e.term,r=e.to;if(n){var i=o.indexOf(n),s=i>-1&&o[i+1];V(t,r).forEach((function(t){s||o.push(n,s=[]),-1==s.indexOf(t)&&s.push(t)}))}}))}));for(var i=e[r.join(",")]=new I(r.indexOf(t.length-1)>-1),s=0;s<o.length;s+=2){var a=o[s+1].sort(j);i.next.push(o[s],e[a.join(",")]||n(a))}return i}(V(t,0))}(function(t){var e=[[]];return o(function t(e,i){if("choice"==e.type)return e.exprs.reduce((function(e,n){return e.concat(t(n,i))}),[]);if("seq"==e.type)for(var s=0;;s++){var a=t(e.exprs[s],i);if(s==e.exprs.length-1)return a;o(a,i=n())}else{if("star"==e.type){var c=n();return r(i,c),o(t(e.expr,c),c),[r(c)]}if("plus"==e.type){var l=n();return o(t(e.expr,i),l),o(t(e.expr,l),l),[r(l)]}if("opt"==e.type)return[r(i)].concat(t(e.expr,i));if("range"==e.type){for(var u=i,p=0;p<e.min;p++){var h=n();o(t(e.expr,u),h),u=h}if(-1==e.max)o(t(e.expr,u),u);else for(var f=e.min;f<e.max;f++){var d=n();r(u,d),o(t(e.expr,u),d),u=d}return[r(u)]}if("name"==e.type)return[r(i,null,e.value)]}}(t,0),n()),e;function n(){return e.push([])-1}function r(t,n,r){var o={term:r,to:n};return e[t].push(o),o}function o(t,e){t.forEach((function(t){return t.to=e}))}}(r));return function(t,e){for(var n=0,r=[t];n<r.length;n++){for(var o=r[n],i=!o.validEnd,s=[],a=0;a<o.next.length;a+=2){var c=o.next[a],l=o.next[a+1];s.push(c.name),!i||c.isText||c.hasRequiredAttrs()||(i=!1),-1==r.indexOf(l)&&r.push(l)}i&&e.err("Only non-generatable nodes ("+s.join(", ")+") in a required position")}}(o,n),o},I.prototype.matchType=function(t){for(var e=0;e<this.next.length;e+=2)if(this.next[e]==t)return this.next[e+1];return null},I.prototype.matchFragment=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.childCount);for(var r=this,o=e;r&&o<n;o++)r=r.matchType(t.child(o).type);return r},N.inlineContent.get=function(){var t=this.next[0];return!!t&&t.isInline},N.defaultType.get=function(){for(var t=0;t<this.next.length;t+=2){var e=this.next[t];if(!e.isText&&!e.hasRequiredAttrs())return e}},I.prototype.compatible=function(t){for(var e=0;e<this.next.length;e+=2)for(var n=0;n<t.next.length;n+=2)if(this.next[e]==t.next[n])return!0;return!1},I.prototype.fillBefore=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=0);var r=[this];return function o(s,a){var c=s.matchFragment(t,n);if(c&&(!e||c.validEnd))return i.from(a.map((function(t){return t.createAndFill()})));for(var l=0;l<s.next.length;l+=2){var u=s.next[l],p=s.next[l+1];if(!u.isText&&!u.hasRequiredAttrs()&&-1==r.indexOf(p)){r.push(p);var h=o(p,a.concat(u));if(h)return h}}}(this,[])},I.prototype.findWrapping=function(t){for(var e=0;e<this.wrapCache.length;e+=2)if(this.wrapCache[e]==t)return this.wrapCache[e+1];var n=this.computeWrapping(t);return this.wrapCache.push(t,n),n},I.prototype.computeWrapping=function(t){for(var e=Object.create(null),n=[{match:this,type:null,via:null}];n.length;){var r=n.shift(),o=r.match;if(o.matchType(t)){for(var i=[],s=r;s.type;s=s.via)i.push(s.type);return i.reverse()}for(var a=0;a<o.next.length;a+=2){var c=o.next[a];c.isLeaf||c.hasRequiredAttrs()||c.name in e||r.type&&!o.next[a+1].validEnd||(n.push({match:c.contentMatch,type:c,via:r}),e[c.name]=!0)}}},N.edgeCount.get=function(){return this.next.length>>1},I.prototype.edge=function(t){var e=t<<1;if(e>=this.next.length)throw new RangeError("There's no "+t+"th edge in this content match");return{type:this.next[e],next:this.next[e+1]}},I.prototype.toString=function(){var t=[];return function e(n){t.push(n);for(var r=1;r<n.next.length;r+=2)-1==t.indexOf(n.next[r])&&e(n.next[r])}(this),t.map((function(e,n){for(var r=n+(e.validEnd?"*":" ")+" ",o=0;o<e.next.length;o+=2)r+=(o?", ":"")+e.next[o].name+"->"+t.indexOf(e.next[o+1]);return r})).join("\n")},Object.defineProperties(I.prototype,N),I.empty=new I(!0);var R=function(t,e){this.string=t,this.nodeTypes=e,this.inline=null,this.pos=0,this.tokens=t.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.unshift()},L={next:{configurable:!0}};function q(t){var e=[];do{e.push(F(t))}while(t.eat("|"));return 1==e.length?e[0]:{type:"choice",exprs:e}}function F(t){var e=[];do{e.push(P(t))}while(t.next&&")"!=t.next&&"|"!=t.next);return 1==e.length?e[0]:{type:"seq",exprs:e}}function P(t){for(var e=function(t){if(t.eat("(")){var e=q(t);return t.eat(")")||t.err("Missing closing paren"),e}if(!/\W/.test(t.next)){var n=function(t,e){var n=t.nodeTypes,r=n[e];if(r)return[r];var o=[];for(var i in n){var s=n[i];s.groups.indexOf(e)>-1&&o.push(s)}0==o.length&&t.err("No node type or group '"+e+"' found");return o}(t,t.next).map((function(e){return null==t.inline?t.inline=e.isInline:t.inline!=e.isInline&&t.err("Mixing inline and block content"),{type:"name",value:e}}));return t.pos++,1==n.length?n[0]:{type:"choice",exprs:n}}t.err("Unexpected token '"+t.next+"'")}(t);;)if(t.eat("+"))e={type:"plus",expr:e};else if(t.eat("*"))e={type:"star",expr:e};else if(t.eat("?"))e={type:"opt",expr:e};else{if(!t.eat("{"))break;e=$(t,e)}return e}function B(t){/\D/.test(t.next)&&t.err("Expected number, got '"+t.next+"'");var e=Number(t.next);return t.pos++,e}function $(t,e){var n=B(t),r=n;return t.eat(",")&&(r="}"!=t.next?B(t):-1),t.eat("}")||t.err("Unclosed braced range"),{type:"range",min:n,max:r,expr:e}}function j(t,e){return e-t}function V(t,e){var n=[];return function e(r){var o=t[r];if(1==o.length&&!o[0].term)return e(o[0].to);n.push(r);for(var i=0;i<o.length;i++){var s=o[i],a=s.term,c=s.to;a||-1!=n.indexOf(c)||e(c)}}(e),n.sort(j)}function U(t){var e=Object.create(null);for(var n in t){var r=t[n];if(!r.hasDefault)return null;e[n]=r.default}return e}function J(t,e){var n=Object.create(null);for(var r in t){var o=e&&e[r];if(void 0===o){var i=t[r];if(!i.hasDefault)throw new RangeError("No value supplied for attribute "+r);o=i.default}n[r]=o}return n}function Z(t){var e=Object.create(null);if(t)for(var n in t)e[n]=new G(t[n]);return e}L.next.get=function(){return this.tokens[this.pos]},R.prototype.eat=function(t){return this.next==t&&(this.pos++||!0)},R.prototype.err=function(t){throw new SyntaxError(t+" (in content expression '"+this.string+"')")},Object.defineProperties(R.prototype,L);var W=function(t,e,n){this.name=t,this.schema=e,this.spec=n,this.groups=n.group?n.group.split(" "):[],this.attrs=Z(n.attrs),this.defaultAttrs=U(this.attrs),this.contentMatch=null,this.markSet=null,this.inlineContent=null,this.isBlock=!(n.inline||"text"==t),this.isText="text"==t},H={isInline:{configurable:!0},isTextblock:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};H.isInline.get=function(){return!this.isBlock},H.isTextblock.get=function(){return this.isBlock&&this.inlineContent},H.isLeaf.get=function(){return this.contentMatch==I.empty},H.isAtom.get=function(){return this.isLeaf||this.spec.atom},W.prototype.hasRequiredAttrs=function(){for(var t in this.attrs)if(this.attrs[t].isRequired)return!0;return!1},W.prototype.compatibleContent=function(t){return this==t||this.contentMatch.compatible(t.contentMatch)},W.prototype.computeAttrs=function(t){return!t&&this.defaultAttrs?this.defaultAttrs:J(this.attrs,t)},W.prototype.create=function(t,e,n){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new E(this,this.computeAttrs(t),i.from(e),u.setFrom(n))},W.prototype.createChecked=function(t,e,n){if(e=i.from(e),!this.validContent(e))throw new RangeError("Invalid content for node "+this.name);return new E(this,this.computeAttrs(t),e,u.setFrom(n))},W.prototype.createAndFill=function(t,e,n){if(t=this.computeAttrs(t),(e=i.from(e)).size){var r=this.contentMatch.fillBefore(e);if(!r)return null;e=r.append(e)}var o=this.contentMatch.matchFragment(e).fillBefore(i.empty,!0);return o?new E(this,t,e.append(o),u.setFrom(n)):null},W.prototype.validContent=function(t){var e=this.contentMatch.matchFragment(t);if(!e||!e.validEnd)return!1;for(var n=0;n<t.childCount;n++)if(!this.allowsMarks(t.child(n).marks))return!1;return!0},W.prototype.allowsMarkType=function(t){return null==this.markSet||this.markSet.indexOf(t)>-1},W.prototype.allowsMarks=function(t){if(null==this.markSet)return!0;for(var e=0;e<t.length;e++)if(!this.allowsMarkType(t[e].type))return!1;return!0},W.prototype.allowedMarks=function(t){if(null==this.markSet)return t;for(var e,n=0;n<t.length;n++)this.allowsMarkType(t[n].type)?e&&e.push(t[n]):e||(e=t.slice(0,n));return e?e.length?e:u.empty:t},W.compile=function(t,e){var n=Object.create(null);t.forEach((function(t,r){return n[t]=new W(t,e,r)}));var r=e.spec.topNode||"doc";if(!n[r])throw new RangeError("Schema is missing its top node type ('"+r+"')");if(!n.text)throw new RangeError("Every schema needs a 'text' type");for(var o in n.text.attrs)throw new RangeError("The text node type should not have attributes");return n},Object.defineProperties(W.prototype,H);var G=function(t){this.hasDefault=Object.prototype.hasOwnProperty.call(t,"default"),this.default=t.default},K={isRequired:{configurable:!0}};K.isRequired.get=function(){return!this.hasDefault},Object.defineProperties(G.prototype,K);var Y=function(t,e,n,r){this.name=t,this.schema=n,this.spec=r,this.attrs=Z(r.attrs),this.rank=e,this.excluded=null;var o=U(this.attrs);this.instance=o&&new u(this,o)};Y.prototype.create=function(t){return!t&&this.instance?this.instance:new u(this,J(this.attrs,t))},Y.compile=function(t,e){var n=Object.create(null),r=0;return t.forEach((function(t,o){return n[t]=new Y(t,r++,e,o)})),n},Y.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t.slice(0,e).concat(t.slice(e+1));return t},Y.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t[e]},Y.prototype.excludes=function(t){return this.excluded.indexOf(t)>-1};var Q=function(t){for(var e in this.spec={},t)this.spec[e]=t[e];this.spec.nodes=o.from(t.nodes),this.spec.marks=o.from(t.marks),this.nodes=W.compile(this.spec.nodes,this),this.marks=Y.compile(this.spec.marks,this);var n=Object.create(null);for(var r in this.nodes){if(r in this.marks)throw new RangeError(r+" can not be both a node and a mark");var i=this.nodes[r],s=i.spec.content||"",a=i.spec.marks;i.contentMatch=n[s]||(n[s]=I.parse(s,this.nodes)),i.inlineContent=i.contentMatch.inlineContent,i.markSet="_"==a?null:a?X(this,a.split(" ")):""!=a&&i.inlineContent?null:[]}for(var c in this.marks){var l=this.marks[c],u=l.spec.excludes;l.excluded=null==u?[l]:""==u?[]:X(this,u.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached=Object.create(null),this.cached.wrappings=Object.create(null)};function X(t,e){for(var n=[],r=0;r<e.length;r++){var o=e[r],i=t.marks[o],s=i;if(i)n.push(i);else for(var a in t.marks){var c=t.marks[a];("_"==o||c.spec.group&&c.spec.group.split(" ").indexOf(o)>-1)&&n.push(s=c)}if(!s)throw new SyntaxError("Unknown mark type: '"+e[r]+"'")}return n}Q.prototype.node=function(t,e,n,r){if("string"==typeof t)t=this.nodeType(t);else{if(!(t instanceof W))throw new RangeError("Invalid node type: "+t);if(t.schema!=this)throw new RangeError("Node type from different schema used ("+t.name+")")}return t.createChecked(e,n,r)},Q.prototype.text=function(t,e){var n=this.nodes.text;return new T(n,n.defaultAttrs,t,u.setFrom(e))},Q.prototype.mark=function(t,e){return"string"==typeof t&&(t=this.marks[t]),t.create(e)},Q.prototype.nodeFromJSON=function(t){return E.fromJSON(this,t)},Q.prototype.markFromJSON=function(t){return u.fromJSON(this,t)},Q.prototype.nodeType=function(t){var e=this.nodes[t];if(!e)throw new RangeError("Unknown node type: "+t);return e};var tt=function(t,e){var n=this;this.schema=t,this.rules=e,this.tags=[],this.styles=[],e.forEach((function(t){t.tag?n.tags.push(t):t.style&&n.styles.push(t)}))};tt.prototype.parse=function(t,e){void 0===e&&(e={});var n=new st(this,e,!1);return n.addAll(t,null,e.from,e.to),n.finish()},tt.prototype.parseSlice=function(t,e){void 0===e&&(e={});var n=new st(this,e,!0);return n.addAll(t,null,e.from,e.to),h.maxOpen(n.finish())},tt.prototype.matchTag=function(t,e){for(var n=0;n<this.tags.length;n++){var r=this.tags[n];if(ct(t,r.tag)&&(void 0===r.namespace||t.namespaceURI==r.namespace)&&(!r.context||e.matchesContext(r.context))){if(r.getAttrs){var o=r.getAttrs(t);if(!1===o)continue;r.attrs=o}return r}}},tt.prototype.matchStyle=function(t,e,n){for(var r=0;r<this.styles.length;r++){var o=this.styles[r];if(!(0!=o.style.indexOf(t)||o.context&&!n.matchesContext(o.context)||o.style.length>t.length&&(61!=o.style.charCodeAt(t.length)||o.style.slice(t.length+1)!=e))){if(o.getAttrs){var i=o.getAttrs(e);if(!1===i)continue;o.attrs=i}return o}}},tt.schemaRules=function(t){var e=[];function n(t){for(var n=null==t.priority?50:t.priority,r=0;r<e.length;r++){var o=e[r];if((null==o.priority?50:o.priority)<n)break}e.splice(r,0,t)}var r=function(e){var r=t.marks[e].spec.parseDOM;r&&r.forEach((function(t){n(t=lt(t)),t.mark=e}))};for(var o in t.marks)r(o);var i;for(var s in t.nodes)i=void 0,(i=t.nodes[s].spec.parseDOM)&&i.forEach((function(t){n(t=lt(t)),t.node=s}));return e},tt.fromSchema=function(t){return t.cached.domParser||(t.cached.domParser=new tt(t,tt.schemaRules(t)))};var et={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},nt={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},rt={ol:!0,ul:!0};function ot(t){return(t?1:0)|("full"===t?2:0)}var it=function(t,e,n,r,o,i,s){this.type=t,this.attrs=e,this.solid=o,this.match=i||(4&s?null:t.contentMatch),this.options=s,this.content=[],this.marks=n,this.activeMarks=u.none,this.pendingMarks=r};it.prototype.findWrapping=function(t){if(!this.match){if(!this.type)return[];var e=this.type.contentMatch.fillBefore(i.from(t));if(!e){var n,r=this.type.contentMatch;return(n=r.findWrapping(t.type))?(this.match=r,n):null}this.match=this.type.contentMatch.matchFragment(e)}return this.match.findWrapping(t.type)},it.prototype.finish=function(t){if(!(1&this.options)){var e,n=this.content[this.content.length-1];n&&n.isText&&(e=/[ \t\r\n\u000c]+$/.exec(n.text))&&(n.text.length==e[0].length?this.content.pop():this.content[this.content.length-1]=n.withText(n.text.slice(0,n.text.length-e[0].length)))}var r=i.from(this.content);return!t&&this.match&&(r=r.append(this.match.fillBefore(i.empty,!0))),this.type?this.type.create(this.attrs,r,this.marks):r},it.prototype.applyPending=function(t){for(var e=0,n=this.pendingMarks;e<n.length;e++){var r=n[e];(this.type?this.type.allowsMarkType(r.type):ut(r.type,t))&&!r.isInSet(this.activeMarks)&&(this.activeMarks=r.addToSet(this.activeMarks),this.pendingMarks=r.removeFromSet(this.pendingMarks))}};var st=function(t,e,n){this.parser=t,this.options=e,this.isOpen=n;var r,o=e.topNode,i=ot(e.preserveWhitespace)|(n?4:0);r=o?new it(o.type,o.attrs,u.none,u.none,!0,e.topMatch||o.type.contentMatch,i):new it(n?null:t.schema.topNodeType,null,u.none,u.none,!0,null,i),this.nodes=[r],this.open=0,this.find=e.findPositions,this.needsBlock=!1},at={top:{configurable:!0},currentPos:{configurable:!0}};function ct(t,e){return(t.matches||t.msMatchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector).call(t,e)}function lt(t){var e={};for(var n in t)e[n]=t[n];return e}function ut(t,e){var n=e.schema.nodes,r=function(r){var o=n[r];if(o.allowsMarkType(t)){var i=[],s=function(t){i.push(t);for(var n=0;n<t.edgeCount;n++){var r=t.edge(n),o=r.type,a=r.next;if(o==e)return!0;if(i.indexOf(a)<0&&s(a))return!0}};return s(o.contentMatch)?{v:!0}:void 0}};for(var o in n){var i=r(o);if(i)return i.v}}at.top.get=function(){return this.nodes[this.open]},st.prototype.addDOM=function(t){if(3==t.nodeType)this.addTextNode(t);else if(1==t.nodeType){var e=t.getAttribute("style"),n=e?this.readStyles(function(t){var e,n=/\s*([\w-]+)\s*:\s*([^;]+)/g,r=[];for(;e=n.exec(t);)r.push(e[1],e[2].trim());return r}(e)):null,r=this.top;if(null!=n)for(var o=0;o<n.length;o++)this.addPendingMark(n[o]);if(this.addElement(t),null!=n)for(var i=0;i<n.length;i++)this.removePendingMark(n[i],r)}},st.prototype.addTextNode=function(t){var e=t.nodeValue,n=this.top;if((n.type?n.type.inlineContent:n.content.length&&n.content[0].isInline)||/[^ \t\r\n\u000c]/.test(e)){if(1&n.options)2&n.options||(e=e.replace(/\r?\n|\r/g," "));else if(e=e.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(e)&&this.open==this.nodes.length-1){var r=n.content[n.content.length-1],o=t.previousSibling;(!r||o&&"BR"==o.nodeName||r.isText&&/[ \t\r\n\u000c]$/.test(r.text))&&(e=e.slice(1))}e&&this.insertNode(this.parser.schema.text(e)),this.findInText(t)}else this.findInside(t)},st.prototype.addElement=function(t){var e=t.nodeName.toLowerCase();rt.hasOwnProperty(e)&&function(t){for(var e=t.firstChild,n=null;e;e=e.nextSibling){var r=1==e.nodeType?e.nodeName.toLowerCase():null;r&&rt.hasOwnProperty(r)&&n?(n.appendChild(e),e=n):"li"==r?n=e:r&&(n=null)}}(t);var n=this.options.ruleFromNode&&this.options.ruleFromNode(t)||this.parser.matchTag(t,this);if(n?n.ignore:nt.hasOwnProperty(e))this.findInside(t);else if(!n||n.skip){n&&n.skip.nodeType&&(t=n.skip);var r,o=this.top,i=this.needsBlock;if(et.hasOwnProperty(e))r=!0,o.type||(this.needsBlock=!0);else if(!t.firstChild)return void this.leafFallback(t);this.addAll(t),r&&this.sync(o),this.needsBlock=i}else this.addElementByRule(t,n)},st.prototype.leafFallback=function(t){"BR"==t.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(t.ownerDocument.createTextNode("\n"))},st.prototype.readStyles=function(t){for(var e=u.none,n=0;n<t.length;n+=2){var r=this.parser.matchStyle(t[n],t[n+1],this);if(r){if(r.ignore)return null;e=this.parser.schema.marks[r.mark].create(r.attrs).addToSet(e)}}return e},st.prototype.addElementByRule=function(t,e){var n,r,o,i=this;e.node?(r=this.parser.schema.nodes[e.node]).isLeaf?this.insertNode(r.create(e.attrs))||this.leafFallback(t):n=this.enter(r,e.attrs,e.preserveWhitespace):(o=this.parser.schema.marks[e.mark].create(e.attrs),this.addPendingMark(o));var s=this.top;if(r&&r.isLeaf)this.findInside(t);else if(e.getContent)this.findInside(t),e.getContent(t,this.parser.schema).forEach((function(t){return i.insertNode(t)}));else{var a=e.contentElement;"string"==typeof a?a=t.querySelector(a):"function"==typeof a&&(a=a(t)),a||(a=t),this.findAround(t,a,!0),this.addAll(a,n)}n&&(this.sync(s),this.open--),o&&this.removePendingMark(o,s)},st.prototype.addAll=function(t,e,n,r){for(var o=n||0,i=n?t.childNodes[n]:t.firstChild,s=null==r?null:t.childNodes[r];i!=s;i=i.nextSibling,++o)this.findAtPoint(t,o),this.addDOM(i),e&&et.hasOwnProperty(i.nodeName.toLowerCase())&&this.sync(e);this.findAtPoint(t,o)},st.prototype.findPlace=function(t){for(var e,n,r=this.open;r>=0;r--){var o=this.nodes[r],i=o.findWrapping(t);if(i&&(!e||e.length>i.length)&&(e=i,n=o,!i.length))break;if(o.solid)break}if(!e)return!1;this.sync(n);for(var s=0;s<e.length;s++)this.enterInner(e[s],null,!1);return!0},st.prototype.insertNode=function(t){if(t.isInline&&this.needsBlock&&!this.top.type){var e=this.textblockFromContext();e&&this.enterInner(e)}if(this.findPlace(t)){this.closeExtra();var n=this.top;n.applyPending(t.type),n.match&&(n.match=n.match.matchType(t.type));for(var r=n.activeMarks,o=0;o<t.marks.length;o++)n.type&&!n.type.allowsMarkType(t.marks[o].type)||(r=t.marks[o].addToSet(r));return n.content.push(t.mark(r)),!0}return!1},st.prototype.enter=function(t,e,n){var r=this.findPlace(t.create(e));return r&&this.enterInner(t,e,!0,n),r},st.prototype.enterInner=function(t,e,n,r){this.closeExtra();var o=this.top;o.applyPending(t),o.match=o.match&&o.match.matchType(t,e);var i=null==r?-5&o.options:ot(r);4&o.options&&0==o.content.length&&(i|=4),this.nodes.push(new it(t,e,o.activeMarks,o.pendingMarks,n,null,i)),this.open++},st.prototype.closeExtra=function(t){var e=this.nodes.length-1;if(e>this.open){for(;e>this.open;e--)this.nodes[e-1].content.push(this.nodes[e].finish(t));this.nodes.length=this.open+1}},st.prototype.finish=function(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)},st.prototype.sync=function(t){for(var e=this.open;e>=0;e--)if(this.nodes[e]==t)return void(this.open=e)},at.currentPos.get=function(){this.closeExtra();for(var t=0,e=this.open;e>=0;e--){for(var n=this.nodes[e].content,r=n.length-1;r>=0;r--)t+=n[r].nodeSize;e&&t++}return t},st.prototype.findAtPoint=function(t,e){if(this.find)for(var n=0;n<this.find.length;n++)this.find[n].node==t&&this.find[n].offset==e&&(this.find[n].pos=this.currentPos)},st.prototype.findInside=function(t){if(this.find)for(var e=0;e<this.find.length;e++)null==this.find[e].pos&&1==t.nodeType&&t.contains(this.find[e].node)&&(this.find[e].pos=this.currentPos)},st.prototype.findAround=function(t,e,n){if(t!=e&&this.find)for(var r=0;r<this.find.length;r++){if(null==this.find[r].pos&&1==t.nodeType&&t.contains(this.find[r].node))e.compareDocumentPosition(this.find[r].node)&(n?2:4)&&(this.find[r].pos=this.currentPos)}},st.prototype.findInText=function(t){if(this.find)for(var e=0;e<this.find.length;e++)this.find[e].node==t&&(this.find[e].pos=this.currentPos-(t.nodeValue.length-this.find[e].offset))},st.prototype.matchesContext=function(t){var e=this;if(t.indexOf("|")>-1)return t.split(/\s*\|\s*/).some(this.matchesContext,this);var n=t.split("/"),r=this.options.context,o=!(this.isOpen||r&&r.parent.type!=this.nodes[0].type),i=-(r?r.depth+1:0)+(o?0:1),s=function(t,a){for(;t>=0;t--){var c=n[t];if(""==c){if(t==n.length-1||0==t)continue;for(;a>=i;a--)if(s(t-1,a))return!0;return!1}var l=a>0||0==a&&o?e.nodes[a].type:r&&a>=i?r.node(a-i).type:null;if(!l||l.name!=c&&-1==l.groups.indexOf(c))return!1;a--}return!0};return s(n.length-1,this.open)},st.prototype.textblockFromContext=function(){var t=this.options.context;if(t)for(var e=t.depth;e>=0;e--){var n=t.node(e).contentMatchAt(t.indexAfter(e)).defaultType;if(n&&n.isTextblock&&n.defaultAttrs)return n}for(var r in this.parser.schema.nodes){var o=this.parser.schema.nodes[r];if(o.isTextblock&&o.defaultAttrs)return o}},st.prototype.addPendingMark=function(t){this.top.pendingMarks=t.addToSet(this.top.pendingMarks)},st.prototype.removePendingMark=function(t,e){for(var n=this.open;n>=0;n--){var r=this.nodes[n];if(r.pendingMarks.lastIndexOf(t)>-1?r.pendingMarks=t.removeFromSet(r.pendingMarks):r.activeMarks=t.removeFromSet(r.activeMarks),r==e)break}},Object.defineProperties(st.prototype,at);var pt=function(t,e){this.nodes=t||{},this.marks=e||{}};function ht(t){var e={};for(var n in t){var r=t[n].spec.toDOM;r&&(e[n]=r)}return e}function ft(t){return t.document||window.document}pt.prototype.serializeFragment=function(t,e,n){var r=this;void 0===e&&(e={}),n||(n=ft(e).createDocumentFragment());var o=n,i=null;return t.forEach((function(t){if(i||t.marks.length){i||(i=[]);for(var n=0,s=0;n<i.length&&s<t.marks.length;){var a=t.marks[s];if(r.marks[a.type.name]){if(!a.eq(i[n])||!1===a.type.spec.spanning)break;n+=2,s++}else s++}for(;n<i.length;)o=i.pop(),i.pop();for(;s<t.marks.length;){var c=t.marks[s++],l=r.serializeMark(c,t.isInline,e);l&&(i.push(c,o),o.appendChild(l.dom),o=l.contentDOM||l.dom)}}o.appendChild(r.serializeNode(t,e))})),n},pt.prototype.serializeNode=function(t,e){void 0===e&&(e={});var n=pt.renderSpec(ft(e),this.nodes[t.type.name](t)),r=n.dom,o=n.contentDOM;if(o){if(t.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");e.onContent?e.onContent(t,o,e):this.serializeFragment(t.content,e,o)}return r},pt.prototype.serializeNodeAndMarks=function(t,e){void 0===e&&(e={});for(var n=this.serializeNode(t,e),r=t.marks.length-1;r>=0;r--){var o=this.serializeMark(t.marks[r],t.isInline,e);o&&((o.contentDOM||o.dom).appendChild(n),n=o.dom)}return n},pt.prototype.serializeMark=function(t,e,n){void 0===n&&(n={});var r=this.marks[t.type.name];return r&&pt.renderSpec(ft(n),r(t,e))},pt.renderSpec=function(t,e,n){if(void 0===n&&(n=null),"string"==typeof e)return{dom:t.createTextNode(e)};if(null!=e.nodeType)return{dom:e};var r=e[0],o=r.indexOf(" ");o>0&&(n=r.slice(0,o),r=r.slice(o+1));var i=null,s=n?t.createElementNS(n,r):t.createElement(r),a=e[1],c=1;if(a&&"object"==typeof a&&null==a.nodeType&&!Array.isArray(a))for(var l in c=2,a)if(null!=a[l]){var u=l.indexOf(" ");u>0?s.setAttributeNS(l.slice(0,u),l.slice(u+1),a[l]):s.setAttribute(l,a[l])}for(var p=c;p<e.length;p++){var h=e[p];if(0===h){if(p<e.length-1||p>c)throw new RangeError("Content hole must be the only child of its parent node");return{dom:s,contentDOM:s}}var f=pt.renderSpec(t,h,n),d=f.dom,m=f.contentDOM;if(s.appendChild(d),m){if(i)throw new RangeError("Multiple content holes");i=m}}return{dom:s,contentDOM:i}},pt.fromSchema=function(t){return t.cached.domSerializer||(t.cached.domSerializer=new pt(this.nodesFromSchema(t),this.marksFromSchema(t)))},pt.nodesFromSchema=function(t){var e=ht(t.nodes);return e.text||(e.text=function(t){return t.text}),e},pt.marksFromSchema=function(t){return ht(t.marks)};var dt=Math.pow(2,16);function mt(t){return 65535&t}var gt=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=null),this.pos=t,this.deleted=e,this.recover=n},vt=function(t,e){void 0===e&&(e=!1),this.ranges=t,this.inverted=e};vt.prototype.recover=function(t){var e=0,n=mt(t);if(!this.inverted)for(var r=0;r<n;r++)e+=this.ranges[3*r+2]-this.ranges[3*r+1];return this.ranges[3*n]+e+function(t){return(t-(65535&t))/dt}(t)},vt.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},vt.prototype.map=function(t,e){return void 0===e&&(e=1),this._map(t,e,!0)},vt.prototype._map=function(t,e,n){for(var r=0,o=this.inverted?2:1,i=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var a=this.ranges[s]-(this.inverted?r:0);if(a>t)break;var c=this.ranges[s+o],l=this.ranges[s+i],u=a+c;if(t<=u){var p=a+r+((c?t==a?-1:t==u?1:e:e)<0?0:l);if(n)return p;var h=s/3+(t-a)*dt;return new gt(p,e<0?t!=a:t!=u,h)}r+=l-c}return n?t+r:new gt(t+r)},vt.prototype.touches=function(t,e){for(var n=0,r=mt(e),o=this.inverted?2:1,i=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var a=this.ranges[s]-(this.inverted?n:0);if(a>t)break;var c=this.ranges[s+o];if(t<=a+c&&s==3*r)return!0;n+=this.ranges[s+i]-c}return!1},vt.prototype.forEach=function(t){for(var e=this.inverted?2:1,n=this.inverted?1:2,r=0,o=0;r<this.ranges.length;r+=3){var i=this.ranges[r],s=i-(this.inverted?o:0),a=i+(this.inverted?0:o),c=this.ranges[r+e],l=this.ranges[r+n];t(s,s+c,a,a+l),o+=l-c}},vt.prototype.invert=function(){return new vt(this.ranges,!this.inverted)},vt.prototype.toString=function(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)},vt.offset=function(t){return 0==t?vt.empty:new vt(t<0?[0,-t,0]:[0,0,t])},vt.empty=new vt([]);var yt=function(t,e,n,r){this.maps=t||[],this.from=n||0,this.to=null==r?this.maps.length:r,this.mirror=e};function kt(t){var e=Error.call(this,t);return e.__proto__=kt.prototype,e}yt.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.maps.length),new yt(this.maps,this.mirror,t,e)},yt.prototype.copy=function(){return new yt(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)},yt.prototype.appendMap=function(t,e){this.to=this.maps.push(t),null!=e&&this.setMirror(this.maps.length-1,e)},yt.prototype.appendMapping=function(t){for(var e=0,n=this.maps.length;e<t.maps.length;e++){var r=t.getMirror(e);this.appendMap(t.maps[e],null!=r&&r<e?n+r:null)}},yt.prototype.getMirror=function(t){if(this.mirror)for(var e=0;e<this.mirror.length;e++)if(this.mirror[e]==t)return this.mirror[e+(e%2?-1:1)]},yt.prototype.setMirror=function(t,e){this.mirror||(this.mirror=[]),this.mirror.push(t,e)},yt.prototype.appendMappingInverted=function(t){for(var e=t.maps.length-1,n=this.maps.length+t.maps.length;e>=0;e--){var r=t.getMirror(e);this.appendMap(t.maps[e].invert(),null!=r&&r>e?n-r-1:null)}},yt.prototype.invert=function(){var t=new yt;return t.appendMappingInverted(this),t},yt.prototype.map=function(t,e){if(void 0===e&&(e=1),this.mirror)return this._map(t,e,!0);for(var n=this.from;n<this.to;n++)t=this.maps[n].map(t,e);return t},yt.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},yt.prototype._map=function(t,e,n){for(var r=!1,o=null,i=this.from;i<this.to;i++){var s=this.maps[i],a=o&&o[i];if(null!=a&&s.touches(t,a))t=s.recover(a);else{var c=s.mapResult(t,e);if(null!=c.recover){var l=this.getMirror(i);if(null!=l&&l>i&&l<this.to){if(c.deleted){i=l,t=this.maps[l].recover(c.recover);continue}(o||(o=Object.create(null)))[l]=c.recover}}c.deleted&&(r=!0),t=c.pos}}return n?t:new gt(t,r)},kt.prototype=Object.create(Error.prototype),kt.prototype.constructor=kt,kt.prototype.name="TransformError";var _t=function(t){this.doc=t,this.steps=[],this.docs=[],this.mapping=new yt},bt={before:{configurable:!0},docChanged:{configurable:!0}};function xt(){throw new Error("Override me")}bt.before.get=function(){return this.docs.length?this.docs[0]:this.doc},_t.prototype.step=function(t){var e=this.maybeStep(t);if(e.failed)throw new kt(e.failed);return this},_t.prototype.maybeStep=function(t){var e=t.apply(this.doc);return e.failed||this.addStep(t,e.doc),e},bt.docChanged.get=function(){return this.steps.length>0},_t.prototype.addStep=function(t,e){this.docs.push(this.doc),this.steps.push(t),this.mapping.appendMap(t.getMap()),this.doc=e},Object.defineProperties(_t.prototype,bt);var wt=Object.create(null),Ct=function(){};Ct.prototype.apply=function(t){return xt()},Ct.prototype.getMap=function(){return vt.empty},Ct.prototype.invert=function(t){return xt()},Ct.prototype.map=function(t){return xt()},Ct.prototype.merge=function(t){return null},Ct.prototype.toJSON=function(){return xt()},Ct.fromJSON=function(t,e){if(!e||!e.stepType)throw new RangeError("Invalid input for Step.fromJSON");var n=wt[e.stepType];if(!n)throw new RangeError("No step type "+e.stepType+" defined");return n.fromJSON(t,e)},Ct.jsonID=function(t,e){if(t in wt)throw new RangeError("Duplicate use of step JSON ID "+t);return wt[t]=e,e.prototype.jsonID=t,e};var St=function(t,e){this.doc=t,this.failed=e};St.ok=function(t){return new St(t,null)},St.fail=function(t){return new St(null,t)},St.fromReplace=function(t,e,n,r){try{return St.ok(t.replace(e,n,r))}catch(t){if(t instanceof p)return St.fail(t.message);throw t}};var At=function(t){function e(e,n,r,o){t.call(this),this.from=e,this.to=n,this.slice=r,this.structure=!!o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){return this.structure&&Dt(t,this.from,this.to)?St.fail("Structure replace would overwrite content"):St.fromReplace(t,this.from,this.to,this.slice)},e.prototype.getMap=function(){return new vt([this.from,this.to-this.from,this.slice.size])},e.prototype.invert=function(t){return new e(this.from,this.from+this.slice.size,t.slice(this.from,this.to))},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted?null:new e(n.pos,Math.max(n.pos,r.pos),this.slice)},e.prototype.merge=function(t){if(!(t instanceof e)||t.structure!=this.structure)return null;if(this.from+this.slice.size!=t.from||this.slice.openEnd||t.slice.openStart){if(t.to!=this.from||this.slice.openStart||t.slice.openEnd)return null;var n=this.slice.size+t.slice.size==0?h.empty:new h(t.slice.content.append(this.slice.content),t.slice.openStart,this.slice.openEnd);return new e(t.from,this.to,n,this.structure)}var r=this.slice.size+t.slice.size==0?h.empty:new h(this.slice.content.append(t.slice.content),this.slice.openStart,t.slice.openEnd);return new e(this.from,this.to+(t.to-t.from),r,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new e(n.from,n.to,h.fromJSON(t,n.slice),!!n.structure)},e}(Ct);Ct.jsonID("replace",At);var Mt=function(t){function e(e,n,r,o,i,s,a){t.call(this),this.from=e,this.to=n,this.gapFrom=r,this.gapTo=o,this.slice=i,this.insert=s,this.structure=!!a}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){if(this.structure&&(Dt(t,this.from,this.gapFrom)||Dt(t,this.gapTo,this.to)))return St.fail("Structure gap-replace would overwrite content");var e=t.slice(this.gapFrom,this.gapTo);if(e.openStart||e.openEnd)return St.fail("Gap is not a flat range");var n=this.slice.insertAt(this.insert,e.content);return n?St.fromReplace(t,this.from,this.to,n):St.fail("Content does not fit in gap")},e.prototype.getMap=function(){return new vt([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])},e.prototype.invert=function(t){var n=this.gapTo-this.gapFrom;return new e(this.from,this.from+this.slice.size+n,this.from+this.insert,this.from+this.insert+n,t.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1),o=t.map(this.gapFrom,-1),i=t.map(this.gapTo,1);return n.deleted&&r.deleted||o<n.pos||i>r.pos?null:new e(n.pos,r.pos,o,i,this.slice,this.insert,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to||"number"!=typeof n.gapFrom||"number"!=typeof n.gapTo||"number"!=typeof n.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new e(n.from,n.to,n.gapFrom,n.gapTo,h.fromJSON(t,n.slice),n.insert,!!n.structure)},e}(Ct);function Dt(t,e,n){for(var r=t.resolve(e),o=n-e,i=r.depth;o>0&&i>0&&r.indexAfter(i)==r.node(i).childCount;)i--,o--;if(o>0)for(var s=r.node(i).maybeChild(r.indexAfter(i));o>0;){if(!s||s.isLeaf)return!0;s=s.firstChild,o--}return!1}function Et(t,e,n){return(0==e||t.canReplace(e,t.childCount))&&(n==t.childCount||t.canReplace(0,n))}function Ot(t){for(var e=t.parent.content.cutByIndex(t.startIndex,t.endIndex),n=t.depth;;--n){var r=t.$from.node(n),o=t.$from.index(n),i=t.$to.indexAfter(n);if(n<t.depth&&r.canReplace(o,i,e))return n;if(0==n||r.type.spec.isolating||!Et(r,o,i))break}}function Tt(t,e,n,r){void 0===r&&(r=t);var o=function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.contentMatchAt(r).findWrapping(e);if(!i)return null;var s=i.length?i[0]:e;return n.canReplaceWith(r,o,s)?i:null}(t,e),i=o&&function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.child(r),s=e.contentMatch.findWrapping(i.type);if(!s)return null;for(var a=(s.length?s[s.length-1]:e).contentMatch,c=r;a&&c<o;c++)a=a.matchType(n.child(c).type);if(!a||!a.validEnd)return null;return s}(r,e);return i?o.map(zt).concat({type:e,attrs:n}).concat(i.map(zt)):null}function zt(t){return{type:t,attrs:null}}function It(t,e,n,r){void 0===n&&(n=1);var o=t.resolve(e),i=o.depth-n,s=r&&r[r.length-1]||o.parent;if(i<0||o.parent.type.spec.isolating||!o.parent.canReplace(o.index(),o.parent.childCount)||!s.type.validContent(o.parent.content.cutByIndex(o.index(),o.parent.childCount)))return!1;for(var a=o.depth-1,c=n-2;a>i;a--,c--){var l=o.node(a),u=o.index(a);if(l.type.spec.isolating)return!1;var p=l.content.cutByIndex(u,l.childCount),h=r&&r[c]||l;if(h!=l&&(p=p.replaceChild(0,h.type.create(h.attrs))),!l.canReplace(u+1,l.childCount)||!h.type.validContent(p))return!1}var f=o.indexAfter(i),d=r&&r[0];return o.node(i).canReplaceWith(f,f,d?d.type:o.node(i+1).type)}function Nt(t,e){var n=t.resolve(e),r=n.index();return Rt(n.nodeBefore,n.nodeAfter)&&n.parent.canReplace(r,r+1)}function Rt(t,e){return t&&e&&!t.isLeaf&&t.canAppend(e)}function Lt(t,e,n){for(var r=[],o=0;o<t.childCount;o++){var s=t.child(o);s.content.size&&(s=s.copy(Lt(s.content,e,s))),s.isInline&&(s=e(s,n,o)),r.push(s)}return i.fromArray(r)}Ct.jsonID("replaceAround",Mt),_t.prototype.lift=function(t,e){for(var n=t.$from,r=t.$to,o=t.depth,s=n.before(o+1),a=r.after(o+1),c=s,l=a,u=i.empty,p=0,f=o,d=!1;f>e;f--)d||n.index(f)>0?(d=!0,u=i.from(n.node(f).copy(u)),p++):c--;for(var m=i.empty,g=0,v=o,y=!1;v>e;v--)y||r.after(v+1)<r.end(v)?(y=!0,m=i.from(r.node(v).copy(m)),g++):l++;return this.step(new Mt(c,l,s,a,new h(u.append(m),p,g),u.size-p,!0))},_t.prototype.wrap=function(t,e){for(var n=i.empty,r=e.length-1;r>=0;r--)n=i.from(e[r].type.create(e[r].attrs,n));var o=t.start,s=t.end;return this.step(new Mt(o,s,o,s,new h(n,0,0),e.length,!0))},_t.prototype.setBlockType=function(t,e,n,r){var o=this;if(void 0===e&&(e=t),!n.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");var s=this.steps.length;return this.doc.nodesBetween(t,e,(function(t,e){if(t.isTextblock&&!t.hasMarkup(n,r)&&function(t,e,n){var r=t.resolve(e),o=r.index();return r.parent.canReplaceWith(o,o+1,n)}(o.doc,o.mapping.slice(s).map(e),n)){o.clearIncompatible(o.mapping.slice(s).map(e,1),n);var a=o.mapping.slice(s),c=a.map(e,1),l=a.map(e+t.nodeSize,1);return o.step(new Mt(c,l,c+1,l-1,new h(i.from(n.create(r,null,t.marks)),0,0),1,!0)),!1}})),this},_t.prototype.setNodeMarkup=function(t,e,n,r){var o=this.doc.nodeAt(t);if(!o)throw new RangeError("No node at given position");e||(e=o.type);var s=e.create(n,null,r||o.marks);if(o.isLeaf)return this.replaceWith(t,t+o.nodeSize,s);if(!e.validContent(o.content))throw new RangeError("Invalid content for node type "+e.name);return this.step(new Mt(t,t+o.nodeSize,t+1,t+o.nodeSize-1,new h(i.from(s),0,0),1,!0))},_t.prototype.split=function(t,e,n){void 0===e&&(e=1);for(var r=this.doc.resolve(t),o=i.empty,s=i.empty,a=r.depth,c=r.depth-e,l=e-1;a>c;a--,l--){o=i.from(r.node(a).copy(o));var u=n&&n[l];s=i.from(u?u.type.create(u.attrs,s):r.node(a).copy(s))}return this.step(new At(t,t,new h(o.append(s),e,e),!0))},_t.prototype.join=function(t,e){void 0===e&&(e=1);var n=new At(t-e,t+e,h.empty,!0);return this.step(n)};var qt=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),r=t.resolve(this.from),o=r.node(r.sharedDepth(this.to)),i=new h(Lt(n.content,(function(t,n){return n.type.allowsMarkType(e.mark.type)?t.mark(e.mark.addToSet(t.marks)):t}),o),n.openStart,n.openEnd);return St.fromReplace(t,this.from,this.to,i)},e.prototype.invert=function(){return new Ft(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(Ct);Ct.jsonID("addMark",qt);var Ft=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),r=new h(Lt(n.content,(function(t){return t.mark(e.mark.removeFromSet(t.marks))})),n.openStart,n.openEnd);return St.fromReplace(t,this.from,this.to,r)},e.prototype.invert=function(){return new qt(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(Ct);function Pt(t,e,n,r){if(void 0===n&&(n=e),void 0===r&&(r=h.empty),e==n&&!r.size)return null;var o=t.resolve(e),s=t.resolve(n);if(jt(o,s,r))return new At(e,n,r);var a=function(t,e){var n=function t(e,n,r,o){var s=i.empty,a=0,c=r[n];if(e.depth>n){var l=t(e,n+1,r,o||c);a=l.openEnd+1,s=i.from(e.node(n+1).copy(l.content))}c&&(s=s.append(c.content),a=c.openEnd);o&&(s=s.append(e.node(n).contentMatchAt(e.indexAfter(n)).fillBefore(i.empty,!0)),a=0);return{content:s,openEnd:a}}(t,0,e,!1),r=n.content,o=n.openEnd;return new h(r,t.depth,o||0)}(o,function(t,e){for(var n=new Vt(t),r=1;e.size&&r<=3;r++){var o=n.placeSlice(e.content,e.openStart,e.openEnd,r);3==r&&o!=e&&o.size&&(r=0),e=o}for(;n.open.length;)n.closeNode();return n.placed}(o,r)),c=$t(o,s,a);if(!c)return null;if(a.size!=c.size&&function(t,e,n){if(!e.parent.isTextblock)return!1;var r,o=n.openEnd?function(t,e){for(var n=1;n<e;n++)t=t.lastChild.content;return t.lastChild}(n.content,n.openEnd):t.node(t.depth-(n.openStart-n.openEnd));if(!o.isTextblock)return!1;for(var i=e.index();i<e.parent.childCount;i++)if(!o.type.allowsMarks(e.parent.child(i).marks))return!1;n.openEnd?r=o.contentMatchAt(o.childCount):(r=o.contentMatchAt(o.childCount),n.size&&(r=r.matchFragment(n.content,n.openStart?1:0)));return(r=r.matchFragment(e.parent.content,e.index()))&&r.validEnd}(o,s,a)){for(var l=s.depth,u=s.after(l);l>1&&u==s.end(--l);)++u;var p=$t(o,t.resolve(u),a);if(p)return new Mt(e,u,n,s.end(),p,a.size)}return c.size||e!=n?new At(e,n,c):null}function Bt(t,e,n,r,o,s,a){var c,l=t.childCount,u=l-(a>0?1:0),p=s<0?e:n.node(o);c=s<0?p.contentMatchAt(u):1==l&&a>0?p.contentMatchAt(s?n.index(o):n.indexAfter(o)):p.contentMatchAt(n.indexAfter(o)).matchFragment(t,l>0&&s?1:0,u);var h=r.node(o);if(a>0&&o<r.depth){var f=h.content.cutByIndex(r.indexAfter(o)).addToStart(t.lastChild),d=c.fillBefore(f,!0);if(d&&d.size&&s>0&&1==l&&(d=null),d){var m=Bt(t.lastChild.content,t.lastChild,n,r,o+1,1==l?s-1:-1,a-1);if(m){var g=t.lastChild.copy(m);return d.size?t.cutByIndex(0,l-1).append(d).addToEnd(g):t.replaceChild(l-1,g)}}}a>0&&(c=c.matchType((1==l&&s>0?n.node(o+1):t.lastChild).type));var v=r.index(o);if(v==h.childCount&&!h.type.compatibleContent(e.type))return null;for(var y=c.fillBefore(h.content,!0,v),k=v;y&&k<h.content.childCount;k++)p.type.allowsMarks(h.content.child(k).marks)||(y=null);if(!y)return null;if(a>0){var _=function t(e,n,r,o,s){var a,c=e.content,l=c.childCount;a=s>=0?r.node(o).contentMatchAt(r.indexAfter(o)).matchFragment(c,s>0?1:0,l):e.contentMatchAt(l);if(n>0){var u=t(c.lastChild,n-1,r,o+1,1==l?s-1:-1);c=c.replaceChild(l-1,u)}return e.copy(c.append(a.fillBefore(i.empty,!0)))}(t.lastChild,a-1,n,o+1,1==l?s-1:-1);t=t.replaceChild(l-1,_)}return t=t.append(y),r.depth>o&&(t=t.addToEnd(function t(e,n){var r=e.node(n),o=r.contentMatchAt(0).fillBefore(r.content,!0,e.index(n));e.depth>n&&(o=o.addToEnd(t(e,n+1)));return r.copy(o)}(r,o+1))),t}function $t(t,e,n){var r=Bt(n.content,t.node(0),t,e,0,n.openStart,n.openEnd);return r?function(t,e,n){for(;e>0&&n>0&&1==t.childCount;)t=t.firstChild.content,e--,n--;return new h(t,e,n)}(r,n.openStart,e.depth):null}function jt(t,e,n){return!n.openStart&&!n.openEnd&&t.start()==e.start()&&t.parent.canReplace(t.index(),e.index(),n.content)}Ct.jsonID("removeMark",Ft),_t.prototype.addMark=function(t,e,n){var r=this,o=[],i=[],s=null,a=null;return this.doc.nodesBetween(t,e,(function(r,c,l){if(r.isInline){var u=r.marks;if(!n.isInSet(u)&&l.type.allowsMarkType(n.type)){for(var p=Math.max(c,t),h=Math.min(c+r.nodeSize,e),f=n.addToSet(u),d=0;d<u.length;d++)u[d].isInSet(f)||(s&&s.to==p&&s.mark.eq(u[d])?s.to=h:o.push(s=new Ft(p,h,u[d])));a&&a.to==p?a.to=h:i.push(a=new qt(p,h,n))}}})),o.forEach((function(t){return r.step(t)})),i.forEach((function(t){return r.step(t)})),this},_t.prototype.removeMark=function(t,e,n){var r=this;void 0===n&&(n=null);var o=[],i=0;return this.doc.nodesBetween(t,e,(function(r,s){if(r.isInline){i++;var a=null;if(n instanceof Y){var c=n.isInSet(r.marks);c&&(a=[c])}else n?n.isInSet(r.marks)&&(a=[n]):a=r.marks;if(a&&a.length)for(var l=Math.min(s+r.nodeSize,e),u=0;u<a.length;u++){for(var p=a[u],h=void 0,f=0;f<o.length;f++){var d=o[f];d.step==i-1&&p.eq(o[f].style)&&(h=d)}h?(h.to=l,h.step=i):o.push({style:p,from:Math.max(s,t),to:l,step:i})}}})),o.forEach((function(t){return r.step(new Ft(t.from,t.to,t.style))})),this},_t.prototype.clearIncompatible=function(t,e,n){void 0===n&&(n=e.contentMatch);for(var r=this.doc.nodeAt(t),o=[],s=t+1,a=0;a<r.childCount;a++){var c=r.child(a),l=s+c.nodeSize,u=n.matchType(c.type,c.attrs);if(u){n=u;for(var p=0;p<c.marks.length;p++)e.allowsMarkType(c.marks[p].type)||this.step(new Ft(s,l,c.marks[p]))}else o.push(new At(s,l,h.empty));s=l}if(!n.validEnd){var f=n.fillBefore(i.empty,!0);this.replace(s,s,new h(f,0,0))}for(var d=o.length-1;d>=0;d--)this.step(o[d]);return this},_t.prototype.replace=function(t,e,n){void 0===e&&(e=t),void 0===n&&(n=h.empty);var r=Pt(this.doc,t,e,n);return r&&this.step(r),this},_t.prototype.replaceWith=function(t,e,n){return this.replace(t,e,new h(i.from(n),0,0))},_t.prototype.delete=function(t,e){return this.replace(t,e,h.empty)},_t.prototype.insert=function(t,e){return this.replaceWith(t,t,e)};var Vt=function(t){this.open=[];for(var e=0;e<=t.depth;e++){var n=t.node(e),r=n.contentMatchAt(t.indexAfter(e));this.open.push({parent:n,match:r,content:i.empty,wrapper:!1,openEnd:0,depth:e})}this.placed=[]};function Ut(t,e,n){var r=t.content;if(e>1){var o=Ut(t.firstChild,e-1,1==t.childCount?n-1:0);r=t.content.replaceChild(0,o)}var i=t.type.contentMatch.fillBefore(r,0==n);return t.copy(i.append(r))}function Jt(t,e,n,r,o){if(e<n){var s=t.firstChild;t=t.replaceChild(0,s.copy(Jt(s.content,e+1,n,r,s)))}if(e>r){var a=o.contentMatchAt(0),c=a.fillBefore(t).append(t);t=c.append(a.matchFragment(c).fillBefore(i.empty,!0))}return t}function Zt(t,e){for(var n=[],r=Math.min(t.depth,e.depth);r>=0;r--){var o=t.start(r);if(o<t.pos-(t.depth-r)||e.end(r)>e.pos+(e.depth-r)||t.node(r).type.spec.isolating||e.node(r).type.spec.isolating)break;o==e.start(r)&&n.push(r)}return n}Vt.prototype.placeSlice=function(t,e,n,r,o){if(e>0){var s=t.firstChild,a=this.placeSlice(s.content,Math.max(0,e-1),n&&1==t.childCount?n-1:0,r,s);a.content!=s.content&&(a.content.size?(t=t.replaceChild(0,s.copy(a.content)),e=a.openStart+1):(1==t.childCount&&(n=0),t=t.cutByIndex(1),e=0))}var c=this.placeContent(t,e,n,r,o);if(r>2&&c.size&&0==e){var l=c.content.firstChild,u=1==c.content.childCount;this.placeContent(l.content,0,n&&u?n-1:0,r,l),c=u?i.empty:new h(c.content.cutByIndex(1),0,n)}return c},Vt.prototype.placeContent=function(t,e,n,r,o){for(var s=0;s<t.childCount;s++){for(var a=t.child(s),c=!1,l=s==t.childCount-1,u=this.open.length-1;u>=0;u--){var p=this.open[u],f=void 0;if(r>1&&(f=p.match.findWrapping(a.type))&&(!o||!f.length||f[f.length-1]!=o.type)){for(;this.open.length-1>u;)this.closeNode();for(var d=0;d<f.length;d++)p.match=p.match.matchType(f[d]),u++,p={parent:f[d].create(),match:f[d].contentMatch,content:i.empty,wrapper:!0,openEnd:0,depth:u+d},this.open.push(p)}var m=p.match.matchType(a.type);if(!m){var g=p.match.fillBefore(i.from(a));if(!g){if(o&&p.match.matchType(o.type))break;continue}for(var v=0;v<g.childCount;v++){var y=g.child(v);this.addNode(p,y,0),m=p.match.matchFragment(y)}}for(;this.open.length-1>u;)this.closeNode();a=a.mark(p.parent.type.allowedMarks(a.marks)),e&&(a=Ut(a,e,l?n:0),e=0),this.addNode(p,a,l?n:0),p.match=m,l&&(n=0),c=!0;break}if(!c)break}return this.open.length>1&&(s>0&&s==t.childCount||o&&this.open[this.open.length-1].parent.type==o.type)&&this.closeNode(),new h(t.cutByIndex(s),e,n)},Vt.prototype.addNode=function(t,e,n){var r,o;t.content=(r=t.content,o=t.openEnd,o?r.replaceChild(r.childCount-1,function t(e,n){var r=e.content;if(n>1){var o=t(e.lastChild,n-1);r=e.content.replaceChild(e.childCount-1,o)}var s=e.contentMatchAt(e.childCount).fillBefore(i.empty,!0);return e.copy(r.append(s))}(r.lastChild,o)):r).addToEnd(e),t.openEnd=n},Vt.prototype.closeNode=function(){var t=this.open.pop();0==t.content.size||(t.wrapper?this.addNode(this.open[this.open.length-1],t.parent.copy(t.content),t.openEnd+1):this.placed[t.depth]={depth:t.depth,content:t.content,openEnd:t.openEnd})},_t.prototype.replaceRange=function(t,e,n){if(!n.size)return this.deleteRange(t,e);var r=this.doc.resolve(t),o=this.doc.resolve(e);if(jt(r,o,n))return this.step(new At(t,e,n));var i=Zt(r,this.doc.resolve(e));0==i[i.length-1]&&i.pop();var s=-(r.depth+1);i.unshift(s);for(var a=r.depth,c=r.pos-1;a>0;a--,c--){var l=r.node(a).type.spec;if(l.defining||l.isolating)break;i.indexOf(a)>-1?s=a:r.before(a)==c&&i.splice(1,0,-a)}for(var u=i.indexOf(s),p=[],f=n.openStart,d=n.content,m=0;;m++){var g=d.firstChild;if(p.push(g),m==n.openStart)break;d=g.content}f>0&&p[f-1].type.spec.defining&&r.node(u).type!=p[f-1].type?f-=1:f>=2&&p[f-1].isTextblock&&p[f-2].type.spec.defining&&r.node(u).type!=p[f-2].type&&(f-=2);for(var v=n.openStart;v>=0;v--){var y=(v+f+1)%(n.openStart+1),k=p[y];if(k)for(var _=0;_<i.length;_++){var b=i[(_+u)%i.length],x=!0;b<0&&(x=!1,b=-b);var w=r.node(b-1),C=r.index(b-1);if(w.canReplaceWith(C,C,k.type,k.marks))return this.replace(r.before(b),x?o.after(b):e,new h(Jt(n.content,0,n.openStart,y),y,n.openEnd))}}for(var S=this.steps.length,A=i.length-1;A>=0&&(this.replace(t,e,n),!(this.steps.length>S));A--){var M=i[A];A<0||(t=r.before(M),e=o.after(M))}return this},_t.prototype.replaceRangeWith=function(t,e,n){if(!n.isInline&&t==e&&this.doc.resolve(t).parent.content.size){var r=function(t,e,n){var r=t.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),n))return e;if(0==r.parentOffset)for(var o=r.depth-1;o>=0;o--){var i=r.index(o);if(r.node(o).canReplaceWith(i,i,n))return r.before(o+1);if(i>0)return null}if(r.parentOffset==r.parent.content.size)for(var s=r.depth-1;s>=0;s--){var a=r.indexAfter(s);if(r.node(s).canReplaceWith(a,a,n))return r.after(s+1);if(a<r.node(s).childCount)return null}}(this.doc,t,n.type);null!=r&&(t=e=r)}return this.replaceRange(t,e,new h(i.from(n),0,0))},_t.prototype.deleteRange=function(t,e){for(var n=this.doc.resolve(t),r=this.doc.resolve(e),o=Zt(n,r),i=0;i<o.length;i++){var s=o[i],a=i==o.length-1;if(a&&0==s||n.node(s).type.contentMatch.validEnd)return this.delete(n.start(s),r.end(s));if(s>0&&(a||n.node(s-1).canReplace(n.index(s-1),r.indexAfter(s-1))))return this.delete(n.before(s),r.after(s))}for(var c=1;c<=n.depth&&c<=r.depth;c++)if(t-n.start(c)==n.depth-c&&e>n.end(c)&&r.end(c)-e!=r.depth-c)return this.delete(n.before(c),e);return this.delete(t,e)};var Wt=Object.create(null),Ht=function(t,e,n){this.ranges=n||[new Kt(t.min(e),t.max(e))],this.$anchor=t,this.$head=e},Gt={anchor:{configurable:!0},head:{configurable:!0},from:{configurable:!0},to:{configurable:!0},$from:{configurable:!0},$to:{configurable:!0},empty:{configurable:!0}};Gt.anchor.get=function(){return this.$anchor.pos},Gt.head.get=function(){return this.$head.pos},Gt.from.get=function(){return this.$from.pos},Gt.to.get=function(){return this.$to.pos},Gt.$from.get=function(){return this.ranges[0].$from},Gt.$to.get=function(){return this.ranges[0].$to},Gt.empty.get=function(){for(var t=this.ranges,e=0;e<t.length;e++)if(t[e].$from.pos!=t[e].$to.pos)return!1;return!0},Ht.prototype.content=function(){return this.$from.node(0).slice(this.from,this.to,!0)},Ht.prototype.replace=function(t,e){void 0===e&&(e=h.empty);for(var n=e.content.lastChild,r=null,o=0;o<e.openEnd;o++)r=n,n=n.lastChild;for(var i=t.steps.length,s=this.ranges,a=0;a<s.length;a++){var c=s[a],l=c.$from,u=c.$to,p=t.mapping.slice(i);t.replaceRange(p.map(l.pos),p.map(u.pos),a?h.empty:e),0==a&&oe(t,i,(n?n.isInline:r&&r.isTextblock)?-1:1)}},Ht.prototype.replaceWith=function(t,e){for(var n=t.steps.length,r=this.ranges,o=0;o<r.length;o++){var i=r[o],s=i.$from,a=i.$to,c=t.mapping.slice(n),l=c.map(s.pos),u=c.map(a.pos);o?t.deleteRange(l,u):(t.replaceRangeWith(l,u,e),oe(t,n,e.isInline?-1:1))}},Ht.findFrom=function(t,e,n){var r=t.parent.inlineContent?new Yt(t):re(t.node(0),t.parent,t.pos,t.index(),e,n);if(r)return r;for(var o=t.depth-1;o>=0;o--){var i=e<0?re(t.node(0),t.node(o),t.before(o+1),t.index(o),e,n):re(t.node(0),t.node(o),t.after(o+1),t.index(o)+1,e,n);if(i)return i}},Ht.near=function(t,e){return void 0===e&&(e=1),this.findFrom(t,e)||this.findFrom(t,-e)||new ee(t.node(0))},Ht.atStart=function(t){return re(t,t,0,0,1)||new ee(t)},Ht.atEnd=function(t){return re(t,t,t.content.size,t.childCount,-1)||new ee(t)},Ht.fromJSON=function(t,e){if(!e||!e.type)throw new RangeError("Invalid input for Selection.fromJSON");var n=Wt[e.type];if(!n)throw new RangeError("No selection type "+e.type+" defined");return n.fromJSON(t,e)},Ht.jsonID=function(t,e){if(t in Wt)throw new RangeError("Duplicate use of selection JSON ID "+t);return Wt[t]=e,e.prototype.jsonID=t,e},Ht.prototype.getBookmark=function(){return Yt.between(this.$anchor,this.$head).getBookmark()},Object.defineProperties(Ht.prototype,Gt),Ht.prototype.visible=!0;var Kt=function(t,e){this.$from=t,this.$to=e},Yt=function(t){function e(e,n){void 0===n&&(n=e),t.call(this,e,n)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={$cursor:{configurable:!0}};return n.$cursor.get=function(){return this.$anchor.pos==this.$head.pos?this.$head:null},e.prototype.map=function(n,r){var o=n.resolve(r.map(this.head));if(!o.parent.inlineContent)return t.near(o);var i=n.resolve(r.map(this.anchor));return new e(i.parent.inlineContent?i:o,o)},e.prototype.replace=function(e,n){if(void 0===n&&(n=h.empty),t.prototype.replace.call(this,e,n),n==h.empty){var r=this.$from.marksAcross(this.$to);r&&e.ensureMarks(r)}},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor&&t.head==this.head},e.prototype.getBookmark=function(){return new Qt(this.anchor,this.head)},e.prototype.toJSON=function(){return{type:"text",anchor:this.anchor,head:this.head}},e.fromJSON=function(t,n){if("number"!=typeof n.anchor||"number"!=typeof n.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new e(t.resolve(n.anchor),t.resolve(n.head))},e.create=function(t,e,n){void 0===n&&(n=e);var r=t.resolve(e);return new this(r,n==e?r:t.resolve(n))},e.between=function(n,r,o){var i=n.pos-r.pos;if(o&&!i||(o=i>=0?1:-1),!r.parent.inlineContent){var s=t.findFrom(r,o,!0)||t.findFrom(r,-o,!0);if(!s)return t.near(r,o);r=s.$head}return n.parent.inlineContent||(0==i||(n=(t.findFrom(n,-o,!0)||t.findFrom(n,o,!0)).$anchor).pos<r.pos!=i<0)&&(n=r),new e(n,r)},Object.defineProperties(e.prototype,n),e}(Ht);Ht.jsonID("text",Yt);var Qt=function(t,e){this.anchor=t,this.head=e};Qt.prototype.map=function(t){return new Qt(t.map(this.anchor),t.map(this.head))},Qt.prototype.resolve=function(t){return Yt.between(t.resolve(this.anchor),t.resolve(this.head))};var Xt=function(t){function e(e){var n=e.nodeAfter,r=e.node(0).resolve(e.pos+n.nodeSize);t.call(this,e,r),this.node=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(n,r){var o=r.mapResult(this.anchor),i=o.deleted,s=o.pos,a=n.resolve(s);return i?t.near(a):new e(a)},e.prototype.content=function(){return new h(i.from(this.node),0,0)},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor},e.prototype.toJSON=function(){return{type:"node",anchor:this.anchor}},e.prototype.getBookmark=function(){return new te(this.anchor)},e.fromJSON=function(t,n){if("number"!=typeof n.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new e(t.resolve(n.anchor))},e.create=function(t,e){return new this(t.resolve(e))},e.isSelectable=function(t){return!t.isText&&!1!==t.type.spec.selectable},e}(Ht);Xt.prototype.visible=!1,Ht.jsonID("node",Xt);var te=function(t){this.anchor=t};te.prototype.map=function(t){var e=t.mapResult(this.anchor),n=e.deleted,r=e.pos;return n?new Qt(r,r):new te(r)},te.prototype.resolve=function(t){var e=t.resolve(this.anchor),n=e.nodeAfter;return n&&Xt.isSelectable(n)?new Xt(e):Ht.near(e)};var ee=function(t){function e(e){t.call(this,e.resolve(0),e.resolve(e.content.size))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.toJSON=function(){return{type:"all"}},e.fromJSON=function(t){return new e(t)},e.prototype.map=function(t){return new e(t)},e.prototype.eq=function(t){return t instanceof e},e.prototype.getBookmark=function(){return ne},e}(Ht);Ht.jsonID("all",ee);var ne={map:function(){return this},resolve:function(t){return new ee(t)}};function re(t,e,n,r,o,i){if(e.inlineContent)return Yt.create(t,n);for(var s=r-(o>0?0:1);o>0?s<e.childCount:s>=0;s+=o){var a=e.child(s);if(a.isAtom){if(!i&&Xt.isSelectable(a))return Xt.create(t,n-(o<0?a.nodeSize:0))}else{var c=re(t,a,n+o,o<0?a.childCount:0,o,i);if(c)return c}n+=a.nodeSize*o}}function oe(t,e,n){var r=t.steps.length-1;if(!(r<e)){var o,i=t.steps[r];if(i instanceof At||i instanceof Mt)t.mapping.maps[r].forEach((function(t,e,n,r){null==o&&(o=r)})),t.setSelection(Ht.near(t.doc.resolve(o),n))}}var ie=function(t){function e(e){t.call(this,e.doc),this.time=Date.now(),this.curSelection=e.selection,this.curSelectionFor=0,this.storedMarks=e.storedMarks,this.updated=0,this.meta=Object.create(null)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={selection:{configurable:!0},selectionSet:{configurable:!0},storedMarksSet:{configurable:!0},isGeneric:{configurable:!0},scrolledIntoView:{configurable:!0}};return n.selection.get=function(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection},e.prototype.setSelection=function(t){if(t.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=t,this.curSelectionFor=this.steps.length,this.updated=-3&(1|this.updated),this.storedMarks=null,this},n.selectionSet.get=function(){return(1&this.updated)>0},e.prototype.setStoredMarks=function(t){return this.storedMarks=t,this.updated|=2,this},e.prototype.ensureMarks=function(t){return u.sameSet(this.storedMarks||this.selection.$from.marks(),t)||this.setStoredMarks(t),this},e.prototype.addStoredMark=function(t){return this.ensureMarks(t.addToSet(this.storedMarks||this.selection.$head.marks()))},e.prototype.removeStoredMark=function(t){return this.ensureMarks(t.removeFromSet(this.storedMarks||this.selection.$head.marks()))},n.storedMarksSet.get=function(){return(2&this.updated)>0},e.prototype.addStep=function(e,n){t.prototype.addStep.call(this,e,n),this.updated=-3&this.updated,this.storedMarks=null},e.prototype.setTime=function(t){return this.time=t,this},e.prototype.replaceSelection=function(t){return this.selection.replace(this,t),this},e.prototype.replaceSelectionWith=function(t,e){var n=this.selection;return!1!==e&&(t=t.mark(this.storedMarks||(n.empty?n.$from.marks():n.$from.marksAcross(n.$to)||u.none))),n.replaceWith(this,t),this},e.prototype.deleteSelection=function(){return this.selection.replace(this),this},e.prototype.insertText=function(t,e,n){void 0===n&&(n=e);var r=this.doc.type.schema;if(null==e)return t?this.replaceSelectionWith(r.text(t),!0):this.deleteSelection();if(!t)return this.deleteRange(e,n);var o=this.storedMarks;if(!o){var i=this.doc.resolve(e);o=n==e?i.marks():i.marksAcross(this.doc.resolve(n))}return this.replaceRangeWith(e,n,r.text(t,o)),this.selection.empty||this.setSelection(Ht.near(this.selection.$to)),this},e.prototype.setMeta=function(t,e){return this.meta["string"==typeof t?t:t.key]=e,this},e.prototype.getMeta=function(t){return this.meta["string"==typeof t?t:t.key]},n.isGeneric.get=function(){for(var t in this.meta)return!1;return!0},e.prototype.scrollIntoView=function(){return this.updated|=4,this},n.scrolledIntoView.get=function(){return(4&this.updated)>0},Object.defineProperties(e.prototype,n),e}(_t);function se(t,e){return e&&t?t.bind(e):t}var ae=function(t,e,n){this.name=t,this.init=se(e.init,n),this.apply=se(e.apply,n)},ce=[new ae("doc",{init:function(t){return t.doc||t.schema.topNodeType.createAndFill()},apply:function(t){return t.doc}}),new ae("selection",{init:function(t,e){return t.selection||Ht.atStart(e.doc)},apply:function(t){return t.selection}}),new ae("storedMarks",{init:function(t){return t.storedMarks||null},apply:function(t,e,n,r){return r.selection.$cursor?t.storedMarks:null}}),new ae("scrollToSelection",{init:function(){return 0},apply:function(t,e){return t.scrolledIntoView?e+1:e}})],le=function(t,e){var n=this;this.schema=t,this.fields=ce.concat(),this.plugins=[],this.pluginsByKey=Object.create(null),e&&e.forEach((function(t){if(n.pluginsByKey[t.key])throw new RangeError("Adding different instances of a keyed plugin ("+t.key+")");n.plugins.push(t),n.pluginsByKey[t.key]=t,t.spec.state&&n.fields.push(new ae(t.key,t.spec.state,t))}))},ue=function(t){this.config=t},pe={schema:{configurable:!0},plugins:{configurable:!0},tr:{configurable:!0}};pe.schema.get=function(){return this.config.schema},pe.plugins.get=function(){return this.config.plugins},ue.prototype.apply=function(t){return this.applyTransaction(t).state},ue.prototype.filterTransaction=function(t,e){void 0===e&&(e=-1);for(var n=0;n<this.config.plugins.length;n++)if(n!=e){var r=this.config.plugins[n];if(r.spec.filterTransaction&&!r.spec.filterTransaction.call(r,t,this))return!1}return!0},ue.prototype.applyTransaction=function(t){if(!this.filterTransaction(t))return{state:this,transactions:[]};for(var e=[t],n=this.applyInner(t),r=null;;){for(var o=!1,i=0;i<this.config.plugins.length;i++){var s=this.config.plugins[i];if(s.spec.appendTransaction){var a=r?r[i].n:0,c=r?r[i].state:this,l=a<e.length&&s.spec.appendTransaction.call(s,a?e.slice(a):e,c,n);if(l&&n.filterTransaction(l,i)){if(l.setMeta("appendedTransaction",t),!r){r=[];for(var u=0;u<this.config.plugins.length;u++)r.push(u<i?{state:n,n:e.length}:{state:this,n:0})}e.push(l),n=n.applyInner(l),o=!0}r&&(r[i]={state:n,n:e.length})}}if(!o)return{state:n,transactions:e}}},ue.prototype.applyInner=function(t){if(!t.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");for(var e=new ue(this.config),n=this.config.fields,r=0;r<n.length;r++){var o=n[r];e[o.name]=o.apply(t,this[o.name],this,e)}for(var i=0;i<he.length;i++)he[i](this,t,e);return e},pe.tr.get=function(){return new ie(this)},ue.create=function(t){for(var e=new le(t.schema||t.doc.type.schema,t.plugins),n=new ue(e),r=0;r<e.fields.length;r++)n[e.fields[r].name]=e.fields[r].init(t,n);return n},ue.prototype.reconfigure=function(t){for(var e=new le(t.schema||this.schema,t.plugins),n=e.fields,r=new ue(e),o=0;o<n.length;o++){var i=n[o].name;r[i]=this.hasOwnProperty(i)?this[i]:n[o].init(t,r)}return r},ue.prototype.toJSON=function(t){var e={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(e.storedMarks=this.storedMarks.map((function(t){return t.toJSON()}))),t&&"object"==typeof t)for(var n in t){if("doc"==n||"selection"==n)throw new RangeError("The JSON fields `doc` and `selection` are reserved");var r=t[n],o=r.spec.state;o&&o.toJSON&&(e[n]=o.toJSON.call(r,this[r.key]))}return e},ue.fromJSON=function(t,e,n){if(!e)throw new RangeError("Invalid input for EditorState.fromJSON");if(!t.schema)throw new RangeError("Required config field 'schema' missing");var r=new le(t.schema,t.plugins),o=new ue(r);return r.fields.forEach((function(r){if("doc"==r.name)o.doc=E.fromJSON(t.schema,e.doc);else if("selection"==r.name)o.selection=Ht.fromJSON(o.doc,e.selection);else if("storedMarks"==r.name)e.storedMarks&&(o.storedMarks=e.storedMarks.map(t.schema.markFromJSON));else{if(n)for(var i in n){var s=n[i],a=s.spec.state;if(s.key==r.name&&a&&a.fromJSON&&Object.prototype.hasOwnProperty.call(e,i))return void(o[r.name]=a.fromJSON.call(s,t,e[i],o))}o[r.name]=r.init(t,o)}})),o},ue.addApplyListener=function(t){he.push(t)},ue.removeApplyListener=function(t){var e=he.indexOf(t);e>-1&&he.splice(e,1)},Object.defineProperties(ue.prototype,pe);var he=[];var fe=function(t){this.props={},t.props&&function t(e,n,r){for(var o in e){var i=e[o];i instanceof Function?i=i.bind(n):"handleDOMEvents"==o&&(i=t(i,n,{})),r[o]=i}return r}(t.props,this,this.props),this.spec=t,this.key=t.key?t.key.key:me("plugin")};fe.prototype.getState=function(t){return t[this.key]};var de=Object.create(null);function me(t){return t in de?t+"$"+ ++de[t]:(de[t]=0,t+"$")}var ge=function(t){void 0===t&&(t="key"),this.key=me(t)};ge.prototype.get=function(t){return t.config.pluginsByKey[this.key]},ge.prototype.getState=function(t){return t[this.key]};var ve={};if("undefined"!=typeof navigator&&"undefined"!=typeof document){var ye=/Edge\/(\d+)/.exec(navigator.userAgent),ke=/MSIE \d/.test(navigator.userAgent),_e=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);ve.mac=/Mac/.test(navigator.platform);var be=ve.ie=!!(ke||_e||ye);ve.ie_version=ke?document.documentMode||6:_e?+_e[1]:ye?+ye[1]:null,ve.gecko=!be&&/gecko\/(\d+)/i.test(navigator.userAgent),ve.gecko_version=ve.gecko&&+(/Firefox\/(\d+)/.exec(navigator.userAgent)||[0,0])[1];var xe=!be&&/Chrome\/(\d+)/.exec(navigator.userAgent);ve.chrome=!!xe,ve.chrome_version=xe&&+xe[1],ve.ios=!be&&/AppleWebKit/.test(navigator.userAgent)&&/Mobile\/\w+/.test(navigator.userAgent),ve.android=/Android \d/.test(navigator.userAgent),ve.webkit=!be&&"WebkitAppearance"in document.documentElement.style,ve.safari=/Apple Computer/.test(navigator.vendor),ve.webkit_version=ve.webkit&&+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]}var we=function(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e},Ce=function(t){var e=t.parentNode;return e&&11==e.nodeType?e.host:e},Se=function(t,e,n){var r=document.createRange();return r.setEnd(t,null==n?t.nodeValue.length:n),r.setStart(t,e||0),r},Ae=function(t,e,n,r){return n&&(De(t,e,n,r,-1)||De(t,e,n,r,1))},Me=/^(img|br|input|textarea|hr)$/i;function De(t,e,n,r,o){for(;;){if(t==n&&e==r)return!0;if(e==(o<0?0:Ee(t))){var i=t.parentNode;if(1!=i.nodeType||Oe(t)||Me.test(t.nodeName)||"false"==t.contentEditable)return!1;e=we(t)+(o<0?0:1),t=i}else{if(1!=t.nodeType)return!1;if("false"==(t=t.childNodes[e+(o<0?-1:0)]).contentEditable)return!1;e=o<0?Ee(t):0}}}function Ee(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Oe(t){for(var e,n=t;n&&!(e=n.pmViewDesc);n=n.parentNode);return e&&e.node&&e.node.isBlock&&(e.dom==t||e.contentDOM==t)}var Te=function(t){var e=t.isCollapsed;return e&&ve.chrome&&t.rangeCount&&!t.getRangeAt(0).collapsed&&(e=!1),e};function ze(t,e){var n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=t,n.key=n.code=e,n}function Ie(t){return{left:0,right:t.innerWidth,top:0,bottom:t.innerHeight}}function Ne(t,e){return"number"==typeof t?t:t[e]}function Re(t,e,n){for(var r=t.someProp("scrollThreshold")||0,o=t.someProp("scrollMargin")||5,i=t.dom.ownerDocument,s=i.defaultView,a=n||t.dom;a;a=Ce(a))if(1==a.nodeType){var c=a==i.body||1!=a.nodeType,l=c?Ie(s):a.getBoundingClientRect(),u=0,p=0;if(e.top<l.top+Ne(r,"top")?p=-(l.top-e.top+Ne(o,"top")):e.bottom>l.bottom-Ne(r,"bottom")&&(p=e.bottom-l.bottom+Ne(o,"bottom")),e.left<l.left+Ne(r,"left")?u=-(l.left-e.left+Ne(o,"left")):e.right>l.right-Ne(r,"right")&&(u=e.right-l.right+Ne(o,"right")),(u||p)&&(c?s.scrollBy(u,p):(p&&(a.scrollTop+=p),u&&(a.scrollLeft+=u),e={left:e.left-u,top:e.top-p,right:e.right-u,bottom:e.bottom-p})),c)break}}function Le(t){for(var e=[],n=t.ownerDocument;t&&(e.push({dom:t,top:t.scrollTop,left:t.scrollLeft}),t!=n);t=Ce(t));return e}function qe(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=r.dom,i=r.top,s=r.left;o.scrollTop!=i+e&&(o.scrollTop=i+e),o.scrollLeft!=s&&(o.scrollLeft=s)}}var Fe=null;function Pe(t,e){for(var n,r,o=2e8,i=0,s=e.top,a=e.top,c=t.firstChild,l=0;c;c=c.nextSibling,l++){var u=void 0;if(1==c.nodeType)u=c.getClientRects();else{if(3!=c.nodeType)continue;u=Se(c).getClientRects()}for(var p=0;p<u.length;p++){var h=u[p];if(h.top<=s&&h.bottom>=a){s=Math.max(h.bottom,s),a=Math.min(h.top,a);var f=h.left>e.left?h.left-e.left:h.right<e.left?e.left-h.right:0;if(f<o){n=c,o=f,r=f&&3==n.nodeType?{left:h.right<e.left?h.right:h.left,top:e.top}:e,1==c.nodeType&&f&&(i=l+(e.left>=(h.left+h.right)/2?1:0));continue}}!n&&(e.left>=h.right&&e.top>=h.top||e.left>=h.left&&e.top>=h.bottom)&&(i=l+1)}}return n&&3==n.nodeType?function(t,e){for(var n=t.nodeValue.length,r=document.createRange(),o=0;o<n;o++){r.setEnd(t,o+1),r.setStart(t,o);var i=je(r,1);if(i.top!=i.bottom&&Be(e,i))return{node:t,offset:o+(e.left>=(i.left+i.right)/2?1:0)}}return{node:t,offset:0}}(n,r):!n||o&&1==n.nodeType?{node:t,offset:i}:Pe(n,r)}function Be(t,e){return t.left>=e.left-1&&t.left<=e.right+1&&t.top>=e.top-1&&t.top<=e.bottom+1}function $e(t,e){var n,r,o,i,s=t.root;if(s.caretPositionFromPoint)try{var a=s.caretPositionFromPoint(e.left,e.top);a&&(o=(n=a).offsetNode,i=n.offset)}catch(t){}if(!o&&s.caretRangeFromPoint){var c=s.caretRangeFromPoint(e.left,e.top);c&&(o=(r=c).startContainer,i=r.startOffset)}var l,u=s.elementFromPoint(e.left,e.top+1);if(!u||!t.dom.contains(1!=u.nodeType?u.parentNode:u)){var p=t.dom.getBoundingClientRect();if(!Be(e,p))return null;if(!(u=function t(e,n,r){var o=e.childNodes.length;if(o&&r.top<r.bottom)for(var i=Math.max(0,Math.min(o-1,Math.floor(o*(n.top-r.top)/(r.bottom-r.top))-2)),s=i;;){var a=e.childNodes[s];if(1==a.nodeType)for(var c=a.getClientRects(),l=0;l<c.length;l++){var u=c[l];if(Be(n,u))return t(a,n,u)}if((s=(s+1)%o)==i)break}return e}(t.dom,e,p)))return null}if(u=function(t,e){var n=t.parentNode;return n&&/^li$/i.test(n.nodeName)&&e.left<t.getBoundingClientRect().left?n:t}(u,e),o){if(ve.gecko&&1==o.nodeType&&(i=Math.min(i,o.childNodes.length))<o.childNodes.length){var h,f=o.childNodes[i];"IMG"==f.nodeName&&(h=f.getBoundingClientRect()).right<=e.left&&h.bottom>e.top&&i++}o==t.dom&&i==o.childNodes.length-1&&1==o.lastChild.nodeType&&e.top>o.lastChild.getBoundingClientRect().bottom?l=t.state.doc.content.size:0!=i&&1==o.nodeType&&"BR"==o.childNodes[i-1].nodeName||(l=function(t,e,n,r){for(var o=-1,i=e;i!=t.dom;){var s=t.docView.nearestDesc(i,!0);if(!s)return null;if(s.node.isBlock&&s.parent){var a=s.dom.getBoundingClientRect();if(a.left>r.left||a.top>r.top)o=s.posBefore;else{if(!(a.right<r.left||a.bottom<r.top))break;o=s.posAfter}}i=s.dom.parentNode}return o>-1?o:t.docView.posFromDOM(e,n)}(t,o,i,e))}null==l&&(l=function(t,e,n){var r=Pe(e,n),o=r.node,i=r.offset,s=-1;if(1==o.nodeType&&!o.firstChild){var a=o.getBoundingClientRect();s=a.left!=a.right&&n.left>(a.left+a.right)/2?1:-1}return t.docView.posFromDOM(o,i,s)}(t,u,e));var d=t.docView.nearestDesc(u,!0);return{pos:l,inside:d?d.posAtStart-d.border:-1}}function je(t,e){var n=t.getClientRects();return n.length?n[e<0?0:n.length-1]:t.getBoundingClientRect()}function Ve(t,e){var n=t.docView.domFromPos(e),r=n.node,o=n.offset;if(3==r.nodeType&&(ve.chrome||ve.gecko)){var i=je(Se(r,o,o),0);if(ve.gecko&&o&&/\s/.test(r.nodeValue[o-1])&&o<r.nodeValue.length){var s=je(Se(r,o-1,o-1),-1);if(Math.abs(s.left-i.left)<1&&s.top==i.top){var a=je(Se(r,o,o+1),-1);return Ue(a,a.left<s.left)}}return i}if(1==r.nodeType&&!t.state.doc.resolve(e).parent.inlineContent){var c,l=!0;if(o<r.childNodes.length){var u=r.childNodes[o];1==u.nodeType&&(c=u.getBoundingClientRect())}if(!c&&o){var p=r.childNodes[o-1];1==p.nodeType&&(c=p.getBoundingClientRect(),l=!1)}return function(t,e){if(0==t.height)return t;var n=e?t.top:t.bottom;return{top:n,bottom:n,left:t.left,right:t.right}}(c||r.getBoundingClientRect(),l)}for(var h=-1;h<2;h+=2)if(h<0&&o){var f=void 0,d=3==r.nodeType?Se(r,o-1,o):3==(f=r.childNodes[o-1]).nodeType?Se(f):1==f.nodeType&&"BR"!=f.nodeName?f:null;if(d){var m=je(d,1);if(m.top<m.bottom)return Ue(m,!1)}}else if(h>0&&o<Ee(r)){var g=void 0,v=3==r.nodeType?Se(r,o,o+1):3==(g=r.childNodes[o]).nodeType?Se(g):1==g.nodeType?g:null;if(v){var y=je(v,-1);if(y.top<y.bottom)return Ue(y,!0)}}return Ue(je(3==r.nodeType?Se(r):r,0),!1)}function Ue(t,e){if(0==t.width)return t;var n=e?t.left:t.right;return{top:t.top,bottom:t.bottom,left:n,right:n}}function Je(t,e,n){var r=t.state,o=t.root.activeElement;r!=e&&t.updateState(e),o!=t.dom&&t.focus();try{return n()}finally{r!=e&&t.updateState(r),o!=t.dom&&o.focus()}}var Ze=/[\u0590-\u08ac]/;var We=null,He=null,Ge=!1;function Ke(t,e,n){return We==e&&He==n?Ge:(We=e,He=n,Ge="up"==n||"down"==n?function(t,e,n){var r=e.selection,o="up"==n?r.$anchor.min(r.$head):r.$anchor.max(r.$head);return Je(t,e,(function(){for(var e=t.docView.domFromPos(o.pos).node;;){var r=t.docView.nearestDesc(e,!0);if(!r)break;if(r.node.isBlock){e=r.dom;break}e=r.dom.parentNode}for(var i=Ve(t,o.pos),s=e.firstChild;s;s=s.nextSibling){var a=void 0;if(1==s.nodeType)a=s.getClientRects();else{if(3!=s.nodeType)continue;a=Se(s,0,s.nodeValue.length).getClientRects()}for(var c=0;c<a.length;c++){var l=a[c];if(l.bottom>l.top&&("up"==n?l.bottom<i.top+1:l.top>i.bottom-1))return!1}}return!0}))}(t,e,n):function(t,e,n){var r=e.selection.$head;if(!r.parent.isTextblock)return!1;var o=r.parentOffset,i=!o,s=o==r.parent.content.size,a=getSelection();return Ze.test(r.parent.textContent)&&a.modify?Je(t,e,(function(){var e=a.getRangeAt(0),o=a.focusNode,i=a.focusOffset,s=a.caretBidiLevel;a.modify("move",n,"character");var c=!(r.depth?t.docView.domAfterPos(r.before()):t.dom).contains(1==a.focusNode.nodeType?a.focusNode:a.focusNode.parentNode)||o==a.focusNode&&i==a.focusOffset;return a.removeAllRanges(),a.addRange(e),null!=s&&(a.caretBidiLevel=s),c})):"left"==n||"backward"==n?i:s}(t,e,n))}var Ye=function(t,e,n,r){this.parent=t,this.children=e,this.dom=n,n.pmViewDesc=this,this.contentDOM=r,this.dirty=0},Qe={beforePosition:{configurable:!0},size:{configurable:!0},border:{configurable:!0},posBefore:{configurable:!0},posAtStart:{configurable:!0},posAfter:{configurable:!0},posAtEnd:{configurable:!0},contentLost:{configurable:!0}};Ye.prototype.matchesWidget=function(){return!1},Ye.prototype.matchesMark=function(){return!1},Ye.prototype.matchesNode=function(){return!1},Ye.prototype.matchesHack=function(){return!1},Qe.beforePosition.get=function(){return!1},Ye.prototype.parseRule=function(){return null},Ye.prototype.stopEvent=function(){return!1},Qe.size.get=function(){for(var t=0,e=0;e<this.children.length;e++)t+=this.children[e].size;return t},Qe.border.get=function(){return 0},Ye.prototype.destroy=function(){this.parent=null,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=null);for(var t=0;t<this.children.length;t++)this.children[t].destroy()},Ye.prototype.posBeforeChild=function(t){for(var e=0,n=this.posAtStart;e<this.children.length;e++){var r=this.children[e];if(r==t)return n;n+=r.size}},Qe.posBefore.get=function(){return this.parent.posBeforeChild(this)},Qe.posAtStart.get=function(){return this.parent?this.parent.posBeforeChild(this)+this.border:0},Qe.posAfter.get=function(){return this.posBefore+this.size},Qe.posAtEnd.get=function(){return this.posAtStart+this.size-2*this.border},Ye.prototype.localPosFromDOM=function(t,e,n){if(this.contentDOM&&this.contentDOM.contains(1==t.nodeType?t:t.parentNode)){if(n<0){var r,o;if(t==this.contentDOM)r=t.childNodes[e-1];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;r=t.previousSibling}for(;r&&(!(o=r.pmViewDesc)||o.parent!=this);)r=r.previousSibling;return r?this.posBeforeChild(o)+o.size:this.posAtStart}var i,s;if(t==this.contentDOM)i=t.childNodes[e];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;i=t.nextSibling}for(;i&&(!(s=i.pmViewDesc)||s.parent!=this);)i=i.nextSibling;return i?this.posBeforeChild(s):this.posAtEnd}var a;if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))a=2&t.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==e)for(var c=t;;c=c.parentNode){if(c==this.dom){a=!1;break}if(c.parentNode.firstChild!=c)break}if(null==a&&e==t.childNodes.length)for(var l=t;;l=l.parentNode){if(l==this.dom){a=!0;break}if(l.parentNode.lastChild!=l)break}}return(null==a?n>0:a)?this.posAtEnd:this.posAtStart},Ye.prototype.nearestDesc=function(t,e){for(var n=!0,r=t;r;r=r.parentNode){var o=this.getDesc(r);if(o&&(!e||o.node)){if(!n||!o.nodeDOM||(1==o.nodeDOM.nodeType?o.nodeDOM.contains(t):o.nodeDOM==t))return o;n=!1}}},Ye.prototype.getDesc=function(t){for(var e=t.pmViewDesc,n=e;n;n=n.parent)if(n==this)return e},Ye.prototype.posFromDOM=function(t,e,n){for(var r=t;;r=r.parentNode){var o=this.getDesc(r);if(o)return o.localPosFromDOM(t,e,n)}},Ye.prototype.descAt=function(t){for(var e=0,n=0;e<this.children.length;e++){var r=this.children[e],o=n+r.size;if(n==t&&o!=n){for(;!r.border&&r.children.length;)r=r.children[0];return r}if(t<o)return r.descAt(t-n-r.border);n=o}},Ye.prototype.domFromPos=function(t){if(!this.contentDOM)return{node:this.dom,offset:0};for(var e=0,n=0;;n++){if(e==t){for(;n<this.children.length&&(this.children[n].beforePosition||this.children[n].dom.parentNode!=this.contentDOM);)n++;return{node:this.contentDOM,offset:n==this.children.length?this.contentDOM.childNodes.length:we(this.children[n].dom)}}if(n==this.children.length)throw new Error("Invalid position "+t);var r=this.children[n],o=e+r.size;if(t<o)return r.domFromPos(t-e-r.border);e=o}},Ye.prototype.parseRange=function(t,e,n){if(void 0===n&&(n=0),0==this.children.length)return{node:this.contentDOM,from:t,to:e,fromOffset:0,toOffset:this.contentDOM.childNodes.length};for(var r=-1,o=-1,i=n,s=0;;s++){var a=this.children[s],c=i+a.size;if(-1==r&&t<=c){var l=i+a.border;if(t>=l&&e<=c-a.border&&a.node&&a.contentDOM&&this.contentDOM.contains(a.contentDOM))return a.parseRange(t,e,l);t=i;for(var u=s;u>0;u--){var p=this.children[u-1];if(p.size&&p.dom.parentNode==this.contentDOM&&!p.emptyChildAt(1)){r=we(p.dom)+1;break}t-=p.size}-1==r&&(r=0)}if(r>-1&&e<=c){e=c;for(var h=s+1;h<this.children.length;h++){var f=this.children[h];if(f.size&&f.dom.parentNode==this.contentDOM&&!f.emptyChildAt(-1)){o=we(f.dom);break}e+=f.size}-1==o&&(o=this.contentDOM.childNodes.length);break}i=c}return{node:this.contentDOM,from:t,to:e,fromOffset:r,toOffset:o}},Ye.prototype.emptyChildAt=function(t){if(this.border||!this.contentDOM||!this.children.length)return!1;var e=this.children[t<0?0:this.children.length-1];return 0==e.size||e.emptyChildAt(t)},Ye.prototype.domAfterPos=function(t){var e=this.domFromPos(t),n=e.node,r=e.offset;if(1!=n.nodeType||r==n.childNodes.length)throw new RangeError("No node after pos "+t);return n.childNodes[r]},Ye.prototype.setSelection=function(t,e,n,r){for(var o=Math.min(t,e),i=Math.max(t,e),s=0,a=0;s<this.children.length;s++){var c=this.children[s],l=a+c.size;if(o>a&&i<l)return c.setSelection(t-a-c.border,e-a-c.border,n,r);a=l}var u=this.domFromPos(t),p=this.domFromPos(e),h=n.getSelection(),f=document.createRange();if(r||!Ae(u.node,u.offset,h.anchorNode,h.anchorOffset)||!Ae(p.node,p.offset,h.focusNode,h.focusOffset)){if(h.extend)f.setEnd(u.node,u.offset),f.collapse(!1);else{if(t>e){var d=u;u=p,p=d}f.setEnd(p.node,p.offset),f.setStart(u.node,u.offset)}h.removeAllRanges(),h.addRange(f),h.extend&&h.extend(p.node,p.offset)}},Ye.prototype.ignoreMutation=function(t){return!this.contentDOM&&"selection"!=t.type},Qe.contentLost.get=function(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)},Ye.prototype.markDirty=function(t,e){for(var n=0,r=0;r<this.children.length;r++){var o=this.children[r],i=n+o.size;if(n==i?t<=i&&e>=n:t<i&&e>n){var s=n+o.border,a=i-o.border;if(t>=s&&e<=a)return this.dirty=t==n||e==i?2:1,void(t!=s||e!=a||!o.contentLost&&o.dom.parentNode==this.contentDOM?o.markDirty(t-s,e-s):o.dirty=3);o.dirty=3}n=i}this.dirty=2},Ye.prototype.markParentsDirty=function(){for(var t=this.parent;t;t=t.parent){t.dirty<2&&(t.dirty=2)}},Object.defineProperties(Ye.prototype,Qe);var Xe=[],tn=function(t){function e(e,n,r,o){var i,s=n.type.toDOM;if("function"==typeof s&&(s=s(r,(function(){return i?i.parent?i.parent.posBeforeChild(i):void 0:o}))),!n.type.spec.raw){if(1!=s.nodeType){var a=document.createElement("span");a.appendChild(s),s=a}s.contentEditable=!1,s.classList.add("ProseMirror-widget")}t.call(this,e,Xe,s,null),this.widget=n,i=this}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={beforePosition:{configurable:!0}};return n.beforePosition.get=function(){return this.widget.type.side<0},e.prototype.matchesWidget=function(t){return 0==this.dirty&&t.type.eq(this.widget.type)},e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.stopEvent=function(t){var e=this.widget.spec.stopEvent;return!!e&&e(t)},e.prototype.ignoreMutation=function(t){return"selection"!=t.type||this.widget.spec.ignoreSelection},Object.defineProperties(e.prototype,n),e}(Ye),en=function(t){function e(e,n,r,o){t.call(this,e,Xe,n,null),this.textDOM=r,this.text=o}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0}};return n.size.get=function(){return this.text.length},e.prototype.localPosFromDOM=function(t,e){return t!=this.textDOM?this.posAtStart+(e?this.size:0):this.posAtStart+e},e.prototype.domFromPos=function(t){return{node:this.textDOM,offset:t}},e.prototype.ignoreMutation=function(t){return"characterData"===t.type&&t.target.nodeValue==t.oldValue},Object.defineProperties(e.prototype,n),e}(Ye),nn=function(t){function e(e,n,r,o){t.call(this,e,[],r,o),this.mark=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.create=function(t,n,r,o){var i=o.nodeViews[n.type.name],s=i&&i(n,o,r);return s&&s.dom||(s=pt.renderSpec(document,n.type.spec.toDOM(n,r))),new e(t,n,s.dom,s.contentDOM||s.dom)},e.prototype.parseRule=function(){return{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM}},e.prototype.matchesMark=function(t){return 3!=this.dirty&&this.mark.eq(t)},e.prototype.markDirty=function(e,n){if(t.prototype.markDirty.call(this,e,n),0!=this.dirty){for(var r=this.parent;!r.node;)r=r.parent;r.dirty<this.dirty&&(r.dirty=this.dirty),this.dirty=0}},e.prototype.slice=function(t,n,r){var o=e.create(this.parent,this.mark,!0,r),i=this.children,s=this.size;n<s&&(i=kn(i,n,s,r)),t>0&&(i=kn(i,0,t,r));for(var a=0;a<i.length;a++)i[a].parent=o;return o.children=i,o},e}(Ye),rn=function(t){function e(e,n,r,o,i,s,a,c,l){t.call(this,e,n.isLeaf?Xe:[],i,s),this.nodeDOM=a,this.node=n,this.outerDeco=r,this.innerDeco=o,s&&this.updateChildren(c,l)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0},border:{configurable:!0}};return e.create=function(t,n,r,o,i,s){var a,c,l=i.nodeViews[n.type.name],u=l&&l(n,i,(function(){return c?c.parent?c.parent.posBeforeChild(c):void 0:s}),r),p=u&&u.dom,h=u&&u.contentDOM;if(n.isText)if(p){if(3!=p.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else p=document.createTextNode(n.text);else p||(p=(a=pt.renderSpec(document,n.type.spec.toDOM(n))).dom,h=a.contentDOM);h||n.isText||"BR"==p.nodeName||(p.hasAttribute("contenteditable")||(p.contentEditable=!1),n.type.spec.draggable&&(p.draggable=!0));var f=p;return p=dn(p,r,n),u?c=new cn(t,n,r,o,p,h,f,u,i,s+1):n.isText?new sn(t,n,r,o,p,f,i):new e(t,n,r,o,p,h,f,i,s+1)},e.prototype.parseRule=function(){var t=this;if(this.node.type.spec.reparseInView)return null;var e={node:this.node.type.name,attrs:this.node.attrs};return this.node.type.spec.code&&(e.preserveWhitespace="full"),this.contentDOM&&!this.contentLost?e.contentElement=this.contentDOM:e.getContent=function(){return t.contentDOM?i.empty:t.node.content},e},e.prototype.matchesNode=function(t,e,n){return 0==this.dirty&&t.eq(this.node)&&mn(e,this.outerDeco)&&n.eq(this.innerDeco)},n.size.get=function(){return this.node.nodeSize},n.border.get=function(){return this.node.isLeaf?0:1},e.prototype.updateChildren=function(t,e){var n=this,r=this.node.inlineContent,o=e,i=r&&t.composing&&this.localCompositionNode(t,e),s=new vn(this,i&&i.node);!function(t,e,n,r){var o=e.locals(t),i=0;if(0==o.length){for(var s=0;s<t.childCount;s++){var a=t.child(s);r(a,o,e.forChild(i,a),s),i+=a.nodeSize}return}for(var c=0,l=[],u=null,p=0;;){if(c<o.length&&o[c].to==i){for(var h=o[c++],f=void 0;c<o.length&&o[c].to==i;)(f||(f=[h])).push(o[c++]);if(f){f.sort(yn);for(var d=0;d<f.length;d++)n(f[d],p,!!u)}else n(h,p,!!u)}var m=void 0,g=void 0;if(u)g=-1,m=u,u=null;else{if(!(p<t.childCount))break;g=p,m=t.child(p++)}for(var v=0;v<l.length;v++)l[v].to<=i&&l.splice(v--,1);for(;c<o.length&&o[c].from==i;)l.push(o[c++]);var y=i+m.nodeSize;if(m.isText){var k=y;c<o.length&&o[c].from<k&&(k=o[c].from);for(var _=0;_<l.length;_++)l[_].to<k&&(k=l[_].to);k<y&&(u=m.cut(k-i),m=m.cut(0,k-i),y=k,g=-1)}r(m,l.length?l.slice():Xe,e.forChild(i,m),g),i=y}}(this.node,this.innerDeco,(function(e,i,a){e.spec.marks?s.syncToMarks(e.spec.marks,r,t):e.type.side>=0&&!a&&s.syncToMarks(i==n.node.childCount?u.none:n.node.child(i).marks,r,t),s.placeWidget(e,t,o)}),(function(e,n,i,a){s.syncToMarks(e.marks,r,t),s.findNodeMatch(e,n,i,a)||s.updateNextNode(e,n,i,t,a)||s.addNode(e,n,i,t,o),o+=e.nodeSize})),s.syncToMarks(Xe,r,t),this.node.isTextblock&&s.addTextblockHacks(),s.destroyRest(),(s.changed||2==this.dirty)&&(i&&this.protectLocalComposition(t,i),this.renderChildren())},e.prototype.renderChildren=function(){!function t(e,n){for(var r=e.firstChild,o=0;o<n.length;o++){var i=n[o],s=i.dom;if(s.parentNode==e){for(;s!=r;)r=gn(r);r=r.nextSibling}else e.insertBefore(s,r);if(i instanceof nn){var a=r?r.previousSibling:e.lastChild;t(i.contentDOM,i.children),r=a?a.nextSibling:e.firstChild}}for(;r;)r=gn(r)}(this.contentDOM,this.children),ve.ios&&function(t){if("UL"==t.nodeName||"OL"==t.nodeName){var e=t.style.cssText;t.style.cssText=e+"; list-style: square !important",window.getComputedStyle(t).listStyle,t.style.cssText=e}}(this.dom)},e.prototype.localCompositionNode=function(t,e){var n=t.state.selection,r=n.from,o=n.to;if(!(!(t.state.selection instanceof Yt)||r<e||o>e+this.node.content.size)){var i=t.root.getSelection(),s=function(t,e){for(;;){if(3==t.nodeType)return t;if(1==t.nodeType&&e>0){if(t.childNodes.length>e&&3==t.childNodes[e].nodeType)return t.childNodes[e];t=t.childNodes[e-1],e=Ee(t)}else{if(!(1==t.nodeType&&e<t.childNodes.length))return null;t=t.childNodes[e],e=0}}}(i.focusNode,i.focusOffset);if(s&&this.dom.contains(s.parentNode)){var a=s.nodeValue,c=function(t,e,n,r){for(var o=0,i=0;o<t.childCount&&i<=r;){var s=t.child(o++),a=i;if(i+=s.nodeSize,s.isText){for(var c=s.text;o<t.childCount;){var l=t.child(o++);if(i+=l.nodeSize,!l.isText)break;c+=l.text}if(i>=n){var u=c.lastIndexOf(e,r-a);if(u>=0&&u+e.length+a>=n)return a+u}}}return-1}(this.node.content,a,r-e,o-e);return c<0?null:{node:s,pos:c,text:a}}}},e.prototype.protectLocalComposition=function(t,e){var n=e.node,r=e.pos,o=e.text;if(!this.getDesc(n)){for(var i=n;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=null)}var s=new en(this,i,n,o);t.compositionNodes.push(s),this.children=kn(this.children,r,r+o.length,t,s)}},e.prototype.update=function(t,e,n,r){return!(3==this.dirty||!t.sameMarkup(this.node))&&(this.updateInner(t,e,n,r),!0)},e.prototype.updateInner=function(t,e,n,r){this.updateOuterDeco(e),this.node=t,this.innerDeco=n,this.contentDOM&&this.updateChildren(r,this.posAtStart),this.dirty=0},e.prototype.updateOuterDeco=function(t){if(!mn(t,this.outerDeco)){var e=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=hn(this.dom,this.nodeDOM,pn(this.outerDeco,this.node,e),pn(t,this.node,e)),this.dom!=n&&(n.pmViewDesc=null,this.dom.pmViewDesc=this),this.outerDeco=t}},e.prototype.selectNode=function(){this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)},e.prototype.deselectNode=function(){this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!1)},Object.defineProperties(e.prototype,n),e}(Ye);function on(t,e,n,r,o){return dn(r,e,t),new rn(null,t,e,n,r,r,r,o,0)}var sn=function(t){function e(e,n,r,o,i,s,a){t.call(this,e,n,r,o,i,null,s,a)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parseRule=function(){return{skip:this.nodeDOM.parentNode||!0}},e.prototype.update=function(t,e){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!t.sameMarkup(this.node))&&(this.updateOuterDeco(e),0==this.dirty&&t.text==this.node.text||t.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=t.text),this.node=t,this.dirty=0,!0)},e.prototype.inParent=function(){for(var t=this.parent.contentDOM,e=this.nodeDOM;e;e=e.parentNode)if(e==t)return!0;return!1},e.prototype.domFromPos=function(t){return{node:this.nodeDOM,offset:t}},e.prototype.localPosFromDOM=function(e,n,r){return e==this.nodeDOM?this.posAtStart+Math.min(n,this.node.text.length):t.prototype.localPosFromDOM.call(this,e,n,r)},e.prototype.ignoreMutation=function(t){return"characterData"!=t.type&&"selection"!=t.type},e.prototype.slice=function(t,n,r){var o=this.node.cut(t,n),i=document.createTextNode(o.text);return new e(this.parent,o,this.outerDeco,this.innerDeco,i,i,r)},e}(rn),an=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.matchesHack=function(){return 0==this.dirty},e}(Ye),cn=function(t){function e(e,n,r,o,i,s,a,c,l,u){t.call(this,e,n,r,o,i,s,a,l,u),this.spec=c}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.update=function(e,n,r,o){if(3==this.dirty)return!1;if(this.spec.update){var i=this.spec.update(e,n);return i&&this.updateInner(e,n,r,o),i}return!(!this.contentDOM&&!e.isLeaf)&&t.prototype.update.call(this,e,n,r,o)},e.prototype.selectNode=function(){this.spec.selectNode?this.spec.selectNode():t.prototype.selectNode.call(this)},e.prototype.deselectNode=function(){this.spec.deselectNode?this.spec.deselectNode():t.prototype.deselectNode.call(this)},e.prototype.setSelection=function(e,n,r,o){this.spec.setSelection?this.spec.setSelection(e,n,r):t.prototype.setSelection.call(this,e,n,r,o)},e.prototype.destroy=function(){this.spec.destroy&&this.spec.destroy(),t.prototype.destroy.call(this)},e.prototype.stopEvent=function(t){return!!this.spec.stopEvent&&this.spec.stopEvent(t)},e.prototype.ignoreMutation=function(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):t.prototype.ignoreMutation.call(this,e)},e}(rn);function ln(t){t&&(this.nodeName=t)}ln.prototype=Object.create(null);var un=[new ln];function pn(t,e,n){if(0==t.length)return un;for(var r=n?un[0]:new ln,o=[r],i=0;i<t.length;i++){var s=t[i].type.attrs,a=r;if(s)for(var c in s.nodeName&&o.push(a=new ln(s.nodeName)),s){var l=s[c];null!=l&&(n&&1==o.length&&o.push(a=r=new ln(e.isInline?"span":"div")),"class"==c?a.class=(a.class?a.class+" ":"")+l:"style"==c?a.style=(a.style?a.style+";":"")+l:"nodeName"!=c&&(a[c]=l))}}return o}function hn(t,e,n,r){if(n==un&&r==un)return e;for(var o=e,i=0;i<r.length;i++){var s=r[i],a=n[i];if(i){var c=void 0;a&&a.nodeName==s.nodeName&&o!=t&&(c=o.parentNode)&&c.tagName.toLowerCase()==s.nodeName||((c=document.createElement(s.nodeName)).appendChild(o),a=un[0]),o=c}fn(o,a||un[0],s)}return o}function fn(t,e,n){for(var r in e)"class"==r||"style"==r||"nodeName"==r||r in n||t.removeAttribute(r);for(var o in n)"class"!=o&&"style"!=o&&"nodeName"!=o&&n[o]!=e[o]&&t.setAttribute(o,n[o]);if(e.class!=n.class){for(var i=e.class?e.class.split(" "):Xe,s=n.class?n.class.split(" "):Xe,a=0;a<i.length;a++)-1==s.indexOf(i[a])&&t.classList.remove(i[a]);for(var c=0;c<s.length;c++)-1==i.indexOf(s[c])&&t.classList.add(s[c])}if(e.style!=n.style){if(e.style)for(var l,u=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;l=u.exec(e.style);)t.style.removeProperty(l[1]);n.style&&(t.style.cssText+=n.style)}}function dn(t,e,n){return hn(t,t,un,pn(e,n,1!=t.nodeType))}function mn(t,e){if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].type.eq(e[n].type))return!1;return!0}function gn(t){var e=t.nextSibling;return t.parentNode.removeChild(t),e}var vn=function(t,e){this.top=t,this.lock=e,this.index=0,this.stack=[],this.changed=!1;var n=function(t,e){for(var n=[],r=t.childCount,o=e.length-1;r>0&&o>=0;o--){var i=e[o],s=i.node;if(s){if(s!=t.child(r-1))break;n.push(i),--r}}return{nodes:n.reverse(),offset:r}}(t.node.content,t.children);this.preMatched=n.nodes,this.preMatchOffset=n.offset};function yn(t,e){return t.type.side-e.type.side}function kn(t,e,n,r,o){for(var i=[],s=0,a=0;s<t.length;s++){var c=t[s],l=a,u=a+=c.size;l>=n||u<=e?i.push(c):(l<e&&i.push(c.slice(0,e-l,r)),o&&(i.push(o),o=null),u>n&&i.push(c.slice(n-l,c.size,r)))}return i}function _n(t,e){var n=t.selection,r=n.$anchor,o=n.$head,i=e>0?r.max(o):r.min(o),s=i.parent.inlineContent?i.depth?t.doc.resolve(e>0?i.after():i.before()):null:i;return s&&Ht.findFrom(s,e)}function bn(t,e){return t.dispatch(t.state.tr.setSelection(e).scrollIntoView()),!0}function xn(t,e,n){var r=t.state.selection;if(r instanceof Yt){if(!r.empty||n.indexOf("s")>-1)return!1;if(t.endOfTextblock(e>0?"right":"left")){var o=_n(t.state,e);return!!(o&&o instanceof Xt)&&bn(t,o)}var i,s=r.$head,a=s.textOffset?null:e<0?s.nodeBefore:s.nodeAfter;if(!a||a.isText)return!1;var c=e<0?s.pos-a.nodeSize:s.pos;return!!(a.isAtom||(i=t.docView.descAt(c))&&!i.contentDOM)&&(Xt.isSelectable(a)?bn(t,new Xt(e<0?t.state.doc.resolve(s.pos-a.nodeSize):s)):!!ve.webkit&&bn(t,new Yt(t.state.doc.resolve(e<0?c:c+a.nodeSize))))}if(r instanceof Xt&&r.node.isInline)return bn(t,new Yt(e>0?r.$to:r.$from));var l=_n(t.state,e);return!!l&&bn(t,l)}function wn(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Cn(t){var e=t.pmViewDesc;return e&&0==e.size&&(t.nextSibling||"BR"!=t.nodeName)}function Sn(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){var o,i,s=!1;for(ve.gecko&&1==n.nodeType&&r<wn(n)&&Cn(n.childNodes[r])&&(s=!0);;)if(r>0){if(1!=n.nodeType)break;var a=n.childNodes[r-1];if(Cn(a))o=n,i=--r;else{if(3!=a.nodeType)break;r=(n=a).nodeValue.length}}else{if(Mn(n))break;for(var c=n.previousSibling;c&&Cn(c);)o=n.parentNode,i=we(c),c=c.previousSibling;if(c)r=wn(n=c);else{if((n=n.parentNode)==t.dom)break;r=0}}s?Dn(t,e,n,r):o&&Dn(t,e,o,i)}}function An(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){for(var o,i,s=wn(n);;)if(r<s){if(1!=n.nodeType)break;if(!Cn(n.childNodes[r]))break;o=n,i=++r}else{if(Mn(n))break;for(var a=n.nextSibling;a&&Cn(a);)o=a.parentNode,i=we(a)+1,a=a.nextSibling;if(a)r=0,s=wn(n=a);else{if((n=n.parentNode)==t.dom)break;r=s=0}}o&&Dn(t,e,o,i)}}function Mn(t){var e=t.pmViewDesc;return e&&e.node&&e.node.isBlock}function Dn(t,e,n,r){if(Te(e)){var o=document.createRange();o.setEnd(n,r),o.setStart(n,r),e.removeAllRanges(),e.addRange(o)}else e.extend&&e.extend(n,r);t.domObserver.setCurSelection()}function En(t,e,n){var r=t.state.selection;if(r instanceof Yt&&!r.empty||n.indexOf("s")>-1)return!1;var o=r.$from,i=r.$to;if(!o.parent.inlineContent||t.endOfTextblock(e<0?"up":"down")){var s=_n(t.state,e);if(s&&s instanceof Xt)return bn(t,s)}if(!o.parent.inlineContent){var a=Ht.findFrom(e<0?o:i,e);return!a||bn(t,a)}return!1}function On(t,e){if(!(t.state.selection instanceof Yt))return!0;var n=t.state.selection,r=n.$head,o=n.$anchor,i=n.empty;if(!r.sameParent(o))return!0;if(!i)return!1;if(t.endOfTextblock(e>0?"forward":"backward"))return!0;var s=!r.textOffset&&(e<0?r.nodeBefore:r.nodeAfter);if(s&&!s.isText){var a=t.state.tr;return e<0?a.delete(r.pos-s.nodeSize,r.pos):a.delete(r.pos,r.pos+s.nodeSize),t.dispatch(a),!0}return!1}function Tn(t,e,n){t.domObserver.stop(),e.contentEditable=n,t.domObserver.start()}function zn(t,e){var n=e.keyCode,r=function(t){var e="";return t.ctrlKey&&(e+="c"),t.metaKey&&(e+="m"),t.altKey&&(e+="a"),t.shiftKey&&(e+="s"),e}(e);return 8==n||ve.mac&&72==n&&"c"==r?On(t,-1)||Sn(t):46==n||ve.mac&&68==n&&"c"==r?On(t,1)||An(t):13==n&&!ve.ios||27==n||(37==n?xn(t,-1,r)||Sn(t):39==n?xn(t,1,r)||An(t):38==n?En(t,-1,r)||Sn(t):40==n?function(t){if(ve.chrome&&!(t.state.selection.$head.parentOffset>0)){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n&&1==n.nodeType&&0==r&&n.firstChild&&"false"==n.firstChild.contentEditable){var o=n.firstChild;Tn(t,o,!0),setTimeout((function(){return Tn(t,o,!1)}),20)}}}(t)||En(t,1,r)||An(t):r==(ve.mac?"m":"c")&&(66==n||73==n||89==n||90==n))}function In(t,e){var n,r,o=t.root.getSelection(),i=t.state.doc,s=t.docView.nearestDesc(o.focusNode),a=s&&0==s.size,c=t.docView.posFromDOM(o.focusNode,o.focusOffset),l=i.resolve(c);if(Te(o)){for(n=l;s&&!s.node;)s=s.parent;if(s&&s.node.isAtom&&Xt.isSelectable(s.node)&&s.parent&&(!s.node.isInline||!function(t,e,n){for(var r=0==e,o=e==Ee(t);r||o;){if(t==n)return!0;var i=we(t);if(!(t=t.parentNode))return!1;r=r&&0==i,o=o&&i==Ee(t)}}(o.focusNode,o.focusOffset,s.dom))){var u=s.posBefore;r=new Xt(c==u?l:i.resolve(u))}}else n=i.resolve(t.docView.posFromDOM(o.anchorNode,o.anchorOffset));r||(r=$n(t,n,l,"pointer"==e||t.state.selection.head<l.pos&&!a?1:-1));return r}function Nn(t,e){var n=t.state.selection;if(Pn(t,n),t.editable?t.hasFocus():jn(t)&&document.activeElement.contains(t.dom)){if(t.domObserver.disconnectSelection(),t.cursorWrapper)!function(t){var e=t.root.getSelection(),n=document.createRange(),r=t.cursorWrapper.dom,o="IMG"==r.nodeName;o?n.setEnd(r.parentNode,we(r)+1):n.setEnd(r,0);n.collapse(!1),e.removeAllRanges(),e.addRange(n),!o&&!t.state.selection.visible&&ve.ie&&ve.ie_version<=11&&(r.disabled=!0,r.disabled=!1)}(t);else{var r,o,i=n.anchor,s=n.head;!Rn||n instanceof Yt||(n.$from.parent.inlineContent||(r=Ln(t,n.from)),n.empty||n.$from.parent.inlineContent||(o=Ln(t,n.to))),t.docView.setSelection(i,s,t.root,e),Rn&&(r&&Fn(r),o&&Fn(o)),n.visible?t.dom.classList.remove("ProseMirror-hideselection"):i!=s&&(t.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(t){var e=t.dom.ownerDocument;e.removeEventListener("selectionchange",t.hideSelectionGuard);var n=t.root.getSelection(),r=n.anchorNode,o=n.anchorOffset;e.addEventListener("selectionchange",t.hideSelectionGuard=function(){n.anchorNode==r&&n.anchorOffset==o||(e.removeEventListener("selectionchange",t.hideSelectionGuard),t.dom.classList.remove("ProseMirror-hideselection"))})}(t))}t.domObserver.setCurSelection(),t.domObserver.connectSelection()}}vn.prototype.getPreMatch=function(t){return t>=this.preMatchOffset?this.preMatched[t-this.preMatchOffset]:null},vn.prototype.destroyBetween=function(t,e){if(t!=e){for(var n=t;n<e;n++)this.top.children[n].destroy();this.top.children.splice(t,e-t),this.changed=!0}},vn.prototype.destroyRest=function(){this.destroyBetween(this.index,this.top.children.length)},vn.prototype.syncToMarks=function(t,e,n){for(var r=0,o=this.stack.length>>1,i=Math.min(o,t.length);r<i&&(r==o-1?this.top:this.stack[r+1<<1]).matchesMark(t[r])&&!1!==t[r].type.spec.spanning;)r++;for(;r<o;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),o--;for(;o<t.length;){this.stack.push(this.top,this.index+1);for(var s=-1,a=this.index;a<Math.min(this.index+3,this.top.children.length);a++)if(this.top.children[a].matchesMark(t[o])){s=a;break}if(s>-1)s>this.index&&(this.changed=!0,this.destroyBetween(this.index,s)),this.top=this.top.children[this.index];else{var c=nn.create(this.top,t[o],e,n);this.top.children.splice(this.index,0,c),this.top=c,this.changed=!0}this.index=0,o++}},vn.prototype.findNodeMatch=function(t,e,n,r){var o=-1,i=r<0?void 0:this.getPreMatch(r),s=this.top.children;if(i&&i.matchesNode(t,e,n))o=s.indexOf(i);else for(var a=this.index,c=Math.min(s.length,a+5);a<c;a++){var l=s[a];if(l.matchesNode(t,e,n)&&this.preMatched.indexOf(l)<0){o=a;break}}return!(o<0)&&(this.destroyBetween(this.index,o),this.index++,!0)},vn.prototype.updateNextNode=function(t,e,n,r,o){if(this.index==this.top.children.length)return!1;var i=this.top.children[this.index];if(i instanceof rn){var s=this.preMatched.indexOf(i);if(s>-1&&s+this.preMatchOffset!=o)return!1;var a=i.dom;if(!(this.lock&&(a==this.lock||1==a.nodeType&&a.contains(this.lock.parentNode))&&!(t.isText&&i.node&&i.node.isText&&i.nodeDOM.nodeValue==t.text&&3!=i.dirty&&mn(e,i.outerDeco)))&&i.update(t,e,n,r))return i.dom!=a&&(this.changed=!0),this.index++,!0}return!1},vn.prototype.addNode=function(t,e,n,r,o){this.top.children.splice(this.index++,0,rn.create(this.top,t,e,n,r,o)),this.changed=!0},vn.prototype.placeWidget=function(t,e,n){if(this.index<this.top.children.length&&this.top.children[this.index].matchesWidget(t))this.index++;else{var r=new tn(this.top,t,e,n);this.top.children.splice(this.index++,0,r),this.changed=!0}},vn.prototype.addTextblockHacks=function(){for(var t=this.top.children[this.index-1];t instanceof nn;)t=t.children[t.children.length-1];if(!t||!(t instanceof sn)||/\n$/.test(t.node.text))if(this.index<this.top.children.length&&this.top.children[this.index].matchesHack())this.index++;else{var e=document.createElement("br");this.top.children.splice(this.index++,0,new an(this.top,Xe,e,null)),this.changed=!0}};var Rn=ve.safari||ve.chrome&&ve.chrome_version<63;function Ln(t,e){var n=t.docView.domFromPos(e),r=n.node,o=n.offset,i=o<r.childNodes.length?r.childNodes[o]:null,s=o?r.childNodes[o-1]:null;if(ve.safari&&i&&"false"==i.contentEditable)return qn(i);if(!(i&&"false"!=i.contentEditable||s&&"false"!=s.contentEditable)){if(i)return qn(i);if(s)return qn(s)}}function qn(t){return t.contentEditable="true",ve.safari&&t.draggable&&(t.draggable=!1,t.wasDraggable=!0),t}function Fn(t){t.contentEditable="false",t.wasDraggable&&(t.draggable=!0,t.wasDraggable=null)}function Pn(t,e){if(e instanceof Xt){var n=t.docView.descAt(e.from);n!=t.lastSelectedViewDesc&&(Bn(t),n&&n.selectNode(),t.lastSelectedViewDesc=n)}else Bn(t)}function Bn(t){t.lastSelectedViewDesc&&(t.lastSelectedViewDesc.parent&&t.lastSelectedViewDesc.deselectNode(),t.lastSelectedViewDesc=null)}function $n(t,e,n,r){return t.someProp("createSelectionBetween",(function(r){return r(t,e,n)}))||Yt.between(e,n,r)}function jn(t){var e=t.root.getSelection();if(!e.anchorNode)return!1;try{return t.dom.contains(3==e.anchorNode.nodeType?e.anchorNode.parentNode:e.anchorNode)&&(t.editable||t.dom.contains(3==e.focusNode.nodeType?e.focusNode.parentNode:e.focusNode))}catch(t){return!1}}function Vn(t){var e=t.pmViewDesc;if(e)return e.parseRule();if("BR"==t.nodeName&&t.parentNode){if(ve.safari&&/^(ul|ol)$/i.test(t.parentNode.nodeName)){var n=document.createElement("div");return n.appendChild(document.createElement("li")),{skip:n}}if(t.parentNode.lastChild==t||ve.safari&&/^(tr|table)$/i.test(t.parentNode.nodeName))return{ignore:!0}}else if("IMG"==t.nodeName&&t.getAttribute("mark-placeholder"))return{ignore:!0}}function Un(t,e,n,r,o){if(e<0){var s=t.lastSelectionTime>Date.now()-50?t.lastSelectionOrigin:null,a=In(t,s);if(!t.state.selection.eq(a)){var c=t.state.tr.setSelection(a);"pointer"==s?c.setMeta("pointer",!0):"key"==s&&c.scrollIntoView(),t.dispatch(c)}}else{var l=t.state.doc.resolve(e),u=l.sharedDepth(n);e=l.before(u+1),n=t.state.doc.resolve(n).after(u+1);var p,h,f=t.state.selection,d=function(t,e,n){var r=t.docView.parseRange(e,n),o=r.node,i=r.fromOffset,s=r.toOffset,a=r.from,c=r.to,l=t.root.getSelection(),u=null,p=l.anchorNode;if(p&&t.dom.contains(1==p.nodeType?p:p.parentNode)&&(u=[{node:p,offset:l.anchorOffset}],Te(l)||u.push({node:l.focusNode,offset:l.focusOffset})),ve.chrome&&8===t.lastKeyCode)for(var h=s;h>i;h--){var f=o.childNodes[h-1],d=f.pmViewDesc;if("BR"==f.nodeType&&!d){s=h;break}if(!d||d.size)break}var m=t.state.doc,g=t.someProp("domParser")||tt.fromSchema(t.state.schema),v=m.resolve(a),y=null,k=g.parse(o,{topNode:v.parent,topMatch:v.parent.contentMatchAt(v.index()),topOpen:!0,from:i,to:s,preserveWhitespace:!v.parent.type.spec.code||"full",editableContent:!0,findPositions:u,ruleFromNode:Vn,context:v});if(u&&null!=u[0].pos){var _=u[0].pos,b=u[1]&&u[1].pos;null==b&&(b=_),y={anchor:_+a,head:b+a}}return{doc:k,sel:y,from:a,to:c}}(t,e,n),m=t.state.doc,g=m.slice(d.from,d.to);8===t.lastKeyCode&&Date.now()-100<t.lastKeyCodeTime?(p=t.state.selection.to,h="end"):(p=t.state.selection.from,h="start"),t.lastKeyCode=null;var v=function(t,e,n,r,o){var i=t.findDiffStart(e,n);if(null==i)return null;var s=t.findDiffEnd(e,n+t.size,n+e.size),a=s.a,c=s.b;if("end"==o){var l=Math.max(0,i-Math.min(a,c));r-=a+l-i}if(a<i&&t.size<e.size){c=(i-=r<=i&&r>=a?i-r:0)+(c-a),a=i}else if(c<i){a=(i-=r<=i&&r>=c?i-r:0)+(a-c),c=i}return{start:i,endA:a,endB:c}}(g.content,d.doc.content,d.from,p,h);if(!v){if(!(r&&f instanceof Yt&&!f.empty&&f.$head.sameParent(f.$anchor))||t.composing||d.sel&&d.sel.anchor!=d.sel.head){if(d.sel){var y=Jn(t,t.state.doc,d.sel);y&&!y.eq(t.state.selection)&&t.dispatch(t.state.tr.setSelection(y))}return}v={start:f.from,endA:f.to,endB:f.to}}t.domChangeCount++,t.state.selection.from<t.state.selection.to&&v.start==v.endB&&t.state.selection instanceof Yt&&(v.start>t.state.selection.from&&v.start<=t.state.selection.from+2?v.start=t.state.selection.from:v.endA<t.state.selection.to&&v.endA>=t.state.selection.to-2&&(v.endB+=t.state.selection.to-v.endA,v.endA=t.state.selection.to)),ve.ie&&ve.ie_version<=11&&v.endB==v.start+1&&v.endA==v.start&&v.start>d.from&&"  "==d.doc.textBetween(v.start-d.from-1,v.start-d.from+1)&&(v.start--,v.endA--,v.endB--);var k,_=d.doc.resolveNoCache(v.start-d.from),b=d.doc.resolveNoCache(v.endB-d.from);if((ve.ios&&t.lastIOSEnter>Date.now()-100&&(!_.sameParent(b)||o.some((function(t){return"DIV"==t.nodeName})))||!_.sameParent(b)&&_.pos<d.doc.content.size&&(k=Ht.findFrom(d.doc.resolve(_.pos+1),1,!0))&&k.head==b.pos)&&t.someProp("handleKeyDown",(function(e){return e(t,ze(13,"Enter"))})))t.lastIOSEnter=0;else if(t.state.selection.anchor>v.start&&function(t,e,n,r,o){if(!r.parent.isTextblock||n-e<=o.pos-r.pos||Zn(r,!0,!1)<o.pos)return!1;var i=t.resolve(e);if(i.parentOffset<i.parent.content.size||!i.parent.isTextblock)return!1;var s=t.resolve(Zn(i,!0,!0));if(!s.parent.isTextblock||s.pos>n||Zn(s,!0,!1)<n)return!1;return r.parent.content.cut(r.parentOffset).eq(s.parent.content)}(m,v.start,v.endA,_,b)&&t.someProp("handleKeyDown",(function(e){return e(t,ze(8,"Backspace"))})))ve.android&&ve.chrome&&t.domObserver.suppressSelectionUpdates();else{var x,w,C,S,A=v.start,M=v.endA;if(_.sameParent(b)&&_.parent.inlineContent)if(_.pos==b.pos)ve.ie&&ve.ie_version<=11&&0==_.parentOffset&&(t.domObserver.suppressSelectionUpdates(),setTimeout((function(){return Nn(t)}),20)),x=t.state.tr.delete(A,M),w=m.resolve(v.start).marksAcross(m.resolve(v.endA));else if(v.endA==v.endB&&(S=m.resolve(v.start))&&(C=function(t,e){for(var n,r,o,s=t.firstChild.marks,a=e.firstChild.marks,c=s,l=a,u=0;u<a.length;u++)c=a[u].removeFromSet(c);for(var p=0;p<s.length;p++)l=s[p].removeFromSet(l);if(1==c.length&&0==l.length)r=c[0],n="add",o=function(t){return t.mark(r.addToSet(t.marks))};else{if(0!=c.length||1!=l.length)return null;r=l[0],n="remove",o=function(t){return t.mark(r.removeFromSet(t.marks))}}for(var h=[],f=0;f<e.childCount;f++)h.push(o(e.child(f)));if(i.from(h).eq(t))return{mark:r,type:n}}(_.parent.content.cut(_.parentOffset,b.parentOffset),S.parent.content.cut(S.parentOffset,v.endA-S.start()))))x=t.state.tr,"add"==C.type?x.addMark(A,M,C.mark):x.removeMark(A,M,C.mark);else if(_.parent.child(_.index()).isText&&_.index()==b.index()-(b.textOffset?0:1)){var D=_.parent.textBetween(_.parentOffset,b.parentOffset);if(t.someProp("handleTextInput",(function(e){return e(t,A,M,D)})))return;x=t.state.tr.insertText(D,A,M)}if(x||(x=t.state.tr.replace(A,M,d.doc.slice(v.start-d.from,v.endB-d.from))),d.sel){var E=Jn(t,x.doc,d.sel);E&&!(ve.chrome&&ve.android&&t.composing&&E.empty&&E.head==A||ve.ie&&E.empty&&E.head==A)&&x.setSelection(E)}w&&x.ensureMarks(w),t.dispatch(x.scrollIntoView())}}}function Jn(t,e,n){return Math.max(n.anchor,n.head)>e.content.size?null:$n(t,e.resolve(n.anchor),e.resolve(n.head))}function Zn(t,e,n){for(var r=t.depth,o=e?t.end():t.pos;r>0&&(e||t.indexAfter(r)==t.node(r).childCount);)r--,o++,e=!1;if(n)for(var i=t.node(r).maybeChild(t.indexAfter(r));i&&!i.isLeaf;)i=i.firstChild,o++;return o}function Wn(t,e){for(var n=[],r=e.content,o=e.openStart,i=e.openEnd;o>1&&i>1&&1==r.childCount&&1==r.firstChild.childCount;){o--,i--;var s=r.firstChild;n.push(s.type.name,s.type.hasRequiredAttrs()?s.attrs:null),r=s.content}var a=t.someProp("clipboardSerializer")||pt.fromSchema(t.state.schema),c=Xn(),l=c.createElement("div");l.appendChild(a.serializeFragment(r,{document:c}));for(var u,p=l.firstChild;p&&1==p.nodeType&&(u=Yn[p.nodeName.toLowerCase()]);){for(var h=u.length-1;h>=0;h--){for(var f=c.createElement(u[h]);l.firstChild;)f.appendChild(l.firstChild);l.appendChild(f)}p=l.firstChild}return p&&1==p.nodeType&&p.setAttribute("data-pm-slice",o+" "+i+" "+JSON.stringify(n)),{dom:l,text:t.someProp("clipboardTextSerializer",(function(t){return t(e)}))||e.content.textBetween(0,e.content.size,"\n\n")}}function Hn(t,e,n,r,o){var s,a,c=o.parent.type.spec.code;if(!n&&!e)return null;var l=e&&(r||c||!n);if(l){if(t.someProp("transformPastedText",(function(t){e=t(e)})),c)return new h(i.from(t.state.schema.text(e)),0,0);var u=t.someProp("clipboardTextParser",(function(t){return t(e,o)}));u?a=u:(s=document.createElement("div"),e.trim().split(/(?:\r\n?|\n)+/).forEach((function(t){s.appendChild(document.createElement("p")).textContent=t})))}else t.someProp("transformPastedHTML",(function(t){n=t(n)})),s=function(t){var e=/(\s*<meta [^>]*>)*/.exec(t);e&&(t=t.slice(e[0].length));var n,r=Xn().createElement("div"),o=/(?:<meta [^>]*>)*<([a-z][^>\s]+)/i.exec(t),i=0;(n=o&&Yn[o[1].toLowerCase()])&&(t=n.map((function(t){return"<"+t+">"})).join("")+t+n.map((function(t){return"</"+t+">"})).reverse().join(""),i=n.length);r.innerHTML=t;for(var s=0;s<i;s++)r=r.firstChild;return r}(n);var p=s&&s.querySelector("[data-pm-slice]"),f=p&&/^(\d+) (\d+) (.*)/.exec(p.getAttribute("data-pm-slice"));if(!a){var d=t.someProp("clipboardParser")||t.someProp("domParser")||tt.fromSchema(t.state.schema);a=d.parseSlice(s,{preserveWhitespace:!(!l&&!f),context:o})}return a=f?function(t,e){if(!t.size)return t;var n,r=t.content.firstChild.type.schema;try{n=JSON.parse(e)}catch(e){return t}for(var o=t.content,s=t.openStart,a=t.openEnd,c=n.length-2;c>=0;c-=2){var l=r.nodes[n[c]];if(!l||l.hasRequiredAttrs())break;o=i.from(l.create(n[c+1],o)),s++,a++}return new h(o,s,a)}(function(t,e,n){e<t.openStart&&(t=new h(Kn(t.content,-1,e,t.openStart,0,t.openEnd),e,t.openEnd));n<t.openEnd&&(t=new h(Kn(t.content,1,n,t.openEnd,0,0),t.openStart,n));return t}(a,+f[1],+f[2]),f[3]):h.maxOpen(function(t,e){if(t.childCount<2)return t;for(var n=function(n){var r=e.node(n).contentMatchAt(e.index(n)),o=void 0,s=[];if(t.forEach((function(t){if(s){var e,n=r.findWrapping(t.type);if(!n)return s=null;if(e=s.length&&o.length&&function t(e,n,r,o,s){if(s<e.length&&s<n.length&&e[s]==n[s]){var a=t(e,n,r,o.lastChild,s+1);if(a)return o.copy(o.content.replaceChild(o.childCount-1,a));if(o.contentMatchAt(o.childCount).matchType(s==e.length-1?r.type:e[s+1]))return o.copy(o.content.append(i.from(Gn(r,e,s+1))))}}(n,o,t,s[s.length-1],0))s[s.length-1]=e;else{s.length&&(s[s.length-1]=function t(e,n){if(0==n)return e;var r=e.content.replaceChild(e.childCount-1,t(e.lastChild,n-1)),o=e.contentMatchAt(e.childCount).fillBefore(i.empty,!0);return e.copy(r.append(o))}(s[s.length-1],o.length));var a=Gn(t,n);s.push(a),r=r.matchType(a.type,a.attrs),o=n}}})),s)return{v:i.from(s)}},r=e.depth;r>=0;r--){var o=n(r);if(o)return o.v}return t}(a.content,o),!1),t.someProp("transformPasted",(function(t){a=t(a)})),a}function Gn(t,e,n){void 0===n&&(n=0);for(var r=e.length-1;r>=n;r--)t=e[r].create(null,i.from(t));return t}function Kn(t,e,n,r,o,s){var a=e<0?t.firstChild:t.lastChild,c=a.content;return o<r-1&&(c=Kn(c,e,n,r,o+1,s)),o>=n&&(c=e<0?a.contentMatchAt(0).fillBefore(c,t.childCount>1||s<=o).append(c):c.append(a.contentMatchAt(a.childCount).fillBefore(i.empty,!0))),t.replaceChild(e<0?0:t.childCount-1,a.copy(c))}var Yn={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]},Qn=null;function Xn(){return Qn||(Qn=document.implementation.createHTMLDocument("title"))}var tr={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},er=ve.ie&&ve.ie_version<=11,nr=function(){this.anchorNode=this.anchorOffset=this.focusNode=this.focusOffset=null};nr.prototype.set=function(t){this.anchorNode=t.anchorNode,this.anchorOffset=t.anchorOffset,this.focusNode=t.focusNode,this.focusOffset=t.focusOffset},nr.prototype.eq=function(t){return t.anchorNode==this.anchorNode&&t.anchorOffset==this.anchorOffset&&t.focusNode==this.focusNode&&t.focusOffset==this.focusOffset};var rr=function(t,e){var n=this;this.view=t,this.handleDOMChange=e,this.queue=[],this.flushingSoon=!1,this.observer=window.MutationObserver&&new window.MutationObserver((function(t){for(var e=0;e<t.length;e++)n.queue.push(t[e]);ve.ie&&ve.ie_version<=11&&t.some((function(t){return"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length}))?n.flushSoon():n.flush()})),this.currentSelection=new nr,er&&(this.onCharData=function(t){n.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),n.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.suppressingSelectionUpdates=!1};rr.prototype.flushSoon=function(){var t=this;this.flushingSoon||(this.flushingSoon=!0,window.setTimeout((function(){t.flushingSoon=!1,t.flush()}),20))},rr.prototype.start=function(){this.observer&&this.observer.observe(this.view.dom,tr),er&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()},rr.prototype.stop=function(){var t=this;if(this.observer){var e=this.observer.takeRecords();if(e.length){for(var n=0;n<e.length;n++)this.queue.push(e[n]);window.setTimeout((function(){return t.flush()}),20)}this.observer.disconnect()}er&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()},rr.prototype.connectSelection=function(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)},rr.prototype.disconnectSelection=function(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)},rr.prototype.suppressSelectionUpdates=function(){var t=this;this.suppressingSelectionUpdates=!0,setTimeout((function(){return t.suppressingSelectionUpdates=!1}),50)},rr.prototype.onSelectionChange=function(){if((!(t=this.view).editable||t.root.activeElement==t.dom)&&jn(t)){var t;if(this.suppressingSelectionUpdates)return Nn(this.view);if(ve.ie&&ve.ie_version<=11&&!this.view.state.selection.empty){var e=this.view.root.getSelection();if(e.focusNode&&Ae(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset))return this.flushSoon()}this.flush()}},rr.prototype.setCurSelection=function(){this.currentSelection.set(this.view.root.getSelection())},rr.prototype.ignoreSelectionChange=function(t){if(0==t.rangeCount)return!0;var e=t.getRangeAt(0).commonAncestorContainer,n=this.view.docView.nearestDesc(e);return n&&n.ignoreMutation({type:"selection",target:3==e.nodeType?e.parentNode:e})?(this.setCurSelection(),!0):void 0},rr.prototype.flush=function(){if(this.view.docView&&!this.flushingSoon){var t=this.observer?this.observer.takeRecords():[];this.queue.length&&(t=this.queue.concat(t),this.queue.length=0);var e=this.view.root.getSelection(),n=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(e)&&jn(this.view)&&!this.ignoreSelectionChange(e),r=-1,o=-1,i=!1,s=[];if(this.view.editable)for(var a=0;a<t.length;a++){var c=this.registerMutation(t[a],s);c&&(r=r<0?c.from:Math.min(c.from,r),o=o<0?c.to:Math.max(c.to,o),c.typeOver&&!this.view.composing&&(i=!0))}if(ve.gecko&&s.length>1){var l=s.filter((function(t){return"BR"==t.nodeName}));if(2==l.length){var u=l[0],p=l[1];u.parentNode&&u.parentNode.parentNode==p.parentNode?p.remove():u.remove()}}(r>-1||n)&&(r>-1&&(this.view.docView.markDirty(r,o),function(t){if(or)return;or=!0,"normal"==getComputedStyle(t.dom).whiteSpace&&console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.")}(this.view)),this.handleDOMChange(r,o,i,s),this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(e)||Nn(this.view))}},rr.prototype.registerMutation=function(t,e){if(e.indexOf(t.target)>-1)return null;var n=this.view.docView.nearestDesc(t.target);if("attributes"==t.type&&(n==this.view.docView||"contenteditable"==t.attributeName||"style"==t.attributeName&&!t.oldValue&&!t.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(t))return null;if("childList"==t.type){var r=t.previousSibling,o=t.nextSibling;if(ve.ie&&ve.ie_version<=11&&t.addedNodes.length)for(var i=0;i<t.addedNodes.length;i++){var s=t.addedNodes[i],a=s.previousSibling,c=s.nextSibling;(!a||Array.prototype.indexOf.call(t.addedNodes,a)<0)&&(r=a),(!c||Array.prototype.indexOf.call(t.addedNodes,c)<0)&&(o=c)}for(var l=r&&r.parentNode==t.target?we(r)+1:0,u=n.localPosFromDOM(t.target,l,-1),p=o&&o.parentNode==t.target?we(o):t.target.childNodes.length,h=0;h<t.addedNodes.length;h++)e.push(t.addedNodes[h]);return{from:u,to:n.localPosFromDOM(t.target,p,1)}}return"attributes"==t.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:{from:n.posAtStart,to:n.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}};var or=!1;var ir={},sr={};function ar(t,e){t.lastSelectionOrigin=e,t.lastSelectionTime=Date.now()}function cr(t){t.someProp("handleDOMEvents",(function(e){for(var n in e)t.eventHandlers[n]||t.dom.addEventListener(n,t.eventHandlers[n]=function(e){return lr(t,e)})}))}function lr(t,e){return t.someProp("handleDOMEvents",(function(n){var r=n[e.type];return!!r&&(r(t,e)||e.defaultPrevented)}))}function ur(t){return{left:t.clientX,top:t.clientY}}function pr(t,e,n,r,o){if(-1==r)return!1;for(var i=t.state.doc.resolve(r),s=function(r){if(t.someProp(e,(function(e){return r>i.depth?e(t,n,i.nodeAfter,i.before(r),o,!0):e(t,n,i.node(r),i.before(r),o,!1)})))return{v:!0}},a=i.depth+1;a>0;a--){var c=s(a);if(c)return c.v}return!1}function hr(t,e,n){t.focused||t.focus();var r=t.state.tr.setSelection(e);"pointer"==n&&r.setMeta("pointer",!0),t.dispatch(r)}function fr(t,e,n,r,o){return pr(t,"handleClickOn",e,n,r)||t.someProp("handleClick",(function(n){return n(t,e,r)}))||(o?function(t,e){if(-1==e)return!1;var n,r,o=t.state.selection;o instanceof Xt&&(n=o.node);for(var i=t.state.doc.resolve(e),s=i.depth+1;s>0;s--){var a=s>i.depth?i.nodeAfter:i.node(s);if(Xt.isSelectable(a)){r=n&&o.$from.depth>0&&s>=o.$from.depth&&i.before(o.$from.depth+1)==o.$from.pos?i.before(o.$from.depth):i.before(s);break}}return null!=r&&(hr(t,Xt.create(t.state.doc,r),"pointer"),!0)}(t,n):function(t,e){if(-1==e)return!1;var n=t.state.doc.resolve(e),r=n.nodeAfter;return!!(r&&r.isAtom&&Xt.isSelectable(r))&&(hr(t,new Xt(n),"pointer"),!0)}(t,n))}function dr(t,e,n,r){return pr(t,"handleDoubleClickOn",e,n,r)||t.someProp("handleDoubleClick",(function(n){return n(t,e,r)}))}function mr(t,e,n,r){return pr(t,"handleTripleClickOn",e,n,r)||t.someProp("handleTripleClick",(function(n){return n(t,e,r)}))||function(t,e){var n=t.state.doc;if(-1==e)return!!n.inlineContent&&(hr(t,Yt.create(n,0,n.content.size),"pointer"),!0);for(var r=n.resolve(e),o=r.depth+1;o>0;o--){var i=o>r.depth?r.nodeAfter:r.node(o),s=r.before(o);if(i.inlineContent)hr(t,Yt.create(n,s+1,s+1+i.content.size),"pointer");else{if(!Xt.isSelectable(i))continue;hr(t,Xt.create(n,s),"pointer")}return!0}}(t,n)}function gr(t){return xr(t)}sr.keydown=function(t,e){t.shiftKey=16==e.keyCode||e.shiftKey,kr(t,e)||(t.lastKeyCode=e.keyCode,t.lastKeyCodeTime=Date.now(),!ve.ios||13!=e.keyCode||e.ctrlKey||e.altKey||e.metaKey?t.someProp("handleKeyDown",(function(n){return n(t,e)}))||zn(t,e)?e.preventDefault():ar(t,"key"):t.lastIOSEnter=Date.now())},sr.keyup=function(t,e){16==e.keyCode&&(t.shiftKey=!1)},sr.keypress=function(t,e){if(!(kr(t,e)||!e.charCode||e.ctrlKey&&!e.altKey||ve.mac&&e.metaKey))if(t.someProp("handleKeyPress",(function(n){return n(t,e)})))e.preventDefault();else{var n=t.state.selection;if(!(n instanceof Yt&&n.$from.sameParent(n.$to))){var r=String.fromCharCode(e.charCode);t.someProp("handleTextInput",(function(e){return e(t,n.$from.pos,n.$to.pos,r)}))||t.dispatch(t.state.tr.insertText(r).scrollIntoView()),e.preventDefault()}}};var vr=ve.mac?"metaKey":"ctrlKey";ir.mousedown=function(t,e){t.shiftKey=e.shiftKey;var n=gr(t),r=Date.now(),o="singleClick";r-t.lastClick.time<500&&function(t,e){var n=e.x-t.clientX,r=e.y-t.clientY;return n*n+r*r<100}(e,t.lastClick)&&!e[vr]&&("singleClick"==t.lastClick.type?o="doubleClick":"doubleClick"==t.lastClick.type&&(o="tripleClick")),t.lastClick={time:r,x:e.clientX,y:e.clientY,type:o};var i=t.posAtCoords(ur(e));i&&("singleClick"==o?t.mouseDown=new yr(t,i,e,n):("doubleClick"==o?dr:mr)(t,i.pos,i.inside,e)?e.preventDefault():ar(t,"pointer"))};var yr=function(t,e,n,r){var o,i,s=this;if(this.view=t,this.startDoc=t.state.doc,this.pos=e,this.event=n,this.flushed=r,this.selectNode=n[vr],this.allowDefault=n.shiftKey,e.inside>-1)o=t.state.doc.nodeAt(e.inside),i=e.inside;else{var a=t.state.doc.resolve(e.pos);o=a.parent,i=a.depth?a.before():0}this.mightDrag=null;var c=r?null:n.target,l=c?t.docView.nearestDesc(c,!0):null;this.target=l?l.dom:null,(o.type.spec.draggable&&!1!==o.type.spec.selectable||t.state.selection instanceof Xt&&i==t.state.selection.from)&&(this.mightDrag={node:o,pos:i,addAttr:this.target&&!this.target.draggable,setUneditable:this.target&&ve.gecko&&!this.target.hasAttribute("contentEditable")}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((function(){return s.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),t.root.addEventListener("mouseup",this.up=this.up.bind(this)),t.root.addEventListener("mousemove",this.move=this.move.bind(this)),ar(t,"pointer")};function kr(t,e){return!!t.composing||!!(ve.safari&&Math.abs(e.timeStamp-t.compositionEndedAt)<500)&&(t.compositionEndedAt=-2e8,!0)}yr.prototype.done=function(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!1),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.view.mouseDown=null},yr.prototype.up=function(t){if(this.done(),this.view.dom.contains(3==t.target.nodeType?t.target.parentNode:t.target)){var e=this.pos;this.view.state.doc!=this.startDoc&&(e=this.view.posAtCoords(ur(t))),this.allowDefault||!e?ar(this.view,"pointer"):fr(this.view,e.pos,e.inside,t,this.selectNode)?t.preventDefault():!this.flushed&&(!ve.chrome||this.view.state.selection instanceof Yt||e.pos!=this.view.state.selection.from&&e.pos!=this.view.state.selection.to)?ar(this.view,"pointer"):(hr(this.view,Ht.near(this.view.state.doc.resolve(e.pos)),"pointer"),t.preventDefault())}},yr.prototype.move=function(t){!this.allowDefault&&(Math.abs(this.event.x-t.clientX)>4||Math.abs(this.event.y-t.clientY)>4)&&(this.allowDefault=!0),ar(this.view,"pointer")},ir.touchdown=function(t){gr(t),ar(t,"pointer")},ir.contextmenu=function(t){return gr(t)};var _r=ve.android?5e3:-1;function br(t,e){clearTimeout(t.composingTimeout),e>-1&&(t.composingTimeout=setTimeout((function(){return xr(t)}),e))}function xr(t,e){for(t.composing=!1;t.compositionNodes.length>0;)t.compositionNodes.pop().markParentsDirty();return!(!e&&!t.docView.dirty)&&(t.updateState(t.state),!0)}sr.compositionstart=sr.compositionupdate=function(t){if(!t.composing){t.domObserver.flush();var e=t.state,n=e.selection.$from;if(e.selection.empty&&(e.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((function(t){return!1===t.type.spec.inclusive}))))t.markCursor=t.state.storedMarks||n.marks(),xr(t,!0),t.markCursor=null;else if(xr(t),ve.gecko&&e.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length)for(var r=t.root.getSelection(),o=r.focusNode,i=r.focusOffset;o&&1==o.nodeType&&0!=i;){var s=i<0?o.lastChild:o.childNodes[i-1];if(!s)break;if(3==s.nodeType){r.collapse(s,s.nodeValue.length);break}o=s,i=-1}t.composing=!0}br(t,_r)},sr.compositionend=function(t,e){t.composing&&(t.composing=!1,t.compositionEndedAt=e.timeStamp,br(t,20))};var wr=ve.ie&&ve.ie_version<15||ve.ios&&ve.webkit_version<604;function Cr(t,e,n,r){var o=Hn(t,e,n,t.shiftKey,t.state.selection.$from);if(!t.someProp("handlePaste",(function(e){return e(t,r,o||h.empty)}))&&o){var i=function(t){return 0==t.openStart&&0==t.openEnd&&1==t.content.childCount?t.content.firstChild:null}(o),s=i?t.state.tr.replaceSelectionWith(i,t.shiftKey):t.state.tr.replaceSelection(o);t.dispatch(s.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste"))}}ir.copy=sr.cut=function(t,e){var n=t.state.selection,r="cut"==e.type;if(!n.empty){var o=wr?null:e.clipboardData,i=Wn(t,n.content()),s=i.dom,a=i.text;o?(e.preventDefault(),o.clearData(),o.setData("text/html",s.innerHTML),o.setData("text/plain",a)):function(t,e){var n=t.dom.ownerDocument,r=n.body.appendChild(n.createElement("div"));r.appendChild(e),r.style.cssText="position: fixed; left: -10000px; top: 10px";var o=getSelection(),i=n.createRange();i.selectNodeContents(e),t.dom.blur(),o.removeAllRanges(),o.addRange(i),setTimeout((function(){n.body.removeChild(r),t.focus()}),50)}(t,s),r&&t.dispatch(t.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))}},sr.paste=function(t,e){var n=wr?null:e.clipboardData,r=n&&n.getData("text/html"),o=n&&n.getData("text/plain");n&&(r||o||n.files.length)?(Cr(t,o,r,e),e.preventDefault()):function(t,e){var n=t.dom.ownerDocument,r=t.shiftKey||t.state.selection.$from.parent.type.spec.code,o=n.body.appendChild(n.createElement(r?"textarea":"div"));r||(o.contentEditable="true"),o.style.cssText="position: fixed; left: -10000px; top: 10px",o.focus(),setTimeout((function(){t.focus(),n.body.removeChild(o),r?Cr(t,o.value,null,e):Cr(t,o.textContent,o.innerHTML,e)}),50)}(t,e)};var Sr=function(t,e){this.slice=t,this.move=e},Ar=ve.mac?"altKey":"ctrlKey";for(var Mr in ir.dragstart=function(t,e){var n=t.mouseDown;if(n&&n.done(),e.dataTransfer){var r=t.state.selection,o=r.empty?null:t.posAtCoords(ur(e));if(o&&o.pos>=r.from&&o.pos<=(r instanceof Xt?r.to-1:r.to));else if(n&&n.mightDrag)t.dispatch(t.state.tr.setSelection(Xt.create(t.state.doc,n.mightDrag.pos)));else if(e.target&&1==e.target.nodeType){var i=t.docView.nearestDesc(e.target,!0);if(!i||!i.node.type.spec.draggable||i==t.docView)return;t.dispatch(t.state.tr.setSelection(Xt.create(t.state.doc,i.posBefore)))}var s=t.state.selection.content(),a=Wn(t,s),c=a.dom,l=a.text;e.dataTransfer.clearData(),e.dataTransfer.setData(wr?"Text":"text/html",c.innerHTML),wr||e.dataTransfer.setData("text/plain",l),t.dragging=new Sr(s,!e[Ar])}},ir.dragend=function(t){window.setTimeout((function(){return t.dragging=null}),50)},sr.dragover=sr.dragenter=function(t,e){return e.preventDefault()},sr.drop=function(t,e){var n=t.dragging;if(t.dragging=null,e.dataTransfer){var r=t.posAtCoords(ur(e));if(r){var o=t.state.doc.resolve(r.pos);if(o){var i=n&&n.slice||Hn(t,e.dataTransfer.getData(wr?"Text":"text/plain"),wr?null:e.dataTransfer.getData("text/html"),!1,o);if(i&&(e.preventDefault(),!t.someProp("handleDrop",(function(r){return r(t,e,i,n&&n.move)})))){var s=i?function(t,e,n){var r=t.resolve(e);if(!n.content.size)return e;for(var o=n.content,i=0;i<n.openStart;i++)o=o.firstChild.content;for(var s=1;s<=(0==n.openStart&&n.size?2:1);s++)for(var a=r.depth;a>=0;a--){var c=a==r.depth?0:r.pos<=(r.start(a+1)+r.end(a+1))/2?-1:1,l=r.index(a)+(c>0?1:0);if(1==s?r.node(a).canReplace(l,l,o):r.node(a).contentMatchAt(l).findWrapping(o.firstChild.type))return 0==c?r.pos:c<0?r.before(a+1):r.after(a+1)}return null}(t.state.doc,o.pos,i):o.pos;null==s&&(s=o.pos);var a=t.state.tr;n&&n.move&&a.deleteSelection();var c=a.mapping.map(s),l=0==i.openStart&&0==i.openEnd&&1==i.content.childCount,u=a.doc;if(l?a.replaceRangeWith(c,c,i.content.firstChild):a.replaceRange(c,c,i),!a.doc.eq(u)){var p=a.doc.resolve(c);l&&Xt.isSelectable(i.content.firstChild)&&p.nodeAfter&&p.nodeAfter.sameMarkup(i.content.firstChild)?a.setSelection(new Xt(p)):a.setSelection($n(t,p,a.doc.resolve(a.mapping.map(s)))),t.focus(),t.dispatch(a.setMeta("uiEvent","drop"))}}}}}},ir.focus=function(t){t.focused||(t.domObserver.stop(),t.dom.classList.add("ProseMirror-focused"),t.domObserver.start(),t.focused=!0,setTimeout((function(){t.docView&&t.hasFocus()&&!t.domObserver.currentSelection.eq(t.root.getSelection())&&Nn(t)}),20))},ir.blur=function(t){t.focused&&(t.domObserver.stop(),t.dom.classList.remove("ProseMirror-focused"),t.domObserver.start(),t.domObserver.currentSelection.set({}),t.focused=!1)},ir.beforeinput=function(t,e){if(ve.chrome&&ve.android&&"deleteContentBackward"==e.inputType){var n=t.domChangeCount;setTimeout((function(){if(t.domChangeCount==n&&(t.dom.blur(),t.focus(),!t.someProp("handleKeyDown",(function(e){return e(t,ze(8,"Backspace"))})))){var e=t.state.selection.$cursor;e&&e.pos>0&&t.dispatch(t.state.tr.delete(e.pos-1,e.pos).scrollIntoView())}}),50)}},sr)ir[Mr]=sr[Mr];function Dr(t,e){if(t==e)return!0;for(var n in t)if(t[n]!==e[n])return!1;for(var r in e)if(!(r in t))return!1;return!0}var Er=function(t,e){this.spec=e||Rr,this.side=this.spec.side||0,this.toDOM=t};Er.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,this.side<0?-1:1),i=o.pos;return o.deleted?null:new zr(i-n,i-n,this)},Er.prototype.valid=function(){return!0},Er.prototype.eq=function(t){return this==t||t instanceof Er&&(this.spec.key&&this.spec.key==t.spec.key||this.toDOM==t.toDOM&&Dr(this.spec,t.spec))};var Or=function(t,e){this.spec=e||Rr,this.attrs=t};Or.prototype.map=function(t,e,n,r){var o=t.map(e.from+r,this.spec.inclusiveStart?-1:1)-n,i=t.map(e.to+r,this.spec.inclusiveEnd?1:-1)-n;return o>=i?null:new zr(o,i,this)},Or.prototype.valid=function(t,e){return e.from<e.to},Or.prototype.eq=function(t){return this==t||t instanceof Or&&Dr(this.attrs,t.attrs)&&Dr(this.spec,t.spec)},Or.is=function(t){return t.type instanceof Or};var Tr=function(t,e){this.spec=e||Rr,this.attrs=t};Tr.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,1);if(o.deleted)return null;var i=t.mapResult(e.to+r,-1);return i.deleted||i.pos<=o.pos?null:new zr(o.pos-n,i.pos-n,this)},Tr.prototype.valid=function(t,e){var n=t.content.findIndex(e.from),r=n.index,o=n.offset;return o==e.from&&o+t.child(r).nodeSize==e.to},Tr.prototype.eq=function(t){return this==t||t instanceof Tr&&Dr(this.attrs,t.attrs)&&Dr(this.spec,t.spec)};var zr=function(t,e,n){this.from=t,this.to=e,this.type=n},Ir={spec:{configurable:!0}};zr.prototype.copy=function(t,e){return new zr(t,e,this.type)},zr.prototype.eq=function(t){return this.type.eq(t.type)&&this.from==t.from&&this.to==t.to},zr.prototype.map=function(t,e,n){return this.type.map(t,this,e,n)},zr.widget=function(t,e,n){return new zr(t,t,new Er(e,n))},zr.inline=function(t,e,n,r){return new zr(t,e,new Or(n,r))},zr.node=function(t,e,n,r){return new zr(t,e,new Tr(n,r))},Ir.spec.get=function(){return this.type.spec},Object.defineProperties(zr.prototype,Ir);var Nr=[],Rr={},Lr=function(t,e){this.local=t&&t.length?t:Nr,this.children=e&&e.length?e:Nr};Lr.create=function(t,e){return e.length?jr(e,t,0,Rr):qr},Lr.prototype.find=function(t,e,n){var r=[];return this.findInner(null==t?0:t,null==e?1e9:e,r,0,n),r},Lr.prototype.findInner=function(t,e,n,r,o){for(var i=0;i<this.local.length;i++){var s=this.local[i];s.from<=e&&s.to>=t&&(!o||o(s.spec))&&n.push(s.copy(s.from+r,s.to+r))}for(var a=0;a<this.children.length;a+=3)if(this.children[a]<e&&this.children[a+1]>t){var c=this.children[a]+1;this.children[a+2].findInner(t-c,e-c,n,r+c,o)}},Lr.prototype.map=function(t,e,n){return this==qr||0==t.maps.length?this:this.mapInner(t,e,0,0,n||Rr)},Lr.prototype.mapInner=function(t,e,n,r,o){for(var i,s=0;s<this.local.length;s++){var a=this.local[s].map(t,n,r);a&&a.type.valid(e,a)?(i||(i=[])).push(a):o.onRemove&&o.onRemove(this.local[s].spec)}return this.children.length?function(t,e,n,r,o,i,s){for(var a=t.slice(),c=function(t,e,n,r){for(var s=0;s<a.length;s+=3){var c=a[s+1],l=void 0;-1==c||t>c+i||(e>=a[s]+i?a[s+1]=-1:(l=r-n-(e-t)+(i-o))&&(a[s]+=l,a[s+1]+=l))}},l=0;l<n.maps.length;l++)n.maps[l].forEach(c);for(var u=!1,p=0;p<a.length;p+=3)if(-1==a[p+1]){var h=n.map(a[p]+i),f=h-o;if(f<0||f>=r.content.size){u=!0;continue}var d=n.map(t[p+1]+i,-1)-o,m=r.content.findIndex(f),g=m.index,v=m.offset,y=r.maybeChild(g);if(y&&v==f&&v+y.nodeSize==d){var k=a[p+2].mapInner(n,y,h+1,a[p]+i+1,s);k!=qr?(a[p]=f,a[p+1]=d,a[p+2]=k):(a[p+1]=-2,u=!0)}else u=!0}if(u){var _=jr(function(t,e,n,r,o,i,s){function a(t,e){for(var i=0;i<t.local.length;i++){var c=t.local[i].map(r,o,e);c?n.push(c):s.onRemove&&s.onRemove(t.local[i].spec)}for(var l=0;l<t.children.length;l+=3)a(t.children[l+2],t.children[l]+e+1)}for(var c=0;c<t.length;c+=3)-1==t[c+1]&&a(t[c+2],e[c]+i+1);return n}(a,t,e||[],n,o,i,s),r,0,s);e=_.local;for(var b=0;b<a.length;b+=3)a[b+1]<0&&(a.splice(b,3),b-=3);for(var x=0,w=0;x<_.children.length;x+=3){for(var C=_.children[x];w<a.length&&a[w]<C;)w+=3;a.splice(w,0,_.children[x],_.children[x+1],_.children[x+2])}}return new Lr(e&&e.sort(Vr),a)}(this.children,i,t,e,n,r,o):i?new Lr(i.sort(Vr)):qr},Lr.prototype.add=function(t,e){return e.length?this==qr?Lr.create(t,e):this.addInner(t,e,0):this},Lr.prototype.addInner=function(t,e,n){var r,o=this,i=0;t.forEach((function(t,s){var a,c=s+n;if(a=Br(e,t,c)){for(r||(r=o.children.slice());i<r.length&&r[i]<s;)i+=3;r[i]==s?r[i+2]=r[i+2].addInner(t,a,c+1):r.splice(i,0,s,s+t.nodeSize,jr(a,t,c+1,Rr)),i+=3}}));var s=Pr(i?$r(e):e,-n);return new Lr(s.length?this.local.concat(s).sort(Vr):this.local,r||this.children)},Lr.prototype.remove=function(t){return 0==t.length||this==qr?this:this.removeInner(t,0)},Lr.prototype.removeInner=function(t,e){for(var n=this.children,r=this.local,o=0;o<n.length;o+=3){for(var i=void 0,s=n[o]+e,a=n[o+1]+e,c=0,l=void 0;c<t.length;c++)(l=t[c])&&l.from>s&&l.to<a&&(t[c]=null,(i||(i=[])).push(l));if(i){n==this.children&&(n=this.children.slice());var u=n[o+2].removeInner(i,s+1);u!=qr?n[o+2]=u:(n.splice(o,3),o-=3)}}if(r.length)for(var p=0,h=void 0;p<t.length;p++)if(h=t[p])for(var f=0;f<r.length;f++)r[f].type.eq(h.type)&&(r==this.local&&(r=this.local.slice()),r.splice(f--,1));return n==this.children&&r==this.local?this:r.length||n.length?new Lr(r,n):qr},Lr.prototype.forChild=function(t,e){if(this==qr)return this;if(e.isLeaf)return Lr.empty;for(var n,r,o=0;o<this.children.length;o+=3)if(this.children[o]>=t){this.children[o]==t&&(n=this.children[o+2]);break}for(var i=t+1,s=i+e.content.size,a=0;a<this.local.length;a++){var c=this.local[a];if(c.from<s&&c.to>i&&c.type instanceof Or){var l=Math.max(i,c.from)-i,u=Math.min(s,c.to)-i;l<u&&(r||(r=[])).push(c.copy(l,u))}}if(r){var p=new Lr(r.sort(Vr));return n?new Fr([p,n]):p}return n||qr},Lr.prototype.eq=function(t){if(this==t)return!0;if(!(t instanceof Lr)||this.local.length!=t.local.length||this.children.length!=t.children.length)return!1;for(var e=0;e<this.local.length;e++)if(!this.local[e].eq(t.local[e]))return!1;for(var n=0;n<this.children.length;n+=3)if(this.children[n]!=t.children[n]||this.children[n+1]!=t.children[n+1]||!this.children[n+2].eq(t.children[n+2]))return!1;return!0},Lr.prototype.locals=function(t){return Ur(this.localsInner(t))},Lr.prototype.localsInner=function(t){if(this==qr)return Nr;if(t.inlineContent||!this.local.some(Or.is))return this.local;for(var e=[],n=0;n<this.local.length;n++)this.local[n].type instanceof Or||e.push(this.local[n]);return e};var qr=new Lr;Lr.empty=qr,Lr.removeOverlap=Ur;var Fr=function(t){this.members=t};function Pr(t,e){if(!e||!t.length)return t;for(var n=[],r=0;r<t.length;r++){var o=t[r];n.push(new zr(o.from+e,o.to+e,o.type))}return n}function Br(t,e,n){if(e.isLeaf)return null;for(var r=n+e.nodeSize,o=null,i=0,s=void 0;i<t.length;i++)(s=t[i])&&s.from>n&&s.to<r&&((o||(o=[])).push(s),t[i]=null);return o}function $r(t){for(var e=[],n=0;n<t.length;n++)null!=t[n]&&e.push(t[n]);return e}function jr(t,e,n,r){var o=[],i=!1;e.forEach((function(e,s){var a=Br(t,e,s+n);if(a){i=!0;var c=jr(a,e,n+s+1,r);c!=qr&&o.push(s,s+e.nodeSize,c)}}));for(var s=Pr(i?$r(t):t,-n).sort(Vr),a=0;a<s.length;a++)s[a].type.valid(e,s[a])||(r.onRemove&&r.onRemove(s[a].spec),s.splice(a--,1));return s.length||o.length?new Lr(s,o):qr}function Vr(t,e){return t.from-e.from||t.to-e.to}function Ur(t){for(var e=t,n=0;n<e.length-1;n++){var r=e[n];if(r.from!=r.to)for(var o=n+1;o<e.length;o++){var i=e[o];if(i.from!=r.from){i.from<r.to&&(e==t&&(e=t.slice()),e[n]=r.copy(r.from,i.from),Jr(e,o,r.copy(i.from,r.to)));break}i.to!=r.to&&(e==t&&(e=t.slice()),e[o]=i.copy(i.from,r.to),Jr(e,o+1,i.copy(r.to,i.to)))}}return e}function Jr(t,e,n){for(;e<t.length&&Vr(n,t[e])>0;)e++;t.splice(e,0,n)}function Zr(t){var e=[];return t.someProp("decorations",(function(n){var r=n(t.state);r&&r!=qr&&e.push(r)})),t.cursorWrapper&&e.push(Lr.create(t.state.doc,[t.cursorWrapper.deco])),Fr.from(e)}Fr.prototype.forChild=function(t,e){if(e.isLeaf)return Lr.empty;for(var n=[],r=0;r<this.members.length;r++){var o=this.members[r].forChild(t,e);o!=qr&&(o instanceof Fr?n=n.concat(o.members):n.push(o))}return Fr.from(n)},Fr.prototype.eq=function(t){if(!(t instanceof Fr)||t.members.length!=this.members.length)return!1;for(var e=0;e<this.members.length;e++)if(!this.members[e].eq(t.members[e]))return!1;return!0},Fr.prototype.locals=function(t){for(var e,n=!0,r=0;r<this.members.length;r++){var o=this.members[r].localsInner(t);if(o.length)if(e){n&&(e=e.slice(),n=!1);for(var i=0;i<o.length;i++)e.push(o[i])}else e=o}return e?Ur(n?e:e.sort(Vr)):Nr},Fr.from=function(t){switch(t.length){case 0:return qr;case 1:return t[0];default:return new Fr(t)}};var Wr=function(t,e){this._props=e,this.state=e.state,this.dispatch=this.dispatch.bind(this),this._root=null,this.focused=!1,this.dom=t&&t.mount||document.createElement("div"),t&&(t.appendChild?t.appendChild(this.dom):t.apply?t(this.dom):t.mount&&(this.mounted=!0)),this.editable=Yr(this),this.markCursor=null,this.cursorWrapper=null,Kr(this),this.nodeViews=Qr(this),this.docView=on(this.state.doc,Gr(this),Zr(this),this.dom,this),this.lastSelectedViewDesc=null,this.dragging=null,function(t){t.shiftKey=!1,t.mouseDown=null,t.lastKeyCode=null,t.lastKeyCodeTime=0,t.lastClick={time:0,x:0,y:0,type:""},t.lastSelectionOrigin=null,t.lastSelectionTime=0,t.lastIOSEnter=0,t.composing=!1,t.composingTimeout=null,t.compositionNodes=[],t.compositionEndedAt=-2e8,t.domObserver=new rr(t,(function(e,n,r,o){return Un(t,e,n,r,o)})),t.domObserver.start(),t.domChangeCount=0,t.eventHandlers=Object.create(null);var e=function(e){var n=ir[e];t.dom.addEventListener(e,t.eventHandlers[e]=function(e){!function(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(var n=e.target;n!=t.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(e))return!1;return!0}(t,e)||lr(t,e)||!t.editable&&e.type in sr||n(t,e)})};for(var n in ir)e(n);ve.safari&&t.dom.addEventListener("input",(function(){return null})),cr(t)}(this),this.pluginViews=[],this.updatePluginViews()},Hr={props:{configurable:!0},root:{configurable:!0}};function Gr(t){var e=Object.create(null);return e.class="ProseMirror",e.contenteditable=String(t.editable),t.someProp("attributes",(function(n){if("function"==typeof n&&(n=n(t.state)),n)for(var r in n)"class"==r?e.class+=" "+n[r]:e[r]||"contenteditable"==r||"nodeName"==r||(e[r]=String(n[r]))})),[zr.node(0,t.state.doc.content.size,e)]}function Kr(t){var e=t.state.selection,n=e.$head,r=e.$anchor,o=e.visible;if(t.markCursor){var i=document.createElement("img");i.setAttribute("mark-placeholder","true"),t.cursorWrapper={dom:i,deco:zr.widget(n.pos,i,{raw:!0,marks:t.markCursor})}}else if(o||n.pos!=r.pos)t.cursorWrapper=null;else{var s;!t.cursorWrapper||t.cursorWrapper.dom.childNodes.length?((s=document.createElement("div")).style.position="absolute",s.style.left="-100000px"):t.cursorWrapper.deco.pos!=n.pos&&(s=t.cursorWrapper.dom),s&&(t.cursorWrapper={dom:s,deco:zr.widget(n.pos,s,{raw:!0})})}}function Yr(t){return!t.someProp("editable",(function(e){return!1===e(t.state)}))}function Qr(t){var e={};return t.someProp("nodeViews",(function(t){for(var n in t)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=t[n])})),e}Hr.props.get=function(){if(this._props.state!=this.state){var t=this._props;for(var e in this._props={},t)this._props[e]=t[e];this._props.state=this.state}return this._props},Wr.prototype.update=function(t){t.handleDOMEvents!=this._props.handleDOMEvents&&cr(this),this._props=t,this.updateStateInner(t.state,!0)},Wr.prototype.setProps=function(t){var e={};for(var n in this._props)e[n]=this._props[n];for(var r in e.state=this.state,t)e[r]=t[r];this.update(e)},Wr.prototype.updateState=function(t){this.updateStateInner(t,this.state.plugins!=t.plugins)},Wr.prototype.updateStateInner=function(t,e){var n=this,r=this.state,o=!1;if(this.state=t,e){var i=Qr(this);(function(t,e){var n=0,r=0;for(var o in t){if(t[o]!=e[o])return!0;n++}for(var i in e)r++;return n!=r})(i,this.nodeViews)&&(this.nodeViews=i,o=!0),cr(this)}this.editable=Yr(this),Kr(this);var s,a,c,l,u,p,h,f,d,m,g,v=Zr(this),y=Gr(this),k=e?"reset":t.scrollToSelection>r.scrollToSelection?"to selection":"preserve",_=o||!this.docView.matchesNode(t.doc,y,v),b=_||!t.selection.eq(r.selection),x="preserve"==k&&b&&null==this.dom.style.overflowAnchor&&function(t){for(var e,n,r=t.dom.getBoundingClientRect(),o=Math.max(0,r.top),i=(r.left+r.right)/2,s=o+1;s<Math.min(innerHeight,r.bottom);s+=5){var a=t.root.elementFromPoint(i,s);if(a!=t.dom&&t.dom.contains(a)){var c=a.getBoundingClientRect();if(c.top>=o-20){e=a,n=c.top;break}}}return{refDOM:e,refTop:n,stack:Le(t.dom)}}(this);if(b){this.domObserver.stop();var w=_&&(ve.ie||ve.chrome)&&!r.selection.empty&&!t.selection.empty&&(l=r.selection,u=t.selection,p=Math.min(l.$anchor.sharedDepth(l.head),u.$anchor.sharedDepth(u.head)),l.$anchor.node(p)!=u.$anchor.node(p));_&&(!o&&this.docView.update(t.doc,y,v,this)||(this.docView.destroy(),this.docView=on(t.doc,y,v,this.dom,this))),w||!(this.mouseDown&&this.domObserver.currentSelection.eq(this.root.getSelection())&&(s=this,a=s.docView.domFromPos(s.state.selection.anchor),c=s.root.getSelection(),Ae(a.node,a.offset,c.anchorNode,c.anchorOffset)))?Nn(this,w):(Pn(this,t.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(r),"reset"==k)this.dom.scrollTop=0;else if("to selection"==k){var C=this.root.getSelection().focusNode;this.someProp("handleScrollToSelection",(function(t){return t(n)}))||(t.selection instanceof Xt?Re(this,this.docView.domAfterPos(t.selection.from).getBoundingClientRect(),C):Re(this,this.coordsAtPos(t.selection.head),C))}else x&&(f=(h=x).refDOM,d=h.refTop,m=h.stack,g=f?f.getBoundingClientRect().top:0,qe(m,0==g?0:g-d))},Wr.prototype.destroyPluginViews=function(){for(var t;t=this.pluginViews.pop();)t.destroy&&t.destroy()},Wr.prototype.updatePluginViews=function(t){if(t&&t.plugins==this.state.plugins)for(var e=0;e<this.pluginViews.length;e++){var n=this.pluginViews[e];n.update&&n.update(this,t)}else{this.destroyPluginViews();for(var r=0;r<this.state.plugins.length;r++){var o=this.state.plugins[r];o.spec.view&&this.pluginViews.push(o.spec.view(this))}}},Wr.prototype.someProp=function(t,e){var n,r=this._props&&this._props[t];if(null!=r&&(n=e?e(r):r))return n;var o=this.state.plugins;if(o)for(var i=0;i<o.length;i++){var s=o[i].props[t];if(null!=s&&(n=e?e(s):s))return n}},Wr.prototype.hasFocus=function(){return this.root.activeElement==this.dom},Wr.prototype.focus=function(){this.domObserver.stop(),this.editable&&function(t){if(t.setActive)return t.setActive();if(Fe)return t.focus(Fe);var e=Le(t);t.focus(null==Fe?{get preventScroll(){return Fe={preventScroll:!0},!0}}:void 0),Fe||(Fe=!1,qe(e,0))}(this.dom),Nn(this),this.domObserver.start()},Hr.root.get=function(){var t=this._root;if(null==t)for(var e=this.dom.parentNode;e;e=e.parentNode)if(9==e.nodeType||11==e.nodeType&&e.host)return e.getSelection||(Object.getPrototypeOf(e).getSelection=function(){return document.getSelection()}),this._root=e;return t||document},Wr.prototype.posAtCoords=function(t){return $e(this,t)},Wr.prototype.coordsAtPos=function(t){return Ve(this,t)},Wr.prototype.domAtPos=function(t){return this.docView.domFromPos(t)},Wr.prototype.nodeDOM=function(t){var e=this.docView.descAt(t);return e?e.nodeDOM:null},Wr.prototype.posAtDOM=function(t,e,n){void 0===n&&(n=-1);var r=this.docView.posFromDOM(t,e,n);if(null==r)throw new RangeError("DOM position not inside the editor");return r},Wr.prototype.endOfTextblock=function(t,e){return Ke(this,e||this.state,t)},Wr.prototype.destroy=function(){this.docView&&(!function(t){for(var e in t.domObserver.stop(),t.eventHandlers)t.dom.removeEventListener(e,t.eventHandlers[e]);clearTimeout(t.composingTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],Zr(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)},Wr.prototype.dispatchEvent=function(t){return function(t,e){lr(t,e)||!ir[e.type]||!t.editable&&e.type in sr||ir[e.type](t,e)}(this,t)},Wr.prototype.dispatch=function(t){var e=this._props.dispatchTransaction;e?e.call(this,t):this.updateState(this.state.apply(t))},Object.defineProperties(Wr.prototype,Hr);var Xr=function(){};Xr.prototype.append=function(t){return t.length?(t=Xr.from(t),!this.length&&t||t.length<200&&this.leafAppend(t)||this.length<200&&t.leafPrepend(this)||this.appendInner(t)):this},Xr.prototype.prepend=function(t){return t.length?Xr.from(t).append(this):this},Xr.prototype.appendInner=function(t){return new eo(this,t)},Xr.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.length),t>=e?Xr.empty:this.sliceInner(Math.max(0,t),Math.min(this.length,e))},Xr.prototype.get=function(t){if(!(t<0||t>=this.length))return this.getInner(t)},Xr.prototype.forEach=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=this.length),e<=n?this.forEachInner(t,e,n,0):this.forEachInvertedInner(t,e,n,0)},Xr.prototype.map=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=this.length);var r=[];return this.forEach((function(e,n){return r.push(t(e,n))}),e,n),r},Xr.from=function(t){return t instanceof Xr?t:t&&t.length?new to(t):Xr.empty};var to=function(t){function e(e){t.call(this),this.values=e}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={length:{configurable:!0},depth:{configurable:!0}};return e.prototype.flatten=function(){return this.values},e.prototype.sliceInner=function(t,n){return 0==t&&n==this.length?this:new e(this.values.slice(t,n))},e.prototype.getInner=function(t){return this.values[t]},e.prototype.forEachInner=function(t,e,n,r){for(var o=e;o<n;o++)if(!1===t(this.values[o],r+o))return!1},e.prototype.forEachInvertedInner=function(t,e,n,r){for(var o=e-1;o>=n;o--)if(!1===t(this.values[o],r+o))return!1},e.prototype.leafAppend=function(t){if(this.length+t.length<=200)return new e(this.values.concat(t.flatten()))},e.prototype.leafPrepend=function(t){if(this.length+t.length<=200)return new e(t.flatten().concat(this.values))},n.length.get=function(){return this.values.length},n.depth.get=function(){return 0},Object.defineProperties(e.prototype,n),e}(Xr);Xr.empty=new to([]);var eo=function(t){function e(e,n){t.call(this),this.left=e,this.right=n,this.length=e.length+n.length,this.depth=Math.max(e.depth,n.depth)+1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flatten=function(){return this.left.flatten().concat(this.right.flatten())},e.prototype.getInner=function(t){return t<this.left.length?this.left.get(t):this.right.get(t-this.left.length)},e.prototype.forEachInner=function(t,e,n,r){var o=this.left.length;return!(e<o&&!1===this.left.forEachInner(t,e,Math.min(n,o),r))&&(!(n>o&&!1===this.right.forEachInner(t,Math.max(e-o,0),Math.min(this.length,n)-o,r+o))&&void 0)},e.prototype.forEachInvertedInner=function(t,e,n,r){var o=this.left.length;return!(e>o&&!1===this.right.forEachInvertedInner(t,e-o,Math.max(n,o)-o,r+o))&&(!(n<o&&!1===this.left.forEachInvertedInner(t,Math.min(e,o),n,r))&&void 0)},e.prototype.sliceInner=function(t,e){if(0==t&&e==this.length)return this;var n=this.left.length;return e<=n?this.left.slice(t,e):t>=n?this.right.slice(t-n,e-n):this.left.slice(t,n).append(this.right.slice(0,e-n))},e.prototype.leafAppend=function(t){var n=this.right.leafAppend(t);if(n)return new e(this.left,n)},e.prototype.leafPrepend=function(t){var n=this.left.leafPrepend(t);if(n)return new e(n,this.right)},e.prototype.appendInner=function(t){return this.left.depth>=Math.max(this.right.depth,t.depth)+1?new e(this.left,new e(this.right,t)):new e(this,t)},e}(Xr),no=Xr,ro=function(t,e){this.items=t,this.eventCount=e};ro.prototype.popEvent=function(t,e){var n=this;if(0==this.eventCount)return null;for(var r,o,i=this.items.length;;i--){if(this.items.get(i-1).selection){--i;break}}e&&(r=this.remapping(i,this.items.length),o=r.maps.length);var s,a,c=t.tr,l=[],u=[];return this.items.forEach((function(t,e){if(!t.step)return r||(r=n.remapping(i,e+1),o=r.maps.length),o--,void u.push(t);if(r){u.push(new oo(t.map));var p,h=t.step.map(r.slice(o));h&&c.maybeStep(h).doc&&(p=c.mapping.maps[c.mapping.maps.length-1],l.push(new oo(p,null,null,l.length+u.length))),o--,p&&r.appendMap(p,o)}else c.maybeStep(t.step);return t.selection?(s=r?t.selection.map(r.slice(o)):t.selection,a=new ro(n.items.slice(0,i).append(u.reverse().concat(l)),n.eventCount-1),!1):void 0}),this.items.length,0),{remaining:a,transform:c,selection:s}},ro.prototype.addTransform=function(t,e,n,r){for(var o=[],i=this.eventCount,s=this.items,a=!r&&s.length?s.get(s.length-1):null,c=0;c<t.steps.length;c++){var l,u=t.steps[c].invert(t.docs[c]),p=new oo(t.mapping.maps[c],u,e);(l=a&&a.merge(p))&&(p=l,c?o.pop():s=s.slice(0,s.length-1)),o.push(p),e&&(i++,e=null),r||(a=p)}var h,f,d,m=i-n.depth;return m>so&&(f=m,(h=s).forEach((function(t,e){if(t.selection&&0==f--)return d=e,!1})),s=h.slice(d),i-=m),new ro(s.append(o),i)},ro.prototype.remapping=function(t,e){var n=new yt;return this.items.forEach((function(e,r){var o=null!=e.mirrorOffset&&r-e.mirrorOffset>=t?n.maps.length-e.mirrorOffset:null;n.appendMap(e.map,o)}),t,e),n},ro.prototype.addMaps=function(t){return 0==this.eventCount?this:new ro(this.items.append(t.map((function(t){return new oo(t)}))),this.eventCount)},ro.prototype.rebased=function(t,e){if(!this.eventCount)return this;var n=[],r=Math.max(0,this.items.length-e),o=t.mapping,i=t.steps.length,s=this.eventCount;this.items.forEach((function(t){t.selection&&s--}),r);var a=e;this.items.forEach((function(e){var r=o.getMirror(--a);if(null!=r){i=Math.min(i,r);var c=o.maps[r];if(e.step){var l=t.steps[r].invert(t.docs[r]),u=e.selection&&e.selection.map(o.slice(a+1,r));u&&s++,n.push(new oo(c,l,u))}else n.push(new oo(c))}}),r);for(var c=[],l=e;l<i;l++)c.push(new oo(o.maps[l]));var u=this.items.slice(0,r).append(c).append(n),p=new ro(u,s);return p.emptyItemCount()>500&&(p=p.compress(this.items.length-n.length)),p},ro.prototype.emptyItemCount=function(){var t=0;return this.items.forEach((function(e){e.step||t++})),t},ro.prototype.compress=function(t){void 0===t&&(t=this.items.length);var e=this.remapping(0,t),n=e.maps.length,r=[],o=0;return this.items.forEach((function(i,s){if(s>=t)r.push(i),i.selection&&o++;else if(i.step){var a=i.step.map(e.slice(n)),c=a&&a.getMap();if(n--,c&&e.appendMap(c,n),a){var l=i.selection&&i.selection.map(e.slice(n));l&&o++;var u,p=new oo(c.invert(),a,l),h=r.length-1;(u=r.length&&r[h].merge(p))?r[h]=u:r.push(p)}}else i.map&&n--}),this.items.length,0),new ro(no.from(r.reverse()),o)},ro.empty=new ro(no.empty,0);var oo=function(t,e,n,r){this.map=t,this.step=e,this.selection=n,this.mirrorOffset=r};oo.prototype.merge=function(t){if(this.step&&t.step&&!t.selection){var e=t.step.merge(this.step);if(e)return new oo(e.getMap().invert(),e,this.selection)}};var io=function(t,e,n,r){this.done=t,this.undone=e,this.prevRanges=n,this.prevTime=r},so=20;function ao(t){var e=[];return t.forEach((function(t,n,r,o){return e.push(r,o)})),e}function co(t,e){if(!t)return null;for(var n=[],r=0;r<t.length;r+=2){var o=e.map(t[r],1),i=e.map(t[r+1],-1);o<=i&&n.push(o,i)}return n}function lo(t,e,n,r){var o=ho(e),i=fo.get(e).spec.config,s=(r?t.undone:t.done).popEvent(e,o);if(s){var a=s.selection.resolve(s.transform.doc),c=(r?t.done:t.undone).addTransform(s.transform,e.selection.getBookmark(),i,o),l=new io(r?c:s.remaining,r?s.remaining:c,null,0);n(s.transform.setSelection(a).setMeta(fo,{redo:r,historyState:l}).scrollIntoView())}}var uo=!1,po=null;function ho(t){var e=t.plugins;if(po!=e){uo=!1,po=e;for(var n=0;n<e.length;n++)if(e[n].spec.historyPreserveItems){uo=!0;break}}return uo}var fo=new ge("history"),mo=new ge("closeHistory");function go(t){return t={depth:t&&t.depth||100,newGroupDelay:t&&t.newGroupDelay||500},new fe({key:fo,state:{init:function(){return new io(ro.empty,ro.empty,null,0)},apply:function(e,n,r){return function(t,e,n,r){var o,i=n.getMeta(fo);if(i)return i.historyState;n.getMeta(mo)&&(t=new io(t.done,t.undone,null,0));var s=n.getMeta("appendedTransaction");if(0==n.steps.length)return t;if(s&&s.getMeta(fo))return s.getMeta(fo).redo?new io(t.done.addTransform(n,null,r,ho(e)),t.undone,ao(n.mapping.maps[n.steps.length-1]),t.prevTime):new io(t.done,t.undone.addTransform(n,null,r,ho(e)),null,t.prevTime);if(!1===n.getMeta("addToHistory")||s&&!1===s.getMeta("addToHistory"))return(o=n.getMeta("rebased"))?new io(t.done.rebased(n,o),t.undone.rebased(n,o),co(t.prevRanges,n.mapping),t.prevTime):new io(t.done.addMaps(n.mapping.maps),t.undone.addMaps(n.mapping.maps),co(t.prevRanges,n.mapping),t.prevTime);var a=0==t.prevTime||!s&&(t.prevTime<(n.time||0)-r.newGroupDelay||!function(t,e){if(!e)return!1;if(!t.docChanged)return!0;var n=!1;return t.mapping.maps[0].forEach((function(t,r){for(var o=0;o<e.length;o+=2)t<=e[o+1]&&r>=e[o]&&(n=!0)})),n}(n,t.prevRanges)),c=s?co(t.prevRanges,n.mapping):ao(n.mapping.maps[n.steps.length-1]);return new io(t.done.addTransform(n,a?e.selection.getBookmark():null,r,ho(e)),ro.empty,c,n.time)}(n,r,e,t)}},config:t})}function vo(t,e){var n=fo.getState(t);return!(!n||0==n.done.eventCount)&&(e&&lo(n,t,e,!1),!0)}function yo(t,e){var n=fo.getState(t);return!(!n||0==n.undone.eventCount)&&(e&&lo(n,t,e,!0),!0)}var ko=function(t,e){var n;this.match=t,this.handler="string"==typeof e?(n=e,function(t,e,r,o){var i=n;if(e[1]){var s=e[0].lastIndexOf(e[1]);i+=e[0].slice(s+e[1].length);var a=(r+=s)-o;a>0&&(i=e[0].slice(s-a,s)+i,r=o)}return t.tr.insertText(i,r,o)}):e};function _o(t,e,n,r,o,i){if(t.composing)return!1;var s=t.state,a=s.doc.resolve(e);if(a.parent.type.spec.code)return!1;for(var c=a.parent.textBetween(Math.max(0,a.parentOffset-500),a.parentOffset,null,"￼")+r,l=0;l<o.length;l++){var u=o[l].match.exec(c),p=u&&o[l].handler(s,u,e-(u[0].length-r.length),n);if(p)return t.dispatch(p.setMeta(i,{transform:p,from:e,to:n,text:r})),!0}return!1}new ko(/--$/,"—");var bo=new ko(/\.\.\.$/,"…"),xo=[new ko(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/,"“"),new ko(/"$/,"”"),new ko(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/,"‘"),new ko(/'$/,"’")];function wo(t,e,n){return new ko(t,(function(t,r,o,i){var s=t.doc.resolve(o),a=n instanceof Function?n(r):n;return s.node(-1).canReplaceWith(s.index(-1),s.indexAfter(-1),e)?t.tr.delete(o,i).setBlockType(o,o,e,a):null}))}var Co=["ol",0],So=["ul",0],Ao=["li",0],Mo={attrs:{order:{default:1}},parseDOM:[{tag:"ol",getAttrs:function(t){return{order:t.hasAttribute("start")?+t.getAttribute("start"):1}}}],toDOM:function(t){return 1==t.attrs.order?Co:["ol",{start:t.attrs.order},0]}},Do={parseDOM:[{tag:"ul"}],toDOM:function(){return So}},Eo={parseDOM:[{tag:"li"}],toDOM:function(){return Ao},defining:!0};function Oo(t,e){return function(n,r){var o=n.selection,s=o.$from,a=o.$to,c=s.blockRange(a),l=!1,u=c;if(!c)return!1;if(c.depth>=2&&s.node(c.depth-1).type.compatibleContent(t)&&0==c.startIndex){if(0==s.index(c.depth-1))return!1;var p=n.doc.resolve(c.start-2);u=new A(p,p,c.depth),c.endIndex<c.parent.childCount&&(c=new A(s,n.doc.resolve(a.end(c.depth)),c.depth)),l=!0}var f=Tt(u,t,e,c);return!!f&&(r&&r(function(t,e,n,r,o){for(var s=i.empty,a=n.length-1;a>=0;a--)s=i.from(n[a].type.create(n[a].attrs,s));t.step(new Mt(e.start-(r?2:0),e.end,e.start,e.end,new h(s,0,0),n.length,!0));for(var c=0,l=0;l<n.length;l++)n[l].type==o&&(c=l+1);for(var u=n.length-c,p=e.start+n.length-(r?2:0),f=e.parent,d=e.startIndex,m=e.endIndex,g=!0;d<m;d++,g=!1)!g&&It(t.doc,p,u)&&(t.split(p,u),p+=2*u),p+=f.child(d).nodeSize;return t}(n.tr,c,f,l,t).scrollIntoView()),!0)}}function To(t){return function(e,n){var r=e.selection,o=r.$from,s=r.$to,a=o.blockRange(s,(function(e){return e.childCount&&e.firstChild.type==t}));return!!a&&(!n||(o.node(a.depth-1).type==t?function(t,e,n,r){var o=t.tr,s=r.end,a=r.$to.end(r.depth);s<a&&(o.step(new Mt(s-1,a,s,a,new h(i.from(n.create(null,r.parent.copy())),1,0),1,!0)),r=new A(o.doc.resolve(r.$from.pos),o.doc.resolve(a),r.depth));return e(o.lift(r,Ot(r)).scrollIntoView()),!0}(e,n,t,a):function(t,e,n){for(var r=t.tr,o=n.parent,s=n.end,a=n.endIndex-1,c=n.startIndex;a>c;a--)s-=o.child(a).nodeSize,r.delete(s-1,s+1);var l=r.doc.resolve(n.start),u=l.nodeAfter,p=0==n.startIndex,f=n.endIndex==o.childCount,d=l.node(-1),m=l.index(-1);if(!d.canReplace(m+(p?0:1),m+1,u.content.append(f?i.empty:i.from(o))))return!1;var g=l.pos,v=g+u.nodeSize;return r.step(new Mt(g-(p?1:0),v+(f?1:0),g+1,v-1,new h((p?i.empty:i.from(o.copy(i.empty))).append(f?i.empty:i.from(o.copy(i.empty))),p?0:1,f?0:1),p?0:1)),e(r.scrollIntoView()),!0}(e,n,a)))}}var zo=["p",0],Io=["blockquote",0],No=["hr"],Ro=["pre",["code",0]],Lo=["br"],qo={doc:{content:"block+"},paragraph:{content:"inline*",group:"block",parseDOM:[{tag:"p"}],toDOM:function(){return zo}},blockquote:{content:"block+",group:"block",defining:!0,parseDOM:[{tag:"blockquote"}],toDOM:function(){return Io}},horizontal_rule:{group:"block",parseDOM:[{tag:"hr"}],toDOM:function(){return No}},heading:{attrs:{level:{default:1}},content:"inline*",group:"block",defining:!0,parseDOM:[{tag:"h1",attrs:{level:1}},{tag:"h2",attrs:{level:2}},{tag:"h3",attrs:{level:3}},{tag:"h4",attrs:{level:4}},{tag:"h5",attrs:{level:5}},{tag:"h6",attrs:{level:6}}],toDOM:function(t){return["h"+t.attrs.level,0]}},code_block:{content:"text*",marks:"",group:"block",code:!0,defining:!0,parseDOM:[{tag:"pre",preserveWhitespace:"full"}],toDOM:function(){return Ro}},text:{group:"inline"},image:{inline:!0,attrs:{src:{},alt:{default:null},title:{default:null}},group:"inline",draggable:!0,parseDOM:[{tag:"img[src]",getAttrs:function(t){return{src:t.getAttribute("src"),title:t.getAttribute("title"),alt:t.getAttribute("alt")}}}],toDOM:function(t){var e=t.attrs;return["img",{src:e.src,alt:e.alt,title:e.title}]}},hard_break:{inline:!0,group:"inline",selectable:!1,parseDOM:[{tag:"br"}],toDOM:function(){return Lo}}},Fo=["em",0],Po=["strong",0],Bo=["code",0],$o={link:{attrs:{href:{},title:{default:null}},inclusive:!1,parseDOM:[{tag:"a[href]",getAttrs:function(t){return{href:t.getAttribute("href"),title:t.getAttribute("title")}}}],toDOM:function(t){var e=t.attrs;return["a",{href:e.href,title:e.title},0]}},em:{parseDOM:[{tag:"i"},{tag:"em"},{style:"font-style=italic"}],toDOM:function(){return Fo}},strong:{parseDOM:[{tag:"strong"},{tag:"b",getAttrs:function(t){return"normal"!=t.style.fontWeight&&null}},{style:"font-weight",getAttrs:function(t){return/^(bold(er)?|[5-9]\d{2,})$/.test(t)&&null}}],toDOM:function(){return Po}},code:{parseDOM:[{tag:"code"}],toDOM:function(){return Bo}}};new Q({nodes:qo,marks:$o});const jo={content:"block+",toDOM:t=>["main",{class:"sn-editor"},0],parseDOM:[{tag:"main"}]},Vo={content:"inline*",defining:!0,group:"block",toDOM:t=>["h1",{class:"sn-editor"},0],parseDOM:[{tag:"h1"}]},Uo={content:"inline*",defining:!0,group:"block",toDOM:t=>["h2",{class:"sn-editor"},0],parseDOM:[{tag:"h2"}]},Jo={content:"inline*",group:"block",marks:"_",toDOM:t=>["p",{class:"sn-editor"},0],parseDOM:[{tag:"p"}]};var Zo;!function(t){t[t.DONE=0]="DONE",t[t.EMPTY=1]="EMPTY"}(Zo||(Zo={}));const Wo={attrs:{status:{default:Zo.EMPTY}},content:"inline*",defining:!0,group:"block",marks:"_",toDOM:t=>["div",{class:"checklist-item"},["input",Object.assign({type:"checkbox"},t.attrs.status===Zo.DONE&&{checked:"true"})],["p",0]],parseDOM:[{contentElement:"p",tag:"div.checklist-item",getAttrs:t=>({status:t.querySelector("input").checked?Zo.DONE:Zo.EMPTY})}]},Ho=Object.assign(Object.assign({},qo.code_block),{attrs:Object.assign(Object.assign({},qo.code_block.attrs),{markdown_escaped:{default:!1}}),toDOM(t){const e=["pre",{"data-markdown_escaped":t.attrs.markdown_escaped},["code",0]];return t.attrs.markdown_escaped&&e.push(["div",{class:"info"},"i"]),e}}),Go=new Q({nodes:{doc:jo,paragraph:Jo,checklist_item:Wo,unordered_list:Object.assign(Object.assign({},Do),{content:"list_item+",group:"block",selectable:!1}),ordered_list:Object.assign(Object.assign({},Mo),{content:"list_item+",group:"block",selectable:!1}),list_item:Object.assign(Object.assign({},Eo),{content:"paragraph+",selectable:!1}),heading1:Vo,heading2:Uo,text:{group:"inline"},code_block:Ho},marks:{link:Object.assign({},$o.link),em:Object.assign(Object.assign({},$o.em),{inclusive:!1}),strong:Object.assign(Object.assign({},$o.strong),{inclusive:!1}),code:Object.assign(Object.assign({},$o.code),{inclusive:!1,attrs:Object.assign(Object.assign({},$o.code.attrs),{markdown_escaped:{default:!1}})})}});function Ko(t,e){return new ko(new RegExp(`${t}(.*?)${t}$`),(t,n,r,o)=>{const[i,s]=n,{tr:a}=t;if(!s)return;const c=t.doc.resolve(r).marksAcross(t.doc.resolve(o));return a.replaceRangeWith(r,o,Go.text(s,[...c,e.create()]))})}function Yo(t,e){return new ko(new RegExp("^"+t),(t,n,r,o)=>{const{$from:i}=t.selection;if(i.depth>1)return;const{tr:s}=t;return s.replaceRangeWith(r,o,e.createAndFill()),s.setSelection(Ht.near(s.doc.resolve(r))),s})}const Qo=(Xo={rules:[...xo,bo,wo(/^# /,Go.nodes.heading2),wo(/^```/,Go.nodes.code_block),Ko("`",Go.marks.code),Ko("\\*\\*",Go.marks.strong),Ko("\\*",Go.marks.em),Yo("1. ",Go.nodes.ordered_list),Yo("- ",Go.nodes.unordered_list)]},ti=Xo.rules,ei=new fe({state:{init:function(){return null},apply:function(t,e){var n=t.getMeta(this);return n||(t.selectionSet||t.docChanged?null:e)}},props:{handleTextInput:function(t,e,n,r){return _o(t,e,n,r,ti,ei)},handleDOMEvents:{compositionend:function(t){setTimeout((function(){var e=t.state.selection.$cursor;e&&_o(t,e.pos,e.pos,"",ti,ei)}))}}},isInputRules:!0}));var Xo,ti,ei;function ni(t,e){return!t.selection.empty&&(e&&e(t.tr.deleteSelection().scrollIntoView()),!0)}function ri(t,e){for(;t;t="start"==e?t.firstChild:t.lastChild)if(t.isTextblock)return!0;return!1}function oi(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){if(t.index(e)>0)return t.doc.resolve(t.before(e+1));if(t.node(e).type.spec.isolating)break}return null}function ii(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){var n=t.node(e);if(t.index(e)+1<n.childCount)return t.doc.resolve(t.after(e+1));if(n.type.spec.isolating)break}return null}function si(t){for(var e=0;e<t.edgeCount;e++){var n=t.edge(e).type;if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}function ai(t,e){var n=t.selection,r=n.$from,o=n.$to;if(t.selection instanceof Xt&&t.selection.node.isBlock)return!(!r.parentOffset||!It(t.doc,r.pos))&&(e&&e(t.tr.split(r.pos).scrollIntoView()),!0);if(!r.parent.isBlock)return!1;if(e){var s=o.parentOffset==o.parent.content.size,a=t.tr;t.selection instanceof Yt&&a.deleteSelection();var c=0==r.depth?null:si(r.node(-1).contentMatchAt(r.indexAfter(-1))),l=s&&c?[{type:c}]:null,u=It(a.doc,a.mapping.map(r.pos),1,l);l||u||!It(a.doc,a.mapping.map(r.pos),1,c&&[{type:c}])||(l=[{type:c}],u=!0),u&&(a.split(a.mapping.map(r.pos),1,l),s||r.parentOffset||r.parent.type==c||!r.node(-1).canReplace(r.index(-1),r.indexAfter(-1),i.from(c.create(),r.parent))||a.setNodeMarkup(a.mapping.map(r.before()),c)),e(a.scrollIntoView())}return!0}function ci(t,e,n){var r,o,s=e.nodeBefore,a=e.nodeAfter;if(s.type.spec.isolating||a.type.spec.isolating)return!1;if(function(t,e,n){var r=e.nodeBefore,o=e.nodeAfter,i=e.index();return!!(r&&o&&r.type.compatibleContent(o.type))&&(!r.content.size&&e.parent.canReplace(i-1,i)?(n&&n(t.tr.delete(e.pos-r.nodeSize,e.pos).scrollIntoView()),!0):!(!e.parent.canReplace(i,i+1)||!o.isTextblock&&!Nt(t.doc,e.pos))&&(n&&n(t.tr.clearIncompatible(e.pos,r.type,r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()),!0))}(t,e,n))return!0;if(e.parent.canReplace(e.index(),e.index()+1)&&(r=(o=s.contentMatchAt(s.childCount)).findWrapping(a.type))&&o.matchType(r[0]||a.type).validEnd){if(n){for(var c=e.pos+a.nodeSize,l=i.empty,u=r.length-1;u>=0;u--)l=i.from(r[u].create(null,l));l=i.from(s.copy(l));var p=t.tr.step(new Mt(e.pos-1,c,e.pos,c,new h(l,1,0),r.length,!0)),f=c+2*r.length;Nt(p.doc,f)&&p.join(f),n(p.scrollIntoView())}return!0}var d=Ht.findFrom(e,1),m=d&&d.$from.blockRange(d.$to),g=m&&Ot(m);return null!=g&&g>=e.depth&&(n&&n(t.tr.lift(m,g).scrollIntoView()),!0)}function li(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return function(e,n,r){for(var o=0;o<t.length;o++)if(t[o](e,n,r))return!0;return!1}}var ui=li(ni,(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("backward",t):r.parentOffset>0))return!1;var o=oi(r);if(!o){var i=r.blockRange(),s=i&&Ot(i);return null!=s&&(e&&e(t.tr.lift(i,s).scrollIntoView()),!0)}var a=o.nodeBefore;if(!a.type.spec.isolating&&ci(t,o,e))return!0;if(0==r.parent.content.size&&(ri(a,"end")||Xt.isSelectable(a))){if(e){var c=t.tr.deleteRange(r.before(),r.after());c.setSelection(ri(a,"end")?Ht.findFrom(c.doc.resolve(c.mapping.map(o.pos,-1)),-1):Xt.create(c.doc,o.pos-a.nodeSize)),e(c.scrollIntoView())}return!0}return!(!a.isAtom||o.depth!=r.depth-1)&&(e&&e(t.tr.delete(o.pos-a.nodeSize,o.pos).scrollIntoView()),!0)}),(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("backward",t):r.parentOffset>0))return!1;var o=oi(r),i=o&&o.nodeBefore;return!(!i||!Xt.isSelectable(i))&&(e&&e(t.tr.setSelection(Xt.create(t.doc,o.pos-i.nodeSize)).scrollIntoView()),!0)})),pi=li(ni,(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=ii(r);if(!o)return!1;var i=o.nodeAfter;if(ci(t,o,e))return!0;if(0==r.parent.content.size&&(ri(i,"start")||Xt.isSelectable(i))){if(e){var s=t.tr.deleteRange(r.before(),r.after());s.setSelection(ri(i,"start")?Ht.findFrom(s.doc.resolve(s.mapping.map(o.pos)),1):Xt.create(s.doc,s.mapping.map(o.pos))),e(s.scrollIntoView())}return!0}return!(!i.isAtom||o.depth!=r.depth-1)&&(e&&e(t.tr.delete(o.pos,o.pos+i.nodeSize).scrollIntoView()),!0)}),(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=ii(r),i=o&&o.nodeAfter;return!(!i||!Xt.isSelectable(i))&&(e&&e(t.tr.setSelection(Xt.create(t.doc,o.pos)).scrollIntoView()),!0)})),hi={Enter:li((function(t,e){var n=t.selection,r=n.$head,o=n.$anchor;return!(!r.parent.type.spec.code||!r.sameParent(o))&&(e&&e(t.tr.insertText("\n").scrollIntoView()),!0)}),(function(t,e){var n=t.selection,r=n.$from,o=n.$to;if(r.parent.inlineContent||o.parent.inlineContent)return!1;var i=si(r.parent.contentMatchAt(o.indexAfter()));if(!i||!i.isTextblock)return!1;if(e){var s=(!r.parentOffset&&o.index()<o.parent.childCount?r:o).pos,a=t.tr.insert(s,i.createAndFill());a.setSelection(Yt.create(a.doc,s+1)),e(a.scrollIntoView())}return!0}),(function(t,e){var n=t.selection.$cursor;if(!n||n.parent.content.size)return!1;if(n.depth>1&&n.after()!=n.end(-1)){var r=n.before();if(It(t.doc,r))return e&&e(t.tr.split(r).scrollIntoView()),!0}var o=n.blockRange(),i=o&&Ot(o);return null!=i&&(e&&e(t.tr.lift(o,i).scrollIntoView()),!0)}),ai),"Mod-Enter":function(t,e){var n=t.selection,r=n.$head,o=n.$anchor;if(!r.parent.type.spec.code||!r.sameParent(o))return!1;var i=r.node(-1),s=r.indexAfter(-1),a=si(i.contentMatchAt(s));if(!i.canReplaceWith(s,s,a))return!1;if(e){var c=r.after(),l=t.tr.replaceWith(c,c,a.createAndFill());l.setSelection(Ht.near(l.doc.resolve(c),1)),e(l.scrollIntoView())}return!0},Backspace:ui,"Mod-Backspace":ui,Delete:pi,"Mod-Delete":pi,"Mod-a":function(t,e){return e&&e(t.tr.setSelection(new ee(t.doc))),!0}},fi={"Ctrl-h":hi.Backspace,"Alt-Backspace":hi["Mod-Backspace"],"Ctrl-d":hi.Delete,"Ctrl-Alt-Backspace":hi["Mod-Delete"],"Alt-Delete":hi["Mod-Delete"],"Alt-d":hi["Mod-Delete"]};for(var di in hi)fi[di]=hi[di];var mi=("undefined"!=typeof navigator?/Mac/.test(navigator.platform):"undefined"!=typeof os&&"darwin"==os.platform())?fi:hi;class gi{constructor(t,{onConfirm:e,onClear:n,text:r,url:o}){this.showCls="active",this.destroy=()=>{this.confirmBtn.removeEventListener("click",this.handleConfirm),this.cancelBtn.removeEventListener("click",this.handleCancel),this.clearBtn.removeEventListener("click",this.handleClear),document.removeEventListener("keydown",this.handleGlobalKeydown),this.el.classList.remove(this.showCls)},this.handleConfirm=()=>{this.onConfirm({text:this.textInput.value,url:this.urlInput.value}),this.destroy()},this.handleClear=()=>{this.onClear(),this.destroy()},this.handleCancel=()=>{this.destroy()},this.handleGlobalKeydown=t=>{const e=13===t.which;if(document.activeElement===this.textInput||document.activeElement===this.urlInput&&e)return void this.handleConfirm();t.which;27===t.which&&this.handleCancel()},this.handleGlobalClick=t=>{!1===this.frameEl.contains(t.target)&&this.destroy()},this.el=t,this.textInput.value=this.text=r,this.urlInput.value=this.url=o,this.urlOpenLink.href=o,this.onConfirm=e,this.onClear=n,this.frameEl=t.querySelector("#frame"),n?this.clearBtn.classList.add(this.showCls):this.clearBtn.classList.remove(this.showCls),this.el.classList.add(this.showCls),this.confirmBtn.addEventListener("click",this.handleConfirm),this.cancelBtn.addEventListener("click",this.handleCancel),this.clearBtn.addEventListener("click",this.handleClear),document.addEventListener("keydown",this.handleGlobalKeydown),document.addEventListener("click",this.handleGlobalClick),this.urlInput.focus()}get textInput(){return this.el.querySelector("input#text")}get urlInput(){return this.el.querySelector("input#url")}get urlOpenLink(){return this.el.querySelector("label[for=url] a")}get confirmBtn(){return this.el.querySelector("button#confirm")}get cancelBtn(){return this.el.querySelector("button#cancel")}get clearBtn(){return this.el.querySelector("button#clear")}}class vi extends fe{constructor(t,e){super({view:n=>(this.view=n,this.modalEl=e,this.toolbarEl=t,t.addEventListener("click",this.handleToolbarClick),{destroy:()=>{var e;t.removeEventListener("click",this.handleToolbarClick),this.unhighlightSelectedAttrs(),null===(e=this.modal)||void 0===e||e.destroy()},update:(t,e)=>{this.unhighlightSelectedAttrs(),this.highlightSelectedAttrs(t.state)}}),props:{handleKeyDown:(t,e)=>{const n=84===e.which,r=e.ctrlKey;if(n&&r)return this.toggleChecklistItem(),!0;const o=55===e.which,i=e.metaKey;if(o&&i)return this.toggleList(Go.nodes.unordered_list,Go.nodes.list_item),!0;if(85===e.which&&r)return this.toggleList(Go.nodes.unordered_list,Go.nodes.list_item),!0;if(79===e.which&&r)return this.toggleList(Go.nodes.ordered_list,Go.nodes.list_item),!0;if(187===e.which&&r)return this.promoteHeading(this.view.state,this.view.dispatch),!0;if(74===e.which&&r)return this.swapTextBlock(Go.nodes.paragraph),!0;const s=32===e.which;if(r&&s)return function(t,e){const{$from:n,$to:r}=t.selection,o=n.blockRange(r);let i=!1;for(let t=o.startIndex,e=o.parent.child(t);t<o.endIndex;t+=1){if(e.type!==Go.nodes.checklist_item)return!1;if(e.attrs.status===Zo.DONE){i=!0;break}}if(!e)return!0;const{tr:s}=t;for(let t=o.startIndex,e=o.parent.child(t),n=o.start;t<o.endIndex;t+=1)s.setNodeMarkup(n,void 0,{status:i?Zo.EMPTY:Zo.DONE}),n+=e.nodeSize;return e(s),!0}(this.view.state,this.view.dispatch);const a=90===e.which;if(i&&a)return vo(this.view.state,this.view.dispatch);const c=89===e.which;if(i&&c)return yo(this.view.state,this.view.dispatch);const l=73===e.which;if(i&&l)return this.toggleMark(Go.marks.em),!0;const u=66===e.which;if(i&&u)return this.toggleMark(Go.marks.strong),!0;const p=222===e.which;if(i&&p)return this.toggleMark(Go.marks.code),!0;const h=75===e.which;return!(!i||!h)&&(this.activateLinkModal(this.view.state,this.view.dispatch),!0)}}}),this.swapTextBlock=t=>{let{dispatch:e,state:n}=this.view,{tr:r}=n;t!==Go.nodes.unordered_list&&t!==Go.nodes.ordered_list&&To(Go.nodes.list_item)(n,e),({dispatch:e,state:n}=this.view),({tr:r}=n);const{selection:{from:o,to:i}}=n;r.setBlockType(o,i,t),e(r),this.view.focus()},this.promoteHeading=(t,e)=>{const{selection:n}=t;if(!n.empty)return;const{$from:{parent:{type:r}}}=n;let o;o=r===Go.nodes.heading2?Go.nodes.heading1:r===Go.nodes.heading1?Go.nodes.paragraph:Go.nodes.heading2,this.swapTextBlock(o)},this.toggleList=(t,e)=>{const{state:{selection:{$from:n,$to:r},tr:o}}=this.view;if(n.blockRange(r,e=>e.type===t)){const{dispatch:t,state:n}=this.view;To(e)(n,t)}else{const e=n.blockRange(r);for(let n=e.startIndex;n<e.endIndex;n+=1)if(e.parent.child(n).type===t)return;this.swapTextBlock(Go.nodes.paragraph);const{dispatch:o,state:i}=this.view;Oo(t)(i,o)}},this.toggleChecklistItem=()=>{const{dispatch:t,state:e}=this.view,{doc:n,tr:r}=e,{$from:o,$to:i}=e.selection,s=o.blockRange(i);for(let t=s.startIndex;t<s.endIndex;t+=1)if(s.parent.child(t).type===Go.nodes.checklist_item)return void this.swapTextBlock(Go.nodes.paragraph);this.swapTextBlock(Go.nodes.checklist_item)},this.activateLinkModal=(t,e)=>{const{doc:n,selection:r}=t,{$from:o,$to:i}=r,s=o.marks().find(t=>t.type===Go.marks.link),a=i.marks().find(t=>t.type===Go.marks.link),c=s&&a;if(r.empty&&!c)return!1;if(s!==a)return!1;if(!e)return!0;const l=s;let u,p,h,f;if(l){const r=o.parent.nodeAt(o.parentOffset-o.textOffset);p=o.pos-o.textOffset,u=p+r.nodeSize,h=r.text,f=l.attrs.href;const i=new Yt(n.resolve(p),n.resolve(u));e(t.tr.setSelection(i))}else u=i.pos,p=o.pos,h=t.doc.textBetween(o.pos,i.pos),f="";const d=l&&(()=>this.view.dispatch(this.view.state.tr.step(new Ft(p,u,l))));return this.modal=new gi(this.modalEl,{onClear:d,onConfirm:({text:t,url:e})=>{const n=Go.marks.link.create({href:e}),r=Go.text(t,[n]);this.view.dispatch(this.view.state.tr.replaceSelectionWith(r,!1))},text:h,url:f}),!0},this.toggleMark=t=>{var e,n;(e=t,function(t,r){var o=t.selection,i=o.empty,s=o.$cursor,a=o.ranges;if(i&&!s||!function(t,e,n){for(var r=function(r){var o=e[r],i=o.$from,s=o.$to,a=0==i.depth&&t.type.allowsMarkType(n);if(t.nodesBetween(i.pos,s.pos,(function(t){if(a)return!1;a=t.inlineContent&&t.type.allowsMarkType(n)})),a)return{v:!0}},o=0;o<e.length;o++){var i=r(o);if(i)return i.v}return!1}(t.doc,a,e))return!1;if(r)if(s)e.isInSet(t.storedMarks||s.marks())?r(t.tr.removeStoredMark(e)):r(t.tr.addStoredMark(e.create(n)));else{for(var c=!1,l=t.tr,u=0;!c&&u<a.length;u++){var p=a[u],h=p.$from,f=p.$to;c=t.doc.rangeHasMark(h.pos,f.pos,e)}for(var d=0;d<a.length;d++){var m=a[d],g=m.$from,v=m.$to;c?l.removeMark(g.pos,v.pos,e):l.addMark(g.pos,v.pos,e.create(n))}r(l.scrollIntoView())}return!0})(this.view.state,this.view.dispatch),this.view.focus()},this.unhighlightSelectedAttrs=()=>{this.toolbarEl.querySelectorAll(".selected").forEach(t=>{t.classList.remove("selected")})},this.highlightSelectedAttrs=t=>{const e=this.getSelectedFormatAttrs(t);e&&e.forEach(t=>{const e=this.toolbarEl.querySelector(`[data-format=${t}]`);e&&e.classList.add("selected")})},this.getSelectedFormatAndMarks=t=>{if(!t.selection)return;const e=[],{$from:n,$to:r,content:o}=t.selection,i=n.blockRange(r,t=>t.type!==Go.nodes.list_item);let s=null;for(let t=i.startIndex;t<i.endIndex;t+=1){const e=i.parent.child(t),n=e.type===Go.nodes.list_item?i.parent.type:e.type;if(null!==s){if(s!==n){s=null;break}}else s=n}e.push(s);const a=n.marksAcross(r);return a&&e.push(...a.map(t=>t.type)),e},this.getSelectedFormatAttrs=t=>{const[e,...n]=this.getSelectedFormatAndMarks(t),r=[];switch(e){case Go.nodes.heading1:case Go.nodes.heading2:r.push("heading");break;case Go.nodes.paragraph:r.push("paragraph");break;case Go.nodes.unordered_list:r.push("unordered_list");break;case Go.nodes.ordered_list:r.push("ordered_list");break;case Go.nodes.checklist_item:r.push("checklist_item");break;default:r.push(null)}return n.forEach(t=>{switch(t){case Go.marks.link:r.push("link");break;case Go.marks.em:r.push("em");break;case Go.marks.strong:r.push("strong");break;case Go.marks.code:r.push("code")}}),r},this.handleToolbarClick=t=>{const e=t.target.closest("[data-format]");e&&(t.stopPropagation(),this.applyFormat(e.getAttribute("data-format")))},this.applyFormat=t=>{switch(t){case"undo":vo(this.view.state,this.view.dispatch);break;case"redo":yo(this.view.state,this.view.dispatch);break;case"paragraph":this.swapTextBlock(Go.nodes.paragraph);break;case"code_block":this.swapTextBlock(Go.nodes.code_block);break;case"heading":this.promoteHeading(this.view.state,this.view.dispatch);break;case"unordered_list":this.toggleList(Go.nodes.unordered_list,Go.nodes.list_item);break;case"ordered_list":this.toggleList(Go.nodes.ordered_list,Go.nodes.list_item);break;case"checklist_item":this.toggleChecklistItem();break;case"strong":case"em":case"code":this.toggleMark(Go.marks[t]);break;case"link":this.activateLinkModal(this.view.state,this.view.dispatch)}}}}class yi extends fe{constructor(t,e){super({view:t=>(this.view=t,{destroy:()=>{this.hide()},update:(t,e)=>{this.checkSelection()}})}),this.checkSelection=()=>{const t=this.view.state.selection,{$cursor:e}=t;if(!1===Boolean(e&&e.nodeBefore&&e.nodeAfter&&e.nodeBefore.marks.some(t=>t.type===Go.marks.link)&&e.nodeAfter.marks.some(t=>t.type===Go.marks.link)))return void this.hide();const n=e.nodeBefore.marks.find(t=>t.type===Go.marks.link);this.show(e,n.attrs.href)},this.hide=()=>{this.tooltipEl.classList.remove("show")},this.show=(t,e)=>{const{left:n,top:r}=this.view.coordsAtPos(t.pos);this.linkTextEl.innerText=e,this.anchorEl.href=e,this.tooltipEl.style.left=n+"px",this.tooltipEl.style.top=r-36+this.rootEl.scrollTop+"px",this.tooltipEl.classList.add("show")},this.rootEl=e,this.tooltipEl=t}get linkTextEl(){return this.tooltipEl.querySelector("div.text")}get anchorEl(){return this.tooltipEl.querySelector("a.link-anchor")}}var ki="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),_i=new Uint8Array(16);function bi(){if(!ki)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return ki(_i)}for(var xi=[],wi=0;wi<256;++wi)xi[wi]=(wi+256).toString(16).substr(1);var Ci=function(t,e){var n=e||0,r=xi;return[r[t[n++]],r[t[n++]],r[t[n++]],r[t[n++]],"-",r[t[n++]],r[t[n++]],"-",r[t[n++]],r[t[n++]],"-",r[t[n++]],r[t[n++]],"-",r[t[n++]],r[t[n++]],r[t[n++]],r[t[n++]],r[t[n++]],r[t[n++]]].join("")};var Si=function(t,e,n){var r=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||bi)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var i=0;i<16;++i)e[r+i]=o[i];return e||Ci(o)},Ai=n(25),Mi=n.n(Ai);function Di(t){return t&&t.content&&t.content["com.dylanonelson.sn-editor"]||null}function Ei(t){return t?t.uuid:null}class Oi{constructor(){let t;this._item=null,this.shouldCallListeners=(t,e)=>!t.isMetadataUpdate&&(Ei(t)!==Ei(e)||function(t){const e=Di(t);return e&&e.lastSavedBy?e.lastSavedBy:null}(t)!==this._id),this._id=Si(),this._listeners=[],this._ready=new Promise(e=>{t=e}),this.componentManager=new Mi.a([{name:"stream-context-item"}],()=>{this.componentManager.streamContextItem(e=>{console.debug("streamContextItem update:",e);const n=this.shouldCallListeners(e,this._item);this._item=e,n&&this._listeners.forEach(t=>{t(e)}),t()})})}get latestDoc(){return function(t){const e=Di(t);return e&&e.doc?e.doc:null}(this._item)}get latestText(){return(t=this._item)&&t.content&&t.content.text?t.content.text:null;var t}onUpdate(t){return this._listeners.push(t),()=>{this._listeners=this._listeners.filter(e=>e!==t)}}ready(){return this._ready}saveNote(t,e,n){const r=Object.assign(Object.assign({},this._item),{content:Object.assign(Object.assign({},this._item.content),{"com.dylanonelson.sn-editor":{doc:t,lastSavedBy:this._id},text:e,preview_plain:n})});this.componentManager.saveItemWithPresave(r)}}Oi.SN_ITEM_SAVE_KEY="com.dylanonelson.sn-editor",Oi.itemSelectors={};const Ti=new Oi;var zi=n(12),Ii=n.n(zi),Ni=n(13),Ri=n.n(Ni);const Li={checklist_item(t,e,n){const r=document.createElement("div");r.classList.add("checklist-item");const o=document.createElement("div");o.classList.add("checkbox"),t.attrs.status===Zo.DONE?(o.classList.add("is-checked"),o.innerHTML=Ii.a):o.innerHTML=Ri.a;const i=document.createElement("div");i.classList.add("click-target"),i.contentEditable="false";const s=document.createElement("p");i.appendChild(o),r.appendChild(i),r.appendChild(s);const a=t=>{const{relatedTarget:n,target:r}=t;n===o&&r===e.dom&&e.focus()},c=t=>{if(!1===i.contains(t.target))return;const r=o.classList.contains("is-checked"),{tr:s}=e.state,a=n();s.setNodeMarkup(a,void 0,{status:r?Zo.EMPTY:Zo.DONE}),e.dispatch(s)};return e.dom.addEventListener("blur",a),e.dom.addEventListener("click",c),{dom:r,contentDOM:s,destroy(){e.dom.removeEventListener("blur",a),e.dom.removeEventListener("click",c)}}}};for(var qi={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},Fi=qi,Pi={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:";",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},Bi="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),$i="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),ji="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),Vi="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),Ui="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),Ji=Bi&&(Vi||+Bi[1]<57)||ji&&Vi,Zi=0;Zi<10;Zi++)qi[48+Zi]=qi[96+Zi]=String(Zi);for(Zi=1;Zi<=24;Zi++)qi[Zi+111]="F"+Zi;for(Zi=65;Zi<=90;Zi++)qi[Zi]=String.fromCharCode(Zi+32),Pi[Zi]=String.fromCharCode(Zi);for(var Wi in qi)Pi.hasOwnProperty(Wi)||(Pi[Wi]=qi[Wi]);var Hi=function(t){var e=!(Ji&&(t.ctrlKey||t.altKey||t.metaKey)||($i||Ui)&&t.shiftKey&&t.key&&1==t.key.length)&&t.key||(t.shiftKey?Pi:qi)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e},Gi="undefined"!=typeof navigator&&/Mac/.test(navigator.platform);function Ki(t){var e,n,r,o,i=t.split(/-(?!$)/),s=i[i.length-1];"Space"==s&&(s=" ");for(var a=0;a<i.length-1;a++){var c=i[a];if(/^(cmd|meta|m)$/i.test(c))o=!0;else if(/^a(lt)?$/i.test(c))e=!0;else if(/^(c|ctrl|control)$/i.test(c))n=!0;else if(/^s(hift)?$/i.test(c))r=!0;else{if(!/^mod$/i.test(c))throw new Error("Unrecognized modifier name: "+c);Gi?o=!0:n=!0}}return e&&(s="Alt-"+s),n&&(s="Ctrl-"+s),o&&(s="Meta-"+s),r&&(s="Shift-"+s),s}function Yi(t,e,n){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==n&&e.shiftKey&&(t="Shift-"+t),t}function Qi(t){return new fe({props:{handleKeyDown:Xi(t)}})}function Xi(t){var e=function(t){var e=Object.create(null);for(var n in t)e[Ki(n)]=t[n];return e}(t);return function(t,n){var r,o=Hi(n),i=1==o.length&&" "!=o,s=e[Yi(o,n,!i)];if(s&&s(t.state,t.dispatch,t))return!0;if(i&&(n.shiftKey||n.altKey||n.metaKey)&&(r=Fi[n.keyCode])&&r!=o){var a=e[Yi(r,n,!0)];if(a&&a(t.state,t.dispatch,t))return!0}else if(i&&n.shiftKey){var c=e[Yi(o,n,!0)];if(c&&c(t.state,t.dispatch,t))return!0}return!1}}const ts=[Qi({Backspace(t,e,n){return!1!==function(t){const{$cursor:e}=t.selection;return Boolean(e&&e.parent.type===Go.nodes.checklist_item)}(t)&&(!1!==n.endOfTextblock("left")&&void(0===t.selection.$cursor.index(0)&&(r=Go.nodes.paragraph,function(t,e){var n=t.selection,i=n.from,s=n.to,a=!1;return t.doc.nodesBetween(i,s,(function(e,n){if(a)return!1;if(e.isTextblock&&!e.hasMarkup(r,o))if(e.type==r)a=!0;else{var i=t.doc.resolve(n),s=i.index();a=i.parent.canReplaceWith(s,s+1,r)}})),!!a&&(e&&e(t.tr.setBlockType(i,s,r,o).scrollIntoView()),!0)})(t,e)));var r,o},Enter(t,e){const{selection:n,tr:r}=t,{$from:o,from:i}=n;if(o.parent.type!==Go.nodes.checklist_item)return!1;r.deleteSelection();const s=r.doc.resolve(i);if(2===s.parent.nodeSize){const t=s.pos;return r.replaceWith(t-1,t+1,Go.nodes.paragraph.createAndFill()),r.setSelection(Ht.near(r.doc.resolve(t-1))),e(r),!0}return r.split(i,void 0,[{type:Go.nodes.checklist_item}]),e(r),!0}}),Qi({Backspace(t,e){if(!1===function(t){const{$cursor:e}=t.selection;return Boolean(e&&2===e.parent.nodeSize)}(t))return!1;const{$cursor:n}=t.selection,r=Ht.findFrom(t.doc.resolve(n.before()),-1,!0);if(!r)return!1;if(r.$cursor.node(-1).type!==Go.nodes.list_item)return;let o=t.tr.setSelection(r);return o=function t(e,n){if(2===n.parent.nodeSize){const{pos:r}=n;return t(e.deleteRange(r-1,r+1),e.doc.resolve(e.mapping.map(r)))}return e}(o,n),e(o),!0},Enter:(es=Go.nodes.list_item,function(t,e){var n=t.selection,r=n.$from,o=n.$to,s=n.node;if(s&&s.isBlock||r.depth<2||!r.sameParent(o))return!1;var a=r.node(-1);if(a.type!=es)return!1;if(0==r.parent.content.size){if(2==r.depth||r.node(-3).type!=es||r.index(-2)!=r.node(-2).childCount-1)return!1;if(e){for(var c=i.empty,l=r.index(-1)>0,u=r.depth-(l?1:2);u>=r.depth-3;u--)c=i.from(r.node(u).copy(c));c=c.append(i.from(es.createAndFill()));var p=t.tr.replace(r.before(l?null:-1),r.after(-3),new h(c,l?3:2,2));p.setSelection(t.selection.constructor.near(p.doc.resolve(r.pos+(l?3:2)))),e(p.scrollIntoView())}return!0}var f=o.pos==r.end()?a.contentMatchAt(0).defaultType:null,d=t.tr.delete(r.pos,o.pos),m=f&&[null,{type:f}];return!!It(d.doc,r.pos,2,m)&&(e&&e(d.split(r.pos,2,m).scrollIntoView()),!0)})}),Qi(mi)];var es,ns=n(26),rs=n.n(ns),is=n(2),ss=n.n(is),as=n(27),cs=n.n(as),ls=new Q({nodes:{doc:{content:"block+"},paragraph:{content:"inline*",group:"block",parseDOM:[{tag:"p"}],toDOM:function(){return["p",0]}},blockquote:{content:"block+",group:"block",parseDOM:[{tag:"blockquote"}],toDOM:function(){return["blockquote",0]}},horizontal_rule:{group:"block",parseDOM:[{tag:"hr"}],toDOM:function(){return["div",["hr"]]}},heading:{attrs:{level:{default:1}},content:"(text | image)*",group:"block",defining:!0,parseDOM:[{tag:"h1",attrs:{level:1}},{tag:"h2",attrs:{level:2}},{tag:"h3",attrs:{level:3}},{tag:"h4",attrs:{level:4}},{tag:"h5",attrs:{level:5}},{tag:"h6",attrs:{level:6}}],toDOM:function(t){return["h"+t.attrs.level,0]}},code_block:{content:"text*",group:"block",code:!0,defining:!0,marks:"",attrs:{params:{default:""}},parseDOM:[{tag:"pre",preserveWhitespace:"full",getAttrs:function(t){return{params:t.getAttribute("data-params")||""}}}],toDOM:function(t){return["pre",t.attrs.params?{"data-params":t.attrs.params}:{},["code",0]]}},ordered_list:{content:"list_item+",group:"block",attrs:{order:{default:1},tight:{default:!1}},parseDOM:[{tag:"ol",getAttrs:function(t){return{order:t.hasAttribute("start")?+t.getAttribute("start"):1,tight:t.hasAttribute("data-tight")}}}],toDOM:function(t){return["ol",{start:1==t.attrs.order?null:t.attrs.order,"data-tight":t.attrs.tight?"true":null},0]}},bullet_list:{content:"list_item+",group:"block",attrs:{tight:{default:!1}},parseDOM:[{tag:"ul",getAttrs:function(t){return{tight:t.hasAttribute("data-tight")}}}],toDOM:function(t){return["ul",{"data-tight":t.attrs.tight?"true":null},0]}},list_item:{content:"paragraph block*",defining:!0,parseDOM:[{tag:"li"}],toDOM:function(){return["li",0]}},text:{group:"inline"},image:{inline:!0,attrs:{src:{},alt:{default:null},title:{default:null}},group:"inline",draggable:!0,parseDOM:[{tag:"img[src]",getAttrs:function(t){return{src:t.getAttribute("src"),title:t.getAttribute("title"),alt:t.getAttribute("alt")}}}],toDOM:function(t){return["img",t.attrs]}},hard_break:{inline:!0,group:"inline",selectable:!1,parseDOM:[{tag:"br"}],toDOM:function(){return["br"]}}},marks:{em:{parseDOM:[{tag:"i"},{tag:"em"},{style:"font-style",getAttrs:function(t){return"italic"==t&&null}}],toDOM:function(){return["em"]}},strong:{parseDOM:[{tag:"b"},{tag:"strong"},{style:"font-weight",getAttrs:function(t){return/^(bold(er)?|[5-9]\d{2,})$/.test(t)&&null}}],toDOM:function(){return["strong"]}},link:{attrs:{href:{},title:{default:null}},inclusive:!1,parseDOM:[{tag:"a[href]",getAttrs:function(t){return{href:t.getAttribute("href"),title:t.getAttribute("title")}}}],toDOM:function(t){return["a",t.attrs]}},code:{parseDOM:[{tag:"code"}],toDOM:function(){return["code"]}}}});var us=function(t,e){this.schema=t,this.stack=[{type:t.topNodeType,content:[]}],this.marks=u.none,this.tokenHandlers=e};function ps(t,e){return t.getAttrs?t.getAttrs(e):t.attrs instanceof Function?t.attrs(e):t.attrs}function hs(t){return"code_inline"==t||"code_block"==t||"fence"==t}function fs(t){return"\n"==t[t.length-1]?t.slice(0,t.length-1):t}function ds(){}us.prototype.top=function(){return this.stack[this.stack.length-1]},us.prototype.push=function(t){this.stack.length&&this.top().content.push(t)},us.prototype.addText=function(t){if(console.log(t),t){var e,n=this.top().content,r=n[n.length-1],o=this.schema.text(t,this.marks);r&&(e=function(t,e){if(t.isText&&e.isText&&u.sameSet(t.marks,e.marks))return t.withText(t.text+e.text)}(r,o))?n[n.length-1]=e:n.push(o)}},us.prototype.openMark=function(t){this.marks=t.addToSet(this.marks)},us.prototype.closeMark=function(t){this.marks=t.removeFromSet(this.marks)},us.prototype.parseTokens=function(t){for(var e=0;e<t.length;e++){var n=t[e],r=this.tokenHandlers[n.type];if(!r)throw new Error("Token type `"+n.type+"` not supported by Markdown parser");r(this,n)}},us.prototype.addNode=function(t,e,n){var r=t.createAndFill(e,n,this.marks);return r?(this.push(r),r):null},us.prototype.openNode=function(t,e){this.stack.push({type:t,attrs:e,content:[]})},us.prototype.closeNode=function(){this.marks.length&&(this.marks=u.none);var t=this.stack.pop();return this.addNode(t.type,t.attrs,t.content)};var ms=function(t,e,n){this.tokens=n,this.schema=t,this.tokenizer=e,this.tokenHandlers=function(t,e){var n=Object.create(null),r=function(r){var o=e[r];if(o.block){var i=t.nodeType(o.block);hs(r)?n[r]=function(t,e){t.openNode(i,ps(o,e)),t.addText(fs(e.content)),t.closeNode()}:(n[r+"_open"]=function(t,e){return t.openNode(i,ps(o,e))},n[r+"_close"]=function(t){return t.closeNode()})}else if(o.node){var s=t.nodeType(o.node);n[r]=function(t,e){return t.addNode(s,ps(o,e))}}else if(o.mark){var a=t.marks[o.mark];hs(r)?n[r]=function(t,e){t.openMark(a.create(ps(o,e))),t.addText(fs(e.content)),t.closeMark(a)}:(n[r+"_open"]=function(t,e){return t.openMark(a.create(ps(o,e)))},n[r+"_close"]=function(t){return t.closeMark(a)})}else{if(!o.ignore)throw new RangeError("Unrecognized parsing spec "+JSON.stringify(o));hs(r)?n[r]=ds:(n[r+"_open"]=ds,n[r+"_close"]=ds)}};for(var o in e)r(o);return n.text=function(t,e){return t.addText(e.content)},n.inline=function(t,e){return t.parseTokens(e.children)},n.softbreak=n.softbreak||function(t){return t.addText("\n")},n}(t,n)};ms.prototype.parse=function(t){var e,n=new us(this.schema,this.tokenHandlers);n.parseTokens(this.tokenizer.parse(t,{}));do{e=n.closeNode()}while(n.stack.length);return e};new ms(ls,cs()("commonmark",{html:!1}),{blockquote:{block:"blockquote"},paragraph:{block:"paragraph"},list_item:{block:"list_item"},bullet_list:{block:"bullet_list"},ordered_list:{block:"ordered_list",getAttrs:function(t){return{order:+t.attrGet("start")||1}}},heading:{block:"heading",getAttrs:function(t){return{level:+t.tag.slice(1)}}},code_block:{block:"code_block"},fence:{block:"code_block",getAttrs:function(t){return{params:t.info||""}}},hr:{node:"horizontal_rule"},image:{node:"image",getAttrs:function(t){return{src:t.attrGet("src"),title:t.attrGet("title")||null,alt:t.children[0]&&t.children[0].content||null}}},hardbreak:{node:"hard_break"},em:{mark:"em"},strong:{mark:"strong"},link:{mark:"link",getAttrs:function(t){return{href:t.attrGet("href"),title:t.attrGet("title")||null}}},code_inline:{mark:"code"}});var gs=function(t,e){this.nodes=t,this.marks=e};gs.prototype.serialize=function(t,e){var n=new _s(this.nodes,this.marks,e);return n.renderContent(t),n.out};var vs=new gs({blockquote:function(t,e){t.wrapBlock("> ",null,e,(function(){return t.renderContent(e)}))},code_block:function(t,e){t.write("```"+(e.attrs.params||"")+"\n"),t.text(e.textContent,!1),t.ensureNewLine(),t.write("```"),t.closeBlock(e)},heading:function(t,e){t.write(t.repeat("#",e.attrs.level)+" "),t.renderInline(e),t.closeBlock(e)},horizontal_rule:function(t,e){t.write(e.attrs.markup||"---"),t.closeBlock(e)},bullet_list:function(t,e){t.renderList(e,"  ",(function(){return(e.attrs.bullet||"*")+" "}))},ordered_list:function(t,e){var n=e.attrs.order||1,r=String(n+e.childCount-1).length,o=t.repeat(" ",r+2);t.renderList(e,o,(function(e){var o=String(n+e);return t.repeat(" ",r-o.length)+o+". "}))},list_item:function(t,e){t.renderContent(e)},paragraph:function(t,e){t.renderInline(e),t.closeBlock(e)},image:function(t,e){t.write("!["+t.esc(e.attrs.alt||"")+"]("+t.esc(e.attrs.src)+(e.attrs.title?" "+t.quote(e.attrs.title):"")+")")},hard_break:function(t,e,n,r){for(var o=r+1;o<n.childCount;o++)if(n.child(o).type!=e.type)return void t.write("\\\n")},text:function(t,e){t.text(e.text)}},{em:{open:"*",close:"*",mixable:!0,expelEnclosingWhitespace:!0},strong:{open:"**",close:"**",mixable:!0,expelEnclosingWhitespace:!0},link:{open:function(t,e,n,r){return ks(e,n,r,1)?"<":"["},close:function(t,e,n,r){return ks(e,n,r,-1)?">":"]("+t.esc(e.attrs.href)+(e.attrs.title?" "+t.quote(e.attrs.title):"")+")"}},code:{open:function(t,e,n,r){return ys(n.child(r),-1)},close:function(t,e,n,r){return ys(n.child(r-1),1)},escape:!1}});function ys(t,e){var n,r=/`+/g,o=0;if(t.isText)for(;n=r.exec(t.text);)o=Math.max(o,n[0].length);for(var i=o>0&&e>0?" `":"`",s=0;s<o;s++)i+="`";return o>0&&e<0&&(i+=" "),i}function ks(t,e,n,r){if(t.attrs.title||!/^\w+:/.test(t.attrs.href))return!1;var o=e.child(n+(r<0?-1:0));if(!o.isText||o.text!=t.attrs.href||o.marks[o.marks.length-1]!=t)return!1;if(n==(r<0?1:e.childCount-1))return!0;var i=e.child(n+(r<0?-2:1));return!t.isInSet(i.marks)}var _s=function(t,e,n){this.nodes=t,this.marks=e,this.delim=this.out="",this.closed=!1,this.inTightList=!1,this.options=n||{},void 0===this.options.tightLists&&(this.options.tightLists=!1)};_s.prototype.flushClose=function(t){if(this.closed){if(this.atBlank()||(this.out+="\n"),null==t&&(t=2),t>1){var e=this.delim,n=/\s+$/.exec(e);n&&(e=e.slice(0,e.length-n[0].length));for(var r=1;r<t;r++)this.out+=e+"\n"}this.closed=!1}},_s.prototype.wrapBlock=function(t,e,n,r){var o=this.delim;this.write(e||t),this.delim+=t,r(),this.delim=o,this.closeBlock(n)},_s.prototype.atBlank=function(){return/(^|\n)$/.test(this.out)},_s.prototype.ensureNewLine=function(){this.atBlank()||(this.out+="\n")},_s.prototype.write=function(t){this.flushClose(),this.delim&&this.atBlank()&&(this.out+=this.delim),t&&(this.out+=t)},_s.prototype.closeBlock=function(t){this.closed=t},_s.prototype.text=function(t,e){for(var n=t.split("\n"),r=0;r<n.length;r++){var o=this.atBlank()||this.closed;this.write(),this.out+=!1!==e?this.esc(n[r],o):n[r],r!=n.length-1&&(this.out+="\n")}},_s.prototype.render=function(t,e,n){if("number"==typeof e)throw new Error("!");this.nodes[t.type.name](this,t,e,n)},_s.prototype.renderContent=function(t){var e=this;t.forEach((function(n,r,o){return e.render(n,t,o)}))},_s.prototype.renderInline=function(t){var e=this,n=[],r="",o=function(o,i,s){var a=o?o.marks:[];o&&"hard_break"===o.type.name&&(a=a.filter((function(e){if(s+1==t.childCount)return!1;var n=t.child(s+1);return e.isInSet(n.marks)&&(!n.isText||/\S/.test(n.text))})));var c=r;if(r="",o&&o.isText&&a.some((function(t){var n=e.marks[t.type.name];return n&&n.expelEnclosingWhitespace}))){var l=/^(\s*)(.*?)(\s*)$/m.exec(o.text),u=(l[0],l[1]),p=l[2],h=l[3];c+=u,r=h,(u||h)&&((o=p?o.withText(p):null)||(a=n))}var f=a.length&&a[a.length-1],d=f&&!1===e.marks[f.type.name].escape,m=a.length-(d?1:0);t:for(var g=0;g<m;g++){var v=a[g];if(!e.marks[v.type.name].mixable)break;for(var y=0;y<n.length;y++){var k=n[y];if(!e.marks[k.type.name].mixable)break;if(v.eq(k)){g>y?a=a.slice(0,y).concat(v).concat(a.slice(y,g)).concat(a.slice(g+1,m)):y>g&&(a=a.slice(0,g).concat(a.slice(g+1,y)).concat(v).concat(a.slice(y,m)));continue t}}}for(var _=0;_<Math.min(n.length,m)&&a[_].eq(n[_]);)++_;for(;_<n.length;)e.text(e.markString(n.pop(),!1,t,s),!1);if(c&&e.text(c),o){for(;n.length<m;){var b=a[n.length];n.push(b),e.text(e.markString(b,!0,t,s),!1)}d&&o.isText?e.text(e.markString(f,!0,t,s)+o.text+e.markString(f,!1,t,s+1),!1):e.render(o,t,s)}};t.forEach(o),o(null,0,t.childCount)},_s.prototype.renderList=function(t,e,n){var r=this;this.closed&&this.closed.type==t.type?this.flushClose(3):this.inTightList&&this.flushClose(1);var o=void 0!==t.attrs.tight?t.attrs.tight:this.options.tightLists,i=this.inTightList;this.inTightList=o,t.forEach((function(i,s,a){a&&o&&r.flushClose(1),r.wrapBlock(e,n(a),t,(function(){return r.render(i,t,a)}))})),this.inTightList=i},_s.prototype.esc=function(t,e){return t=t.replace(/[`*\\~\[\]]/g,"\\$&"),e&&(t=t.replace(/^[:#\-*+]/,"\\$&").replace(/^(\d+)\./,"$1\\.")),t},_s.prototype.quote=function(t){var e=-1==t.indexOf('"')?'""':-1==t.indexOf("'")?"''":"()";return e[0]+t+e[1]},_s.prototype.repeat=function(t,e){for(var n="",r=0;r<e;r++)n+=t;return n},_s.prototype.markString=function(t,e,n,r){var o=this.marks[t.type.name],i=e?o.open:o.close;return"string"==typeof i?i:i(this,t,n,r)},_s.prototype.getEnclosingWhitespace=function(t){return{leading:(t.match(/^(\s+)/)||[])[0],trailing:(t.match(/(\s+)$/)||[])[0]}};var bs=n(11),xs=n.n(bs);const ws=new gs({heading1(t,e){t.write("# "),t.renderInline(e),t.closeBlock(e)},heading2(t,e){t.write("## "),t.renderInline(e),t.closeBlock(e)},checklist_item(t,e){const n=e.attrs.status===Zo.DONE?"[x] ":"[ ] ";t.write(n),t.renderInline(e),t.closeBlock(e)},paragraph(t,e){if(2===e.nodeSize)return t.write("&nbsp;"),void t.closeBlock(e);vs.nodes.paragraph(t,e)},list_item(t,e){vs.nodes.list_item(t,e)},ordered_list(t,e){vs.nodes.ordered_list(t,e)},unordered_list(t,e){vs.nodes.bullet_list(t,e)},text(t,e){vs.nodes.text(t,e)},code_block(t,e){e.attrs.markdown_escaped?(t.write(e.textContent),t.ensureNewLine()):vs.nodes.code_block(t,e)}},Object.assign(Object.assign({},vs.marks),{code:{close:(t,e)=>e.attrs.markdown_escaped?"":"`",escape:!1,open:(t,e)=>e.attrs.markdown_escaped?"":"`"}})),Cs=rs()(),Ss=["[x]","[X]","[ ]"];Cs.use(t=>{t.core.ruler.after("block","checklist_item",t=>{const e=t.src.split("\n");let n=!1,r=!1;return t.tokens=t.tokens.map(o=>{if(n&&"inline"===o.type&&(o.content=o.content.slice(3).trimLeft()),"paragraph_open"===o.type){const[i,s]=o.map,a=e[i];if(Ss.includes(a.slice(0,3))){r=!0,n=!0;const{Token:e}=t,o=new e("checklist_item_open","div",1);return o.attrPush(["status","x"===a[1].toLowerCase()?Zo.DONE.toString():Zo.EMPTY.toString()]),o}}else if(n&&"paragraph_close"===o.type)return n=!1,new ss.a("checklist_item_close","div",-1);return o}),r}),t.inline.ruler.at("image",t=>{const{pos:e}=t,n=xs()(t);if(n){const n=new ss.a("code_inline","code",0);n.markup="`",n.content=t.src.slice(e,t.pos),n.attrSet("markdown_escaped","true"),t.tokens[t.tokens.length-1]=n}return n})});class As{constructor(t){this.getTokens=()=>{const{fullTokenList:t,parseable:e}=this;if(!1===e){const{map:[e,n]}=t[0],r=new ss.a("fence","code",0);return r.content=this.src.split("\n").slice(e,n).join("\n"),r.attrPush(["markdown_escaped","true"]),[r]}return t},this.resetInternalState=()=>{this.fullTokenList=[],this.tokenStack=[],this.parseable=!0},this.resetInternalState(),this.src=t}static getTypeName(t){return t.replace("_open","").replace("_close","")}take(t){const{nesting:e}=t;let{type:n}=t;if(n=As.getTypeName(n),this.fullTokenList.push(t),!1===As.DOCUMENT_MAP.has(n)&&"inline"!==n&&(this.parseable=!1),this.parseable&&this.tokenStack.length&&e>=0){const t=As.getTypeName(this.tokenStack[this.tokenStack.length-1].type);!1===As.DOCUMENT_MAP.get(t).includes(n)&&(this.parseable=!1)}if(e>0&&this.tokenStack.push(t),e<0&&this.tokenStack.pop(),0===this.tokenStack.length){const t=this.getTokens();return this.resetInternalState(),t}return null}}As.DOCUMENT_MAP=new Map([["heading1",["inline"]],["heading2",["inline"]],["paragraph",["inline"]],["fence",["inline"]],["bullet_list",["list_item","inline"]],["ordered_list",["list_item","inline"]],["list_item",["paragraph","inline"]],["checklist_item",["inline"]],["inline",[]]]);const Ms=new ms(Go,{parse(...t){window.mip=Cs;const e=Cs.parse(...t),n=[],r=new As(t[0]);for(let t=0;t<e.length;t++){const o=e[t],{nesting:i,tag:s,type:a}=o;a.startsWith("heading")&&"h1"===s&&(o.type=o.type.replace("heading","heading1")),a.startsWith("heading")&&"h2"===s&&(o.type=a.replace("heading","heading2"));const c=r.take(o);c&&n.push(...c)}return n}},{blockquote:{block:"code_block"},bullet_list:{block:"unordered_list"},fence:{block:"code_block",getAttrs:t=>"true"===t.attrGet("markdown_escaped")?{markdown_escaped:!0}:{}},heading1:{block:"heading1"},heading2:{block:"heading2"},list_item:{block:"list_item"},ordered_list:{block:"ordered_list"},paragraph:{block:"paragraph"},checklist_item:{block:"checklist_item",getAttrs:t=>({status:t.attrGet("status")===Zo.DONE.toString()?Zo.DONE:Zo.EMPTY})},em:{mark:"em"},strong:{mark:"strong"},code_inline:{getAttrs:t=>"true"===t.attrGet("markdown_escaped")?{markdown_escaped:!0}:{},mark:"code",noCloseToken:!0},link:{mark:"link",getAttrs:t=>({href:t.attrGet("href"),title:t.attrGet("title")||null})}});var Ds=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};function Es(){return Ti.latestText?Ms.parse(Ti.latestText):Ti.latestDoc?Go.nodeFromJSON(Ti.latestDoc):Go.topNodeType.createAndFill()}!function(){Ds(this,void 0,void 0,(function*(){yield Ti.ready();const t=window.view=new Wr(document.querySelector("#editor"),{state:ue.create({doc:Es(),plugins:[...ts,new vi(document.querySelector("#toolbar"),document.querySelector("#link-modal")),new yi(document.querySelector("#link-tooltip"),document.querySelector("#root")),new fe({props:{nodeViews:Li}}),Qo,go()]}),dispatchTransaction(e){const n=t.state.apply(e);t.updateState(n),Ti.saveNote(n.doc.toJSON(),ws.serialize(n.doc),n.doc.textBetween(0,n.doc.nodeSize-2," "))}});Ti.onUpdate(e=>{const n=t.state.plugins.filter(t=>t instanceof vi==!1);t.setProps({state:ue.create({doc:Es(),plugins:[...n,new vi(document.querySelector("#toolbar"),document.querySelector("#link-modal"))]})})})}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,