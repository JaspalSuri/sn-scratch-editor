!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=12)}([function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"></path><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0V0z" fill="none"></path><path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"></path><path d="M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12c-.83 0-1.5.68-1.5 1.5s.68 1.5 1.5 1.5 1.5-.68 1.5-1.5-.67-1.5-1.5-1.5zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z"></path><path d="M0 0h24v24H0V0z" fill="none"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2 17h2v.5H3v1h1v.5H2v1h3v-4H2v1zm1-9h1V4H2v1h1v3zm-1 3h1.8L2 13.1v.9h3v-1H3.2L5 10.9V10H2v1zm5-6v2h14V5H7zm0 14h14v-2H7v2zm0-6h14v-2H7v2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"></path><path d="M9 4v3h5v12h3V7h5V4H9zm-6 8h3v7h3v-7h3V9H3v3z"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"></path><path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 18h12v-2H3v2zM3 6v2h18V6H3zm0 7h18v-2H3v2z"></path><path d="M0 0h24v24H0V0z" fill="none"></path></svg>'},function(t,e){t.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"></path><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></svg>'},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.sentMessages=[],this.messageQueue=[],this.loggingEnabled=!1,this.acceptsThemes=!0,this.activeThemes=[],this.initialPermissions=e,this.onReadyCallback=n,this.coallesedSaving=!0,this.coallesedSavingDelay=250,this.registerMessageHandler()}var e,n,o;return e=t,(n=[{key:"registerMessageHandler",value:function(){var t=this,e=function(e){if(t.loggingEnabled&&console.log("Components API Message received:",e.data),!document.referrer||new URL(document.referrer).origin===new URL(e.origin).origin){if(t.origin){if(e.origin!==t.origin)return}else t.origin=e.origin;var n=e.data,r="string"==typeof n?JSON.parse(n):n;t.handleMessage(r)}};document.addEventListener("message",(function(t){e(t)}),!1),window.addEventListener("message",(function(t){e(t)}),!1)}},{key:"handleMessage",value:function(t){if("component-registered"===t.action)this.sessionKey=t.sessionKey,this.componentData=t.componentData,this.onReady(t.data),this.loggingEnabled&&console.log("Component successfully registered with payload:",t);else if("themes"===t.action)this.acceptsThemes&&this.activateThemes(t.data.themes);else if(t.original){var e=this.sentMessages.filter((function(e){return e.messageId===t.original.messageId}))[0];e||alert("This extension is attempting to communicate with Standard Notes, but an error is preventing it from doing so. Please restart this extension and try again."),e.callback&&e.callback(t.data)}}},{key:"onReady",value:function(t){this.environment=t.environment,this.platform=t.platform,this.uuid=t.uuid,this.isMobile="mobile"==this.environment,this.initialPermissions&&this.initialPermissions.length>0&&this.requestPermissions(this.initialPermissions);var e=!0,n=!1,r=void 0;try{for(var o,i=this.messageQueue[Symbol.iterator]();!(e=(o=i.next()).done);e=!0){var s=o.value;this.postMessage(s.action,s.data,s.callback)}}catch(t){n=!0,r=t}finally{try{e||null==i.return||i.return()}finally{if(n)throw r}}this.messageQueue=[],this.loggingEnabled&&console.log("onReadyData",t),this.activateThemes(t.activeThemeUrls||[]),this.onReadyCallback&&this.onReadyCallback()}},{key:"getSelfComponentUUID",value:function(){return this.uuid}},{key:"isRunningInDesktopApplication",value:function(){return"desktop"===this.environment}},{key:"setComponentDataValueForKey",value:function(t,e){this.componentData[t]=e,this.postMessage("set-component-data",{componentData:this.componentData},(function(t){}))}},{key:"clearComponentData",value:function(){this.componentData={},this.postMessage("set-component-data",{componentData:this.componentData},(function(t){}))}},{key:"componentDataValueForKey",value:function(t){return this.componentData[t]}},{key:"postMessage",value:function(t,e,n){if(this.sessionKey){var r={action:t,data:e,messageId:this.generateUUID(),sessionKey:this.sessionKey,api:"component"},o=JSON.parse(JSON.stringify(r));o.callback=n,this.sentMessages.push(o),this.isMobile&&(r=JSON.stringify(r)),this.loggingEnabled&&console.log("Posting message:",r),window.parent.postMessage(r,this.origin)}else this.messageQueue.push({action:t,data:e,callback:n})}},{key:"setSize",value:function(t,e,n){this.postMessage("set-size",{type:t,width:e,height:n},(function(t){}))}},{key:"requestPermissions",value:function(t,e){this.postMessage("request-permissions",{permissions:t},function(t){e&&e()}.bind(this))}},{key:"streamItems",value:function(t,e){Array.isArray(t)||(t=[t]),this.postMessage("stream-items",{content_types:t},function(t){e(t.items)}.bind(this))}},{key:"streamContextItem",value:function(t){var e=this;this.postMessage("stream-context-item",null,(function(n){var r=n.item;(!e.lastStreamedItem||e.lastStreamedItem.uuid!==r.uuid)&&e.pendingSaveTimeout&&(clearTimeout(e.pendingSaveTimeout),e._performSavingOfItems(e.pendingSaveParams),e.pendingSaveTimeout=null,e.pendingSaveParams=null),e.lastStreamedItem=r,t(e.lastStreamedItem)}))}},{key:"selectItem",value:function(t){this.postMessage("select-item",{item:this.jsonObjectForItem(t)})}},{key:"createItem",value:function(t,e){this.postMessage("create-item",{item:this.jsonObjectForItem(t)},function(t){var n=t.item;!n&&t.items&&t.items.length>0&&(n=t.items[0]),this.associateItem(n),e&&e(n)}.bind(this))}},{key:"createItems",value:function(t,e){var n=this,r=t.map((function(t){return n.jsonObjectForItem(t)}));this.postMessage("create-items",{items:r},function(t){e&&e(t.items)}.bind(this))}},{key:"associateItem",value:function(t){this.postMessage("associate-item",{item:this.jsonObjectForItem(t)})}},{key:"deassociateItem",value:function(t){this.postMessage("deassociate-item",{item:this.jsonObjectForItem(t)})}},{key:"clearSelection",value:function(){this.postMessage("clear-selection",{content_type:"Tag"})}},{key:"deleteItem",value:function(t,e){this.deleteItems([t],e)}},{key:"deleteItems",value:function(t,e){var n={items:t.map(function(t){return this.jsonObjectForItem(t)}.bind(this))};this.postMessage("delete-items",n,(function(t){e&&e(t)}))}},{key:"sendCustomEvent",value:function(t,e,n){this.postMessage(t,e,function(t){n&&n(t)}.bind(this))}},{key:"saveItem",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.saveItems([t],e,n)}},{key:"saveItemWithPresave",value:function(t,e,n){this.saveItemsWithPresave([t],e,n)}},{key:"saveItemsWithPresave",value:function(t,e,n){this.saveItems(t,n,!1,e)}},{key:"_performSavingOfItems",value:function(t){var e=t.items,n=t.presave,r=t.callback;n&&n();var o=[],i=!0,s=!1,a=void 0;try{for(var c,p=e[Symbol.iterator]();!(i=(c=p.next()).done);i=!0){var h=c.value;o.push(this.jsonObjectForItem(h))}}catch(t){s=!0,a=t}finally{try{i||null==p.return||p.return()}finally{if(s)throw a}}this.postMessage("save-items",{items:o},(function(t){r&&r()}))}},{key:"saveItems",value:function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3?arguments[3]:void 0;if(this.pendingSaveItems||(this.pendingSaveItems=[]),1!=this.coallesedSaving||r)this._performSavingOfItems({items:t,presave:o,callback:e});else{this.pendingSaveTimeout&&clearTimeout(this.pendingSaveTimeout);var i=t.map((function(t){return t.uuid})),s=this.pendingSaveItems.filter((function(t){return!i.includes(t.uuid)}));this.pendingSaveItems=s.concat(t),this.pendingSaveParams={items:this.pendingSaveItems,presave:o,callback:e},this.pendingSaveTimeout=setTimeout((function(){n._performSavingOfItems(n.pendingSaveParams),n.pendingSaveItems=[],n.pendingSaveTimeout=null,n.pendingSaveParams=null}),this.coallesedSavingDelay)}}},{key:"jsonObjectForItem",value:function(t){var e=Object.assign({},t);return e.children=null,e.parent=null,e}},{key:"getItemAppDataValue",value:function(t,e){var n=t.content.appData&&t.content.appData["org.standardnotes.sn"];return n?n[e]:null}},{key:"activateThemes",value:function(t){if(this.loggingEnabled&&console.log("Incoming themes",t),this.activeThemes.sort().toString()!=t.sort().toString()){var e=t||[],n=[],r=!0,o=!1,i=void 0;try{for(var s,a=this.activeThemes[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var c=s.value;t.includes(c)?e=e.filter((function(t){return t!=c})):n.push(c)}}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}this.loggingEnabled&&(console.log("Deactivating themes:",n),console.log("Activating themes:",e));for(var p=0,h=n;p<h.length;p++){var l=h[p];this.deactivateTheme(l)}this.activeThemes=t;var u=!0,f=!1,d=void 0;try{for(var m,v=e[Symbol.iterator]();!(u=(m=v.next()).done);u=!0){var g=m.value;if(g){var y=document.createElement("link");y.id=btoa(g),y.href=g,y.type="text/css",y.rel="stylesheet",y.media="screen,print",y.className="custom-theme",document.getElementsByTagName("head")[0].appendChild(y)}}}catch(t){f=!0,d=t}finally{try{u||null==v.return||v.return()}finally{if(f)throw d}}}}},{key:"themeElementForUrl",value:function(t){return Array.from(document.getElementsByClassName("custom-theme")).slice().find((function(e){return e.id==btoa(t)}))}},{key:"deactivateTheme",value:function(t){var e=this.themeElementForUrl(t);e&&(e.disabled=!0,e.parentNode.removeChild(e))}},{key:"generateUUID",value:function(){var t=window.crypto||window.msCrypto;if(t){var e=new Uint32Array(4);t.getRandomValues(e);var n=-1;return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){n++;var r=e[n>>3]>>n%8*4&15;return("x"==t?r:3&r|8).toString(16)}))}var r=(new Date).getTime();return window.performance&&"function"==typeof window.performance.now&&(r+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=(r+16*Math.random())%16|0;return r=Math.floor(r/16),("x"==t?e:3&e|8).toString(16)}))}}])&&r(e.prototype,n),o&&r(e,o),t}();void 0!==t.exports&&(t.exports=o),window&&(window.ComponentManager=o)},function(t,e,n){"use strict";n.r(e);n.p,n.p,n.p,n.p,n.p;var r=n(0),o=n.n(r),i=n(1),s=n.n(i),a=n(2),c=n.n(a),p=n(3),h=n.n(p),l=n(4),u=n.n(l),f=n(5),d=n.n(f),m=n(6),v=n.n(m),g=n(7),y=n.n(g),w=n(8),b=n.n(w),k=n(9),x=n.n(k),S=n(10),M=n.n(S);function O(t){this.content=t}document.querySelector("button[data-format=paragraph] i").innerHTML=x.a,document.querySelector("button[data-format=checklist_item] i").innerHTML=o.a,document.querySelector("button[data-format=heading] i").innerHTML=y.a,document.querySelector("button[data-format=unordered_list] i").innerHTML=d.a,document.querySelector("button[data-format=strong] i").innerHTML=h.a,document.querySelector("button[data-format=em] i").innerHTML=u.a,document.querySelector("button[data-format=code] i").innerHTML=c.a,document.querySelector("button[data-format=link] i").innerHTML=b.a,document.querySelector("button[data-format=ordered_list] i").innerHTML=v.a,document.querySelector("div#link-modal label a i").innerHTML=M.a,O.prototype={constructor:O,find:function(t){for(var e=0;e<this.content.length;e+=2)if(this.content[e]===t)return e;return-1},get:function(t){var e=this.find(t);return-1==e?void 0:this.content[e+1]},update:function(t,e,n){var r=n&&n!=t?this.remove(n):this,o=r.find(t),i=r.content.slice();return-1==o?i.push(n||t,e):(i[o+1]=e,n&&(i[o]=n)),new O(i)},remove:function(t){var e=this.find(t);if(-1==e)return this;var n=this.content.slice();return n.splice(e,2),new O(n)},addToStart:function(t,e){return new O([t,e].concat(this.remove(t).content))},addToEnd:function(t,e){var n=this.remove(t).content.slice();return n.push(t,e),new O(n)},addBefore:function(t,e,n){var r=this.remove(e),o=r.content.slice(),i=r.find(t);return o.splice(-1==i?o.length:i,0,e,n),new O(o)},forEach:function(t){for(var e=0;e<this.content.length;e+=2)t(this.content[e],this.content[e+1])},prepend:function(t){return(t=O.from(t)).size?new O(t.content.concat(this.subtract(t).content)):this},append:function(t){return(t=O.from(t)).size?new O(this.subtract(t).content.concat(t.content)):this},subtract:function(t){var e=this;t=O.from(t);for(var n=0;n<t.content.length;n+=2)e=e.remove(t.content[n]);return e},get size(){return this.content.length>>1}},O.from=function(t){if(t instanceof O)return t;var e=[];if(t)for(var n in t)e.push(n,t[n]);return new O(e)};var C=O;var T=function(t,e){if(this.content=t,this.size=e||0,null==e)for(var n=0;n<t.length;n++)this.size+=t[n].nodeSize},D={firstChild:{configurable:!0},lastChild:{configurable:!0},childCount:{configurable:!0}};T.prototype.nodesBetween=function(t,e,n,r,o){void 0===r&&(r=0);for(var i=0,s=0;s<e;i++){var a=this.content[i],c=s+a.nodeSize;if(c>t&&!1!==n(a,r+s,o,i)&&a.content.size){var p=s+1;a.nodesBetween(Math.max(0,t-p),Math.min(a.content.size,e-p),n,r+p)}s=c}},T.prototype.descendants=function(t){this.nodesBetween(0,this.size,t)},T.prototype.textBetween=function(t,e,n,r){var o="",i=!0;return this.nodesBetween(t,e,(function(s,a){s.isText?(o+=s.text.slice(Math.max(t,a)-a,e-a),i=!n):s.isLeaf&&r?(o+=r,i=!n):!i&&s.isBlock&&(o+=n,i=!0)}),0),o},T.prototype.append=function(t){if(!t.size)return this;if(!this.size)return t;var e=this.lastChild,n=t.firstChild,r=this.content.slice(),o=0;for(e.isText&&e.sameMarkup(n)&&(r[r.length-1]=e.withText(e.text+n.text),o=1);o<t.content.length;o++)r.push(t.content[o]);return new T(r,this.size+t.size)},T.prototype.cut=function(t,e){if(null==e&&(e=this.size),0==t&&e==this.size)return this;var n=[],r=0;if(e>t)for(var o=0,i=0;i<e;o++){var s=this.content[o],a=i+s.nodeSize;a>t&&((i<t||a>e)&&(s=s.isText?s.cut(Math.max(0,t-i),Math.min(s.text.length,e-i)):s.cut(Math.max(0,t-i-1),Math.min(s.content.size,e-i-1))),n.push(s),r+=s.nodeSize),i=a}return new T(n,r)},T.prototype.cutByIndex=function(t,e){return t==e?T.empty:0==t&&e==this.content.length?this:new T(this.content.slice(t,e))},T.prototype.replaceChild=function(t,e){var n=this.content[t];if(n==e)return this;var r=this.content.slice(),o=this.size+e.nodeSize-n.nodeSize;return r[t]=e,new T(r,o)},T.prototype.addToStart=function(t){return new T([t].concat(this.content),this.size+t.nodeSize)},T.prototype.addToEnd=function(t){return new T(this.content.concat(t),this.size+t.nodeSize)},T.prototype.eq=function(t){if(this.content.length!=t.content.length)return!1;for(var e=0;e<this.content.length;e++)if(!this.content[e].eq(t.content[e]))return!1;return!0},D.firstChild.get=function(){return this.content.length?this.content[0]:null},D.lastChild.get=function(){return this.content.length?this.content[this.content.length-1]:null},D.childCount.get=function(){return this.content.length},T.prototype.child=function(t){var e=this.content[t];if(!e)throw new RangeError("Index "+t+" out of range for "+this);return e},T.prototype.maybeChild=function(t){return this.content[t]},T.prototype.forEach=function(t){for(var e=0,n=0;e<this.content.length;e++){var r=this.content[e];t(r,n,e),n+=r.nodeSize}},T.prototype.findDiffStart=function(t,e){return void 0===e&&(e=0),function t(e,n,r){for(var o=0;;o++){if(o==e.childCount||o==n.childCount)return e.childCount==n.childCount?null:r;var i=e.child(o),s=n.child(o);if(i!=s){if(!i.sameMarkup(s))return r;if(i.isText&&i.text!=s.text){for(var a=0;i.text[a]==s.text[a];a++)r++;return r}if(i.content.size||s.content.size){var c=t(i.content,s.content,r+1);if(null!=c)return c}r+=i.nodeSize}else r+=i.nodeSize}}(this,t,e)},T.prototype.findDiffEnd=function(t,e,n){return void 0===e&&(e=this.size),void 0===n&&(n=t.size),function t(e,n,r,o){for(var i=e.childCount,s=n.childCount;;){if(0==i||0==s)return i==s?null:{a:r,b:o};var a=e.child(--i),c=n.child(--s),p=a.nodeSize;if(a!=c){if(!a.sameMarkup(c))return{a:r,b:o};if(a.isText&&a.text!=c.text){for(var h=0,l=Math.min(a.text.length,c.text.length);h<l&&a.text[a.text.length-h-1]==c.text[c.text.length-h-1];)h++,r--,o--;return{a:r,b:o}}if(a.content.size||c.content.size){var u=t(a.content,c.content,r-1,o-1);if(u)return u}r-=p,o-=p}else r-=p,o-=p}}(this,t,e,n)},T.prototype.findIndex=function(t,e){if(void 0===e&&(e=-1),0==t)return E(0,t);if(t==this.size)return E(this.content.length,t);if(t>this.size||t<0)throw new RangeError("Position "+t+" outside of fragment ("+this+")");for(var n=0,r=0;;n++){var o=r+this.child(n).nodeSize;if(o>=t)return o==t||e>0?E(n+1,o):E(n,r);r=o}},T.prototype.toString=function(){return"<"+this.toStringInner()+">"},T.prototype.toStringInner=function(){return this.content.join(", ")},T.prototype.toJSON=function(){return this.content.length?this.content.map((function(t){return t.toJSON()})):null},T.fromJSON=function(t,e){if(!e)return T.empty;if(!Array.isArray(e))throw new RangeError("Invalid input for Fragment.fromJSON");return new T(e.map(t.nodeFromJSON))},T.fromArray=function(t){if(!t.length)return T.empty;for(var e,n=0,r=0;r<t.length;r++){var o=t[r];n+=o.nodeSize,r&&o.isText&&t[r-1].sameMarkup(o)?(e||(e=t.slice(0,r)),e[e.length-1]=o.withText(e[e.length-1].text+o.text)):e&&e.push(o)}return new T(e||t,n)},T.from=function(t){if(!t)return T.empty;if(t instanceof T)return t;if(Array.isArray(t))return this.fromArray(t);if(t.attrs)return new T([t],t.nodeSize);throw new RangeError("Can not convert "+t+" to a Fragment"+(t.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))},Object.defineProperties(T.prototype,D);var N={index:0,offset:0};function E(t,e){return N.index=t,N.offset=e,N}function A(t,e){if(t===e)return!0;if(!t||"object"!=typeof t||!e||"object"!=typeof e)return!1;var n=Array.isArray(t);if(Array.isArray(e)!=n)return!1;if(n){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(!A(t[r],e[r]))return!1}else{for(var o in t)if(!(o in e&&A(t[o],e[o])))return!1;for(var i in e)if(!(i in t))return!1}return!0}T.empty=new T([],0);var I=function(t,e){this.type=t,this.attrs=e};function z(t){var e=Error.call(this,t);return e.__proto__=z.prototype,e}I.prototype.addToSet=function(t){for(var e,n=!1,r=0;r<t.length;r++){var o=t[r];if(this.eq(o))return t;if(this.type.excludes(o.type))e||(e=t.slice(0,r));else{if(o.type.excludes(this.type))return t;!n&&o.type.rank>this.type.rank&&(e||(e=t.slice(0,r)),e.push(this),n=!0),e&&e.push(o)}}return e||(e=t.slice()),n||e.push(this),e},I.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return t.slice(0,e).concat(t.slice(e+1));return t},I.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return!0;return!1},I.prototype.eq=function(t){return this==t||this.type==t.type&&A(this.attrs,t.attrs)},I.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return t},I.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Mark.fromJSON");var n=t.marks[e.type];if(!n)throw new RangeError("There is no mark type "+e.type+" in this schema");return n.create(e.attrs)},I.sameSet=function(t,e){if(t==e)return!0;if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].eq(e[n]))return!1;return!0},I.setFrom=function(t){if(!t||0==t.length)return I.none;if(t instanceof I)return[t];var e=t.slice();return e.sort((function(t,e){return t.type.rank-e.type.rank})),e},I.none=[],z.prototype=Object.create(Error.prototype),z.prototype.constructor=z,z.prototype.name="ReplaceError";var R=function(t,e,n){this.content=t,this.openStart=e,this.openEnd=n},P={size:{configurable:!0}};function _(t,e,n){if(n.openStart>t.depth)throw new z("Inserted content deeper than insertion position");if(t.depth-n.openStart!=e.depth-n.openEnd)throw new z("Inconsistent open depths");return function t(e,n,r,o){var i=e.index(o),s=e.node(o);if(i==n.index(o)&&o<e.depth-r.openStart){var a=t(e,n,r,o+1);return s.copy(s.content.replaceChild(i,a))}if(r.content.size){if(r.openStart||r.openEnd||e.depth!=o||n.depth!=o){var c=function(t,e){for(var n=e.depth-t.openStart,r=e.node(n).copy(t.content),o=n-1;o>=0;o--)r=e.node(o).copy(T.from(r));return{start:r.resolveNoCache(t.openStart+n),end:r.resolveNoCache(r.content.size-t.openEnd-n)}}(r,e),p=c.start,h=c.end;return L(s,function t(e,n,r,o,i){var s=e.depth>i&&V(e,n,i+1),a=o.depth>i&&V(r,o,i+1),c=[];F(null,e,i,c),s&&a&&n.index(i)==r.index(i)?(B(s,a),$(L(s,t(e,n,r,o,i+1)),c)):(s&&$(L(s,j(e,n,i+1)),c),F(n,r,i,c),a&&$(L(a,j(r,o,i+1)),c));return F(o,null,i,c),new T(c)}(e,p,h,n,o))}var l=e.parent,u=l.content;return L(l,u.cut(0,e.parentOffset).append(r.content).append(u.cut(n.parentOffset)))}return L(s,j(e,n,o))}(t,e,n,0)}function B(t,e){if(!e.type.compatibleContent(t.type))throw new z("Cannot join "+e.type.name+" onto "+t.type.name)}function V(t,e,n){var r=t.node(n);return B(r,e.node(n)),r}function $(t,e){var n=e.length-1;n>=0&&t.isText&&t.sameMarkup(e[n])?e[n]=t.withText(e[n].text+t.text):e.push(t)}function F(t,e,n,r){var o=(e||t).node(n),i=0,s=e?e.index(n):o.childCount;t&&(i=t.index(n),t.depth>n?i++:t.textOffset&&($(t.nodeAfter,r),i++));for(var a=i;a<s;a++)$(o.child(a),r);e&&e.depth==n&&e.textOffset&&$(e.nodeBefore,r)}function L(t,e){if(!t.type.validContent(e))throw new z("Invalid content for node "+t.type.name);return t.copy(e)}function j(t,e,n){var r=[];(F(null,t,n,r),t.depth>n)&&$(L(V(t,e,n+1),j(t,e,n+1)),r);return F(e,null,n,r),new T(r)}P.size.get=function(){return this.content.size-this.openStart-this.openEnd},R.prototype.insertAt=function(t,e){var n=function t(e,n,r,o){var i=e.findIndex(n),s=i.index,a=i.offset,c=e.maybeChild(s);if(a==n||c.isText)return o&&!o.canReplace(s,s,r)?null:e.cut(0,n).append(r).append(e.cut(n));var p=t(c.content,n-a-1,r);return p&&e.replaceChild(s,c.copy(p))}(this.content,t+this.openStart,e,null);return n&&new R(n,this.openStart,this.openEnd)},R.prototype.removeBetween=function(t,e){return new R(function t(e,n,r){var o=e.findIndex(n),i=o.index,s=o.offset,a=e.maybeChild(i),c=e.findIndex(r),p=c.index,h=c.offset;if(s==n||a.isText){if(h!=r&&!e.child(p).isText)throw new RangeError("Removing non-flat range");return e.cut(0,n).append(e.cut(r))}if(i!=p)throw new RangeError("Removing non-flat range");return e.replaceChild(i,a.copy(t(a.content,n-s-1,r-s-1)))}(this.content,t+this.openStart,e+this.openStart),this.openStart,this.openEnd)},R.prototype.eq=function(t){return this.content.eq(t.content)&&this.openStart==t.openStart&&this.openEnd==t.openEnd},R.prototype.toString=function(){return this.content+"("+this.openStart+","+this.openEnd+")"},R.prototype.toJSON=function(){if(!this.content.size)return null;var t={content:this.content.toJSON()};return this.openStart>0&&(t.openStart=this.openStart),this.openEnd>0&&(t.openEnd=this.openEnd),t},R.fromJSON=function(t,e){if(!e)return R.empty;var n=e.openStart||0,r=e.openEnd||0;if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid input for Slice.fromJSON");return new R(T.fromJSON(t,e.content),e.openStart||0,e.openEnd||0)},R.maxOpen=function(t,e){void 0===e&&(e=!0);for(var n=0,r=0,o=t.firstChild;o&&!o.isLeaf&&(e||!o.type.spec.isolating);o=o.firstChild)n++;for(var i=t.lastChild;i&&!i.isLeaf&&(e||!i.type.spec.isolating);i=i.lastChild)r++;return new R(t,n,r)},Object.defineProperties(R.prototype,P),R.empty=new R(T.empty,0,0);var q=function(t,e,n){this.pos=t,this.path=e,this.depth=e.length/3-1,this.parentOffset=n},J={parent:{configurable:!0},doc:{configurable:!0},textOffset:{configurable:!0},nodeAfter:{configurable:!0},nodeBefore:{configurable:!0}};q.prototype.resolveDepth=function(t){return null==t?this.depth:t<0?this.depth+t:t},J.parent.get=function(){return this.node(this.depth)},J.doc.get=function(){return this.node(0)},q.prototype.node=function(t){return this.path[3*this.resolveDepth(t)]},q.prototype.index=function(t){return this.path[3*this.resolveDepth(t)+1]},q.prototype.indexAfter=function(t){return t=this.resolveDepth(t),this.index(t)+(t!=this.depth||this.textOffset?1:0)},q.prototype.start=function(t){return 0==(t=this.resolveDepth(t))?0:this.path[3*t-1]+1},q.prototype.end=function(t){return t=this.resolveDepth(t),this.start(t)+this.node(t).content.size},q.prototype.before=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position before the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]},q.prototype.after=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position after the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]+this.path[3*t].nodeSize},J.textOffset.get=function(){return this.pos-this.path[this.path.length-1]},J.nodeAfter.get=function(){var t=this.parent,e=this.index(this.depth);if(e==t.childCount)return null;var n=this.pos-this.path[this.path.length-1],r=t.child(e);return n?t.child(e).cut(n):r},J.nodeBefore.get=function(){var t=this.index(this.depth),e=this.pos-this.path[this.path.length-1];return e?this.parent.child(t).cut(0,e):0==t?null:this.parent.child(t-1)},q.prototype.marks=function(){var t=this.parent,e=this.index();if(0==t.content.size)return I.none;if(this.textOffset)return t.child(e).marks;var n=t.maybeChild(e-1),r=t.maybeChild(e);if(!n){var o=n;n=r,r=o}for(var i=n.marks,s=0;s<i.length;s++)!1!==i[s].type.spec.inclusive||r&&i[s].isInSet(r.marks)||(i=i[s--].removeFromSet(i));return i},q.prototype.marksAcross=function(t){var e=this.parent.maybeChild(this.index());if(!e||!e.isInline)return null;for(var n=e.marks,r=t.parent.maybeChild(t.index()),o=0;o<n.length;o++)!1!==n[o].type.spec.inclusive||r&&n[o].isInSet(r.marks)||(n=n[o--].removeFromSet(n));return n},q.prototype.sharedDepth=function(t){for(var e=this.depth;e>0;e--)if(this.start(e)<=t&&this.end(e)>=t)return e;return 0},q.prototype.blockRange=function(t,e){if(void 0===t&&(t=this),t.pos<this.pos)return t.blockRange(this);for(var n=this.depth-(this.parent.inlineContent||this.pos==t.pos?1:0);n>=0;n--)if(t.pos<=this.end(n)&&(!e||e(this.node(n))))return new U(this,t,n)},q.prototype.sameParent=function(t){return this.pos-this.parentOffset==t.pos-t.parentOffset},q.prototype.max=function(t){return t.pos>this.pos?t:this},q.prototype.min=function(t){return t.pos<this.pos?t:this},q.prototype.toString=function(){for(var t="",e=1;e<=this.depth;e++)t+=(t?"/":"")+this.node(e).type.name+"_"+this.index(e-1);return t+":"+this.parentOffset},q.resolve=function(t,e){if(!(e>=0&&e<=t.content.size))throw new RangeError("Position "+e+" out of range");for(var n=[],r=0,o=e,i=t;;){var s=i.content.findIndex(o),a=s.index,c=s.offset,p=o-c;if(n.push(i,a,r+c),!p)break;if((i=i.child(a)).isText)break;o=p-1,r+=c+1}return new q(e,n,o)},q.resolveCached=function(t,e){for(var n=0;n<H.length;n++){var r=H[n];if(r.pos==e&&r.doc==t)return r}var o=H[W]=q.resolve(t,e);return W=(W+1)%K,o},Object.defineProperties(q.prototype,J);var H=[],W=0,K=12,U=function(t,e,n){this.$from=t,this.$to=e,this.depth=n},G={start:{configurable:!0},end:{configurable:!0},parent:{configurable:!0},startIndex:{configurable:!0},endIndex:{configurable:!0}};G.start.get=function(){return this.$from.before(this.depth+1)},G.end.get=function(){return this.$to.after(this.depth+1)},G.parent.get=function(){return this.$from.node(this.depth)},G.startIndex.get=function(){return this.$from.index(this.depth)},G.endIndex.get=function(){return this.$to.indexAfter(this.depth)},Object.defineProperties(U.prototype,G);var Q=Object.create(null),Y=function(t,e,n,r){this.type=t,this.attrs=e,this.content=n||T.empty,this.marks=r||I.none},X={nodeSize:{configurable:!0},childCount:{configurable:!0},textContent:{configurable:!0},firstChild:{configurable:!0},lastChild:{configurable:!0},isBlock:{configurable:!0},isTextblock:{configurable:!0},inlineContent:{configurable:!0},isInline:{configurable:!0},isText:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};X.nodeSize.get=function(){return this.isLeaf?1:2+this.content.size},X.childCount.get=function(){return this.content.childCount},Y.prototype.child=function(t){return this.content.child(t)},Y.prototype.maybeChild=function(t){return this.content.maybeChild(t)},Y.prototype.forEach=function(t){this.content.forEach(t)},Y.prototype.nodesBetween=function(t,e,n,r){void 0===r&&(r=0),this.content.nodesBetween(t,e,n,r,this)},Y.prototype.descendants=function(t){this.nodesBetween(0,this.content.size,t)},X.textContent.get=function(){return this.textBetween(0,this.content.size,"")},Y.prototype.textBetween=function(t,e,n,r){return this.content.textBetween(t,e,n,r)},X.firstChild.get=function(){return this.content.firstChild},X.lastChild.get=function(){return this.content.lastChild},Y.prototype.eq=function(t){return this==t||this.sameMarkup(t)&&this.content.eq(t.content)},Y.prototype.sameMarkup=function(t){return this.hasMarkup(t.type,t.attrs,t.marks)},Y.prototype.hasMarkup=function(t,e,n){return this.type==t&&A(this.attrs,e||t.defaultAttrs||Q)&&I.sameSet(this.marks,n||I.none)},Y.prototype.copy=function(t){return void 0===t&&(t=null),t==this.content?this:new this.constructor(this.type,this.attrs,t,this.marks)},Y.prototype.mark=function(t){return t==this.marks?this:new this.constructor(this.type,this.attrs,this.content,t)},Y.prototype.cut=function(t,e){return 0==t&&e==this.content.size?this:this.copy(this.content.cut(t,e))},Y.prototype.slice=function(t,e,n){if(void 0===e&&(e=this.content.size),void 0===n&&(n=!1),t==e)return R.empty;var r=this.resolve(t),o=this.resolve(e),i=n?0:r.sharedDepth(e),s=r.start(i),a=r.node(i).content.cut(r.pos-s,o.pos-s);return new R(a,r.depth-i,o.depth-i)},Y.prototype.replace=function(t,e,n){return _(this.resolve(t),this.resolve(e),n)},Y.prototype.nodeAt=function(t){for(var e=this;;){var n=e.content.findIndex(t),r=n.index,o=n.offset;if(!(e=e.maybeChild(r)))return null;if(o==t||e.isText)return e;t-=o+1}},Y.prototype.childAfter=function(t){var e=this.content.findIndex(t),n=e.index,r=e.offset;return{node:this.content.maybeChild(n),index:n,offset:r}},Y.prototype.childBefore=function(t){if(0==t)return{node:null,index:0,offset:0};var e=this.content.findIndex(t),n=e.index,r=e.offset;if(r<t)return{node:this.content.child(n),index:n,offset:r};var o=this.content.child(n-1);return{node:o,index:n-1,offset:r-o.nodeSize}},Y.prototype.resolve=function(t){return q.resolveCached(this,t)},Y.prototype.resolveNoCache=function(t){return q.resolve(this,t)},Y.prototype.rangeHasMark=function(t,e,n){var r=!1;return e>t&&this.nodesBetween(t,e,(function(t){return n.isInSet(t.marks)&&(r=!0),!r})),r},X.isBlock.get=function(){return this.type.isBlock},X.isTextblock.get=function(){return this.type.isTextblock},X.inlineContent.get=function(){return this.type.inlineContent},X.isInline.get=function(){return this.type.isInline},X.isText.get=function(){return this.type.isText},X.isLeaf.get=function(){return this.type.isLeaf},X.isAtom.get=function(){return this.type.isAtom},Y.prototype.toString=function(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);var t=this.type.name;return this.content.size&&(t+="("+this.content.toStringInner()+")"),tt(this.marks,t)},Y.prototype.contentMatchAt=function(t){var e=this.type.contentMatch.matchFragment(this.content,0,t);if(!e)throw new Error("Called contentMatchAt on a node with invalid content");return e},Y.prototype.canReplace=function(t,e,n,r,o){void 0===n&&(n=T.empty),void 0===r&&(r=0),void 0===o&&(o=n.childCount);var i=this.contentMatchAt(t).matchFragment(n,r,o),s=i&&i.matchFragment(this.content,e);if(!s||!s.validEnd)return!1;for(var a=r;a<o;a++)if(!this.type.allowsMarks(n.child(a).marks))return!1;return!0},Y.prototype.canReplaceWith=function(t,e,n,r){if(r&&!this.type.allowsMarks(r))return!1;var o=this.contentMatchAt(t).matchType(n),i=o&&o.matchFragment(this.content,e);return!!i&&i.validEnd},Y.prototype.canAppend=function(t){return t.content.size?this.canReplace(this.childCount,this.childCount,t.content):this.type.compatibleContent(t.type)},Y.prototype.check=function(){if(!this.type.validContent(this.content))throw new RangeError("Invalid content for node "+this.type.name+": "+this.content.toString().slice(0,50));this.content.forEach((function(t){return t.check()}))},Y.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return this.content.size&&(t.content=this.content.toJSON()),this.marks.length&&(t.marks=this.marks.map((function(t){return t.toJSON()}))),t},Y.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Node.fromJSON");var n=null;if(e.marks){if(!Array.isArray(e.marks))throw new RangeError("Invalid mark data for Node.fromJSON");n=e.marks.map(t.markFromJSON)}if("text"==e.type){if("string"!=typeof e.text)throw new RangeError("Invalid text node in JSON");return t.text(e.text,n)}var r=T.fromJSON(t,e.content);return t.nodeType(e.type).create(e.attrs,r,n)},Object.defineProperties(Y.prototype,X);var Z=function(t){function e(e,n,r,o){if(t.call(this,e,n,null,o),!r)throw new RangeError("Empty text nodes are not allowed");this.text=r}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={textContent:{configurable:!0},nodeSize:{configurable:!0}};return e.prototype.toString=function(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):tt(this.marks,JSON.stringify(this.text))},n.textContent.get=function(){return this.text},e.prototype.textBetween=function(t,e){return this.text.slice(t,e)},n.nodeSize.get=function(){return this.text.length},e.prototype.mark=function(t){return t==this.marks?this:new e(this.type,this.attrs,this.text,t)},e.prototype.withText=function(t){return t==this.text?this:new e(this.type,this.attrs,t,this.marks)},e.prototype.cut=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.text.length),0==t&&e==this.text.length?this:this.withText(this.text.slice(t,e))},e.prototype.eq=function(t){return this.sameMarkup(t)&&this.text==t.text},e.prototype.toJSON=function(){var e=t.prototype.toJSON.call(this);return e.text=this.text,e},Object.defineProperties(e.prototype,n),e}(Y);function tt(t,e){for(var n=t.length-1;n>=0;n--)e=t[n].type.name+"("+e+")";return e}var et=function(t){this.validEnd=t,this.next=[],this.wrapCache=[]},nt={inlineContent:{configurable:!0},defaultType:{configurable:!0},edgeCount:{configurable:!0}};et.parse=function(t,e){var n=new rt(t,e);if(null==n.next)return et.empty;var r=it(n);n.next&&n.err("Unexpected trailing text");var o=function(t){var e=Object.create(null);return function n(r){var o=[];r.forEach((function(e){t[e].forEach((function(e){var n=e.term,r=e.to;if(n){var i=o.indexOf(n),s=i>-1&&o[i+1];lt(t,r).forEach((function(t){s||o.push(n,s=[]),-1==s.indexOf(t)&&s.push(t)}))}}))}));for(var i=e[r.join(",")]=new et(r.indexOf(t.length-1)>-1),s=0;s<o.length;s+=2){var a=o[s+1].sort(ht);i.next.push(o[s],e[a.join(",")]||n(a))}return i}(lt(t,0))}(function(t){var e=[[]];return o(function t(e,i){if("choice"==e.type)return e.exprs.reduce((function(e,n){return e.concat(t(n,i))}),[]);if("seq"==e.type)for(var s=0;;s++){var a=t(e.exprs[s],i);if(s==e.exprs.length-1)return a;o(a,i=n())}else{if("star"==e.type){var c=n();return r(i,c),o(t(e.expr,c),c),[r(c)]}if("plus"==e.type){var p=n();return o(t(e.expr,i),p),o(t(e.expr,p),p),[r(p)]}if("opt"==e.type)return[r(i)].concat(t(e.expr,i));if("range"==e.type){for(var h=i,l=0;l<e.min;l++){var u=n();o(t(e.expr,h),u),h=u}if(-1==e.max)o(t(e.expr,h),h);else for(var f=e.min;f<e.max;f++){var d=n();r(h,d),o(t(e.expr,h),d),h=d}return[r(h)]}if("name"==e.type)return[r(i,null,e.value)]}}(t,0),n()),e;function n(){return e.push([])-1}function r(t,n,r){var o={term:r,to:n};return e[t].push(o),o}function o(t,e){t.forEach((function(t){return t.to=e}))}}(r));return function(t,e){for(var n=0,r=[t];n<r.length;n++){for(var o=r[n],i=!o.validEnd,s=[],a=0;a<o.next.length;a+=2){var c=o.next[a],p=o.next[a+1];s.push(c.name),!i||c.isText||c.hasRequiredAttrs()||(i=!1),-1==r.indexOf(p)&&r.push(p)}i&&e.err("Only non-generatable nodes ("+s.join(", ")+") in a required position")}}(o,n),o},et.prototype.matchType=function(t){for(var e=0;e<this.next.length;e+=2)if(this.next[e]==t)return this.next[e+1];return null},et.prototype.matchFragment=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.childCount);for(var r=this,o=e;r&&o<n;o++)r=r.matchType(t.child(o).type);return r},nt.inlineContent.get=function(){var t=this.next[0];return!!t&&t.isInline},nt.defaultType.get=function(){for(var t=0;t<this.next.length;t+=2){var e=this.next[t];if(!e.isText&&!e.hasRequiredAttrs())return e}},et.prototype.compatible=function(t){for(var e=0;e<this.next.length;e+=2)for(var n=0;n<t.next.length;n+=2)if(this.next[e]==t.next[n])return!0;return!1},et.prototype.fillBefore=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=0);var r=[this];return function o(i,s){var a=i.matchFragment(t,n);if(a&&(!e||a.validEnd))return T.from(s.map((function(t){return t.createAndFill()})));for(var c=0;c<i.next.length;c+=2){var p=i.next[c],h=i.next[c+1];if(!p.isText&&!p.hasRequiredAttrs()&&-1==r.indexOf(h)){r.push(h);var l=o(h,s.concat(p));if(l)return l}}}(this,[])},et.prototype.findWrapping=function(t){for(var e=0;e<this.wrapCache.length;e+=2)if(this.wrapCache[e]==t)return this.wrapCache[e+1];var n=this.computeWrapping(t);return this.wrapCache.push(t,n),n},et.prototype.computeWrapping=function(t){for(var e=Object.create(null),n=[{match:this,type:null,via:null}];n.length;){var r=n.shift(),o=r.match;if(o.matchType(t)){for(var i=[],s=r;s.type;s=s.via)i.push(s.type);return i.reverse()}for(var a=0;a<o.next.length;a+=2){var c=o.next[a];c.isLeaf||c.hasRequiredAttrs()||c.name in e||r.type&&!o.next[a+1].validEnd||(n.push({match:c.contentMatch,type:c,via:r}),e[c.name]=!0)}}},nt.edgeCount.get=function(){return this.next.length>>1},et.prototype.edge=function(t){var e=t<<1;if(e>=this.next.length)throw new RangeError("There's no "+t+"th edge in this content match");return{type:this.next[e],next:this.next[e+1]}},et.prototype.toString=function(){var t=[];return function e(n){t.push(n);for(var r=1;r<n.next.length;r+=2)-1==t.indexOf(n.next[r])&&e(n.next[r])}(this),t.map((function(e,n){for(var r=n+(e.validEnd?"*":" ")+" ",o=0;o<e.next.length;o+=2)r+=(o?", ":"")+e.next[o].name+"->"+t.indexOf(e.next[o+1]);return r})).join("\n")},Object.defineProperties(et.prototype,nt),et.empty=new et(!0);var rt=function(t,e){this.string=t,this.nodeTypes=e,this.inline=null,this.pos=0,this.tokens=t.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.unshift()},ot={next:{configurable:!0}};function it(t){var e=[];do{e.push(st(t))}while(t.eat("|"));return 1==e.length?e[0]:{type:"choice",exprs:e}}function st(t){var e=[];do{e.push(at(t))}while(t.next&&")"!=t.next&&"|"!=t.next);return 1==e.length?e[0]:{type:"seq",exprs:e}}function at(t){for(var e=function(t){if(t.eat("(")){var e=it(t);return t.eat(")")||t.err("Missing closing paren"),e}if(!/\W/.test(t.next)){var n=function(t,e){var n=t.nodeTypes,r=n[e];if(r)return[r];var o=[];for(var i in n){var s=n[i];s.groups.indexOf(e)>-1&&o.push(s)}0==o.length&&t.err("No node type or group '"+e+"' found");return o}(t,t.next).map((function(e){return null==t.inline?t.inline=e.isInline:t.inline!=e.isInline&&t.err("Mixing inline and block content"),{type:"name",value:e}}));return t.pos++,1==n.length?n[0]:{type:"choice",exprs:n}}t.err("Unexpected token '"+t.next+"'")}(t);;)if(t.eat("+"))e={type:"plus",expr:e};else if(t.eat("*"))e={type:"star",expr:e};else if(t.eat("?"))e={type:"opt",expr:e};else{if(!t.eat("{"))break;e=pt(t,e)}return e}function ct(t){/\D/.test(t.next)&&t.err("Expected number, got '"+t.next+"'");var e=Number(t.next);return t.pos++,e}function pt(t,e){var n=ct(t),r=n;return t.eat(",")&&(r="}"!=t.next?ct(t):-1),t.eat("}")||t.err("Unclosed braced range"),{type:"range",min:n,max:r,expr:e}}function ht(t,e){return e-t}function lt(t,e){var n=[];return function e(r){var o=t[r];if(1==o.length&&!o[0].term)return e(o[0].to);n.push(r);for(var i=0;i<o.length;i++){var s=o[i],a=s.term,c=s.to;a||-1!=n.indexOf(c)||e(c)}}(e),n.sort(ht)}function ut(t){var e=Object.create(null);for(var n in t){var r=t[n];if(!r.hasDefault)return null;e[n]=r.default}return e}function ft(t,e){var n=Object.create(null);for(var r in t){var o=e&&e[r];if(void 0===o){var i=t[r];if(!i.hasDefault)throw new RangeError("No value supplied for attribute "+r);o=i.default}n[r]=o}return n}function dt(t){var e=Object.create(null);if(t)for(var n in t)e[n]=new gt(t[n]);return e}ot.next.get=function(){return this.tokens[this.pos]},rt.prototype.eat=function(t){return this.next==t&&(this.pos++||!0)},rt.prototype.err=function(t){throw new SyntaxError(t+" (in content expression '"+this.string+"')")},Object.defineProperties(rt.prototype,ot);var mt=function(t,e,n){this.name=t,this.schema=e,this.spec=n,this.groups=n.group?n.group.split(" "):[],this.attrs=dt(n.attrs),this.defaultAttrs=ut(this.attrs),this.contentMatch=null,this.markSet=null,this.inlineContent=null,this.isBlock=!(n.inline||"text"==t),this.isText="text"==t},vt={isInline:{configurable:!0},isTextblock:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};vt.isInline.get=function(){return!this.isBlock},vt.isTextblock.get=function(){return this.isBlock&&this.inlineContent},vt.isLeaf.get=function(){return this.contentMatch==et.empty},vt.isAtom.get=function(){return this.isLeaf||this.spec.atom},mt.prototype.hasRequiredAttrs=function(){for(var t in this.attrs)if(this.attrs[t].isRequired)return!0;return!1},mt.prototype.compatibleContent=function(t){return this==t||this.contentMatch.compatible(t.contentMatch)},mt.prototype.computeAttrs=function(t){return!t&&this.defaultAttrs?this.defaultAttrs:ft(this.attrs,t)},mt.prototype.create=function(t,e,n){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new Y(this,this.computeAttrs(t),T.from(e),I.setFrom(n))},mt.prototype.createChecked=function(t,e,n){if(e=T.from(e),!this.validContent(e))throw new RangeError("Invalid content for node "+this.name);return new Y(this,this.computeAttrs(t),e,I.setFrom(n))},mt.prototype.createAndFill=function(t,e,n){if(t=this.computeAttrs(t),(e=T.from(e)).size){var r=this.contentMatch.fillBefore(e);if(!r)return null;e=r.append(e)}var o=this.contentMatch.matchFragment(e).fillBefore(T.empty,!0);return o?new Y(this,t,e.append(o),I.setFrom(n)):null},mt.prototype.validContent=function(t){var e=this.contentMatch.matchFragment(t);if(!e||!e.validEnd)return!1;for(var n=0;n<t.childCount;n++)if(!this.allowsMarks(t.child(n).marks))return!1;return!0},mt.prototype.allowsMarkType=function(t){return null==this.markSet||this.markSet.indexOf(t)>-1},mt.prototype.allowsMarks=function(t){if(null==this.markSet)return!0;for(var e=0;e<t.length;e++)if(!this.allowsMarkType(t[e].type))return!1;return!0},mt.prototype.allowedMarks=function(t){if(null==this.markSet)return t;for(var e,n=0;n<t.length;n++)this.allowsMarkType(t[n].type)?e&&e.push(t[n]):e||(e=t.slice(0,n));return e?e.length?e:I.empty:t},mt.compile=function(t,e){var n=Object.create(null);t.forEach((function(t,r){return n[t]=new mt(t,e,r)}));var r=e.spec.topNode||"doc";if(!n[r])throw new RangeError("Schema is missing its top node type ('"+r+"')");if(!n.text)throw new RangeError("Every schema needs a 'text' type");for(var o in n.text.attrs)throw new RangeError("The text node type should not have attributes");return n},Object.defineProperties(mt.prototype,vt);var gt=function(t){this.hasDefault=Object.prototype.hasOwnProperty.call(t,"default"),this.default=t.default},yt={isRequired:{configurable:!0}};yt.isRequired.get=function(){return!this.hasDefault},Object.defineProperties(gt.prototype,yt);var wt=function(t,e,n,r){this.name=t,this.schema=n,this.spec=r,this.attrs=dt(r.attrs),this.rank=e,this.excluded=null;var o=ut(this.attrs);this.instance=o&&new I(this,o)};wt.prototype.create=function(t){return!t&&this.instance?this.instance:new I(this,ft(this.attrs,t))},wt.compile=function(t,e){var n=Object.create(null),r=0;return t.forEach((function(t,o){return n[t]=new wt(t,r++,e,o)})),n},wt.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t.slice(0,e).concat(t.slice(e+1));return t},wt.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t[e]},wt.prototype.excludes=function(t){return this.excluded.indexOf(t)>-1};var bt=function(t){for(var e in this.spec={},t)this.spec[e]=t[e];this.spec.nodes=C.from(t.nodes),this.spec.marks=C.from(t.marks),this.nodes=mt.compile(this.spec.nodes,this),this.marks=wt.compile(this.spec.marks,this);var n=Object.create(null);for(var r in this.nodes){if(r in this.marks)throw new RangeError(r+" can not be both a node and a mark");var o=this.nodes[r],i=o.spec.content||"",s=o.spec.marks;o.contentMatch=n[i]||(n[i]=et.parse(i,this.nodes)),o.inlineContent=o.contentMatch.inlineContent,o.markSet="_"==s?null:s?kt(this,s.split(" ")):""!=s&&o.inlineContent?null:[]}for(var a in this.marks){var c=this.marks[a],p=c.spec.excludes;c.excluded=null==p?[c]:""==p?[]:kt(this,p.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached=Object.create(null),this.cached.wrappings=Object.create(null)};function kt(t,e){for(var n=[],r=0;r<e.length;r++){var o=e[r],i=t.marks[o],s=i;if(i)n.push(i);else for(var a in t.marks){var c=t.marks[a];("_"==o||c.spec.group&&c.spec.group.split(" ").indexOf(o)>-1)&&n.push(s=c)}if(!s)throw new SyntaxError("Unknown mark type: '"+e[r]+"'")}return n}bt.prototype.node=function(t,e,n,r){if("string"==typeof t)t=this.nodeType(t);else{if(!(t instanceof mt))throw new RangeError("Invalid node type: "+t);if(t.schema!=this)throw new RangeError("Node type from different schema used ("+t.name+")")}return t.createChecked(e,n,r)},bt.prototype.text=function(t,e){var n=this.nodes.text;return new Z(n,n.defaultAttrs,t,I.setFrom(e))},bt.prototype.mark=function(t,e){return"string"==typeof t&&(t=this.marks[t]),t.create(e)},bt.prototype.nodeFromJSON=function(t){return Y.fromJSON(this,t)},bt.prototype.markFromJSON=function(t){return I.fromJSON(this,t)},bt.prototype.nodeType=function(t){var e=this.nodes[t];if(!e)throw new RangeError("Unknown node type: "+t);return e};var xt=function(t,e){var n=this;this.schema=t,this.rules=e,this.tags=[],this.styles=[],e.forEach((function(t){t.tag?n.tags.push(t):t.style&&n.styles.push(t)}))};xt.prototype.parse=function(t,e){void 0===e&&(e={});var n=new Dt(this,e,!1);return n.addAll(t,null,e.from,e.to),n.finish()},xt.prototype.parseSlice=function(t,e){void 0===e&&(e={});var n=new Dt(this,e,!0);return n.addAll(t,null,e.from,e.to),R.maxOpen(n.finish())},xt.prototype.matchTag=function(t,e){for(var n=0;n<this.tags.length;n++){var r=this.tags[n];if(Et(t,r.tag)&&(void 0===r.namespace||t.namespaceURI==r.namespace)&&(!r.context||e.matchesContext(r.context))){if(r.getAttrs){var o=r.getAttrs(t);if(!1===o)continue;r.attrs=o}return r}}},xt.prototype.matchStyle=function(t,e,n){for(var r=0;r<this.styles.length;r++){var o=this.styles[r];if(!(0!=o.style.indexOf(t)||o.context&&!n.matchesContext(o.context)||o.style.length>t.length&&(61!=o.style.charCodeAt(t.length)||o.style.slice(t.length+1)!=e))){if(o.getAttrs){var i=o.getAttrs(e);if(!1===i)continue;o.attrs=i}return o}}},xt.schemaRules=function(t){var e=[];function n(t){for(var n=null==t.priority?50:t.priority,r=0;r<e.length;r++){var o=e[r];if((null==o.priority?50:o.priority)<n)break}e.splice(r,0,t)}var r=function(e){var r=t.marks[e].spec.parseDOM;r&&r.forEach((function(t){n(t=At(t)),t.mark=e}))};for(var o in t.marks)r(o);var i;for(var s in t.nodes)i=void 0,(i=t.nodes[s].spec.parseDOM)&&i.forEach((function(t){n(t=At(t)),t.node=s}));return e},xt.fromSchema=function(t){return t.cached.domParser||(t.cached.domParser=new xt(t,xt.schemaRules(t)))};var St={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},Mt={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},Ot={ol:!0,ul:!0};function Ct(t){return(t?1:0)|("full"===t?2:0)}var Tt=function(t,e,n,r,o,i,s){this.type=t,this.attrs=e,this.solid=o,this.match=i||(4&s?null:t.contentMatch),this.options=s,this.content=[],this.marks=n,this.activeMarks=I.none,this.pendingMarks=r};Tt.prototype.findWrapping=function(t){if(!this.match){if(!this.type)return[];var e=this.type.contentMatch.fillBefore(T.from(t));if(!e){var n,r=this.type.contentMatch;return(n=r.findWrapping(t.type))?(this.match=r,n):null}this.match=this.type.contentMatch.matchFragment(e)}return this.match.findWrapping(t.type)},Tt.prototype.finish=function(t){if(!(1&this.options)){var e,n=this.content[this.content.length-1];n&&n.isText&&(e=/[ \t\r\n\u000c]+$/.exec(n.text))&&(n.text.length==e[0].length?this.content.pop():this.content[this.content.length-1]=n.withText(n.text.slice(0,n.text.length-e[0].length)))}var r=T.from(this.content);return!t&&this.match&&(r=r.append(this.match.fillBefore(T.empty,!0))),this.type?this.type.create(this.attrs,r,this.marks):r},Tt.prototype.applyPending=function(t){for(var e=0,n=this.pendingMarks;e<n.length;e++){var r=n[e];(this.type?this.type.allowsMarkType(r.type):It(r.type,t))&&!r.isInSet(this.activeMarks)&&(this.activeMarks=r.addToSet(this.activeMarks),this.pendingMarks=r.removeFromSet(this.pendingMarks))}};var Dt=function(t,e,n){this.parser=t,this.options=e,this.isOpen=n;var r,o=e.topNode,i=Ct(e.preserveWhitespace)|(n?4:0);r=o?new Tt(o.type,o.attrs,I.none,I.none,!0,e.topMatch||o.type.contentMatch,i):new Tt(n?null:t.schema.topNodeType,null,I.none,I.none,!0,null,i),this.nodes=[r],this.open=0,this.find=e.findPositions,this.needsBlock=!1},Nt={top:{configurable:!0},currentPos:{configurable:!0}};function Et(t,e){return(t.matches||t.msMatchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector).call(t,e)}function At(t){var e={};for(var n in t)e[n]=t[n];return e}function It(t,e){var n=e.schema.nodes,r=function(r){var o=n[r];if(o.allowsMarkType(t)){var i=[],s=function(t){i.push(t);for(var n=0;n<t.edgeCount;n++){var r=t.edge(n),o=r.type,a=r.next;if(o==e)return!0;if(i.indexOf(a)<0&&s(a))return!0}};return s(o.contentMatch)?{v:!0}:void 0}};for(var o in n){var i=r(o);if(i)return i.v}}Nt.top.get=function(){return this.nodes[this.open]},Dt.prototype.addDOM=function(t){if(3==t.nodeType)this.addTextNode(t);else if(1==t.nodeType){var e=t.getAttribute("style"),n=e?this.readStyles(function(t){var e,n=/\s*([\w-]+)\s*:\s*([^;]+)/g,r=[];for(;e=n.exec(t);)r.push(e[1],e[2].trim());return r}(e)):null,r=this.top;if(null!=n)for(var o=0;o<n.length;o++)this.addPendingMark(n[o]);if(this.addElement(t),null!=n)for(var i=0;i<n.length;i++)this.removePendingMark(n[i],r)}},Dt.prototype.addTextNode=function(t){var e=t.nodeValue,n=this.top;if((n.type?n.type.inlineContent:n.content.length&&n.content[0].isInline)||/[^ \t\r\n\u000c]/.test(e)){if(1&n.options)2&n.options||(e=e.replace(/\r?\n|\r/g," "));else if(e=e.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(e)&&this.open==this.nodes.length-1){var r=n.content[n.content.length-1],o=t.previousSibling;(!r||o&&"BR"==o.nodeName||r.isText&&/[ \t\r\n\u000c]$/.test(r.text))&&(e=e.slice(1))}e&&this.insertNode(this.parser.schema.text(e)),this.findInText(t)}else this.findInside(t)},Dt.prototype.addElement=function(t){var e=t.nodeName.toLowerCase();Ot.hasOwnProperty(e)&&function(t){for(var e=t.firstChild,n=null;e;e=e.nextSibling){var r=1==e.nodeType?e.nodeName.toLowerCase():null;r&&Ot.hasOwnProperty(r)&&n?(n.appendChild(e),e=n):"li"==r?n=e:r&&(n=null)}}(t);var n=this.options.ruleFromNode&&this.options.ruleFromNode(t)||this.parser.matchTag(t,this);if(n?n.ignore:Mt.hasOwnProperty(e))this.findInside(t);else if(!n||n.skip){n&&n.skip.nodeType&&(t=n.skip);var r,o=this.top,i=this.needsBlock;if(St.hasOwnProperty(e))r=!0,o.type||(this.needsBlock=!0);else if(!t.firstChild)return void this.leafFallback(t);this.addAll(t),r&&this.sync(o),this.needsBlock=i}else this.addElementByRule(t,n)},Dt.prototype.leafFallback=function(t){"BR"==t.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(t.ownerDocument.createTextNode("\n"))},Dt.prototype.readStyles=function(t){for(var e=I.none,n=0;n<t.length;n+=2){var r=this.parser.matchStyle(t[n],t[n+1],this);if(r){if(r.ignore)return null;e=this.parser.schema.marks[r.mark].create(r.attrs).addToSet(e)}}return e},Dt.prototype.addElementByRule=function(t,e){var n,r,o,i=this;e.node?(r=this.parser.schema.nodes[e.node]).isLeaf?this.insertNode(r.create(e.attrs))||this.leafFallback(t):n=this.enter(r,e.attrs,e.preserveWhitespace):(o=this.parser.schema.marks[e.mark].create(e.attrs),this.addPendingMark(o));var s=this.top;if(r&&r.isLeaf)this.findInside(t);else if(e.getContent)this.findInside(t),e.getContent(t,this.parser.schema).forEach((function(t){return i.insertNode(t)}));else{var a=e.contentElement;"string"==typeof a?a=t.querySelector(a):"function"==typeof a&&(a=a(t)),a||(a=t),this.findAround(t,a,!0),this.addAll(a,n)}n&&(this.sync(s),this.open--),o&&this.removePendingMark(o,s)},Dt.prototype.addAll=function(t,e,n,r){for(var o=n||0,i=n?t.childNodes[n]:t.firstChild,s=null==r?null:t.childNodes[r];i!=s;i=i.nextSibling,++o)this.findAtPoint(t,o),this.addDOM(i),e&&St.hasOwnProperty(i.nodeName.toLowerCase())&&this.sync(e);this.findAtPoint(t,o)},Dt.prototype.findPlace=function(t){for(var e,n,r=this.open;r>=0;r--){var o=this.nodes[r],i=o.findWrapping(t);if(i&&(!e||e.length>i.length)&&(e=i,n=o,!i.length))break;if(o.solid)break}if(!e)return!1;this.sync(n);for(var s=0;s<e.length;s++)this.enterInner(e[s],null,!1);return!0},Dt.prototype.insertNode=function(t){if(t.isInline&&this.needsBlock&&!this.top.type){var e=this.textblockFromContext();e&&this.enterInner(e)}if(this.findPlace(t)){this.closeExtra();var n=this.top;n.applyPending(t.type),n.match&&(n.match=n.match.matchType(t.type));for(var r=n.activeMarks,o=0;o<t.marks.length;o++)n.type&&!n.type.allowsMarkType(t.marks[o].type)||(r=t.marks[o].addToSet(r));return n.content.push(t.mark(r)),!0}return!1},Dt.prototype.enter=function(t,e,n){var r=this.findPlace(t.create(e));return r&&this.enterInner(t,e,!0,n),r},Dt.prototype.enterInner=function(t,e,n,r){this.closeExtra();var o=this.top;o.applyPending(t),o.match=o.match&&o.match.matchType(t,e);var i=null==r?-5&o.options:Ct(r);4&o.options&&0==o.content.length&&(i|=4),this.nodes.push(new Tt(t,e,o.activeMarks,o.pendingMarks,n,null,i)),this.open++},Dt.prototype.closeExtra=function(t){var e=this.nodes.length-1;if(e>this.open){for(;e>this.open;e--)this.nodes[e-1].content.push(this.nodes[e].finish(t));this.nodes.length=this.open+1}},Dt.prototype.finish=function(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)},Dt.prototype.sync=function(t){for(var e=this.open;e>=0;e--)if(this.nodes[e]==t)return void(this.open=e)},Nt.currentPos.get=function(){this.closeExtra();for(var t=0,e=this.open;e>=0;e--){for(var n=this.nodes[e].content,r=n.length-1;r>=0;r--)t+=n[r].nodeSize;e&&t++}return t},Dt.prototype.findAtPoint=function(t,e){if(this.find)for(var n=0;n<this.find.length;n++)this.find[n].node==t&&this.find[n].offset==e&&(this.find[n].pos=this.currentPos)},Dt.prototype.findInside=function(t){if(this.find)for(var e=0;e<this.find.length;e++)null==this.find[e].pos&&1==t.nodeType&&t.contains(this.find[e].node)&&(this.find[e].pos=this.currentPos)},Dt.prototype.findAround=function(t,e,n){if(t!=e&&this.find)for(var r=0;r<this.find.length;r++){if(null==this.find[r].pos&&1==t.nodeType&&t.contains(this.find[r].node))e.compareDocumentPosition(this.find[r].node)&(n?2:4)&&(this.find[r].pos=this.currentPos)}},Dt.prototype.findInText=function(t){if(this.find)for(var e=0;e<this.find.length;e++)this.find[e].node==t&&(this.find[e].pos=this.currentPos-(t.nodeValue.length-this.find[e].offset))},Dt.prototype.matchesContext=function(t){var e=this;if(t.indexOf("|")>-1)return t.split(/\s*\|\s*/).some(this.matchesContext,this);var n=t.split("/"),r=this.options.context,o=!(this.isOpen||r&&r.parent.type!=this.nodes[0].type),i=-(r?r.depth+1:0)+(o?0:1),s=function(t,a){for(;t>=0;t--){var c=n[t];if(""==c){if(t==n.length-1||0==t)continue;for(;a>=i;a--)if(s(t-1,a))return!0;return!1}var p=a>0||0==a&&o?e.nodes[a].type:r&&a>=i?r.node(a-i).type:null;if(!p||p.name!=c&&-1==p.groups.indexOf(c))return!1;a--}return!0};return s(n.length-1,this.open)},Dt.prototype.textblockFromContext=function(){var t=this.options.context;if(t)for(var e=t.depth;e>=0;e--){var n=t.node(e).contentMatchAt(t.indexAfter(e)).defaultType;if(n&&n.isTextblock&&n.defaultAttrs)return n}for(var r in this.parser.schema.nodes){var o=this.parser.schema.nodes[r];if(o.isTextblock&&o.defaultAttrs)return o}},Dt.prototype.addPendingMark=function(t){this.top.pendingMarks=t.addToSet(this.top.pendingMarks)},Dt.prototype.removePendingMark=function(t,e){for(var n=this.open;n>=0;n--){var r=this.nodes[n];if(r.pendingMarks.lastIndexOf(t)>-1?r.pendingMarks=t.removeFromSet(r.pendingMarks):r.activeMarks=t.removeFromSet(r.activeMarks),r==e)break}},Object.defineProperties(Dt.prototype,Nt);var zt=function(t,e){this.nodes=t||{},this.marks=e||{}};function Rt(t){var e={};for(var n in t){var r=t[n].spec.toDOM;r&&(e[n]=r)}return e}function Pt(t){return t.document||window.document}zt.prototype.serializeFragment=function(t,e,n){var r=this;void 0===e&&(e={}),n||(n=Pt(e).createDocumentFragment());var o=n,i=null;return t.forEach((function(t){if(i||t.marks.length){i||(i=[]);for(var n=0,s=0;n<i.length&&s<t.marks.length;){var a=t.marks[s];if(r.marks[a.type.name]){if(!a.eq(i[n])||!1===a.type.spec.spanning)break;n+=2,s++}else s++}for(;n<i.length;)o=i.pop(),i.pop();for(;s<t.marks.length;){var c=t.marks[s++],p=r.serializeMark(c,t.isInline,e);p&&(i.push(c,o),o.appendChild(p.dom),o=p.contentDOM||p.dom)}}o.appendChild(r.serializeNode(t,e))})),n},zt.prototype.serializeNode=function(t,e){void 0===e&&(e={});var n=zt.renderSpec(Pt(e),this.nodes[t.type.name](t)),r=n.dom,o=n.contentDOM;if(o){if(t.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");e.onContent?e.onContent(t,o,e):this.serializeFragment(t.content,e,o)}return r},zt.prototype.serializeNodeAndMarks=function(t,e){void 0===e&&(e={});for(var n=this.serializeNode(t,e),r=t.marks.length-1;r>=0;r--){var o=this.serializeMark(t.marks[r],t.isInline,e);o&&((o.contentDOM||o.dom).appendChild(n),n=o.dom)}return n},zt.prototype.serializeMark=function(t,e,n){void 0===n&&(n={});var r=this.marks[t.type.name];return r&&zt.renderSpec(Pt(n),r(t,e))},zt.renderSpec=function(t,e,n){if(void 0===n&&(n=null),"string"==typeof e)return{dom:t.createTextNode(e)};if(null!=e.nodeType)return{dom:e};var r=e[0],o=r.indexOf(" ");o>0&&(n=r.slice(0,o),r=r.slice(o+1));var i=null,s=n?t.createElementNS(n,r):t.createElement(r),a=e[1],c=1;if(a&&"object"==typeof a&&null==a.nodeType&&!Array.isArray(a))for(var p in c=2,a)if(null!=a[p]){var h=p.indexOf(" ");h>0?s.setAttributeNS(p.slice(0,h),p.slice(h+1),a[p]):s.setAttribute(p,a[p])}for(var l=c;l<e.length;l++){var u=e[l];if(0===u){if(l<e.length-1||l>c)throw new RangeError("Content hole must be the only child of its parent node");return{dom:s,contentDOM:s}}var f=zt.renderSpec(t,u,n),d=f.dom,m=f.contentDOM;if(s.appendChild(d),m){if(i)throw new RangeError("Multiple content holes");i=m}}return{dom:s,contentDOM:i}},zt.fromSchema=function(t){return t.cached.domSerializer||(t.cached.domSerializer=new zt(this.nodesFromSchema(t),this.marksFromSchema(t)))},zt.nodesFromSchema=function(t){var e=Rt(t.nodes);return e.text||(e.text=function(t){return t.text}),e},zt.marksFromSchema=function(t){return Rt(t.marks)};var _t=Math.pow(2,16);function Bt(t){return 65535&t}var Vt=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=null),this.pos=t,this.deleted=e,this.recover=n},$t=function(t,e){void 0===e&&(e=!1),this.ranges=t,this.inverted=e};$t.prototype.recover=function(t){var e=0,n=Bt(t);if(!this.inverted)for(var r=0;r<n;r++)e+=this.ranges[3*r+2]-this.ranges[3*r+1];return this.ranges[3*n]+e+function(t){return(t-(65535&t))/_t}(t)},$t.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},$t.prototype.map=function(t,e){return void 0===e&&(e=1),this._map(t,e,!0)},$t.prototype._map=function(t,e,n){for(var r=0,o=this.inverted?2:1,i=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var a=this.ranges[s]-(this.inverted?r:0);if(a>t)break;var c=this.ranges[s+o],p=this.ranges[s+i],h=a+c;if(t<=h){var l=a+r+((c?t==a?-1:t==h?1:e:e)<0?0:p);if(n)return l;var u=s/3+(t-a)*_t;return new Vt(l,e<0?t!=a:t!=h,u)}r+=p-c}return n?t+r:new Vt(t+r)},$t.prototype.touches=function(t,e){for(var n=0,r=Bt(e),o=this.inverted?2:1,i=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var a=this.ranges[s]-(this.inverted?n:0);if(a>t)break;var c=this.ranges[s+o];if(t<=a+c&&s==3*r)return!0;n+=this.ranges[s+i]-c}return!1},$t.prototype.forEach=function(t){for(var e=this.inverted?2:1,n=this.inverted?1:2,r=0,o=0;r<this.ranges.length;r+=3){var i=this.ranges[r],s=i-(this.inverted?o:0),a=i+(this.inverted?0:o),c=this.ranges[r+e],p=this.ranges[r+n];t(s,s+c,a,a+p),o+=p-c}},$t.prototype.invert=function(){return new $t(this.ranges,!this.inverted)},$t.prototype.toString=function(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)},$t.offset=function(t){return 0==t?$t.empty:new $t(t<0?[0,-t,0]:[0,0,t])},$t.empty=new $t([]);var Ft=function(t,e,n,r){this.maps=t||[],this.from=n||0,this.to=null==r?this.maps.length:r,this.mirror=e};function Lt(t){var e=Error.call(this,t);return e.__proto__=Lt.prototype,e}Ft.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.maps.length),new Ft(this.maps,this.mirror,t,e)},Ft.prototype.copy=function(){return new Ft(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)},Ft.prototype.appendMap=function(t,e){this.to=this.maps.push(t),null!=e&&this.setMirror(this.maps.length-1,e)},Ft.prototype.appendMapping=function(t){for(var e=0,n=this.maps.length;e<t.maps.length;e++){var r=t.getMirror(e);this.appendMap(t.maps[e],null!=r&&r<e?n+r:null)}},Ft.prototype.getMirror=function(t){if(this.mirror)for(var e=0;e<this.mirror.length;e++)if(this.mirror[e]==t)return this.mirror[e+(e%2?-1:1)]},Ft.prototype.setMirror=function(t,e){this.mirror||(this.mirror=[]),this.mirror.push(t,e)},Ft.prototype.appendMappingInverted=function(t){for(var e=t.maps.length-1,n=this.maps.length+t.maps.length;e>=0;e--){var r=t.getMirror(e);this.appendMap(t.maps[e].invert(),null!=r&&r>e?n-r-1:null)}},Ft.prototype.invert=function(){var t=new Ft;return t.appendMappingInverted(this),t},Ft.prototype.map=function(t,e){if(void 0===e&&(e=1),this.mirror)return this._map(t,e,!0);for(var n=this.from;n<this.to;n++)t=this.maps[n].map(t,e);return t},Ft.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},Ft.prototype._map=function(t,e,n){for(var r=!1,o=null,i=this.from;i<this.to;i++){var s=this.maps[i],a=o&&o[i];if(null!=a&&s.touches(t,a))t=s.recover(a);else{var c=s.mapResult(t,e);if(null!=c.recover){var p=this.getMirror(i);if(null!=p&&p>i&&p<this.to){if(c.deleted){i=p,t=this.maps[p].recover(c.recover);continue}(o||(o=Object.create(null)))[p]=c.recover}}c.deleted&&(r=!0),t=c.pos}}return n?t:new Vt(t,r)},Lt.prototype=Object.create(Error.prototype),Lt.prototype.constructor=Lt,Lt.prototype.name="TransformError";var jt=function(t){this.doc=t,this.steps=[],this.docs=[],this.mapping=new Ft},qt={before:{configurable:!0},docChanged:{configurable:!0}};function Jt(){throw new Error("Override me")}qt.before.get=function(){return this.docs.length?this.docs[0]:this.doc},jt.prototype.step=function(t){var e=this.maybeStep(t);if(e.failed)throw new Lt(e.failed);return this},jt.prototype.maybeStep=function(t){var e=t.apply(this.doc);return e.failed||this.addStep(t,e.doc),e},qt.docChanged.get=function(){return this.steps.length>0},jt.prototype.addStep=function(t,e){this.docs.push(this.doc),this.steps.push(t),this.mapping.appendMap(t.getMap()),this.doc=e},Object.defineProperties(jt.prototype,qt);var Ht=Object.create(null),Wt=function(){};Wt.prototype.apply=function(t){return Jt()},Wt.prototype.getMap=function(){return $t.empty},Wt.prototype.invert=function(t){return Jt()},Wt.prototype.map=function(t){return Jt()},Wt.prototype.merge=function(t){return null},Wt.prototype.toJSON=function(){return Jt()},Wt.fromJSON=function(t,e){if(!e||!e.stepType)throw new RangeError("Invalid input for Step.fromJSON");var n=Ht[e.stepType];if(!n)throw new RangeError("No step type "+e.stepType+" defined");return n.fromJSON(t,e)},Wt.jsonID=function(t,e){if(t in Ht)throw new RangeError("Duplicate use of step JSON ID "+t);return Ht[t]=e,e.prototype.jsonID=t,e};var Kt=function(t,e){this.doc=t,this.failed=e};Kt.ok=function(t){return new Kt(t,null)},Kt.fail=function(t){return new Kt(null,t)},Kt.fromReplace=function(t,e,n,r){try{return Kt.ok(t.replace(e,n,r))}catch(t){if(t instanceof z)return Kt.fail(t.message);throw t}};var Ut=function(t){function e(e,n,r,o){t.call(this),this.from=e,this.to=n,this.slice=r,this.structure=!!o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){return this.structure&&Qt(t,this.from,this.to)?Kt.fail("Structure replace would overwrite content"):Kt.fromReplace(t,this.from,this.to,this.slice)},e.prototype.getMap=function(){return new $t([this.from,this.to-this.from,this.slice.size])},e.prototype.invert=function(t){return new e(this.from,this.from+this.slice.size,t.slice(this.from,this.to))},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted?null:new e(n.pos,Math.max(n.pos,r.pos),this.slice)},e.prototype.merge=function(t){if(!(t instanceof e)||t.structure!=this.structure)return null;if(this.from+this.slice.size!=t.from||this.slice.openEnd||t.slice.openStart){if(t.to!=this.from||this.slice.openStart||t.slice.openEnd)return null;var n=this.slice.size+t.slice.size==0?R.empty:new R(t.slice.content.append(this.slice.content),t.slice.openStart,this.slice.openEnd);return new e(t.from,this.to,n,this.structure)}var r=this.slice.size+t.slice.size==0?R.empty:new R(this.slice.content.append(t.slice.content),this.slice.openStart,t.slice.openEnd);return new e(this.from,this.to+(t.to-t.from),r,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new e(n.from,n.to,R.fromJSON(t,n.slice),!!n.structure)},e}(Wt);Wt.jsonID("replace",Ut);var Gt=function(t){function e(e,n,r,o,i,s,a){t.call(this),this.from=e,this.to=n,this.gapFrom=r,this.gapTo=o,this.slice=i,this.insert=s,this.structure=!!a}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){if(this.structure&&(Qt(t,this.from,this.gapFrom)||Qt(t,this.gapTo,this.to)))return Kt.fail("Structure gap-replace would overwrite content");var e=t.slice(this.gapFrom,this.gapTo);if(e.openStart||e.openEnd)return Kt.fail("Gap is not a flat range");var n=this.slice.insertAt(this.insert,e.content);return n?Kt.fromReplace(t,this.from,this.to,n):Kt.fail("Content does not fit in gap")},e.prototype.getMap=function(){return new $t([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])},e.prototype.invert=function(t){var n=this.gapTo-this.gapFrom;return new e(this.from,this.from+this.slice.size+n,this.from+this.insert,this.from+this.insert+n,t.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1),o=t.map(this.gapFrom,-1),i=t.map(this.gapTo,1);return n.deleted&&r.deleted||o<n.pos||i>r.pos?null:new e(n.pos,r.pos,o,i,this.slice,this.insert,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to||"number"!=typeof n.gapFrom||"number"!=typeof n.gapTo||"number"!=typeof n.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new e(n.from,n.to,n.gapFrom,n.gapTo,R.fromJSON(t,n.slice),n.insert,!!n.structure)},e}(Wt);function Qt(t,e,n){for(var r=t.resolve(e),o=n-e,i=r.depth;o>0&&i>0&&r.indexAfter(i)==r.node(i).childCount;)i--,o--;if(o>0)for(var s=r.node(i).maybeChild(r.indexAfter(i));o>0;){if(!s||s.isLeaf)return!0;s=s.firstChild,o--}return!1}function Yt(t,e,n){return(0==e||t.canReplace(e,t.childCount))&&(n==t.childCount||t.canReplace(0,n))}function Xt(t){for(var e=t.parent.content.cutByIndex(t.startIndex,t.endIndex),n=t.depth;;--n){var r=t.$from.node(n),o=t.$from.index(n),i=t.$to.indexAfter(n);if(n<t.depth&&r.canReplace(o,i,e))return n;if(0==n||r.type.spec.isolating||!Yt(r,o,i))break}}function Zt(t,e,n,r){void 0===r&&(r=t);var o=function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.contentMatchAt(r).findWrapping(e);if(!i)return null;var s=i.length?i[0]:e;return n.canReplaceWith(r,o,s)?i:null}(t,e),i=o&&function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.child(r),s=e.contentMatch.findWrapping(i.type);if(!s)return null;for(var a=(s.length?s[s.length-1]:e).contentMatch,c=r;a&&c<o;c++)a=a.matchType(n.child(c).type);if(!a||!a.validEnd)return null;return s}(r,e);return i?o.map(te).concat({type:e,attrs:n}).concat(i.map(te)):null}function te(t){return{type:t,attrs:null}}function ee(t,e,n,r){void 0===n&&(n=1);var o=t.resolve(e),i=o.depth-n,s=r&&r[r.length-1]||o.parent;if(i<0||o.parent.type.spec.isolating||!o.parent.canReplace(o.index(),o.parent.childCount)||!s.type.validContent(o.parent.content.cutByIndex(o.index(),o.parent.childCount)))return!1;for(var a=o.depth-1,c=n-2;a>i;a--,c--){var p=o.node(a),h=o.index(a);if(p.type.spec.isolating)return!1;var l=p.content.cutByIndex(h,p.childCount),u=r&&r[c]||p;if(u!=p&&(l=l.replaceChild(0,u.type.create(u.attrs))),!p.canReplace(h+1,p.childCount)||!u.type.validContent(l))return!1}var f=o.indexAfter(i),d=r&&r[0];return o.node(i).canReplaceWith(f,f,d?d.type:o.node(i+1).type)}function ne(t,e){var n=t.resolve(e),r=n.index();return re(n.nodeBefore,n.nodeAfter)&&n.parent.canReplace(r,r+1)}function re(t,e){return t&&e&&!t.isLeaf&&t.canAppend(e)}function oe(t,e,n){for(var r=[],o=0;o<t.childCount;o++){var i=t.child(o);i.content.size&&(i=i.copy(oe(i.content,e,i))),i.isInline&&(i=e(i,n,o)),r.push(i)}return T.fromArray(r)}Wt.jsonID("replaceAround",Gt),jt.prototype.lift=function(t,e){for(var n=t.$from,r=t.$to,o=t.depth,i=n.before(o+1),s=r.after(o+1),a=i,c=s,p=T.empty,h=0,l=o,u=!1;l>e;l--)u||n.index(l)>0?(u=!0,p=T.from(n.node(l).copy(p)),h++):a--;for(var f=T.empty,d=0,m=o,v=!1;m>e;m--)v||r.after(m+1)<r.end(m)?(v=!0,f=T.from(r.node(m).copy(f)),d++):c++;return this.step(new Gt(a,c,i,s,new R(p.append(f),h,d),p.size-h,!0))},jt.prototype.wrap=function(t,e){for(var n=T.empty,r=e.length-1;r>=0;r--)n=T.from(e[r].type.create(e[r].attrs,n));var o=t.start,i=t.end;return this.step(new Gt(o,i,o,i,new R(n,0,0),e.length,!0))},jt.prototype.setBlockType=function(t,e,n,r){var o=this;if(void 0===e&&(e=t),!n.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");var i=this.steps.length;return this.doc.nodesBetween(t,e,(function(t,e){if(t.isTextblock&&!t.hasMarkup(n,r)&&function(t,e,n){var r=t.resolve(e),o=r.index();return r.parent.canReplaceWith(o,o+1,n)}(o.doc,o.mapping.slice(i).map(e),n)){o.clearIncompatible(o.mapping.slice(i).map(e,1),n);var s=o.mapping.slice(i),a=s.map(e,1),c=s.map(e+t.nodeSize,1);return o.step(new Gt(a,c,a+1,c-1,new R(T.from(n.create(r,null,t.marks)),0,0),1,!0)),!1}})),this},jt.prototype.setNodeMarkup=function(t,e,n,r){var o=this.doc.nodeAt(t);if(!o)throw new RangeError("No node at given position");e||(e=o.type);var i=e.create(n,null,r||o.marks);if(o.isLeaf)return this.replaceWith(t,t+o.nodeSize,i);if(!e.validContent(o.content))throw new RangeError("Invalid content for node type "+e.name);return this.step(new Gt(t,t+o.nodeSize,t+1,t+o.nodeSize-1,new R(T.from(i),0,0),1,!0))},jt.prototype.split=function(t,e,n){void 0===e&&(e=1);for(var r=this.doc.resolve(t),o=T.empty,i=T.empty,s=r.depth,a=r.depth-e,c=e-1;s>a;s--,c--){o=T.from(r.node(s).copy(o));var p=n&&n[c];i=T.from(p?p.type.create(p.attrs,i):r.node(s).copy(i))}return this.step(new Ut(t,t,new R(o.append(i),e,e),!0))},jt.prototype.join=function(t,e){void 0===e&&(e=1);var n=new Ut(t-e,t+e,R.empty,!0);return this.step(n)};var ie=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),r=t.resolve(this.from),o=r.node(r.sharedDepth(this.to)),i=new R(oe(n.content,(function(t,n){return n.type.allowsMarkType(e.mark.type)?t.mark(e.mark.addToSet(t.marks)):t}),o),n.openStart,n.openEnd);return Kt.fromReplace(t,this.from,this.to,i)},e.prototype.invert=function(){return new se(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(Wt);Wt.jsonID("addMark",ie);var se=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),r=new R(oe(n.content,(function(t){return t.mark(e.mark.removeFromSet(t.marks))})),n.openStart,n.openEnd);return Kt.fromReplace(t,this.from,this.to,r)},e.prototype.invert=function(){return new ie(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(Wt);function ae(t,e,n,r){if(void 0===n&&(n=e),void 0===r&&(r=R.empty),e==n&&!r.size)return null;var o=t.resolve(e),i=t.resolve(n);if(he(o,i,r))return new Ut(e,n,r);var s=function(t,e){var n=function t(e,n,r,o){var i=T.empty,s=0,a=r[n];if(e.depth>n){var c=t(e,n+1,r,o||a);s=c.openEnd+1,i=T.from(e.node(n+1).copy(c.content))}a&&(i=i.append(a.content),s=a.openEnd);o&&(i=i.append(e.node(n).contentMatchAt(e.indexAfter(n)).fillBefore(T.empty,!0)),s=0);return{content:i,openEnd:s}}(t,0,e,!1),r=n.content,o=n.openEnd;return new R(r,t.depth,o||0)}(o,function(t,e){for(var n=new le(t),r=1;e.size&&r<=3;r++){var o=n.placeSlice(e.content,e.openStart,e.openEnd,r);3==r&&o!=e&&o.size&&(r=0),e=o}for(;n.open.length;)n.closeNode();return n.placed}(o,r)),a=pe(o,i,s);if(!a)return null;if(s.size!=a.size&&function(t,e,n){if(!e.parent.isTextblock)return!1;var r,o=n.openEnd?function(t,e){for(var n=1;n<e;n++)t=t.lastChild.content;return t.lastChild}(n.content,n.openEnd):t.node(t.depth-(n.openStart-n.openEnd));if(!o.isTextblock)return!1;for(var i=e.index();i<e.parent.childCount;i++)if(!o.type.allowsMarks(e.parent.child(i).marks))return!1;n.openEnd?r=o.contentMatchAt(o.childCount):(r=o.contentMatchAt(o.childCount),n.size&&(r=r.matchFragment(n.content,n.openStart?1:0)));return(r=r.matchFragment(e.parent.content,e.index()))&&r.validEnd}(o,i,s)){for(var c=i.depth,p=i.after(c);c>1&&p==i.end(--c);)++p;var h=pe(o,t.resolve(p),s);if(h)return new Gt(e,p,n,i.end(),h,s.size)}return a.size||e!=n?new Ut(e,n,a):null}function ce(t,e,n,r,o,i,s){var a,c=t.childCount,p=c-(s>0?1:0),h=i<0?e:n.node(o);a=i<0?h.contentMatchAt(p):1==c&&s>0?h.contentMatchAt(i?n.index(o):n.indexAfter(o)):h.contentMatchAt(n.indexAfter(o)).matchFragment(t,c>0&&i?1:0,p);var l=r.node(o);if(s>0&&o<r.depth){var u=l.content.cutByIndex(r.indexAfter(o)).addToStart(t.lastChild),f=a.fillBefore(u,!0);if(f&&f.size&&i>0&&1==c&&(f=null),f){var d=ce(t.lastChild.content,t.lastChild,n,r,o+1,1==c?i-1:-1,s-1);if(d){var m=t.lastChild.copy(d);return f.size?t.cutByIndex(0,c-1).append(f).addToEnd(m):t.replaceChild(c-1,m)}}}s>0&&(a=a.matchType((1==c&&i>0?n.node(o+1):t.lastChild).type));var v=r.index(o);if(v==l.childCount&&!l.type.compatibleContent(e.type))return null;for(var g=a.fillBefore(l.content,!0,v),y=v;g&&y<l.content.childCount;y++)h.type.allowsMarks(l.content.child(y).marks)||(g=null);if(!g)return null;if(s>0){var w=function t(e,n,r,o,i){var s,a=e.content,c=a.childCount;s=i>=0?r.node(o).contentMatchAt(r.indexAfter(o)).matchFragment(a,i>0?1:0,c):e.contentMatchAt(c);if(n>0){var p=t(a.lastChild,n-1,r,o+1,1==c?i-1:-1);a=a.replaceChild(c-1,p)}return e.copy(a.append(s.fillBefore(T.empty,!0)))}(t.lastChild,s-1,n,o+1,1==c?i-1:-1);t=t.replaceChild(c-1,w)}return t=t.append(g),r.depth>o&&(t=t.addToEnd(function t(e,n){var r=e.node(n),o=r.contentMatchAt(0).fillBefore(r.content,!0,e.index(n));e.depth>n&&(o=o.addToEnd(t(e,n+1)));return r.copy(o)}(r,o+1))),t}function pe(t,e,n){var r=ce(n.content,t.node(0),t,e,0,n.openStart,n.openEnd);return r?function(t,e,n){for(;e>0&&n>0&&1==t.childCount;)t=t.firstChild.content,e--,n--;return new R(t,e,n)}(r,n.openStart,e.depth):null}function he(t,e,n){return!n.openStart&&!n.openEnd&&t.start()==e.start()&&t.parent.canReplace(t.index(),e.index(),n.content)}Wt.jsonID("removeMark",se),jt.prototype.addMark=function(t,e,n){var r=this,o=[],i=[],s=null,a=null;return this.doc.nodesBetween(t,e,(function(r,c,p){if(r.isInline){var h=r.marks;if(!n.isInSet(h)&&p.type.allowsMarkType(n.type)){for(var l=Math.max(c,t),u=Math.min(c+r.nodeSize,e),f=n.addToSet(h),d=0;d<h.length;d++)h[d].isInSet(f)||(s&&s.to==l&&s.mark.eq(h[d])?s.to=u:o.push(s=new se(l,u,h[d])));a&&a.to==l?a.to=u:i.push(a=new ie(l,u,n))}}})),o.forEach((function(t){return r.step(t)})),i.forEach((function(t){return r.step(t)})),this},jt.prototype.removeMark=function(t,e,n){var r=this;void 0===n&&(n=null);var o=[],i=0;return this.doc.nodesBetween(t,e,(function(r,s){if(r.isInline){i++;var a=null;if(n instanceof wt){var c=n.isInSet(r.marks);c&&(a=[c])}else n?n.isInSet(r.marks)&&(a=[n]):a=r.marks;if(a&&a.length)for(var p=Math.min(s+r.nodeSize,e),h=0;h<a.length;h++){for(var l=a[h],u=void 0,f=0;f<o.length;f++){var d=o[f];d.step==i-1&&l.eq(o[f].style)&&(u=d)}u?(u.to=p,u.step=i):o.push({style:l,from:Math.max(s,t),to:p,step:i})}}})),o.forEach((function(t){return r.step(new se(t.from,t.to,t.style))})),this},jt.prototype.clearIncompatible=function(t,e,n){void 0===n&&(n=e.contentMatch);for(var r=this.doc.nodeAt(t),o=[],i=t+1,s=0;s<r.childCount;s++){var a=r.child(s),c=i+a.nodeSize,p=n.matchType(a.type,a.attrs);if(p){n=p;for(var h=0;h<a.marks.length;h++)e.allowsMarkType(a.marks[h].type)||this.step(new se(i,c,a.marks[h]))}else o.push(new Ut(i,c,R.empty));i=c}if(!n.validEnd){var l=n.fillBefore(T.empty,!0);this.replace(i,i,new R(l,0,0))}for(var u=o.length-1;u>=0;u--)this.step(o[u]);return this},jt.prototype.replace=function(t,e,n){void 0===e&&(e=t),void 0===n&&(n=R.empty);var r=ae(this.doc,t,e,n);return r&&this.step(r),this},jt.prototype.replaceWith=function(t,e,n){return this.replace(t,e,new R(T.from(n),0,0))},jt.prototype.delete=function(t,e){return this.replace(t,e,R.empty)},jt.prototype.insert=function(t,e){return this.replaceWith(t,t,e)};var le=function(t){this.open=[];for(var e=0;e<=t.depth;e++){var n=t.node(e),r=n.contentMatchAt(t.indexAfter(e));this.open.push({parent:n,match:r,content:T.empty,wrapper:!1,openEnd:0,depth:e})}this.placed=[]};function ue(t,e,n){var r=t.content;if(e>1){var o=ue(t.firstChild,e-1,1==t.childCount?n-1:0);r=t.content.replaceChild(0,o)}var i=t.type.contentMatch.fillBefore(r,0==n);return t.copy(i.append(r))}function fe(t,e,n,r,o){if(e<n){var i=t.firstChild;t=t.replaceChild(0,i.copy(fe(i.content,e+1,n,r,i)))}if(e>r){var s=o.contentMatchAt(0),a=s.fillBefore(t).append(t);t=a.append(s.matchFragment(a).fillBefore(T.empty,!0))}return t}function de(t,e){for(var n=[],r=Math.min(t.depth,e.depth);r>=0;r--){var o=t.start(r);if(o<t.pos-(t.depth-r)||e.end(r)>e.pos+(e.depth-r)||t.node(r).type.spec.isolating||e.node(r).type.spec.isolating)break;o==e.start(r)&&n.push(r)}return n}le.prototype.placeSlice=function(t,e,n,r,o){if(e>0){var i=t.firstChild,s=this.placeSlice(i.content,Math.max(0,e-1),n&&1==t.childCount?n-1:0,r,i);s.content!=i.content&&(s.content.size?(t=t.replaceChild(0,i.copy(s.content)),e=s.openStart+1):(1==t.childCount&&(n=0),t=t.cutByIndex(1),e=0))}var a=this.placeContent(t,e,n,r,o);if(r>2&&a.size&&0==e){var c=a.content.firstChild,p=1==a.content.childCount;this.placeContent(c.content,0,n&&p?n-1:0,r,c),a=p?T.empty:new R(a.content.cutByIndex(1),0,n)}return a},le.prototype.placeContent=function(t,e,n,r,o){for(var i=0;i<t.childCount;i++){for(var s=t.child(i),a=!1,c=i==t.childCount-1,p=this.open.length-1;p>=0;p--){var h=this.open[p],l=void 0;if(r>1&&(l=h.match.findWrapping(s.type))&&(!o||!l.length||l[l.length-1]!=o.type)){for(;this.open.length-1>p;)this.closeNode();for(var u=0;u<l.length;u++)h.match=h.match.matchType(l[u]),p++,h={parent:l[u].create(),match:l[u].contentMatch,content:T.empty,wrapper:!0,openEnd:0,depth:p+u},this.open.push(h)}var f=h.match.matchType(s.type);if(!f){var d=h.match.fillBefore(T.from(s));if(!d){if(o&&h.match.matchType(o.type))break;continue}for(var m=0;m<d.childCount;m++){var v=d.child(m);this.addNode(h,v,0),f=h.match.matchFragment(v)}}for(;this.open.length-1>p;)this.closeNode();s=s.mark(h.parent.type.allowedMarks(s.marks)),e&&(s=ue(s,e,c?n:0),e=0),this.addNode(h,s,c?n:0),h.match=f,c&&(n=0),a=!0;break}if(!a)break}return this.open.length>1&&(i>0&&i==t.childCount||o&&this.open[this.open.length-1].parent.type==o.type)&&this.closeNode(),new R(t.cutByIndex(i),e,n)},le.prototype.addNode=function(t,e,n){var r,o;t.content=(r=t.content,o=t.openEnd,o?r.replaceChild(r.childCount-1,function t(e,n){var r=e.content;if(n>1){var o=t(e.lastChild,n-1);r=e.content.replaceChild(e.childCount-1,o)}var i=e.contentMatchAt(e.childCount).fillBefore(T.empty,!0);return e.copy(r.append(i))}(r.lastChild,o)):r).addToEnd(e),t.openEnd=n},le.prototype.closeNode=function(){var t=this.open.pop();0==t.content.size||(t.wrapper?this.addNode(this.open[this.open.length-1],t.parent.copy(t.content),t.openEnd+1):this.placed[t.depth]={depth:t.depth,content:t.content,openEnd:t.openEnd})},jt.prototype.replaceRange=function(t,e,n){if(!n.size)return this.deleteRange(t,e);var r=this.doc.resolve(t),o=this.doc.resolve(e);if(he(r,o,n))return this.step(new Ut(t,e,n));var i=de(r,this.doc.resolve(e));0==i[i.length-1]&&i.pop();var s=-(r.depth+1);i.unshift(s);for(var a=r.depth,c=r.pos-1;a>0;a--,c--){var p=r.node(a).type.spec;if(p.defining||p.isolating)break;i.indexOf(a)>-1?s=a:r.before(a)==c&&i.splice(1,0,-a)}for(var h=i.indexOf(s),l=[],u=n.openStart,f=n.content,d=0;;d++){var m=f.firstChild;if(l.push(m),d==n.openStart)break;f=m.content}u>0&&l[u-1].type.spec.defining&&r.node(h).type!=l[u-1].type?u-=1:u>=2&&l[u-1].isTextblock&&l[u-2].type.spec.defining&&r.node(h).type!=l[u-2].type&&(u-=2);for(var v=n.openStart;v>=0;v--){var g=(v+u+1)%(n.openStart+1),y=l[g];if(y)for(var w=0;w<i.length;w++){var b=i[(w+h)%i.length],k=!0;b<0&&(k=!1,b=-b);var x=r.node(b-1),S=r.index(b-1);if(x.canReplaceWith(S,S,y.type,y.marks))return this.replace(r.before(b),k?o.after(b):e,new R(fe(n.content,0,n.openStart,g),g,n.openEnd))}}for(var M=this.steps.length,O=i.length-1;O>=0&&(this.replace(t,e,n),!(this.steps.length>M));O--){var C=i[O];O<0||(t=r.before(C),e=o.after(C))}return this},jt.prototype.replaceRangeWith=function(t,e,n){if(!n.isInline&&t==e&&this.doc.resolve(t).parent.content.size){var r=function(t,e,n){var r=t.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),n))return e;if(0==r.parentOffset)for(var o=r.depth-1;o>=0;o--){var i=r.index(o);if(r.node(o).canReplaceWith(i,i,n))return r.before(o+1);if(i>0)return null}if(r.parentOffset==r.parent.content.size)for(var s=r.depth-1;s>=0;s--){var a=r.indexAfter(s);if(r.node(s).canReplaceWith(a,a,n))return r.after(s+1);if(a<r.node(s).childCount)return null}}(this.doc,t,n.type);null!=r&&(t=e=r)}return this.replaceRange(t,e,new R(T.from(n),0,0))},jt.prototype.deleteRange=function(t,e){for(var n=this.doc.resolve(t),r=this.doc.resolve(e),o=de(n,r),i=0;i<o.length;i++){var s=o[i],a=i==o.length-1;if(a&&0==s||n.node(s).type.contentMatch.validEnd)return this.delete(n.start(s),r.end(s));if(s>0&&(a||n.node(s-1).canReplace(n.index(s-1),r.indexAfter(s-1))))return this.delete(n.before(s),r.after(s))}for(var c=1;c<=n.depth&&c<=r.depth;c++)if(t-n.start(c)==n.depth-c&&e>n.end(c)&&r.end(c)-e!=r.depth-c)return this.delete(n.before(c),e);return this.delete(t,e)};var me=Object.create(null),ve=function(t,e,n){this.ranges=n||[new ye(t.min(e),t.max(e))],this.$anchor=t,this.$head=e},ge={anchor:{configurable:!0},head:{configurable:!0},from:{configurable:!0},to:{configurable:!0},$from:{configurable:!0},$to:{configurable:!0},empty:{configurable:!0}};ge.anchor.get=function(){return this.$anchor.pos},ge.head.get=function(){return this.$head.pos},ge.from.get=function(){return this.$from.pos},ge.to.get=function(){return this.$to.pos},ge.$from.get=function(){return this.ranges[0].$from},ge.$to.get=function(){return this.ranges[0].$to},ge.empty.get=function(){for(var t=this.ranges,e=0;e<t.length;e++)if(t[e].$from.pos!=t[e].$to.pos)return!1;return!0},ve.prototype.content=function(){return this.$from.node(0).slice(this.from,this.to,!0)},ve.prototype.replace=function(t,e){void 0===e&&(e=R.empty);for(var n=e.content.lastChild,r=null,o=0;o<e.openEnd;o++)r=n,n=n.lastChild;for(var i=t.steps.length,s=this.ranges,a=0;a<s.length;a++){var c=s[a],p=c.$from,h=c.$to,l=t.mapping.slice(i);t.replaceRange(l.map(p.pos),l.map(h.pos),a?R.empty:e),0==a&&Ce(t,i,(n?n.isInline:r&&r.isTextblock)?-1:1)}},ve.prototype.replaceWith=function(t,e){for(var n=t.steps.length,r=this.ranges,o=0;o<r.length;o++){var i=r[o],s=i.$from,a=i.$to,c=t.mapping.slice(n),p=c.map(s.pos),h=c.map(a.pos);o?t.deleteRange(p,h):(t.replaceRangeWith(p,h,e),Ce(t,n,e.isInline?-1:1))}},ve.findFrom=function(t,e,n){var r=t.parent.inlineContent?new we(t):Oe(t.node(0),t.parent,t.pos,t.index(),e,n);if(r)return r;for(var o=t.depth-1;o>=0;o--){var i=e<0?Oe(t.node(0),t.node(o),t.before(o+1),t.index(o),e,n):Oe(t.node(0),t.node(o),t.after(o+1),t.index(o)+1,e,n);if(i)return i}},ve.near=function(t,e){return void 0===e&&(e=1),this.findFrom(t,e)||this.findFrom(t,-e)||new Se(t.node(0))},ve.atStart=function(t){return Oe(t,t,0,0,1)||new Se(t)},ve.atEnd=function(t){return Oe(t,t,t.content.size,t.childCount,-1)||new Se(t)},ve.fromJSON=function(t,e){if(!e||!e.type)throw new RangeError("Invalid input for Selection.fromJSON");var n=me[e.type];if(!n)throw new RangeError("No selection type "+e.type+" defined");return n.fromJSON(t,e)},ve.jsonID=function(t,e){if(t in me)throw new RangeError("Duplicate use of selection JSON ID "+t);return me[t]=e,e.prototype.jsonID=t,e},ve.prototype.getBookmark=function(){return we.between(this.$anchor,this.$head).getBookmark()},Object.defineProperties(ve.prototype,ge),ve.prototype.visible=!0;var ye=function(t,e){this.$from=t,this.$to=e},we=function(t){function e(e,n){void 0===n&&(n=e),t.call(this,e,n)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={$cursor:{configurable:!0}};return n.$cursor.get=function(){return this.$anchor.pos==this.$head.pos?this.$head:null},e.prototype.map=function(n,r){var o=n.resolve(r.map(this.head));if(!o.parent.inlineContent)return t.near(o);var i=n.resolve(r.map(this.anchor));return new e(i.parent.inlineContent?i:o,o)},e.prototype.replace=function(e,n){if(void 0===n&&(n=R.empty),t.prototype.replace.call(this,e,n),n==R.empty){var r=this.$from.marksAcross(this.$to);r&&e.ensureMarks(r)}},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor&&t.head==this.head},e.prototype.getBookmark=function(){return new be(this.anchor,this.head)},e.prototype.toJSON=function(){return{type:"text",anchor:this.anchor,head:this.head}},e.fromJSON=function(t,n){if("number"!=typeof n.anchor||"number"!=typeof n.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new e(t.resolve(n.anchor),t.resolve(n.head))},e.create=function(t,e,n){void 0===n&&(n=e);var r=t.resolve(e);return new this(r,n==e?r:t.resolve(n))},e.between=function(n,r,o){var i=n.pos-r.pos;if(o&&!i||(o=i>=0?1:-1),!r.parent.inlineContent){var s=t.findFrom(r,o,!0)||t.findFrom(r,-o,!0);if(!s)return t.near(r,o);r=s.$head}return n.parent.inlineContent||(0==i?n=r:(n=(t.findFrom(n,-o,!0)||t.findFrom(n,o,!0)).$anchor).pos<r.pos!=i<0&&(n=r)),new e(n,r)},Object.defineProperties(e.prototype,n),e}(ve);ve.jsonID("text",we);var be=function(t,e){this.anchor=t,this.head=e};be.prototype.map=function(t){return new be(t.map(this.anchor),t.map(this.head))},be.prototype.resolve=function(t){return we.between(t.resolve(this.anchor),t.resolve(this.head))};var ke=function(t){function e(e){var n=e.nodeAfter,r=e.node(0).resolve(e.pos+n.nodeSize);t.call(this,e,r),this.node=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(n,r){var o=r.mapResult(this.anchor),i=o.deleted,s=o.pos,a=n.resolve(s);return i?t.near(a):new e(a)},e.prototype.content=function(){return new R(T.from(this.node),0,0)},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor},e.prototype.toJSON=function(){return{type:"node",anchor:this.anchor}},e.prototype.getBookmark=function(){return new xe(this.anchor)},e.fromJSON=function(t,n){if("number"!=typeof n.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new e(t.resolve(n.anchor))},e.create=function(t,e){return new this(t.resolve(e))},e.isSelectable=function(t){return!t.isText&&!1!==t.type.spec.selectable},e}(ve);ke.prototype.visible=!1,ve.jsonID("node",ke);var xe=function(t){this.anchor=t};xe.prototype.map=function(t){var e=t.mapResult(this.anchor),n=e.deleted,r=e.pos;return n?new be(r,r):new xe(r)},xe.prototype.resolve=function(t){var e=t.resolve(this.anchor),n=e.nodeAfter;return n&&ke.isSelectable(n)?new ke(e):ve.near(e)};var Se=function(t){function e(e){t.call(this,e.resolve(0),e.resolve(e.content.size))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.toJSON=function(){return{type:"all"}},e.fromJSON=function(t){return new e(t)},e.prototype.map=function(t){return new e(t)},e.prototype.eq=function(t){return t instanceof e},e.prototype.getBookmark=function(){return Me},e}(ve);ve.jsonID("all",Se);var Me={map:function(){return this},resolve:function(t){return new Se(t)}};function Oe(t,e,n,r,o,i){if(e.inlineContent)return we.create(t,n);for(var s=r-(o>0?0:1);o>0?s<e.childCount:s>=0;s+=o){var a=e.child(s);if(a.isAtom){if(!i&&ke.isSelectable(a))return ke.create(t,n-(o<0?a.nodeSize:0))}else{var c=Oe(t,a,n+o,o<0?a.childCount:0,o,i);if(c)return c}n+=a.nodeSize*o}}function Ce(t,e,n){var r=t.steps.length-1;if(!(r<e)){var o,i=t.steps[r];if(i instanceof Ut||i instanceof Gt)t.mapping.maps[r].forEach((function(t,e,n,r){null==o&&(o=r)})),t.setSelection(ve.near(t.doc.resolve(o),n))}}var Te=function(t){function e(e){t.call(this,e.doc),this.time=Date.now(),this.curSelection=e.selection,this.curSelectionFor=0,this.storedMarks=e.storedMarks,this.updated=0,this.meta=Object.create(null)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={selection:{configurable:!0},selectionSet:{configurable:!0},storedMarksSet:{configurable:!0},isGeneric:{configurable:!0},scrolledIntoView:{configurable:!0}};return n.selection.get=function(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection},e.prototype.setSelection=function(t){if(t.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=t,this.curSelectionFor=this.steps.length,this.updated=-3&(1|this.updated),this.storedMarks=null,this},n.selectionSet.get=function(){return(1&this.updated)>0},e.prototype.setStoredMarks=function(t){return this.storedMarks=t,this.updated|=2,this},e.prototype.ensureMarks=function(t){return I.sameSet(this.storedMarks||this.selection.$from.marks(),t)||this.setStoredMarks(t),this},e.prototype.addStoredMark=function(t){return this.ensureMarks(t.addToSet(this.storedMarks||this.selection.$head.marks()))},e.prototype.removeStoredMark=function(t){return this.ensureMarks(t.removeFromSet(this.storedMarks||this.selection.$head.marks()))},n.storedMarksSet.get=function(){return(2&this.updated)>0},e.prototype.addStep=function(e,n){t.prototype.addStep.call(this,e,n),this.updated=-3&this.updated,this.storedMarks=null},e.prototype.setTime=function(t){return this.time=t,this},e.prototype.replaceSelection=function(t){return this.selection.replace(this,t),this},e.prototype.replaceSelectionWith=function(t,e){var n=this.selection;return!1!==e&&(t=t.mark(this.storedMarks||(n.empty?n.$from.marks():n.$from.marksAcross(n.$to)||I.none))),n.replaceWith(this,t),this},e.prototype.deleteSelection=function(){return this.selection.replace(this),this},e.prototype.insertText=function(t,e,n){void 0===n&&(n=e);var r=this.doc.type.schema;if(null==e)return t?this.replaceSelectionWith(r.text(t),!0):this.deleteSelection();if(!t)return this.deleteRange(e,n);var o=this.storedMarks;if(!o){var i=this.doc.resolve(e);o=n==e?i.marks():i.marksAcross(this.doc.resolve(n))}return this.replaceRangeWith(e,n,r.text(t,o)),this.selection.empty||this.setSelection(ve.near(this.selection.$to)),this},e.prototype.setMeta=function(t,e){return this.meta["string"==typeof t?t:t.key]=e,this},e.prototype.getMeta=function(t){return this.meta["string"==typeof t?t:t.key]},n.isGeneric.get=function(){for(var t in this.meta)return!1;return!0},e.prototype.scrollIntoView=function(){return this.updated|=4,this},n.scrolledIntoView.get=function(){return(4&this.updated)>0},Object.defineProperties(e.prototype,n),e}(jt);function De(t,e){return e&&t?t.bind(e):t}var Ne=function(t,e,n){this.name=t,this.init=De(e.init,n),this.apply=De(e.apply,n)},Ee=[new Ne("doc",{init:function(t){return t.doc||t.schema.topNodeType.createAndFill()},apply:function(t){return t.doc}}),new Ne("selection",{init:function(t,e){return t.selection||ve.atStart(e.doc)},apply:function(t){return t.selection}}),new Ne("storedMarks",{init:function(t){return t.storedMarks||null},apply:function(t,e,n,r){return r.selection.$cursor?t.storedMarks:null}}),new Ne("scrollToSelection",{init:function(){return 0},apply:function(t,e){return t.scrolledIntoView?e+1:e}})],Ae=function(t,e){var n=this;this.schema=t,this.fields=Ee.concat(),this.plugins=[],this.pluginsByKey=Object.create(null),e&&e.forEach((function(t){if(n.pluginsByKey[t.key])throw new RangeError("Adding different instances of a keyed plugin ("+t.key+")");n.plugins.push(t),n.pluginsByKey[t.key]=t,t.spec.state&&n.fields.push(new Ne(t.key,t.spec.state,t))}))},Ie=function(t){this.config=t},ze={schema:{configurable:!0},plugins:{configurable:!0},tr:{configurable:!0}};ze.schema.get=function(){return this.config.schema},ze.plugins.get=function(){return this.config.plugins},Ie.prototype.apply=function(t){return this.applyTransaction(t).state},Ie.prototype.filterTransaction=function(t,e){void 0===e&&(e=-1);for(var n=0;n<this.config.plugins.length;n++)if(n!=e){var r=this.config.plugins[n];if(r.spec.filterTransaction&&!r.spec.filterTransaction.call(r,t,this))return!1}return!0},Ie.prototype.applyTransaction=function(t){if(!this.filterTransaction(t))return{state:this,transactions:[]};for(var e=[t],n=this.applyInner(t),r=null;;){for(var o=!1,i=0;i<this.config.plugins.length;i++){var s=this.config.plugins[i];if(s.spec.appendTransaction){var a=r?r[i].n:0,c=r?r[i].state:this,p=a<e.length&&s.spec.appendTransaction.call(s,a?e.slice(a):e,c,n);if(p&&n.filterTransaction(p,i)){if(p.setMeta("appendedTransaction",t),!r){r=[];for(var h=0;h<this.config.plugins.length;h++)r.push(h<i?{state:n,n:e.length}:{state:this,n:0})}e.push(p),n=n.applyInner(p),o=!0}r&&(r[i]={state:n,n:e.length})}}if(!o)return{state:n,transactions:e}}},Ie.prototype.applyInner=function(t){if(!t.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");for(var e=new Ie(this.config),n=this.config.fields,r=0;r<n.length;r++){var o=n[r];e[o.name]=o.apply(t,this[o.name],this,e)}for(var i=0;i<Re.length;i++)Re[i](this,t,e);return e},ze.tr.get=function(){return new Te(this)},Ie.create=function(t){for(var e=new Ae(t.schema||t.doc.type.schema,t.plugins),n=new Ie(e),r=0;r<e.fields.length;r++)n[e.fields[r].name]=e.fields[r].init(t,n);return n},Ie.prototype.reconfigure=function(t){for(var e=new Ae(t.schema||this.schema,t.plugins),n=e.fields,r=new Ie(e),o=0;o<n.length;o++){var i=n[o].name;r[i]=this.hasOwnProperty(i)?this[i]:n[o].init(t,r)}return r},Ie.prototype.toJSON=function(t){var e={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(e.storedMarks=this.storedMarks.map((function(t){return t.toJSON()}))),t&&"object"==typeof t)for(var n in t){if("doc"==n||"selection"==n)throw new RangeError("The JSON fields `doc` and `selection` are reserved");var r=t[n],o=r.spec.state;o&&o.toJSON&&(e[n]=o.toJSON.call(r,this[r.key]))}return e},Ie.fromJSON=function(t,e,n){if(!e)throw new RangeError("Invalid input for EditorState.fromJSON");if(!t.schema)throw new RangeError("Required config field 'schema' missing");var r=new Ae(t.schema,t.plugins),o=new Ie(r);return r.fields.forEach((function(r){if("doc"==r.name)o.doc=Y.fromJSON(t.schema,e.doc);else if("selection"==r.name)o.selection=ve.fromJSON(o.doc,e.selection);else if("storedMarks"==r.name)e.storedMarks&&(o.storedMarks=e.storedMarks.map(t.schema.markFromJSON));else{if(n)for(var i in n){var s=n[i],a=s.spec.state;if(s.key==r.name&&a&&a.fromJSON&&Object.prototype.hasOwnProperty.call(e,i))return void(o[r.name]=a.fromJSON.call(s,t,e[i],o))}o[r.name]=r.init(t,o)}})),o},Ie.addApplyListener=function(t){Re.push(t)},Ie.removeApplyListener=function(t){var e=Re.indexOf(t);e>-1&&Re.splice(e,1)},Object.defineProperties(Ie.prototype,ze);var Re=[];var Pe=function(t){this.props={},t.props&&function t(e,n,r){for(var o in e){var i=e[o];i instanceof Function?i=i.bind(n):"handleDOMEvents"==o&&(i=t(i,n,{})),r[o]=i}return r}(t.props,this,this.props),this.spec=t,this.key=t.key?t.key.key:Be("plugin")};Pe.prototype.getState=function(t){return t[this.key]};var _e=Object.create(null);function Be(t){return t in _e?t+"$"+ ++_e[t]:(_e[t]=0,t+"$")}var Ve=function(t){void 0===t&&(t="key"),this.key=Be(t)};Ve.prototype.get=function(t){return t.config.pluginsByKey[this.key]},Ve.prototype.getState=function(t){return t[this.key]};var $e={};if("undefined"!=typeof navigator&&"undefined"!=typeof document){var Fe=/Edge\/(\d+)/.exec(navigator.userAgent),Le=/MSIE \d/.test(navigator.userAgent),je=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);$e.mac=/Mac/.test(navigator.platform);var qe=$e.ie=!!(Le||je||Fe);$e.ie_version=Le?document.documentMode||6:je?+je[1]:Fe?+Fe[1]:null,$e.gecko=!qe&&/gecko\/(\d+)/i.test(navigator.userAgent),$e.gecko_version=$e.gecko&&+(/Firefox\/(\d+)/.exec(navigator.userAgent)||[0,0])[1];var Je=!qe&&/Chrome\/(\d+)/.exec(navigator.userAgent);$e.chrome=!!Je,$e.chrome_version=Je&&+Je[1],$e.ios=!qe&&/AppleWebKit/.test(navigator.userAgent)&&/Mobile\/\w+/.test(navigator.userAgent),$e.android=/Android \d/.test(navigator.userAgent),$e.webkit=!qe&&"WebkitAppearance"in document.documentElement.style,$e.safari=/Apple Computer/.test(navigator.vendor),$e.webkit_version=$e.webkit&&+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]}var He=function(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e},We=function(t){var e=t.parentNode;return e&&11==e.nodeType?e.host:e},Ke=function(t,e,n){var r=document.createRange();return r.setEnd(t,null==n?t.nodeValue.length:n),r.setStart(t,e||0),r},Ue=function(t,e,n,r){return n&&(Qe(t,e,n,r,-1)||Qe(t,e,n,r,1))},Ge=/^(img|br|input|textarea|hr)$/i;function Qe(t,e,n,r,o){for(;;){if(t==n&&e==r)return!0;if(e==(o<0?0:Ye(t))){var i=t.parentNode;if(1!=i.nodeType||Xe(t)||Ge.test(t.nodeName)||"false"==t.contentEditable)return!1;e=He(t)+(o<0?0:1),t=i}else{if(1!=t.nodeType)return!1;if("false"==(t=t.childNodes[e+(o<0?-1:0)]).contentEditable)return!1;e=o<0?Ye(t):0}}}function Ye(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Xe(t){for(var e,n=t;n&&!(e=n.pmViewDesc);n=n.parentNode);return e&&e.node&&e.node.isBlock&&(e.dom==t||e.contentDOM==t)}var Ze=function(t){var e=t.isCollapsed;return e&&$e.chrome&&t.rangeCount&&!t.getRangeAt(0).collapsed&&(e=!1),e};function tn(t,e){var n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=t,n.key=n.code=e,n}function en(t){return{left:0,right:t.innerWidth,top:0,bottom:t.innerHeight}}function nn(t,e){return"number"==typeof t?t:t[e]}function rn(t,e,n){for(var r=t.someProp("scrollThreshold")||0,o=t.someProp("scrollMargin")||5,i=t.dom.ownerDocument,s=i.defaultView,a=n||t.dom;a;a=We(a))if(1==a.nodeType){var c=a==i.body||1!=a.nodeType,p=c?en(s):a.getBoundingClientRect(),h=0,l=0;if(e.top<p.top+nn(r,"top")?l=-(p.top-e.top+nn(o,"top")):e.bottom>p.bottom-nn(r,"bottom")&&(l=e.bottom-p.bottom+nn(o,"bottom")),e.left<p.left+nn(r,"left")?h=-(p.left-e.left+nn(o,"left")):e.right>p.right-nn(r,"right")&&(h=e.right-p.right+nn(o,"right")),(h||l)&&(c?s.scrollBy(h,l):(l&&(a.scrollTop+=l),h&&(a.scrollLeft+=h),e={left:e.left-h,top:e.top-l,right:e.right-h,bottom:e.bottom-l})),c)break}}function on(t){for(var e=[],n=t.ownerDocument;t&&(e.push({dom:t,top:t.scrollTop,left:t.scrollLeft}),t!=n);t=We(t));return e}function sn(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=r.dom,i=r.top,s=r.left;o.scrollTop!=i+e&&(o.scrollTop=i+e),o.scrollLeft!=s&&(o.scrollLeft=s)}}var an=null;function cn(t,e){for(var n,r,o=2e8,i=0,s=e.top,a=e.top,c=t.firstChild,p=0;c;c=c.nextSibling,p++){var h=void 0;if(1==c.nodeType)h=c.getClientRects();else{if(3!=c.nodeType)continue;h=Ke(c).getClientRects()}for(var l=0;l<h.length;l++){var u=h[l];if(u.top<=s&&u.bottom>=a){s=Math.max(u.bottom,s),a=Math.min(u.top,a);var f=u.left>e.left?u.left-e.left:u.right<e.left?e.left-u.right:0;if(f<o){n=c,o=f,r=f&&3==n.nodeType?{left:u.right<e.left?u.right:u.left,top:e.top}:e,1==c.nodeType&&f&&(i=p+(e.left>=(u.left+u.right)/2?1:0));continue}}!n&&(e.left>=u.right&&e.top>=u.top||e.left>=u.left&&e.top>=u.bottom)&&(i=p+1)}}return n&&3==n.nodeType?function(t,e){for(var n=t.nodeValue.length,r=document.createRange(),o=0;o<n;o++){r.setEnd(t,o+1),r.setStart(t,o);var i=ln(r,1);if(i.top!=i.bottom&&pn(e,i))return{node:t,offset:o+(e.left>=(i.left+i.right)/2?1:0)}}return{node:t,offset:0}}(n,r):!n||o&&1==n.nodeType?{node:t,offset:i}:cn(n,r)}function pn(t,e){return t.left>=e.left-1&&t.left<=e.right+1&&t.top>=e.top-1&&t.top<=e.bottom+1}function hn(t,e){var n,r,o,i,s=t.root;if(s.caretPositionFromPoint)try{var a=s.caretPositionFromPoint(e.left,e.top);a&&(o=(n=a).offsetNode,i=n.offset)}catch(t){}if(!o&&s.caretRangeFromPoint){var c=s.caretRangeFromPoint(e.left,e.top);c&&(o=(r=c).startContainer,i=r.startOffset)}var p,h=s.elementFromPoint(e.left,e.top+1);if(!h||!t.dom.contains(1!=h.nodeType?h.parentNode:h)){var l=t.dom.getBoundingClientRect();if(!pn(e,l))return null;if(!(h=function t(e,n,r){var o=e.childNodes.length;if(o&&r.top<r.bottom)for(var i=Math.max(0,Math.min(o-1,Math.floor(o*(n.top-r.top)/(r.bottom-r.top))-2)),s=i;;){var a=e.childNodes[s];if(1==a.nodeType)for(var c=a.getClientRects(),p=0;p<c.length;p++){var h=c[p];if(pn(n,h))return t(a,n,h)}if((s=(s+1)%o)==i)break}return e}(t.dom,e,l)))return null}if(h=function(t,e){var n=t.parentNode;return n&&/^li$/i.test(n.nodeName)&&e.left<t.getBoundingClientRect().left?n:t}(h,e),o){if($e.gecko&&1==o.nodeType&&(i=Math.min(i,o.childNodes.length))<o.childNodes.length){var u,f=o.childNodes[i];"IMG"==f.nodeName&&(u=f.getBoundingClientRect()).right<=e.left&&u.bottom>e.top&&i++}o==t.dom&&i==o.childNodes.length-1&&1==o.lastChild.nodeType&&e.top>o.lastChild.getBoundingClientRect().bottom?p=t.state.doc.content.size:0!=i&&1==o.nodeType&&"BR"==o.childNodes[i-1].nodeName||(p=function(t,e,n,r){for(var o=-1,i=e;i!=t.dom;){var s=t.docView.nearestDesc(i,!0);if(!s)return null;if(s.node.isBlock&&s.parent){var a=s.dom.getBoundingClientRect();if(a.left>r.left||a.top>r.top)o=s.posBefore;else{if(!(a.right<r.left||a.bottom<r.top))break;o=s.posAfter}}i=s.dom.parentNode}return o>-1?o:t.docView.posFromDOM(e,n)}(t,o,i,e))}null==p&&(p=function(t,e,n){var r=cn(e,n),o=r.node,i=r.offset,s=-1;if(1==o.nodeType&&!o.firstChild){var a=o.getBoundingClientRect();s=a.left!=a.right&&n.left>(a.left+a.right)/2?1:-1}return t.docView.posFromDOM(o,i,s)}(t,h,e));var d=t.docView.nearestDesc(h,!0);return{pos:p,inside:d?d.posAtStart-d.border:-1}}function ln(t,e){var n=t.getClientRects();return n.length?n[e<0?0:n.length-1]:t.getBoundingClientRect()}function un(t,e){var n=t.docView.domFromPos(e),r=n.node,o=n.offset;if(3==r.nodeType&&($e.chrome||$e.gecko)){var i=ln(Ke(r,o,o),0);if($e.gecko&&o&&/\s/.test(r.nodeValue[o-1])&&o<r.nodeValue.length){var s=ln(Ke(r,o-1,o-1),-1);if(Math.abs(s.left-i.left)<1&&s.top==i.top){var a=ln(Ke(r,o,o+1),-1);return fn(a,a.left<s.left)}}return i}if(1==r.nodeType&&!t.state.doc.resolve(e).parent.inlineContent){var c,p=!0;if(o<r.childNodes.length){var h=r.childNodes[o];1==h.nodeType&&(c=h.getBoundingClientRect())}if(!c&&o){var l=r.childNodes[o-1];1==l.nodeType&&(c=l.getBoundingClientRect(),p=!1)}return function(t,e){if(0==t.height)return t;var n=e?t.top:t.bottom;return{top:n,bottom:n,left:t.left,right:t.right}}(c||r.getBoundingClientRect(),p)}for(var u=-1;u<2;u+=2)if(u<0&&o){var f=void 0,d=3==r.nodeType?Ke(r,o-1,o):3==(f=r.childNodes[o-1]).nodeType?Ke(f):1==f.nodeType&&"BR"!=f.nodeName?f:null;if(d){var m=ln(d,1);if(m.top<m.bottom)return fn(m,!1)}}else if(u>0&&o<Ye(r)){var v=void 0,g=3==r.nodeType?Ke(r,o,o+1):3==(v=r.childNodes[o]).nodeType?Ke(v):1==v.nodeType?v:null;if(g){var y=ln(g,-1);if(y.top<y.bottom)return fn(y,!0)}}return fn(ln(3==r.nodeType?Ke(r):r,0),!1)}function fn(t,e){if(0==t.width)return t;var n=e?t.left:t.right;return{top:t.top,bottom:t.bottom,left:n,right:n}}function dn(t,e,n){var r=t.state,o=t.root.activeElement;r!=e&&t.updateState(e),o!=t.dom&&t.focus();try{return n()}finally{r!=e&&t.updateState(r),o!=t.dom&&o.focus()}}var mn=/[\u0590-\u08ac]/;var vn=null,gn=null,yn=!1;function wn(t,e,n){return vn==e&&gn==n?yn:(vn=e,gn=n,yn="up"==n||"down"==n?function(t,e,n){var r=e.selection,o="up"==n?r.$anchor.min(r.$head):r.$anchor.max(r.$head);return dn(t,e,(function(){for(var e=t.docView.domFromPos(o.pos).node;;){var r=t.docView.nearestDesc(e,!0);if(!r)break;if(r.node.isBlock){e=r.dom;break}e=r.dom.parentNode}for(var i=un(t,o.pos),s=e.firstChild;s;s=s.nextSibling){var a=void 0;if(1==s.nodeType)a=s.getClientRects();else{if(3!=s.nodeType)continue;a=Ke(s,0,s.nodeValue.length).getClientRects()}for(var c=0;c<a.length;c++){var p=a[c];if(p.bottom>p.top&&("up"==n?p.bottom<i.top+1:p.top>i.bottom-1))return!1}}return!0}))}(t,e,n):function(t,e,n){var r=e.selection.$head;if(!r.parent.isTextblock)return!1;var o=r.parentOffset,i=!o,s=o==r.parent.content.size,a=getSelection();return mn.test(r.parent.textContent)&&a.modify?dn(t,e,(function(){var e=a.getRangeAt(0),o=a.focusNode,i=a.focusOffset,s=a.caretBidiLevel;a.modify("move",n,"character");var c=!(r.depth?t.docView.domAfterPos(r.before()):t.dom).contains(1==a.focusNode.nodeType?a.focusNode:a.focusNode.parentNode)||o==a.focusNode&&i==a.focusOffset;return a.removeAllRanges(),a.addRange(e),null!=s&&(a.caretBidiLevel=s),c})):"left"==n||"backward"==n?i:s}(t,e,n))}var bn=function(t,e,n,r){this.parent=t,this.children=e,this.dom=n,n.pmViewDesc=this,this.contentDOM=r,this.dirty=0},kn={beforePosition:{configurable:!0},size:{configurable:!0},border:{configurable:!0},posBefore:{configurable:!0},posAtStart:{configurable:!0},posAfter:{configurable:!0},posAtEnd:{configurable:!0},contentLost:{configurable:!0}};bn.prototype.matchesWidget=function(){return!1},bn.prototype.matchesMark=function(){return!1},bn.prototype.matchesNode=function(){return!1},bn.prototype.matchesHack=function(){return!1},kn.beforePosition.get=function(){return!1},bn.prototype.parseRule=function(){return null},bn.prototype.stopEvent=function(){return!1},kn.size.get=function(){for(var t=0,e=0;e<this.children.length;e++)t+=this.children[e].size;return t},kn.border.get=function(){return 0},bn.prototype.destroy=function(){this.parent=null,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=null);for(var t=0;t<this.children.length;t++)this.children[t].destroy()},bn.prototype.posBeforeChild=function(t){for(var e=0,n=this.posAtStart;e<this.children.length;e++){var r=this.children[e];if(r==t)return n;n+=r.size}},kn.posBefore.get=function(){return this.parent.posBeforeChild(this)},kn.posAtStart.get=function(){return this.parent?this.parent.posBeforeChild(this)+this.border:0},kn.posAfter.get=function(){return this.posBefore+this.size},kn.posAtEnd.get=function(){return this.posAtStart+this.size-2*this.border},bn.prototype.localPosFromDOM=function(t,e,n){if(this.contentDOM&&this.contentDOM.contains(1==t.nodeType?t:t.parentNode)){if(n<0){var r,o;if(t==this.contentDOM)r=t.childNodes[e-1];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;r=t.previousSibling}for(;r&&(!(o=r.pmViewDesc)||o.parent!=this);)r=r.previousSibling;return r?this.posBeforeChild(o)+o.size:this.posAtStart}var i,s;if(t==this.contentDOM)i=t.childNodes[e];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;i=t.nextSibling}for(;i&&(!(s=i.pmViewDesc)||s.parent!=this);)i=i.nextSibling;return i?this.posBeforeChild(s):this.posAtEnd}var a;if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))a=2&t.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==e)for(var c=t;;c=c.parentNode){if(c==this.dom){a=!1;break}if(c.parentNode.firstChild!=c)break}if(null==a&&e==t.childNodes.length)for(var p=t;;p=p.parentNode){if(p==this.dom){a=!0;break}if(p.parentNode.lastChild!=p)break}}return(null==a?n>0:a)?this.posAtEnd:this.posAtStart},bn.prototype.nearestDesc=function(t,e){for(var n=!0,r=t;r;r=r.parentNode){var o=this.getDesc(r);if(o&&(!e||o.node)){if(!n||!o.nodeDOM||(1==o.nodeDOM.nodeType?o.nodeDOM.contains(t):o.nodeDOM==t))return o;n=!1}}},bn.prototype.getDesc=function(t){for(var e=t.pmViewDesc,n=e;n;n=n.parent)if(n==this)return e},bn.prototype.posFromDOM=function(t,e,n){for(var r=t;;r=r.parentNode){var o=this.getDesc(r);if(o)return o.localPosFromDOM(t,e,n)}},bn.prototype.descAt=function(t){for(var e=0,n=0;e<this.children.length;e++){var r=this.children[e],o=n+r.size;if(n==t&&o!=n){for(;!r.border&&r.children.length;)r=r.children[0];return r}if(t<o)return r.descAt(t-n-r.border);n=o}},bn.prototype.domFromPos=function(t){if(!this.contentDOM)return{node:this.dom,offset:0};for(var e=0,n=0;;n++){if(e==t){for(;n<this.children.length&&(this.children[n].beforePosition||this.children[n].dom.parentNode!=this.contentDOM);)n++;return{node:this.contentDOM,offset:n==this.children.length?this.contentDOM.childNodes.length:He(this.children[n].dom)}}if(n==this.children.length)throw new Error("Invalid position "+t);var r=this.children[n],o=e+r.size;if(t<o)return r.domFromPos(t-e-r.border);e=o}},bn.prototype.parseRange=function(t,e,n){if(void 0===n&&(n=0),0==this.children.length)return{node:this.contentDOM,from:t,to:e,fromOffset:0,toOffset:this.contentDOM.childNodes.length};for(var r=-1,o=-1,i=n,s=0;;s++){var a=this.children[s],c=i+a.size;if(-1==r&&t<=c){var p=i+a.border;if(t>=p&&e<=c-a.border&&a.node&&a.contentDOM&&this.contentDOM.contains(a.contentDOM))return a.parseRange(t,e,p);t=i;for(var h=s;h>0;h--){var l=this.children[h-1];if(l.size&&l.dom.parentNode==this.contentDOM&&!l.emptyChildAt(1)){r=He(l.dom)+1;break}t-=l.size}-1==r&&(r=0)}if(r>-1&&e<=c){e=c;for(var u=s+1;u<this.children.length;u++){var f=this.children[u];if(f.size&&f.dom.parentNode==this.contentDOM&&!f.emptyChildAt(-1)){o=He(f.dom);break}e+=f.size}-1==o&&(o=this.contentDOM.childNodes.length);break}i=c}return{node:this.contentDOM,from:t,to:e,fromOffset:r,toOffset:o}},bn.prototype.emptyChildAt=function(t){if(this.border||!this.contentDOM||!this.children.length)return!1;var e=this.children[t<0?0:this.children.length-1];return 0==e.size||e.emptyChildAt(t)},bn.prototype.domAfterPos=function(t){var e=this.domFromPos(t),n=e.node,r=e.offset;if(1!=n.nodeType||r==n.childNodes.length)throw new RangeError("No node after pos "+t);return n.childNodes[r]},bn.prototype.setSelection=function(t,e,n,r){for(var o=Math.min(t,e),i=Math.max(t,e),s=0,a=0;s<this.children.length;s++){var c=this.children[s],p=a+c.size;if(o>a&&i<p)return c.setSelection(t-a-c.border,e-a-c.border,n,r);a=p}var h=this.domFromPos(t),l=this.domFromPos(e),u=n.getSelection(),f=document.createRange();if(r||!Ue(h.node,h.offset,u.anchorNode,u.anchorOffset)||!Ue(l.node,l.offset,u.focusNode,u.focusOffset)){if(u.extend)f.setEnd(h.node,h.offset),f.collapse(!1);else{if(t>e){var d=h;h=l,l=d}f.setEnd(l.node,l.offset),f.setStart(h.node,h.offset)}u.removeAllRanges(),u.addRange(f),u.extend&&u.extend(l.node,l.offset)}},bn.prototype.ignoreMutation=function(t){return!this.contentDOM&&"selection"!=t.type},kn.contentLost.get=function(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)},bn.prototype.markDirty=function(t,e){for(var n=0,r=0;r<this.children.length;r++){var o=this.children[r],i=n+o.size;if(n==i?t<=i&&e>=n:t<i&&e>n){var s=n+o.border,a=i-o.border;if(t>=s&&e<=a)return this.dirty=t==n||e==i?2:1,void(t!=s||e!=a||!o.contentLost&&o.dom.parentNode==this.contentDOM?o.markDirty(t-s,e-s):o.dirty=3);o.dirty=3}n=i}this.dirty=2},bn.prototype.markParentsDirty=function(){for(var t=this.parent;t;t=t.parent){t.dirty<2&&(t.dirty=2)}},Object.defineProperties(bn.prototype,kn);var xn=[],Sn=function(t){function e(e,n,r,o){var i,s=n.type.toDOM;if("function"==typeof s&&(s=s(r,(function(){return i?i.parent?i.parent.posBeforeChild(i):void 0:o}))),!n.type.spec.raw){if(1!=s.nodeType){var a=document.createElement("span");a.appendChild(s),s=a}s.contentEditable=!1,s.classList.add("ProseMirror-widget")}t.call(this,e,xn,s,null),this.widget=n,i=this}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={beforePosition:{configurable:!0}};return n.beforePosition.get=function(){return this.widget.type.side<0},e.prototype.matchesWidget=function(t){return 0==this.dirty&&t.type.eq(this.widget.type)},e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.stopEvent=function(t){var e=this.widget.spec.stopEvent;return!!e&&e(t)},e.prototype.ignoreMutation=function(t){return"selection"!=t.type||this.widget.spec.ignoreSelection},Object.defineProperties(e.prototype,n),e}(bn),Mn=function(t){function e(e,n,r,o){t.call(this,e,xn,n,null),this.textDOM=r,this.text=o}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0}};return n.size.get=function(){return this.text.length},e.prototype.localPosFromDOM=function(t,e){return t!=this.textDOM?this.posAtStart+(e?this.size:0):this.posAtStart+e},e.prototype.domFromPos=function(t){return{node:this.textDOM,offset:t}},e.prototype.ignoreMutation=function(t){return"characterData"===t.type&&t.target.nodeValue==t.oldValue},Object.defineProperties(e.prototype,n),e}(bn),On=function(t){function e(e,n,r,o){t.call(this,e,[],r,o),this.mark=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.create=function(t,n,r,o){var i=o.nodeViews[n.type.name],s=i&&i(n,o,r);return s&&s.dom||(s=zt.renderSpec(document,n.type.spec.toDOM(n,r))),new e(t,n,s.dom,s.contentDOM||s.dom)},e.prototype.parseRule=function(){return{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM}},e.prototype.matchesMark=function(t){return 3!=this.dirty&&this.mark.eq(t)},e.prototype.markDirty=function(e,n){if(t.prototype.markDirty.call(this,e,n),0!=this.dirty){for(var r=this.parent;!r.node;)r=r.parent;r.dirty<this.dirty&&(r.dirty=this.dirty),this.dirty=0}},e.prototype.slice=function(t,n,r){var o=e.create(this.parent,this.mark,!0,r),i=this.children,s=this.size;n<s&&(i=Ln(i,n,s,r)),t>0&&(i=Ln(i,0,t,r));for(var a=0;a<i.length;a++)i[a].parent=o;return o.children=i,o},e}(bn),Cn=function(t){function e(e,n,r,o,i,s,a,c,p){t.call(this,e,n.isLeaf?xn:[],i,s),this.nodeDOM=a,this.node=n,this.outerDeco=r,this.innerDeco=o,s&&this.updateChildren(c,p)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0},border:{configurable:!0}};return e.create=function(t,n,r,o,i,s){var a,c,p=i.nodeViews[n.type.name],h=p&&p(n,i,(function(){return c?c.parent?c.parent.posBeforeChild(c):void 0:s}),r),l=h&&h.dom,u=h&&h.contentDOM;if(n.isText)if(l){if(3!=l.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else l=document.createTextNode(n.text);else l||(l=(a=zt.renderSpec(document,n.type.spec.toDOM(n))).dom,u=a.contentDOM);u||n.isText||"BR"==l.nodeName||(l.hasAttribute("contenteditable")||(l.contentEditable=!1),n.type.spec.draggable&&(l.draggable=!0));var f=l;return l=_n(l,r,n),h?c=new En(t,n,r,o,l,u,f,h,i,s+1):n.isText?new Dn(t,n,r,o,l,f,i):new e(t,n,r,o,l,u,f,i,s+1)},e.prototype.parseRule=function(){var t=this;if(this.node.type.spec.reparseInView)return null;var e={node:this.node.type.name,attrs:this.node.attrs};return this.node.type.spec.code&&(e.preserveWhitespace="full"),this.contentDOM&&!this.contentLost?e.contentElement=this.contentDOM:e.getContent=function(){return t.contentDOM?T.empty:t.node.content},e},e.prototype.matchesNode=function(t,e,n){return 0==this.dirty&&t.eq(this.node)&&Bn(e,this.outerDeco)&&n.eq(this.innerDeco)},n.size.get=function(){return this.node.nodeSize},n.border.get=function(){return this.node.isLeaf?0:1},e.prototype.updateChildren=function(t,e){var n=this,r=this.node.inlineContent,o=e,i=r&&t.composing&&this.localCompositionNode(t,e),s=new $n(this,i&&i.node);!function(t,e,n,r){var o=e.locals(t),i=0;if(0==o.length){for(var s=0;s<t.childCount;s++){var a=t.child(s);r(a,o,e.forChild(i,a),s),i+=a.nodeSize}return}for(var c=0,p=[],h=null,l=0;;){if(c<o.length&&o[c].to==i){for(var u=o[c++],f=void 0;c<o.length&&o[c].to==i;)(f||(f=[u])).push(o[c++]);if(f){f.sort(Fn);for(var d=0;d<f.length;d++)n(f[d],l,!!h)}else n(u,l,!!h)}var m=void 0,v=void 0;if(h)v=-1,m=h,h=null;else{if(!(l<t.childCount))break;v=l,m=t.child(l++)}for(var g=0;g<p.length;g++)p[g].to<=i&&p.splice(g--,1);for(;c<o.length&&o[c].from==i;)p.push(o[c++]);var y=i+m.nodeSize;if(m.isText){var w=y;c<o.length&&o[c].from<w&&(w=o[c].from);for(var b=0;b<p.length;b++)p[b].to<w&&(w=p[b].to);w<y&&(h=m.cut(w-i),m=m.cut(0,w-i),y=w,v=-1)}r(m,p.length?p.slice():xn,e.forChild(i,m),v),i=y}}(this.node,this.innerDeco,(function(e,i,a){e.spec.marks?s.syncToMarks(e.spec.marks,r,t):e.type.side>=0&&!a&&s.syncToMarks(i==n.node.childCount?I.none:n.node.child(i).marks,r,t),s.placeWidget(e,t,o)}),(function(e,n,i,a){s.syncToMarks(e.marks,r,t),s.findNodeMatch(e,n,i,a)||s.updateNextNode(e,n,i,t,a)||s.addNode(e,n,i,t,o),o+=e.nodeSize})),s.syncToMarks(xn,r,t),this.node.isTextblock&&s.addTextblockHacks(),s.destroyRest(),(s.changed||2==this.dirty)&&(i&&this.protectLocalComposition(t,i),this.renderChildren())},e.prototype.renderChildren=function(){!function t(e,n){for(var r=e.firstChild,o=0;o<n.length;o++){var i=n[o],s=i.dom;if(s.parentNode==e){for(;s!=r;)r=Vn(r);r=r.nextSibling}else e.insertBefore(s,r);if(i instanceof On){var a=r?r.previousSibling:e.lastChild;t(i.contentDOM,i.children),r=a?a.nextSibling:e.firstChild}}for(;r;)r=Vn(r)}(this.contentDOM,this.children),$e.ios&&function(t){if("UL"==t.nodeName||"OL"==t.nodeName){var e=t.style.cssText;t.style.cssText=e+"; list-style: square !important",window.getComputedStyle(t).listStyle,t.style.cssText=e}}(this.dom)},e.prototype.localCompositionNode=function(t,e){var n=t.state.selection,r=n.from,o=n.to;if(!(!(t.state.selection instanceof we)||r<e||o>e+this.node.content.size)){var i=t.root.getSelection(),s=function(t,e){for(;;){if(3==t.nodeType)return t;if(1==t.nodeType&&e>0){if(t.childNodes.length>e&&3==t.childNodes[e].nodeType)return t.childNodes[e];t=t.childNodes[e-1],e=Ye(t)}else{if(!(1==t.nodeType&&e<t.childNodes.length))return null;t=t.childNodes[e],e=0}}}(i.focusNode,i.focusOffset);if(s&&this.dom.contains(s.parentNode)){var a=s.nodeValue,c=function(t,e,n,r){for(var o=0,i=0;o<t.childCount&&i<=r;){var s=t.child(o++),a=i;if(i+=s.nodeSize,s.isText){for(var c=s.text;o<t.childCount;){var p=t.child(o++);if(i+=p.nodeSize,!p.isText)break;c+=p.text}if(i>=n){var h=c.lastIndexOf(e,r-a);if(h>=0&&h+e.length+a>=n)return a+h}}}return-1}(this.node.content,a,r-e,o-e);return c<0?null:{node:s,pos:c,text:a}}}},e.prototype.protectLocalComposition=function(t,e){var n=e.node,r=e.pos,o=e.text;if(!this.getDesc(n)){for(var i=n;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=null)}var s=new Mn(this,i,n,o);t.compositionNodes.push(s),this.children=Ln(this.children,r,r+o.length,t,s)}},e.prototype.update=function(t,e,n,r){return!(3==this.dirty||!t.sameMarkup(this.node))&&(this.updateInner(t,e,n,r),!0)},e.prototype.updateInner=function(t,e,n,r){this.updateOuterDeco(e),this.node=t,this.innerDeco=n,this.contentDOM&&this.updateChildren(r,this.posAtStart),this.dirty=0},e.prototype.updateOuterDeco=function(t){if(!Bn(t,this.outerDeco)){var e=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=Rn(this.dom,this.nodeDOM,zn(this.outerDeco,this.node,e),zn(t,this.node,e)),this.dom!=n&&(n.pmViewDesc=null,this.dom.pmViewDesc=this),this.outerDeco=t}},e.prototype.selectNode=function(){this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)},e.prototype.deselectNode=function(){this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!1)},Object.defineProperties(e.prototype,n),e}(bn);function Tn(t,e,n,r,o){return _n(r,e,t),new Cn(null,t,e,n,r,r,r,o,0)}var Dn=function(t){function e(e,n,r,o,i,s,a){t.call(this,e,n,r,o,i,null,s,a)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parseRule=function(){return{skip:this.nodeDOM.parentNode||!0}},e.prototype.update=function(t,e){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!t.sameMarkup(this.node))&&(this.updateOuterDeco(e),0==this.dirty&&t.text==this.node.text||t.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=t.text),this.node=t,this.dirty=0,!0)},e.prototype.inParent=function(){for(var t=this.parent.contentDOM,e=this.nodeDOM;e;e=e.parentNode)if(e==t)return!0;return!1},e.prototype.domFromPos=function(t){return{node:this.nodeDOM,offset:t}},e.prototype.localPosFromDOM=function(e,n,r){return e==this.nodeDOM?this.posAtStart+Math.min(n,this.node.text.length):t.prototype.localPosFromDOM.call(this,e,n,r)},e.prototype.ignoreMutation=function(t){return"characterData"!=t.type&&"selection"!=t.type},e.prototype.slice=function(t,n,r){var o=this.node.cut(t,n),i=document.createTextNode(o.text);return new e(this.parent,o,this.outerDeco,this.innerDeco,i,i,r)},e}(Cn),Nn=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.matchesHack=function(){return 0==this.dirty},e}(bn),En=function(t){function e(e,n,r,o,i,s,a,c,p,h){t.call(this,e,n,r,o,i,s,a,p,h),this.spec=c}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.update=function(e,n,r,o){if(3==this.dirty)return!1;if(this.spec.update){var i=this.spec.update(e,n);return i&&this.updateInner(e,n,r,o),i}return!(!this.contentDOM&&!e.isLeaf)&&t.prototype.update.call(this,e,n,r,o)},e.prototype.selectNode=function(){this.spec.selectNode?this.spec.selectNode():t.prototype.selectNode.call(this)},e.prototype.deselectNode=function(){this.spec.deselectNode?this.spec.deselectNode():t.prototype.deselectNode.call(this)},e.prototype.setSelection=function(e,n,r,o){this.spec.setSelection?this.spec.setSelection(e,n,r):t.prototype.setSelection.call(this,e,n,r,o)},e.prototype.destroy=function(){this.spec.destroy&&this.spec.destroy(),t.prototype.destroy.call(this)},e.prototype.stopEvent=function(t){return!!this.spec.stopEvent&&this.spec.stopEvent(t)},e.prototype.ignoreMutation=function(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):t.prototype.ignoreMutation.call(this,e)},e}(Cn);function An(t){t&&(this.nodeName=t)}An.prototype=Object.create(null);var In=[new An];function zn(t,e,n){if(0==t.length)return In;for(var r=n?In[0]:new An,o=[r],i=0;i<t.length;i++){var s=t[i].type.attrs,a=r;if(s)for(var c in s.nodeName&&o.push(a=new An(s.nodeName)),s){var p=s[c];null!=p&&(n&&1==o.length&&o.push(a=r=new An(e.isInline?"span":"div")),"class"==c?a.class=(a.class?a.class+" ":"")+p:"style"==c?a.style=(a.style?a.style+";":"")+p:"nodeName"!=c&&(a[c]=p))}}return o}function Rn(t,e,n,r){if(n==In&&r==In)return e;for(var o=e,i=0;i<r.length;i++){var s=r[i],a=n[i];if(i){var c=void 0;a&&a.nodeName==s.nodeName&&o!=t&&(c=o.parentNode)&&c.tagName.toLowerCase()==s.nodeName?o=c:((c=document.createElement(s.nodeName)).appendChild(o),a=In[0],o=c)}Pn(o,a||In[0],s)}return o}function Pn(t,e,n){for(var r in e)"class"==r||"style"==r||"nodeName"==r||r in n||t.removeAttribute(r);for(var o in n)"class"!=o&&"style"!=o&&"nodeName"!=o&&n[o]!=e[o]&&t.setAttribute(o,n[o]);if(e.class!=n.class){for(var i=e.class?e.class.split(" "):xn,s=n.class?n.class.split(" "):xn,a=0;a<i.length;a++)-1==s.indexOf(i[a])&&t.classList.remove(i[a]);for(var c=0;c<s.length;c++)-1==i.indexOf(s[c])&&t.classList.add(s[c])}if(e.style!=n.style){if(e.style)for(var p,h=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;p=h.exec(e.style);)t.style.removeProperty(p[1]);n.style&&(t.style.cssText+=n.style)}}function _n(t,e,n){return Rn(t,t,In,zn(e,n,1!=t.nodeType))}function Bn(t,e){if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].type.eq(e[n].type))return!1;return!0}function Vn(t){var e=t.nextSibling;return t.parentNode.removeChild(t),e}var $n=function(t,e){this.top=t,this.lock=e,this.index=0,this.stack=[],this.changed=!1;var n=function(t,e){for(var n=[],r=t.childCount,o=e.length-1;r>0&&o>=0;o--){var i=e[o],s=i.node;if(s){if(s!=t.child(r-1))break;n.push(i),--r}}return{nodes:n.reverse(),offset:r}}(t.node.content,t.children);this.preMatched=n.nodes,this.preMatchOffset=n.offset};function Fn(t,e){return t.type.side-e.type.side}function Ln(t,e,n,r,o){for(var i=[],s=0,a=0;s<t.length;s++){var c=t[s],p=a,h=a+=c.size;p>=n||h<=e?i.push(c):(p<e&&i.push(c.slice(0,e-p,r)),o&&(i.push(o),o=null),h>n&&i.push(c.slice(n-p,c.size,r)))}return i}function jn(t,e){var n=t.selection,r=n.$anchor,o=n.$head,i=e>0?r.max(o):r.min(o),s=i.parent.inlineContent?i.depth?t.doc.resolve(e>0?i.after():i.before()):null:i;return s&&ve.findFrom(s,e)}function qn(t,e){return t.dispatch(t.state.tr.setSelection(e).scrollIntoView()),!0}function Jn(t,e,n){var r=t.state.selection;if(r instanceof we){if(!r.empty||n.indexOf("s")>-1)return!1;if(t.endOfTextblock(e>0?"right":"left")){var o=jn(t.state,e);return!!(o&&o instanceof ke)&&qn(t,o)}var i,s=r.$head,a=s.textOffset?null:e<0?s.nodeBefore:s.nodeAfter;if(!a||a.isText)return!1;var c=e<0?s.pos-a.nodeSize:s.pos;return!!(a.isAtom||(i=t.docView.descAt(c))&&!i.contentDOM)&&(ke.isSelectable(a)?qn(t,new ke(e<0?t.state.doc.resolve(s.pos-a.nodeSize):s)):!!$e.webkit&&qn(t,new we(t.state.doc.resolve(e<0?c:c+a.nodeSize))))}if(r instanceof ke&&r.node.isInline)return qn(t,new we(e>0?r.$to:r.$from));var p=jn(t.state,e);return!!p&&qn(t,p)}function Hn(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Wn(t){var e=t.pmViewDesc;return e&&0==e.size&&(t.nextSibling||"BR"!=t.nodeName)}function Kn(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){var o,i,s=!1;for($e.gecko&&1==n.nodeType&&r<Hn(n)&&Wn(n.childNodes[r])&&(s=!0);;)if(r>0){if(1!=n.nodeType)break;var a=n.childNodes[r-1];if(Wn(a))o=n,i=--r;else{if(3!=a.nodeType)break;r=(n=a).nodeValue.length}}else{if(Gn(n))break;for(var c=n.previousSibling;c&&Wn(c);)o=n.parentNode,i=He(c),c=c.previousSibling;if(c)r=Hn(n=c);else{if((n=n.parentNode)==t.dom)break;r=0}}s?Qn(t,e,n,r):o&&Qn(t,e,o,i)}}function Un(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){for(var o,i,s=Hn(n);;)if(r<s){if(1!=n.nodeType)break;if(!Wn(n.childNodes[r]))break;o=n,i=++r}else{if(Gn(n))break;for(var a=n.nextSibling;a&&Wn(a);)o=a.parentNode,i=He(a)+1,a=a.nextSibling;if(a)r=0,s=Hn(n=a);else{if((n=n.parentNode)==t.dom)break;r=s=0}}o&&Qn(t,e,o,i)}}function Gn(t){var e=t.pmViewDesc;return e&&e.node&&e.node.isBlock}function Qn(t,e,n,r){if(Ze(e)){var o=document.createRange();o.setEnd(n,r),o.setStart(n,r),e.removeAllRanges(),e.addRange(o)}else e.extend&&e.extend(n,r);t.domObserver.setCurSelection()}function Yn(t,e,n){var r=t.state.selection;if(r instanceof we&&!r.empty||n.indexOf("s")>-1)return!1;var o=r.$from,i=r.$to;if(!o.parent.inlineContent||t.endOfTextblock(e<0?"up":"down")){var s=jn(t.state,e);if(s&&s instanceof ke)return qn(t,s)}if(!o.parent.inlineContent){var a=ve.findFrom(e<0?o:i,e);return!a||qn(t,a)}return!1}function Xn(t,e){if(!(t.state.selection instanceof we))return!0;var n=t.state.selection,r=n.$head,o=n.$anchor,i=n.empty;if(!r.sameParent(o))return!0;if(!i)return!1;if(t.endOfTextblock(e>0?"forward":"backward"))return!0;var s=!r.textOffset&&(e<0?r.nodeBefore:r.nodeAfter);if(s&&!s.isText){var a=t.state.tr;return e<0?a.delete(r.pos-s.nodeSize,r.pos):a.delete(r.pos,r.pos+s.nodeSize),t.dispatch(a),!0}return!1}function Zn(t,e,n){t.domObserver.stop(),e.contentEditable=n,t.domObserver.start()}function tr(t,e){var n=e.keyCode,r=function(t){var e="";return t.ctrlKey&&(e+="c"),t.metaKey&&(e+="m"),t.altKey&&(e+="a"),t.shiftKey&&(e+="s"),e}(e);return 8==n||$e.mac&&72==n&&"c"==r?Xn(t,-1)||Kn(t):46==n||$e.mac&&68==n&&"c"==r?Xn(t,1)||Un(t):13==n&&!$e.ios||27==n||(37==n?Jn(t,-1,r)||Kn(t):39==n?Jn(t,1,r)||Un(t):38==n?Yn(t,-1,r)||Kn(t):40==n?function(t){if($e.chrome&&!(t.state.selection.$head.parentOffset>0)){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n&&1==n.nodeType&&0==r&&n.firstChild&&"false"==n.firstChild.contentEditable){var o=n.firstChild;Zn(t,o,!0),setTimeout((function(){return Zn(t,o,!1)}),20)}}}(t)||Yn(t,1,r)||Un(t):r==($e.mac?"m":"c")&&(66==n||73==n||89==n||90==n))}function er(t,e){var n,r,o=t.root.getSelection(),i=t.state.doc,s=t.docView.nearestDesc(o.focusNode),a=s&&0==s.size,c=t.docView.posFromDOM(o.focusNode,o.focusOffset),p=i.resolve(c);if(Ze(o)){for(n=p;s&&!s.node;)s=s.parent;if(s&&s.node.isAtom&&ke.isSelectable(s.node)&&s.parent&&(!s.node.isInline||!function(t,e,n){for(var r=0==e,o=e==Ye(t);r||o;){if(t==n)return!0;var i=He(t);if(!(t=t.parentNode))return!1;r=r&&0==i,o=o&&i==Ye(t)}}(o.focusNode,o.focusOffset,s.dom))){var h=s.posBefore;r=new ke(c==h?p:i.resolve(h))}}else n=i.resolve(t.docView.posFromDOM(o.anchorNode,o.anchorOffset));r||(r=pr(t,n,p,"pointer"==e||t.state.selection.head<p.pos&&!a?1:-1));return r}function nr(t,e){var n=t.state.selection;if(ar(t,n),t.editable?t.hasFocus():hr(t)&&document.activeElement.contains(t.dom)){if(t.domObserver.disconnectSelection(),t.cursorWrapper)!function(t){var e=t.root.getSelection(),n=document.createRange(),r=t.cursorWrapper.dom,o="IMG"==r.nodeName;o?n.setEnd(r.parentNode,He(r)+1):n.setEnd(r,0);n.collapse(!1),e.removeAllRanges(),e.addRange(n),!o&&!t.state.selection.visible&&$e.ie&&$e.ie_version<=11&&(r.disabled=!0,r.disabled=!1)}(t);else{var r,o,i=n.anchor,s=n.head;!rr||n instanceof we||(n.$from.parent.inlineContent||(r=or(t,n.from)),n.empty||n.$from.parent.inlineContent||(o=or(t,n.to))),t.docView.setSelection(i,s,t.root,e),rr&&(r&&sr(r),o&&sr(o)),n.visible?t.dom.classList.remove("ProseMirror-hideselection"):i!=s&&(t.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(t){var e=t.dom.ownerDocument;e.removeEventListener("selectionchange",t.hideSelectionGuard);var n=t.root.getSelection(),r=n.anchorNode,o=n.anchorOffset;e.addEventListener("selectionchange",t.hideSelectionGuard=function(){n.anchorNode==r&&n.anchorOffset==o||(e.removeEventListener("selectionchange",t.hideSelectionGuard),t.dom.classList.remove("ProseMirror-hideselection"))})}(t))}t.domObserver.setCurSelection(),t.domObserver.connectSelection()}}$n.prototype.getPreMatch=function(t){return t>=this.preMatchOffset?this.preMatched[t-this.preMatchOffset]:null},$n.prototype.destroyBetween=function(t,e){if(t!=e){for(var n=t;n<e;n++)this.top.children[n].destroy();this.top.children.splice(t,e-t),this.changed=!0}},$n.prototype.destroyRest=function(){this.destroyBetween(this.index,this.top.children.length)},$n.prototype.syncToMarks=function(t,e,n){for(var r=0,o=this.stack.length>>1,i=Math.min(o,t.length);r<i&&(r==o-1?this.top:this.stack[r+1<<1]).matchesMark(t[r])&&!1!==t[r].type.spec.spanning;)r++;for(;r<o;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),o--;for(;o<t.length;){this.stack.push(this.top,this.index+1);for(var s=-1,a=this.index;a<Math.min(this.index+3,this.top.children.length);a++)if(this.top.children[a].matchesMark(t[o])){s=a;break}if(s>-1)s>this.index&&(this.changed=!0,this.destroyBetween(this.index,s)),this.top=this.top.children[this.index];else{var c=On.create(this.top,t[o],e,n);this.top.children.splice(this.index,0,c),this.top=c,this.changed=!0}this.index=0,o++}},$n.prototype.findNodeMatch=function(t,e,n,r){var o=-1,i=r<0?void 0:this.getPreMatch(r),s=this.top.children;if(i&&i.matchesNode(t,e,n))o=s.indexOf(i);else for(var a=this.index,c=Math.min(s.length,a+5);a<c;a++){var p=s[a];if(p.matchesNode(t,e,n)&&this.preMatched.indexOf(p)<0){o=a;break}}return!(o<0)&&(this.destroyBetween(this.index,o),this.index++,!0)},$n.prototype.updateNextNode=function(t,e,n,r,o){if(this.index==this.top.children.length)return!1;var i=this.top.children[this.index];if(i instanceof Cn){var s=this.preMatched.indexOf(i);if(s>-1&&s+this.preMatchOffset!=o)return!1;var a=i.dom;if(!(this.lock&&(a==this.lock||1==a.nodeType&&a.contains(this.lock.parentNode))&&!(t.isText&&i.node&&i.node.isText&&i.nodeDOM.nodeValue==t.text&&3!=i.dirty&&Bn(e,i.outerDeco)))&&i.update(t,e,n,r))return i.dom!=a&&(this.changed=!0),this.index++,!0}return!1},$n.prototype.addNode=function(t,e,n,r,o){this.top.children.splice(this.index++,0,Cn.create(this.top,t,e,n,r,o)),this.changed=!0},$n.prototype.placeWidget=function(t,e,n){if(this.index<this.top.children.length&&this.top.children[this.index].matchesWidget(t))this.index++;else{var r=new Sn(this.top,t,e,n);this.top.children.splice(this.index++,0,r),this.changed=!0}},$n.prototype.addTextblockHacks=function(){for(var t=this.top.children[this.index-1];t instanceof On;)t=t.children[t.children.length-1];if(!t||!(t instanceof Dn)||/\n$/.test(t.node.text))if(this.index<this.top.children.length&&this.top.children[this.index].matchesHack())this.index++;else{var e=document.createElement("br");this.top.children.splice(this.index++,0,new Nn(this.top,xn,e,null)),this.changed=!0}};var rr=$e.safari||$e.chrome&&$e.chrome_version<63;function or(t,e){var n=t.docView.domFromPos(e),r=n.node,o=n.offset,i=o<r.childNodes.length?r.childNodes[o]:null,s=o?r.childNodes[o-1]:null;if($e.safari&&i&&"false"==i.contentEditable)return ir(i);if(!(i&&"false"!=i.contentEditable||s&&"false"!=s.contentEditable)){if(i)return ir(i);if(s)return ir(s)}}function ir(t){return t.contentEditable="true",$e.safari&&t.draggable&&(t.draggable=!1,t.wasDraggable=!0),t}function sr(t){t.contentEditable="false",t.wasDraggable&&(t.draggable=!0,t.wasDraggable=null)}function ar(t,e){if(e instanceof ke){var n=t.docView.descAt(e.from);n!=t.lastSelectedViewDesc&&(cr(t),n&&n.selectNode(),t.lastSelectedViewDesc=n)}else cr(t)}function cr(t){t.lastSelectedViewDesc&&(t.lastSelectedViewDesc.parent&&t.lastSelectedViewDesc.deselectNode(),t.lastSelectedViewDesc=null)}function pr(t,e,n,r){return t.someProp("createSelectionBetween",(function(r){return r(t,e,n)}))||we.between(e,n,r)}function hr(t){var e=t.root.getSelection();if(!e.anchorNode)return!1;try{return t.dom.contains(3==e.anchorNode.nodeType?e.anchorNode.parentNode:e.anchorNode)&&(t.editable||t.dom.contains(3==e.focusNode.nodeType?e.focusNode.parentNode:e.focusNode))}catch(t){return!1}}function lr(t){var e=t.pmViewDesc;if(e)return e.parseRule();if("BR"==t.nodeName&&t.parentNode){if($e.safari&&/^(ul|ol)$/i.test(t.parentNode.nodeName)){var n=document.createElement("div");return n.appendChild(document.createElement("li")),{skip:n}}if(t.parentNode.lastChild==t||$e.safari&&/^(tr|table)$/i.test(t.parentNode.nodeName))return{ignore:!0}}else if("IMG"==t.nodeName&&t.getAttribute("mark-placeholder"))return{ignore:!0}}function ur(t,e,n,r,o){if(e<0){var i=t.lastSelectionTime>Date.now()-50?t.lastSelectionOrigin:null,s=er(t,i);if(!t.state.selection.eq(s)){var a=t.state.tr.setSelection(s);"pointer"==i?a.setMeta("pointer",!0):"key"==i&&a.scrollIntoView(),t.dispatch(a)}}else{var c=t.state.doc.resolve(e),p=c.sharedDepth(n);e=c.before(p+1),n=t.state.doc.resolve(n).after(p+1);var h,l,u=t.state.selection,f=function(t,e,n){var r=t.docView.parseRange(e,n),o=r.node,i=r.fromOffset,s=r.toOffset,a=r.from,c=r.to,p=t.root.getSelection(),h=null,l=p.anchorNode;if(l&&t.dom.contains(1==l.nodeType?l:l.parentNode)&&(h=[{node:l,offset:p.anchorOffset}],Ze(p)||h.push({node:p.focusNode,offset:p.focusOffset})),$e.chrome&&8===t.lastKeyCode)for(var u=s;u>i;u--){var f=o.childNodes[u-1],d=f.pmViewDesc;if("BR"==f.nodeType&&!d){s=u;break}if(!d||d.size)break}var m=t.state.doc,v=t.someProp("domParser")||xt.fromSchema(t.state.schema),g=m.resolve(a),y=null,w=v.parse(o,{topNode:g.parent,topMatch:g.parent.contentMatchAt(g.index()),topOpen:!0,from:i,to:s,preserveWhitespace:!g.parent.type.spec.code||"full",editableContent:!0,findPositions:h,ruleFromNode:lr,context:g});if(h&&null!=h[0].pos){var b=h[0].pos,k=h[1]&&h[1].pos;null==k&&(k=b),y={anchor:b+a,head:k+a}}return{doc:w,sel:y,from:a,to:c}}(t,e,n),d=t.state.doc,m=d.slice(f.from,f.to);8===t.lastKeyCode&&Date.now()-100<t.lastKeyCodeTime?(h=t.state.selection.to,l="end"):(h=t.state.selection.from,l="start"),t.lastKeyCode=null;var v=function(t,e,n,r,o){var i=t.findDiffStart(e,n);if(null==i)return null;var s=t.findDiffEnd(e,n+t.size,n+e.size),a=s.a,c=s.b;if("end"==o){var p=Math.max(0,i-Math.min(a,c));r-=a+p-i}if(a<i&&t.size<e.size){c=(i-=r<=i&&r>=a?i-r:0)+(c-a),a=i}else if(c<i){a=(i-=r<=i&&r>=c?i-r:0)+(a-c),c=i}return{start:i,endA:a,endB:c}}(m.content,f.doc.content,f.from,h,l);if(!v){if(!(r&&u instanceof we&&!u.empty&&u.$head.sameParent(u.$anchor))||t.composing||f.sel&&f.sel.anchor!=f.sel.head){if(f.sel){var g=fr(t,t.state.doc,f.sel);g&&!g.eq(t.state.selection)&&t.dispatch(t.state.tr.setSelection(g))}return}v={start:u.from,endA:u.to,endB:u.to}}t.domChangeCount++,t.state.selection.from<t.state.selection.to&&v.start==v.endB&&t.state.selection instanceof we&&(v.start>t.state.selection.from&&v.start<=t.state.selection.from+2?v.start=t.state.selection.from:v.endA<t.state.selection.to&&v.endA>=t.state.selection.to-2&&(v.endB+=t.state.selection.to-v.endA,v.endA=t.state.selection.to)),$e.ie&&$e.ie_version<=11&&v.endB==v.start+1&&v.endA==v.start&&v.start>f.from&&"  "==f.doc.textBetween(v.start-f.from-1,v.start-f.from+1)&&(v.start--,v.endA--,v.endB--);var y,w=f.doc.resolveNoCache(v.start-f.from),b=f.doc.resolveNoCache(v.endB-f.from);if(($e.ios&&t.lastIOSEnter>Date.now()-100&&(!w.sameParent(b)||o.some((function(t){return"DIV"==t.nodeName})))||!w.sameParent(b)&&w.pos<f.doc.content.size&&(y=ve.findFrom(f.doc.resolve(w.pos+1),1,!0))&&y.head==b.pos)&&t.someProp("handleKeyDown",(function(e){return e(t,tn(13,"Enter"))})))t.lastIOSEnter=0;else if(t.state.selection.anchor>v.start&&function(t,e,n,r,o){if(!r.parent.isTextblock||n-e<=o.pos-r.pos||dr(r,!0,!1)<o.pos)return!1;var i=t.resolve(e);if(i.parentOffset<i.parent.content.size||!i.parent.isTextblock)return!1;var s=t.resolve(dr(i,!0,!0));if(!s.parent.isTextblock||s.pos>n||dr(s,!0,!1)<n)return!1;return r.parent.content.cut(r.parentOffset).eq(s.parent.content)}(d,v.start,v.endA,w,b)&&t.someProp("handleKeyDown",(function(e){return e(t,tn(8,"Backspace"))})))$e.android&&$e.chrome&&t.domObserver.suppressSelectionUpdates();else{var k,x,S,M,O=v.start,C=v.endA;if(w.sameParent(b)&&w.parent.inlineContent)if(w.pos==b.pos)$e.ie&&$e.ie_version<=11&&0==w.parentOffset&&(t.domObserver.suppressSelectionUpdates(),setTimeout((function(){return nr(t)}),20)),k=t.state.tr.delete(O,C),x=d.resolve(v.start).marksAcross(d.resolve(v.endA));else if(v.endA==v.endB&&(M=d.resolve(v.start))&&(S=function(t,e){for(var n,r,o,i=t.firstChild.marks,s=e.firstChild.marks,a=i,c=s,p=0;p<s.length;p++)a=s[p].removeFromSet(a);for(var h=0;h<i.length;h++)c=i[h].removeFromSet(c);if(1==a.length&&0==c.length)r=a[0],n="add",o=function(t){return t.mark(r.addToSet(t.marks))};else{if(0!=a.length||1!=c.length)return null;r=c[0],n="remove",o=function(t){return t.mark(r.removeFromSet(t.marks))}}for(var l=[],u=0;u<e.childCount;u++)l.push(o(e.child(u)));if(T.from(l).eq(t))return{mark:r,type:n}}(w.parent.content.cut(w.parentOffset,b.parentOffset),M.parent.content.cut(M.parentOffset,v.endA-M.start()))))k=t.state.tr,"add"==S.type?k.addMark(O,C,S.mark):k.removeMark(O,C,S.mark);else if(w.parent.child(w.index()).isText&&w.index()==b.index()-(b.textOffset?0:1)){var D=w.parent.textBetween(w.parentOffset,b.parentOffset);if(t.someProp("handleTextInput",(function(e){return e(t,O,C,D)})))return;k=t.state.tr.insertText(D,O,C)}if(k||(k=t.state.tr.replace(O,C,f.doc.slice(v.start-f.from,v.endB-f.from))),f.sel){var N=fr(t,k.doc,f.sel);N&&!($e.chrome&&$e.android&&t.composing&&N.empty&&N.head==O||$e.ie&&N.empty&&N.head==O)&&k.setSelection(N)}x&&k.ensureMarks(x),t.dispatch(k.scrollIntoView())}}}function fr(t,e,n){return Math.max(n.anchor,n.head)>e.content.size?null:pr(t,e.resolve(n.anchor),e.resolve(n.head))}function dr(t,e,n){for(var r=t.depth,o=e?t.end():t.pos;r>0&&(e||t.indexAfter(r)==t.node(r).childCount);)r--,o++,e=!1;if(n)for(var i=t.node(r).maybeChild(t.indexAfter(r));i&&!i.isLeaf;)i=i.firstChild,o++;return o}function mr(t,e){for(var n=[],r=e.content,o=e.openStart,i=e.openEnd;o>1&&i>1&&1==r.childCount&&1==r.firstChild.childCount;){o--,i--;var s=r.firstChild;n.push(s.type.name,s.type.hasRequiredAttrs()?s.attrs:null),r=s.content}var a=t.someProp("clipboardSerializer")||zt.fromSchema(t.state.schema),c=kr(),p=c.createElement("div");p.appendChild(a.serializeFragment(r,{document:c}));for(var h,l=p.firstChild;l&&1==l.nodeType&&(h=wr[l.nodeName.toLowerCase()]);){for(var u=h.length-1;u>=0;u--){for(var f=c.createElement(h[u]);p.firstChild;)f.appendChild(p.firstChild);p.appendChild(f)}l=p.firstChild}return l&&1==l.nodeType&&l.setAttribute("data-pm-slice",o+" "+i+" "+JSON.stringify(n)),{dom:p,text:t.someProp("clipboardTextSerializer",(function(t){return t(e)}))||e.content.textBetween(0,e.content.size,"\n\n")}}function vr(t,e,n,r,o){var i,s,a=o.parent.type.spec.code;if(!n&&!e)return null;var c=e&&(r||a||!n);if(c){if(t.someProp("transformPastedText",(function(t){e=t(e)})),a)return new R(T.from(t.state.schema.text(e)),0,0);var p=t.someProp("clipboardTextParser",(function(t){return t(e,o)}));p?s=p:(i=document.createElement("div"),e.trim().split(/(?:\r\n?|\n)+/).forEach((function(t){i.appendChild(document.createElement("p")).textContent=t})))}else t.someProp("transformPastedHTML",(function(t){n=t(n)})),i=function(t){var e=/(\s*<meta [^>]*>)*/.exec(t);e&&(t=t.slice(e[0].length));var n,r=kr().createElement("div"),o=/(?:<meta [^>]*>)*<([a-z][^>\s]+)/i.exec(t),i=0;(n=o&&wr[o[1].toLowerCase()])&&(t=n.map((function(t){return"<"+t+">"})).join("")+t+n.map((function(t){return"</"+t+">"})).reverse().join(""),i=n.length);r.innerHTML=t;for(var s=0;s<i;s++)r=r.firstChild;return r}(n);var h=i&&i.querySelector("[data-pm-slice]"),l=h&&/^(\d+) (\d+) (.*)/.exec(h.getAttribute("data-pm-slice"));if(!s){var u=t.someProp("clipboardParser")||t.someProp("domParser")||xt.fromSchema(t.state.schema);s=u.parseSlice(i,{preserveWhitespace:!(!c&&!l),context:o})}return s=l?function(t,e){if(!t.size)return t;var n,r=t.content.firstChild.type.schema;try{n=JSON.parse(e)}catch(e){return t}for(var o=t.content,i=t.openStart,s=t.openEnd,a=n.length-2;a>=0;a-=2){var c=r.nodes[n[a]];if(!c||c.hasRequiredAttrs())break;o=T.from(c.create(n[a+1],o)),i++,s++}return new R(o,i,s)}(function(t,e,n){e<t.openStart&&(t=new R(yr(t.content,-1,e,t.openStart,0,t.openEnd),e,t.openEnd));n<t.openEnd&&(t=new R(yr(t.content,1,n,t.openEnd,0,0),t.openStart,n));return t}(s,+l[1],+l[2]),l[3]):R.maxOpen(function(t,e){if(t.childCount<2)return t;for(var n=function(n){var r=e.node(n).contentMatchAt(e.index(n)),o=void 0,i=[];if(t.forEach((function(t){if(i){var e,n=r.findWrapping(t.type);if(!n)return i=null;if(e=i.length&&o.length&&function t(e,n,r,o,i){if(i<e.length&&i<n.length&&e[i]==n[i]){var s=t(e,n,r,o.lastChild,i+1);if(s)return o.copy(o.content.replaceChild(o.childCount-1,s));if(o.contentMatchAt(o.childCount).matchType(i==e.length-1?r.type:e[i+1]))return o.copy(o.content.append(T.from(gr(r,e,i+1))))}}(n,o,t,i[i.length-1],0))i[i.length-1]=e;else{i.length&&(i[i.length-1]=function t(e,n){if(0==n)return e;var r=e.content.replaceChild(e.childCount-1,t(e.lastChild,n-1)),o=e.contentMatchAt(e.childCount).fillBefore(T.empty,!0);return e.copy(r.append(o))}(i[i.length-1],o.length));var s=gr(t,n);i.push(s),r=r.matchType(s.type,s.attrs),o=n}}})),i)return{v:T.from(i)}},r=e.depth;r>=0;r--){var o=n(r);if(o)return o.v}return t}(s.content,o),!1),t.someProp("transformPasted",(function(t){s=t(s)})),s}function gr(t,e,n){void 0===n&&(n=0);for(var r=e.length-1;r>=n;r--)t=e[r].create(null,T.from(t));return t}function yr(t,e,n,r,o,i){var s=e<0?t.firstChild:t.lastChild,a=s.content;return o<r-1&&(a=yr(a,e,n,r,o+1,i)),o>=n&&(a=e<0?s.contentMatchAt(0).fillBefore(a,t.childCount>1||i<=o).append(a):a.append(s.contentMatchAt(s.childCount).fillBefore(T.empty,!0))),t.replaceChild(e<0?0:t.childCount-1,s.copy(a))}var wr={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]},br=null;function kr(){return br||(br=document.implementation.createHTMLDocument("title"))}var xr={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},Sr=$e.ie&&$e.ie_version<=11,Mr=function(){this.anchorNode=this.anchorOffset=this.focusNode=this.focusOffset=null};Mr.prototype.set=function(t){this.anchorNode=t.anchorNode,this.anchorOffset=t.anchorOffset,this.focusNode=t.focusNode,this.focusOffset=t.focusOffset},Mr.prototype.eq=function(t){return t.anchorNode==this.anchorNode&&t.anchorOffset==this.anchorOffset&&t.focusNode==this.focusNode&&t.focusOffset==this.focusOffset};var Or=function(t,e){var n=this;this.view=t,this.handleDOMChange=e,this.queue=[],this.flushingSoon=!1,this.observer=window.MutationObserver&&new window.MutationObserver((function(t){for(var e=0;e<t.length;e++)n.queue.push(t[e]);$e.ie&&$e.ie_version<=11&&t.some((function(t){return"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length}))?n.flushSoon():n.flush()})),this.currentSelection=new Mr,Sr&&(this.onCharData=function(t){n.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),n.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.suppressingSelectionUpdates=!1};Or.prototype.flushSoon=function(){var t=this;this.flushingSoon||(this.flushingSoon=!0,window.setTimeout((function(){t.flushingSoon=!1,t.flush()}),20))},Or.prototype.start=function(){this.observer&&this.observer.observe(this.view.dom,xr),Sr&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()},Or.prototype.stop=function(){var t=this;if(this.observer){var e=this.observer.takeRecords();if(e.length){for(var n=0;n<e.length;n++)this.queue.push(e[n]);window.setTimeout((function(){return t.flush()}),20)}this.observer.disconnect()}Sr&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()},Or.prototype.connectSelection=function(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)},Or.prototype.disconnectSelection=function(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)},Or.prototype.suppressSelectionUpdates=function(){var t=this;this.suppressingSelectionUpdates=!0,setTimeout((function(){return t.suppressingSelectionUpdates=!1}),50)},Or.prototype.onSelectionChange=function(){if((!(t=this.view).editable||t.root.activeElement==t.dom)&&hr(t)){var t;if(this.suppressingSelectionUpdates)return nr(this.view);if($e.ie&&$e.ie_version<=11&&!this.view.state.selection.empty){var e=this.view.root.getSelection();if(e.focusNode&&Ue(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset))return this.flushSoon()}this.flush()}},Or.prototype.setCurSelection=function(){this.currentSelection.set(this.view.root.getSelection())},Or.prototype.ignoreSelectionChange=function(t){if(0==t.rangeCount)return!0;var e=t.getRangeAt(0).commonAncestorContainer,n=this.view.docView.nearestDesc(e);return n&&n.ignoreMutation({type:"selection",target:3==e.nodeType?e.parentNode:e})?(this.setCurSelection(),!0):void 0},Or.prototype.flush=function(){if(this.view.docView&&!this.flushingSoon){var t=this.observer?this.observer.takeRecords():[];this.queue.length&&(t=this.queue.concat(t),this.queue.length=0);var e=this.view.root.getSelection(),n=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(e)&&hr(this.view)&&!this.ignoreSelectionChange(e),r=-1,o=-1,i=!1,s=[];if(this.view.editable)for(var a=0;a<t.length;a++){var c=this.registerMutation(t[a],s);c&&(r=r<0?c.from:Math.min(c.from,r),o=o<0?c.to:Math.max(c.to,o),c.typeOver&&!this.view.composing&&(i=!0))}if($e.gecko&&s.length>1){var p=s.filter((function(t){return"BR"==t.nodeName}));if(2==p.length){var h=p[0],l=p[1];h.parentNode&&h.parentNode.parentNode==l.parentNode?l.remove():h.remove()}}(r>-1||n)&&(r>-1&&(this.view.docView.markDirty(r,o),function(t){if(Cr)return;Cr=!0,"normal"==getComputedStyle(t.dom).whiteSpace&&console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.")}(this.view)),this.handleDOMChange(r,o,i,s),this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(e)||nr(this.view))}},Or.prototype.registerMutation=function(t,e){if(e.indexOf(t.target)>-1)return null;var n=this.view.docView.nearestDesc(t.target);if("attributes"==t.type&&(n==this.view.docView||"contenteditable"==t.attributeName||"style"==t.attributeName&&!t.oldValue&&!t.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(t))return null;if("childList"==t.type){var r=t.previousSibling,o=t.nextSibling;if($e.ie&&$e.ie_version<=11&&t.addedNodes.length)for(var i=0;i<t.addedNodes.length;i++){var s=t.addedNodes[i],a=s.previousSibling,c=s.nextSibling;(!a||Array.prototype.indexOf.call(t.addedNodes,a)<0)&&(r=a),(!c||Array.prototype.indexOf.call(t.addedNodes,c)<0)&&(o=c)}for(var p=r&&r.parentNode==t.target?He(r)+1:0,h=n.localPosFromDOM(t.target,p,-1),l=o&&o.parentNode==t.target?He(o):t.target.childNodes.length,u=0;u<t.addedNodes.length;u++)e.push(t.addedNodes[u]);return{from:h,to:n.localPosFromDOM(t.target,l,1)}}return"attributes"==t.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:{from:n.posAtStart,to:n.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}};var Cr=!1;var Tr={},Dr={};function Nr(t,e){t.lastSelectionOrigin=e,t.lastSelectionTime=Date.now()}function Er(t){t.someProp("handleDOMEvents",(function(e){for(var n in e)t.eventHandlers[n]||t.dom.addEventListener(n,t.eventHandlers[n]=function(e){return Ar(t,e)})}))}function Ar(t,e){return t.someProp("handleDOMEvents",(function(n){var r=n[e.type];return!!r&&(r(t,e)||e.defaultPrevented)}))}function Ir(t){return{left:t.clientX,top:t.clientY}}function zr(t,e,n,r,o){if(-1==r)return!1;for(var i=t.state.doc.resolve(r),s=function(r){if(t.someProp(e,(function(e){return r>i.depth?e(t,n,i.nodeAfter,i.before(r),o,!0):e(t,n,i.node(r),i.before(r),o,!1)})))return{v:!0}},a=i.depth+1;a>0;a--){var c=s(a);if(c)return c.v}return!1}function Rr(t,e,n){t.focused||t.focus();var r=t.state.tr.setSelection(e);"pointer"==n&&r.setMeta("pointer",!0),t.dispatch(r)}function Pr(t,e,n,r,o){return zr(t,"handleClickOn",e,n,r)||t.someProp("handleClick",(function(n){return n(t,e,r)}))||(o?function(t,e){if(-1==e)return!1;var n,r,o=t.state.selection;o instanceof ke&&(n=o.node);for(var i=t.state.doc.resolve(e),s=i.depth+1;s>0;s--){var a=s>i.depth?i.nodeAfter:i.node(s);if(ke.isSelectable(a)){r=n&&o.$from.depth>0&&s>=o.$from.depth&&i.before(o.$from.depth+1)==o.$from.pos?i.before(o.$from.depth):i.before(s);break}}return null!=r&&(Rr(t,ke.create(t.state.doc,r),"pointer"),!0)}(t,n):function(t,e){if(-1==e)return!1;var n=t.state.doc.resolve(e),r=n.nodeAfter;return!!(r&&r.isAtom&&ke.isSelectable(r))&&(Rr(t,new ke(n),"pointer"),!0)}(t,n))}function _r(t,e,n,r){return zr(t,"handleDoubleClickOn",e,n,r)||t.someProp("handleDoubleClick",(function(n){return n(t,e,r)}))}function Br(t,e,n,r){return zr(t,"handleTripleClickOn",e,n,r)||t.someProp("handleTripleClick",(function(n){return n(t,e,r)}))||function(t,e){var n=t.state.doc;if(-1==e)return!!n.inlineContent&&(Rr(t,we.create(n,0,n.content.size),"pointer"),!0);for(var r=n.resolve(e),o=r.depth+1;o>0;o--){var i=o>r.depth?r.nodeAfter:r.node(o),s=r.before(o);if(i.inlineContent)Rr(t,we.create(n,s+1,s+1+i.content.size),"pointer");else{if(!ke.isSelectable(i))continue;Rr(t,ke.create(n,s),"pointer")}return!0}}(t,n)}function Vr(t){return Jr(t)}Dr.keydown=function(t,e){t.shiftKey=16==e.keyCode||e.shiftKey,Lr(t,e)||(t.lastKeyCode=e.keyCode,t.lastKeyCodeTime=Date.now(),!$e.ios||13!=e.keyCode||e.ctrlKey||e.altKey||e.metaKey?t.someProp("handleKeyDown",(function(n){return n(t,e)}))||tr(t,e)?e.preventDefault():Nr(t,"key"):t.lastIOSEnter=Date.now())},Dr.keyup=function(t,e){16==e.keyCode&&(t.shiftKey=!1)},Dr.keypress=function(t,e){if(!(Lr(t,e)||!e.charCode||e.ctrlKey&&!e.altKey||$e.mac&&e.metaKey))if(t.someProp("handleKeyPress",(function(n){return n(t,e)})))e.preventDefault();else{var n=t.state.selection;if(!(n instanceof we&&n.$from.sameParent(n.$to))){var r=String.fromCharCode(e.charCode);t.someProp("handleTextInput",(function(e){return e(t,n.$from.pos,n.$to.pos,r)}))||t.dispatch(t.state.tr.insertText(r).scrollIntoView()),e.preventDefault()}}};var $r=$e.mac?"metaKey":"ctrlKey";Tr.mousedown=function(t,e){t.shiftKey=e.shiftKey;var n=Vr(t),r=Date.now(),o="singleClick";r-t.lastClick.time<500&&function(t,e){var n=e.x-t.clientX,r=e.y-t.clientY;return n*n+r*r<100}(e,t.lastClick)&&!e[$r]&&("singleClick"==t.lastClick.type?o="doubleClick":"doubleClick"==t.lastClick.type&&(o="tripleClick")),t.lastClick={time:r,x:e.clientX,y:e.clientY,type:o};var i=t.posAtCoords(Ir(e));i&&("singleClick"==o?t.mouseDown=new Fr(t,i,e,n):("doubleClick"==o?_r:Br)(t,i.pos,i.inside,e)?e.preventDefault():Nr(t,"pointer"))};var Fr=function(t,e,n,r){var o,i,s=this;if(this.view=t,this.startDoc=t.state.doc,this.pos=e,this.event=n,this.flushed=r,this.selectNode=n[$r],this.allowDefault=n.shiftKey,e.inside>-1)o=t.state.doc.nodeAt(e.inside),i=e.inside;else{var a=t.state.doc.resolve(e.pos);o=a.parent,i=a.depth?a.before():0}this.mightDrag=null;var c=r?null:n.target,p=c?t.docView.nearestDesc(c,!0):null;this.target=p?p.dom:null,(o.type.spec.draggable&&!1!==o.type.spec.selectable||t.state.selection instanceof ke&&i==t.state.selection.from)&&(this.mightDrag={node:o,pos:i,addAttr:this.target&&!this.target.draggable,setUneditable:this.target&&$e.gecko&&!this.target.hasAttribute("contentEditable")}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((function(){return s.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),t.root.addEventListener("mouseup",this.up=this.up.bind(this)),t.root.addEventListener("mousemove",this.move=this.move.bind(this)),Nr(t,"pointer")};function Lr(t,e){return!!t.composing||!!($e.safari&&Math.abs(e.timeStamp-t.compositionEndedAt)<500)&&(t.compositionEndedAt=-2e8,!0)}Fr.prototype.done=function(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!1),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.view.mouseDown=null},Fr.prototype.up=function(t){if(this.done(),this.view.dom.contains(3==t.target.nodeType?t.target.parentNode:t.target)){var e=this.pos;this.view.state.doc!=this.startDoc&&(e=this.view.posAtCoords(Ir(t))),this.allowDefault||!e?Nr(this.view,"pointer"):Pr(this.view,e.pos,e.inside,t,this.selectNode)?t.preventDefault():!this.flushed&&(!$e.chrome||this.view.state.selection instanceof we||e.pos!=this.view.state.selection.from&&e.pos!=this.view.state.selection.to)?Nr(this.view,"pointer"):(Rr(this.view,ve.near(this.view.state.doc.resolve(e.pos)),"pointer"),t.preventDefault())}},Fr.prototype.move=function(t){!this.allowDefault&&(Math.abs(this.event.x-t.clientX)>4||Math.abs(this.event.y-t.clientY)>4)&&(this.allowDefault=!0),Nr(this.view,"pointer")},Tr.touchdown=function(t){Vr(t),Nr(t,"pointer")},Tr.contextmenu=function(t){return Vr(t)};var jr=$e.android?5e3:-1;function qr(t,e){clearTimeout(t.composingTimeout),e>-1&&(t.composingTimeout=setTimeout((function(){return Jr(t)}),e))}function Jr(t,e){for(t.composing=!1;t.compositionNodes.length>0;)t.compositionNodes.pop().markParentsDirty();return!(!e&&!t.docView.dirty)&&(t.updateState(t.state),!0)}Dr.compositionstart=Dr.compositionupdate=function(t){if(!t.composing){t.domObserver.flush();var e=t.state,n=e.selection.$from;if(e.selection.empty&&(e.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((function(t){return!1===t.type.spec.inclusive}))))t.markCursor=t.state.storedMarks||n.marks(),Jr(t,!0),t.markCursor=null;else if(Jr(t),$e.gecko&&e.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length)for(var r=t.root.getSelection(),o=r.focusNode,i=r.focusOffset;o&&1==o.nodeType&&0!=i;){var s=i<0?o.lastChild:o.childNodes[i-1];if(!s)break;if(3==s.nodeType){r.collapse(s,s.nodeValue.length);break}o=s,i=-1}t.composing=!0}qr(t,jr)},Dr.compositionend=function(t,e){t.composing&&(t.composing=!1,t.compositionEndedAt=e.timeStamp,qr(t,20))};var Hr=$e.ie&&$e.ie_version<15||$e.ios&&$e.webkit_version<604;function Wr(t,e,n,r){var o=vr(t,e,n,t.shiftKey,t.state.selection.$from);if(!t.someProp("handlePaste",(function(e){return e(t,r,o||R.empty)}))&&o){var i=function(t){return 0==t.openStart&&0==t.openEnd&&1==t.content.childCount?t.content.firstChild:null}(o),s=i?t.state.tr.replaceSelectionWith(i,t.shiftKey):t.state.tr.replaceSelection(o);t.dispatch(s.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste"))}}Tr.copy=Dr.cut=function(t,e){var n=t.state.selection,r="cut"==e.type;if(!n.empty){var o=Hr?null:e.clipboardData,i=mr(t,n.content()),s=i.dom,a=i.text;o?(e.preventDefault(),o.clearData(),o.setData("text/html",s.innerHTML),o.setData("text/plain",a)):function(t,e){var n=t.dom.ownerDocument,r=n.body.appendChild(n.createElement("div"));r.appendChild(e),r.style.cssText="position: fixed; left: -10000px; top: 10px";var o=getSelection(),i=n.createRange();i.selectNodeContents(e),t.dom.blur(),o.removeAllRanges(),o.addRange(i),setTimeout((function(){n.body.removeChild(r),t.focus()}),50)}(t,s),r&&t.dispatch(t.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))}},Dr.paste=function(t,e){var n=Hr?null:e.clipboardData,r=n&&n.getData("text/html"),o=n&&n.getData("text/plain");n&&(r||o||n.files.length)?(Wr(t,o,r,e),e.preventDefault()):function(t,e){var n=t.dom.ownerDocument,r=t.shiftKey||t.state.selection.$from.parent.type.spec.code,o=n.body.appendChild(n.createElement(r?"textarea":"div"));r||(o.contentEditable="true"),o.style.cssText="position: fixed; left: -10000px; top: 10px",o.focus(),setTimeout((function(){t.focus(),n.body.removeChild(o),r?Wr(t,o.value,null,e):Wr(t,o.textContent,o.innerHTML,e)}),50)}(t,e)};var Kr=function(t,e){this.slice=t,this.move=e},Ur=$e.mac?"altKey":"ctrlKey";for(var Gr in Tr.dragstart=function(t,e){var n=t.mouseDown;if(n&&n.done(),e.dataTransfer){var r=t.state.selection,o=r.empty?null:t.posAtCoords(Ir(e));if(o&&o.pos>=r.from&&o.pos<=(r instanceof ke?r.to-1:r.to));else if(n&&n.mightDrag)t.dispatch(t.state.tr.setSelection(ke.create(t.state.doc,n.mightDrag.pos)));else if(e.target&&1==e.target.nodeType){var i=t.docView.nearestDesc(e.target,!0);if(!i||!i.node.type.spec.draggable||i==t.docView)return;t.dispatch(t.state.tr.setSelection(ke.create(t.state.doc,i.posBefore)))}var s=t.state.selection.content(),a=mr(t,s),c=a.dom,p=a.text;e.dataTransfer.clearData(),e.dataTransfer.setData(Hr?"Text":"text/html",c.innerHTML),Hr||e.dataTransfer.setData("text/plain",p),t.dragging=new Kr(s,!e[Ur])}},Tr.dragend=function(t){window.setTimeout((function(){return t.dragging=null}),50)},Dr.dragover=Dr.dragenter=function(t,e){return e.preventDefault()},Dr.drop=function(t,e){var n=t.dragging;if(t.dragging=null,e.dataTransfer){var r=t.posAtCoords(Ir(e));if(r){var o=t.state.doc.resolve(r.pos);if(o){var i=n&&n.slice||vr(t,e.dataTransfer.getData(Hr?"Text":"text/plain"),Hr?null:e.dataTransfer.getData("text/html"),!1,o);if(i&&(e.preventDefault(),!t.someProp("handleDrop",(function(r){return r(t,e,i,n&&n.move)})))){var s=i?function(t,e,n){var r=t.resolve(e);if(!n.content.size)return e;for(var o=n.content,i=0;i<n.openStart;i++)o=o.firstChild.content;for(var s=1;s<=(0==n.openStart&&n.size?2:1);s++)for(var a=r.depth;a>=0;a--){var c=a==r.depth?0:r.pos<=(r.start(a+1)+r.end(a+1))/2?-1:1,p=r.index(a)+(c>0?1:0);if(1==s?r.node(a).canReplace(p,p,o):r.node(a).contentMatchAt(p).findWrapping(o.firstChild.type))return 0==c?r.pos:c<0?r.before(a+1):r.after(a+1)}return null}(t.state.doc,o.pos,i):o.pos;null==s&&(s=o.pos);var a=t.state.tr;n&&n.move&&a.deleteSelection();var c=a.mapping.map(s),p=0==i.openStart&&0==i.openEnd&&1==i.content.childCount,h=a.doc;if(p?a.replaceRangeWith(c,c,i.content.firstChild):a.replaceRange(c,c,i),!a.doc.eq(h)){var l=a.doc.resolve(c);p&&ke.isSelectable(i.content.firstChild)&&l.nodeAfter&&l.nodeAfter.sameMarkup(i.content.firstChild)?a.setSelection(new ke(l)):a.setSelection(pr(t,l,a.doc.resolve(a.mapping.map(s)))),t.focus(),t.dispatch(a.setMeta("uiEvent","drop"))}}}}}},Tr.focus=function(t){t.focused||(t.domObserver.stop(),t.dom.classList.add("ProseMirror-focused"),t.domObserver.start(),t.focused=!0,setTimeout((function(){t.docView&&t.hasFocus()&&!t.domObserver.currentSelection.eq(t.root.getSelection())&&nr(t)}),20))},Tr.blur=function(t){t.focused&&(t.domObserver.stop(),t.dom.classList.remove("ProseMirror-focused"),t.domObserver.start(),t.domObserver.currentSelection.set({}),t.focused=!1)},Tr.beforeinput=function(t,e){if($e.chrome&&$e.android&&"deleteContentBackward"==e.inputType){var n=t.domChangeCount;setTimeout((function(){if(t.domChangeCount==n&&(t.dom.blur(),t.focus(),!t.someProp("handleKeyDown",(function(e){return e(t,tn(8,"Backspace"))})))){var e=t.state.selection.$cursor;e&&e.pos>0&&t.dispatch(t.state.tr.delete(e.pos-1,e.pos).scrollIntoView())}}),50)}},Dr)Tr[Gr]=Dr[Gr];function Qr(t,e){if(t==e)return!0;for(var n in t)if(t[n]!==e[n])return!1;for(var r in e)if(!(r in t))return!1;return!0}var Yr=function(t,e){this.spec=e||ro,this.side=this.spec.side||0,this.toDOM=t};Yr.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,this.side<0?-1:1),i=o.pos;return o.deleted?null:new to(i-n,i-n,this)},Yr.prototype.valid=function(){return!0},Yr.prototype.eq=function(t){return this==t||t instanceof Yr&&(this.spec.key&&this.spec.key==t.spec.key||this.toDOM==t.toDOM&&Qr(this.spec,t.spec))};var Xr=function(t,e){this.spec=e||ro,this.attrs=t};Xr.prototype.map=function(t,e,n,r){var o=t.map(e.from+r,this.spec.inclusiveStart?-1:1)-n,i=t.map(e.to+r,this.spec.inclusiveEnd?1:-1)-n;return o>=i?null:new to(o,i,this)},Xr.prototype.valid=function(t,e){return e.from<e.to},Xr.prototype.eq=function(t){return this==t||t instanceof Xr&&Qr(this.attrs,t.attrs)&&Qr(this.spec,t.spec)},Xr.is=function(t){return t.type instanceof Xr};var Zr=function(t,e){this.spec=e||ro,this.attrs=t};Zr.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,1);if(o.deleted)return null;var i=t.mapResult(e.to+r,-1);return i.deleted||i.pos<=o.pos?null:new to(o.pos-n,i.pos-n,this)},Zr.prototype.valid=function(t,e){var n=t.content.findIndex(e.from),r=n.index,o=n.offset;return o==e.from&&o+t.child(r).nodeSize==e.to},Zr.prototype.eq=function(t){return this==t||t instanceof Zr&&Qr(this.attrs,t.attrs)&&Qr(this.spec,t.spec)};var to=function(t,e,n){this.from=t,this.to=e,this.type=n},eo={spec:{configurable:!0}};to.prototype.copy=function(t,e){return new to(t,e,this.type)},to.prototype.eq=function(t){return this.type.eq(t.type)&&this.from==t.from&&this.to==t.to},to.prototype.map=function(t,e,n){return this.type.map(t,this,e,n)},to.widget=function(t,e,n){return new to(t,t,new Yr(e,n))},to.inline=function(t,e,n,r){return new to(t,e,new Xr(n,r))},to.node=function(t,e,n,r){return new to(t,e,new Zr(n,r))},eo.spec.get=function(){return this.type.spec},Object.defineProperties(to.prototype,eo);var no=[],ro={},oo=function(t,e){this.local=t&&t.length?t:no,this.children=e&&e.length?e:no};oo.create=function(t,e){return e.length?ho(e,t,0,ro):io},oo.prototype.find=function(t,e,n){var r=[];return this.findInner(null==t?0:t,null==e?1e9:e,r,0,n),r},oo.prototype.findInner=function(t,e,n,r,o){for(var i=0;i<this.local.length;i++){var s=this.local[i];s.from<=e&&s.to>=t&&(!o||o(s.spec))&&n.push(s.copy(s.from+r,s.to+r))}for(var a=0;a<this.children.length;a+=3)if(this.children[a]<e&&this.children[a+1]>t){var c=this.children[a]+1;this.children[a+2].findInner(t-c,e-c,n,r+c,o)}},oo.prototype.map=function(t,e,n){return this==io||0==t.maps.length?this:this.mapInner(t,e,0,0,n||ro)},oo.prototype.mapInner=function(t,e,n,r,o){for(var i,s=0;s<this.local.length;s++){var a=this.local[s].map(t,n,r);a&&a.type.valid(e,a)?(i||(i=[])).push(a):o.onRemove&&o.onRemove(this.local[s].spec)}return this.children.length?function(t,e,n,r,o,i,s){for(var a=t.slice(),c=function(t,e,n,r){for(var s=0;s<a.length;s+=3){var c=a[s+1],p=void 0;-1==c||t>c+i||(e>=a[s]+i?a[s+1]=-1:(p=r-n-(e-t)+(i-o))&&(a[s]+=p,a[s+1]+=p))}},p=0;p<n.maps.length;p++)n.maps[p].forEach(c);for(var h=!1,l=0;l<a.length;l+=3)if(-1==a[l+1]){var u=n.map(a[l]+i),f=u-o;if(f<0||f>=r.content.size){h=!0;continue}var d=n.map(t[l+1]+i,-1)-o,m=r.content.findIndex(f),v=m.index,g=m.offset,y=r.maybeChild(v);if(y&&g==f&&g+y.nodeSize==d){var w=a[l+2].mapInner(n,y,u+1,a[l]+i+1,s);w!=io?(a[l]=f,a[l+1]=d,a[l+2]=w):(a[l+1]=-2,h=!0)}else h=!0}if(h){var b=ho(function(t,e,n,r,o,i,s){function a(t,e){for(var i=0;i<t.local.length;i++){var c=t.local[i].map(r,o,e);c?n.push(c):s.onRemove&&s.onRemove(t.local[i].spec)}for(var p=0;p<t.children.length;p+=3)a(t.children[p+2],t.children[p]+e+1)}for(var c=0;c<t.length;c+=3)-1==t[c+1]&&a(t[c+2],e[c]+i+1);return n}(a,t,e||[],n,o,i,s),r,0,s);e=b.local;for(var k=0;k<a.length;k+=3)a[k+1]<0&&(a.splice(k,3),k-=3);for(var x=0,S=0;x<b.children.length;x+=3){for(var M=b.children[x];S<a.length&&a[S]<M;)S+=3;a.splice(S,0,b.children[x],b.children[x+1],b.children[x+2])}}return new oo(e&&e.sort(lo),a)}(this.children,i,t,e,n,r,o):i?new oo(i.sort(lo)):io},oo.prototype.add=function(t,e){return e.length?this==io?oo.create(t,e):this.addInner(t,e,0):this},oo.prototype.addInner=function(t,e,n){var r,o=this,i=0;t.forEach((function(t,s){var a,c=s+n;if(a=co(e,t,c)){for(r||(r=o.children.slice());i<r.length&&r[i]<s;)i+=3;r[i]==s?r[i+2]=r[i+2].addInner(t,a,c+1):r.splice(i,0,s,s+t.nodeSize,ho(a,t,c+1,ro)),i+=3}}));var s=ao(i?po(e):e,-n);return new oo(s.length?this.local.concat(s).sort(lo):this.local,r||this.children)},oo.prototype.remove=function(t){return 0==t.length||this==io?this:this.removeInner(t,0)},oo.prototype.removeInner=function(t,e){for(var n=this.children,r=this.local,o=0;o<n.length;o+=3){for(var i=void 0,s=n[o]+e,a=n[o+1]+e,c=0,p=void 0;c<t.length;c++)(p=t[c])&&p.from>s&&p.to<a&&(t[c]=null,(i||(i=[])).push(p));if(i){n==this.children&&(n=this.children.slice());var h=n[o+2].removeInner(i,s+1);h!=io?n[o+2]=h:(n.splice(o,3),o-=3)}}if(r.length)for(var l=0,u=void 0;l<t.length;l++)if(u=t[l])for(var f=0;f<r.length;f++)r[f].type.eq(u.type)&&(r==this.local&&(r=this.local.slice()),r.splice(f--,1));return n==this.children&&r==this.local?this:r.length||n.length?new oo(r,n):io},oo.prototype.forChild=function(t,e){if(this==io)return this;if(e.isLeaf)return oo.empty;for(var n,r,o=0;o<this.children.length;o+=3)if(this.children[o]>=t){this.children[o]==t&&(n=this.children[o+2]);break}for(var i=t+1,s=i+e.content.size,a=0;a<this.local.length;a++){var c=this.local[a];if(c.from<s&&c.to>i&&c.type instanceof Xr){var p=Math.max(i,c.from)-i,h=Math.min(s,c.to)-i;p<h&&(r||(r=[])).push(c.copy(p,h))}}if(r){var l=new oo(r.sort(lo));return n?new so([l,n]):l}return n||io},oo.prototype.eq=function(t){if(this==t)return!0;if(!(t instanceof oo)||this.local.length!=t.local.length||this.children.length!=t.children.length)return!1;for(var e=0;e<this.local.length;e++)if(!this.local[e].eq(t.local[e]))return!1;for(var n=0;n<this.children.length;n+=3)if(this.children[n]!=t.children[n]||this.children[n+1]!=t.children[n+1]||!this.children[n+2].eq(t.children[n+2]))return!1;return!0},oo.prototype.locals=function(t){return uo(this.localsInner(t))},oo.prototype.localsInner=function(t){if(this==io)return no;if(t.inlineContent||!this.local.some(Xr.is))return this.local;for(var e=[],n=0;n<this.local.length;n++)this.local[n].type instanceof Xr||e.push(this.local[n]);return e};var io=new oo;oo.empty=io,oo.removeOverlap=uo;var so=function(t){this.members=t};function ao(t,e){if(!e||!t.length)return t;for(var n=[],r=0;r<t.length;r++){var o=t[r];n.push(new to(o.from+e,o.to+e,o.type))}return n}function co(t,e,n){if(e.isLeaf)return null;for(var r=n+e.nodeSize,o=null,i=0,s=void 0;i<t.length;i++)(s=t[i])&&s.from>n&&s.to<r&&((o||(o=[])).push(s),t[i]=null);return o}function po(t){for(var e=[],n=0;n<t.length;n++)null!=t[n]&&e.push(t[n]);return e}function ho(t,e,n,r){var o=[],i=!1;e.forEach((function(e,s){var a=co(t,e,s+n);if(a){i=!0;var c=ho(a,e,n+s+1,r);c!=io&&o.push(s,s+e.nodeSize,c)}}));for(var s=ao(i?po(t):t,-n).sort(lo),a=0;a<s.length;a++)s[a].type.valid(e,s[a])||(r.onRemove&&r.onRemove(s[a].spec),s.splice(a--,1));return s.length||o.length?new oo(s,o):io}function lo(t,e){return t.from-e.from||t.to-e.to}function uo(t){for(var e=t,n=0;n<e.length-1;n++){var r=e[n];if(r.from!=r.to)for(var o=n+1;o<e.length;o++){var i=e[o];if(i.from!=r.from){i.from<r.to&&(e==t&&(e=t.slice()),e[n]=r.copy(r.from,i.from),fo(e,o,r.copy(i.from,r.to)));break}i.to!=r.to&&(e==t&&(e=t.slice()),e[o]=i.copy(i.from,r.to),fo(e,o+1,i.copy(r.to,i.to)))}}return e}function fo(t,e,n){for(;e<t.length&&lo(n,t[e])>0;)e++;t.splice(e,0,n)}function mo(t){var e=[];return t.someProp("decorations",(function(n){var r=n(t.state);r&&r!=io&&e.push(r)})),t.cursorWrapper&&e.push(oo.create(t.state.doc,[t.cursorWrapper.deco])),so.from(e)}so.prototype.forChild=function(t,e){if(e.isLeaf)return oo.empty;for(var n=[],r=0;r<this.members.length;r++){var o=this.members[r].forChild(t,e);o!=io&&(o instanceof so?n=n.concat(o.members):n.push(o))}return so.from(n)},so.prototype.eq=function(t){if(!(t instanceof so)||t.members.length!=this.members.length)return!1;for(var e=0;e<this.members.length;e++)if(!this.members[e].eq(t.members[e]))return!1;return!0},so.prototype.locals=function(t){for(var e,n=!0,r=0;r<this.members.length;r++){var o=this.members[r].localsInner(t);if(o.length)if(e){n&&(e=e.slice(),n=!1);for(var i=0;i<o.length;i++)e.push(o[i])}else e=o}return e?uo(n?e:e.sort(lo)):no},so.from=function(t){switch(t.length){case 0:return io;case 1:return t[0];default:return new so(t)}};var vo=function(t,e){this._props=e,this.state=e.state,this.dispatch=this.dispatch.bind(this),this._root=null,this.focused=!1,this.dom=t&&t.mount||document.createElement("div"),t&&(t.appendChild?t.appendChild(this.dom):t.apply?t(this.dom):t.mount&&(this.mounted=!0)),this.editable=bo(this),this.markCursor=null,this.cursorWrapper=null,wo(this),this.nodeViews=ko(this),this.docView=Tn(this.state.doc,yo(this),mo(this),this.dom,this),this.lastSelectedViewDesc=null,this.dragging=null,function(t){t.shiftKey=!1,t.mouseDown=null,t.lastKeyCode=null,t.lastKeyCodeTime=0,t.lastClick={time:0,x:0,y:0,type:""},t.lastSelectionOrigin=null,t.lastSelectionTime=0,t.lastIOSEnter=0,t.composing=!1,t.composingTimeout=null,t.compositionNodes=[],t.compositionEndedAt=-2e8,t.domObserver=new Or(t,(function(e,n,r,o){return ur(t,e,n,r,o)})),t.domObserver.start(),t.domChangeCount=0,t.eventHandlers=Object.create(null);var e=function(e){var n=Tr[e];t.dom.addEventListener(e,t.eventHandlers[e]=function(e){!function(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(var n=e.target;n!=t.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(e))return!1;return!0}(t,e)||Ar(t,e)||!t.editable&&e.type in Dr||n(t,e)})};for(var n in Tr)e(n);$e.safari&&t.dom.addEventListener("input",(function(){return null})),Er(t)}(this),this.pluginViews=[],this.updatePluginViews()},go={props:{configurable:!0},root:{configurable:!0}};function yo(t){var e=Object.create(null);return e.class="ProseMirror",e.contenteditable=String(t.editable),t.someProp("attributes",(function(n){if("function"==typeof n&&(n=n(t.state)),n)for(var r in n)"class"==r?e.class+=" "+n[r]:e[r]||"contenteditable"==r||"nodeName"==r||(e[r]=String(n[r]))})),[to.node(0,t.state.doc.content.size,e)]}function wo(t){var e=t.state.selection,n=e.$head,r=e.$anchor,o=e.visible;if(t.markCursor){var i=document.createElement("img");i.setAttribute("mark-placeholder","true"),t.cursorWrapper={dom:i,deco:to.widget(n.pos,i,{raw:!0,marks:t.markCursor})}}else if(o||n.pos!=r.pos)t.cursorWrapper=null;else{var s;!t.cursorWrapper||t.cursorWrapper.dom.childNodes.length?((s=document.createElement("div")).style.position="absolute",s.style.left="-100000px"):t.cursorWrapper.deco.pos!=n.pos&&(s=t.cursorWrapper.dom),s&&(t.cursorWrapper={dom:s,deco:to.widget(n.pos,s,{raw:!0})})}}function bo(t){return!t.someProp("editable",(function(e){return!1===e(t.state)}))}function ko(t){var e={};return t.someProp("nodeViews",(function(t){for(var n in t)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=t[n])})),e}go.props.get=function(){if(this._props.state!=this.state){var t=this._props;for(var e in this._props={},t)this._props[e]=t[e];this._props.state=this.state}return this._props},vo.prototype.update=function(t){t.handleDOMEvents!=this._props.handleDOMEvents&&Er(this),this._props=t,this.updateStateInner(t.state,!0)},vo.prototype.setProps=function(t){var e={};for(var n in this._props)e[n]=this._props[n];for(var r in e.state=this.state,t)e[r]=t[r];this.update(e)},vo.prototype.updateState=function(t){this.updateStateInner(t,this.state.plugins!=t.plugins)},vo.prototype.updateStateInner=function(t,e){var n=this,r=this.state,o=!1;if(this.state=t,e){var i=ko(this);(function(t,e){var n=0,r=0;for(var o in t){if(t[o]!=e[o])return!0;n++}for(var i in e)r++;return n!=r})(i,this.nodeViews)&&(this.nodeViews=i,o=!0),Er(this)}this.editable=bo(this),wo(this);var s,a,c,p,h,l,u,f,d,m,v,g=mo(this),y=yo(this),w=e?"reset":t.scrollToSelection>r.scrollToSelection?"to selection":"preserve",b=o||!this.docView.matchesNode(t.doc,y,g),k=b||!t.selection.eq(r.selection),x="preserve"==w&&k&&null==this.dom.style.overflowAnchor&&function(t){for(var e,n,r=t.dom.getBoundingClientRect(),o=Math.max(0,r.top),i=(r.left+r.right)/2,s=o+1;s<Math.min(innerHeight,r.bottom);s+=5){var a=t.root.elementFromPoint(i,s);if(a!=t.dom&&t.dom.contains(a)){var c=a.getBoundingClientRect();if(c.top>=o-20){e=a,n=c.top;break}}}return{refDOM:e,refTop:n,stack:on(t.dom)}}(this);if(k){this.domObserver.stop();var S=b&&($e.ie||$e.chrome)&&!r.selection.empty&&!t.selection.empty&&(p=r.selection,h=t.selection,l=Math.min(p.$anchor.sharedDepth(p.head),h.$anchor.sharedDepth(h.head)),p.$anchor.node(l)!=h.$anchor.node(l));b&&(!o&&this.docView.update(t.doc,y,g,this)||(this.docView.destroy(),this.docView=Tn(t.doc,y,g,this.dom,this))),S||!(this.mouseDown&&this.domObserver.currentSelection.eq(this.root.getSelection())&&(s=this,a=s.docView.domFromPos(s.state.selection.anchor),c=s.root.getSelection(),Ue(a.node,a.offset,c.anchorNode,c.anchorOffset)))?nr(this,S):(ar(this,t.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(r),"reset"==w)this.dom.scrollTop=0;else if("to selection"==w){var M=this.root.getSelection().focusNode;this.someProp("handleScrollToSelection",(function(t){return t(n)}))||(t.selection instanceof ke?rn(this,this.docView.domAfterPos(t.selection.from).getBoundingClientRect(),M):rn(this,this.coordsAtPos(t.selection.head),M))}else x&&(f=(u=x).refDOM,d=u.refTop,m=u.stack,v=f?f.getBoundingClientRect().top:0,sn(m,0==v?0:v-d))},vo.prototype.destroyPluginViews=function(){for(var t;t=this.pluginViews.pop();)t.destroy&&t.destroy()},vo.prototype.updatePluginViews=function(t){if(t&&t.plugins==this.state.plugins)for(var e=0;e<this.pluginViews.length;e++){var n=this.pluginViews[e];n.update&&n.update(this,t)}else{this.destroyPluginViews();for(var r=0;r<this.state.plugins.length;r++){var o=this.state.plugins[r];o.spec.view&&this.pluginViews.push(o.spec.view(this))}}},vo.prototype.someProp=function(t,e){var n,r=this._props&&this._props[t];if(null!=r&&(n=e?e(r):r))return n;var o=this.state.plugins;if(o)for(var i=0;i<o.length;i++){var s=o[i].props[t];if(null!=s&&(n=e?e(s):s))return n}},vo.prototype.hasFocus=function(){return this.root.activeElement==this.dom},vo.prototype.focus=function(){this.domObserver.stop(),this.editable&&function(t){if(t.setActive)return t.setActive();if(an)return t.focus(an);var e=on(t);t.focus(null==an?{get preventScroll(){return an={preventScroll:!0},!0}}:void 0),an||(an=!1,sn(e,0))}(this.dom),nr(this),this.domObserver.start()},go.root.get=function(){var t=this._root;if(null==t)for(var e=this.dom.parentNode;e;e=e.parentNode)if(9==e.nodeType||11==e.nodeType&&e.host)return e.getSelection||(Object.getPrototypeOf(e).getSelection=function(){return document.getSelection()}),this._root=e;return t||document},vo.prototype.posAtCoords=function(t){return hn(this,t)},vo.prototype.coordsAtPos=function(t){return un(this,t)},vo.prototype.domAtPos=function(t){return this.docView.domFromPos(t)},vo.prototype.nodeDOM=function(t){var e=this.docView.descAt(t);return e?e.nodeDOM:null},vo.prototype.posAtDOM=function(t,e,n){void 0===n&&(n=-1);var r=this.docView.posFromDOM(t,e,n);if(null==r)throw new RangeError("DOM position not inside the editor");return r},vo.prototype.endOfTextblock=function(t,e){return wn(this,e||this.state,t)},vo.prototype.destroy=function(){this.docView&&(!function(t){for(var e in t.domObserver.stop(),t.eventHandlers)t.dom.removeEventListener(e,t.eventHandlers[e]);clearTimeout(t.composingTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],mo(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)},vo.prototype.dispatchEvent=function(t){return function(t,e){Ar(t,e)||!Tr[e.type]||!t.editable&&e.type in Dr||Tr[e.type](t,e)}(this,t)},vo.prototype.dispatch=function(t){var e=this._props.dispatchTransaction;e?e.call(this,t):this.updateState(this.state.apply(t))},Object.defineProperties(vo.prototype,go);var xo=function(){};xo.prototype.append=function(t){return t.length?(t=xo.from(t),!this.length&&t||t.length<200&&this.leafAppend(t)||this.length<200&&t.leafPrepend(this)||this.appendInner(t)):this},xo.prototype.prepend=function(t){return t.length?xo.from(t).append(this):this},xo.prototype.appendInner=function(t){return new Mo(this,t)},xo.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.length),t>=e?xo.empty:this.sliceInner(Math.max(0,t),Math.min(this.length,e))},xo.prototype.get=function(t){if(!(t<0||t>=this.length))return this.getInner(t)},xo.prototype.forEach=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=this.length),e<=n?this.forEachInner(t,e,n,0):this.forEachInvertedInner(t,e,n,0)},xo.prototype.map=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=this.length);var r=[];return this.forEach((function(e,n){return r.push(t(e,n))}),e,n),r},xo.from=function(t){return t instanceof xo?t:t&&t.length?new So(t):xo.empty};var So=function(t){function e(e){t.call(this),this.values=e}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={length:{configurable:!0},depth:{configurable:!0}};return e.prototype.flatten=function(){return this.values},e.prototype.sliceInner=function(t,n){return 0==t&&n==this.length?this:new e(this.values.slice(t,n))},e.prototype.getInner=function(t){return this.values[t]},e.prototype.forEachInner=function(t,e,n,r){for(var o=e;o<n;o++)if(!1===t(this.values[o],r+o))return!1},e.prototype.forEachInvertedInner=function(t,e,n,r){for(var o=e-1;o>=n;o--)if(!1===t(this.values[o],r+o))return!1},e.prototype.leafAppend=function(t){if(this.length+t.length<=200)return new e(this.values.concat(t.flatten()))},e.prototype.leafPrepend=function(t){if(this.length+t.length<=200)return new e(t.flatten().concat(this.values))},n.length.get=function(){return this.values.length},n.depth.get=function(){return 0},Object.defineProperties(e.prototype,n),e}(xo);xo.empty=new So([]);var Mo=function(t){function e(e,n){t.call(this),this.left=e,this.right=n,this.length=e.length+n.length,this.depth=Math.max(e.depth,n.depth)+1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.flatten=function(){return this.left.flatten().concat(this.right.flatten())},e.prototype.getInner=function(t){return t<this.left.length?this.left.get(t):this.right.get(t-this.left.length)},e.prototype.forEachInner=function(t,e,n,r){var o=this.left.length;return!(e<o&&!1===this.left.forEachInner(t,e,Math.min(n,o),r))&&(!(n>o&&!1===this.right.forEachInner(t,Math.max(e-o,0),Math.min(this.length,n)-o,r+o))&&void 0)},e.prototype.forEachInvertedInner=function(t,e,n,r){var o=this.left.length;return!(e>o&&!1===this.right.forEachInvertedInner(t,e-o,Math.max(n,o)-o,r+o))&&(!(n<o&&!1===this.left.forEachInvertedInner(t,Math.min(e,o),n,r))&&void 0)},e.prototype.sliceInner=function(t,e){if(0==t&&e==this.length)return this;var n=this.left.length;return e<=n?this.left.slice(t,e):t>=n?this.right.slice(t-n,e-n):this.left.slice(t,n).append(this.right.slice(0,e-n))},e.prototype.leafAppend=function(t){var n=this.right.leafAppend(t);if(n)return new e(this.left,n)},e.prototype.leafPrepend=function(t){var n=this.left.leafPrepend(t);if(n)return new e(n,this.right)},e.prototype.appendInner=function(t){return this.left.depth>=Math.max(this.right.depth,t.depth)+1?new e(this.left,new e(this.right,t)):new e(this,t)},e}(xo),Oo=xo,Co=function(t,e){this.items=t,this.eventCount=e};Co.prototype.popEvent=function(t,e){var n=this;if(0==this.eventCount)return null;for(var r,o,i=this.items.length;;i--){if(this.items.get(i-1).selection){--i;break}}e&&(r=this.remapping(i,this.items.length),o=r.maps.length);var s,a,c=t.tr,p=[],h=[];return this.items.forEach((function(t,e){if(!t.step)return r||(r=n.remapping(i,e+1),o=r.maps.length),o--,void h.push(t);if(r){h.push(new To(t.map));var l,u=t.step.map(r.slice(o));u&&c.maybeStep(u).doc&&(l=c.mapping.maps[c.mapping.maps.length-1],p.push(new To(l,null,null,p.length+h.length))),o--,l&&r.appendMap(l,o)}else c.maybeStep(t.step);return t.selection?(s=r?t.selection.map(r.slice(o)):t.selection,a=new Co(n.items.slice(0,i).append(h.reverse().concat(p)),n.eventCount-1),!1):void 0}),this.items.length,0),{remaining:a,transform:c,selection:s}},Co.prototype.addTransform=function(t,e,n,r){for(var o=[],i=this.eventCount,s=this.items,a=!r&&s.length?s.get(s.length-1):null,c=0;c<t.steps.length;c++){var p,h=t.steps[c].invert(t.docs[c]),l=new To(t.mapping.maps[c],h,e);(p=a&&a.merge(l))&&(l=p,c?o.pop():s=s.slice(0,s.length-1)),o.push(l),e&&(i++,e=null),r||(a=l)}var u,f,d,m=i-n.depth;return m>No&&(f=m,(u=s).forEach((function(t,e){if(t.selection&&0==f--)return d=e,!1})),s=u.slice(d),i-=m),new Co(s.append(o),i)},Co.prototype.remapping=function(t,e){var n=new Ft;return this.items.forEach((function(e,r){var o=null!=e.mirrorOffset&&r-e.mirrorOffset>=t?n.maps.length-e.mirrorOffset:null;n.appendMap(e.map,o)}),t,e),n},Co.prototype.addMaps=function(t){return 0==this.eventCount?this:new Co(this.items.append(t.map((function(t){return new To(t)}))),this.eventCount)},Co.prototype.rebased=function(t,e){if(!this.eventCount)return this;var n=[],r=Math.max(0,this.items.length-e),o=t.mapping,i=t.steps.length,s=this.eventCount;this.items.forEach((function(t){t.selection&&s--}),r);var a=e;this.items.forEach((function(e){var r=o.getMirror(--a);if(null!=r){i=Math.min(i,r);var c=o.maps[r];if(e.step){var p=t.steps[r].invert(t.docs[r]),h=e.selection&&e.selection.map(o.slice(a+1,r));h&&s++,n.push(new To(c,p,h))}else n.push(new To(c))}}),r);for(var c=[],p=e;p<i;p++)c.push(new To(o.maps[p]));var h=this.items.slice(0,r).append(c).append(n),l=new Co(h,s);return l.emptyItemCount()>500&&(l=l.compress(this.items.length-n.length)),l},Co.prototype.emptyItemCount=function(){var t=0;return this.items.forEach((function(e){e.step||t++})),t},Co.prototype.compress=function(t){void 0===t&&(t=this.items.length);var e=this.remapping(0,t),n=e.maps.length,r=[],o=0;return this.items.forEach((function(i,s){if(s>=t)r.push(i),i.selection&&o++;else if(i.step){var a=i.step.map(e.slice(n)),c=a&&a.getMap();if(n--,c&&e.appendMap(c,n),a){var p=i.selection&&i.selection.map(e.slice(n));p&&o++;var h,l=new To(c.invert(),a,p),u=r.length-1;(h=r.length&&r[u].merge(l))?r[u]=h:r.push(l)}}else i.map&&n--}),this.items.length,0),new Co(Oo.from(r.reverse()),o)},Co.empty=new Co(Oo.empty,0);var To=function(t,e,n,r){this.map=t,this.step=e,this.selection=n,this.mirrorOffset=r};To.prototype.merge=function(t){if(this.step&&t.step&&!t.selection){var e=t.step.merge(this.step);if(e)return new To(e.getMap().invert(),e,this.selection)}};var Do=function(t,e,n,r){this.done=t,this.undone=e,this.prevRanges=n,this.prevTime=r},No=20;function Eo(t){var e=[];return t.forEach((function(t,n,r,o){return e.push(r,o)})),e}function Ao(t,e){if(!t)return null;for(var n=[],r=0;r<t.length;r+=2){var o=e.map(t[r],1),i=e.map(t[r+1],-1);o<=i&&n.push(o,i)}return n}function Io(t,e,n,r){var o=Po(e),i=_o.get(e).spec.config,s=(r?t.undone:t.done).popEvent(e,o);if(s){var a=s.selection.resolve(s.transform.doc),c=(r?t.done:t.undone).addTransform(s.transform,e.selection.getBookmark(),i,o),p=new Do(r?c:s.remaining,r?s.remaining:c,null,0);n(s.transform.setSelection(a).setMeta(_o,{redo:r,historyState:p}).scrollIntoView())}}var zo=!1,Ro=null;function Po(t){var e=t.plugins;if(Ro!=e){zo=!1,Ro=e;for(var n=0;n<e.length;n++)if(e[n].spec.historyPreserveItems){zo=!0;break}}return zo}var _o=new Ve("history"),Bo=new Ve("closeHistory");function Vo(t){return t={depth:t&&t.depth||100,newGroupDelay:t&&t.newGroupDelay||500},new Pe({key:_o,state:{init:function(){return new Do(Co.empty,Co.empty,null,0)},apply:function(e,n,r){return function(t,e,n,r){var o,i=n.getMeta(_o);if(i)return i.historyState;n.getMeta(Bo)&&(t=new Do(t.done,t.undone,null,0));var s=n.getMeta("appendedTransaction");if(0==n.steps.length)return t;if(s&&s.getMeta(_o))return s.getMeta(_o).redo?new Do(t.done.addTransform(n,null,r,Po(e)),t.undone,Eo(n.mapping.maps[n.steps.length-1]),t.prevTime):new Do(t.done,t.undone.addTransform(n,null,r,Po(e)),null,t.prevTime);if(!1===n.getMeta("addToHistory")||s&&!1===s.getMeta("addToHistory"))return(o=n.getMeta("rebased"))?new Do(t.done.rebased(n,o),t.undone.rebased(n,o),Ao(t.prevRanges,n.mapping),t.prevTime):new Do(t.done.addMaps(n.mapping.maps),t.undone.addMaps(n.mapping.maps),Ao(t.prevRanges,n.mapping),t.prevTime);var a=0==t.prevTime||!s&&(t.prevTime<(n.time||0)-r.newGroupDelay||!function(t,e){if(!e)return!1;if(!t.docChanged)return!0;var n=!1;return t.mapping.maps[0].forEach((function(t,r){for(var o=0;o<e.length;o+=2)t<=e[o+1]&&r>=e[o]&&(n=!0)})),n}(n,t.prevRanges)),c=s?Ao(t.prevRanges,n.mapping):Eo(n.mapping.maps[n.steps.length-1]);return new Do(t.done.addTransform(n,a?e.selection.getBookmark():null,r,Po(e)),Co.empty,c,n.time)}(n,r,e,t)}},config:t})}var $o=function(t,e){var n;this.match=t,this.handler="string"==typeof e?(n=e,function(t,e,r,o){var i=n;if(e[1]){var s=e[0].lastIndexOf(e[1]);i+=e[0].slice(s+e[1].length);var a=(r+=s)-o;a>0&&(i=e[0].slice(s-a,s)+i,r=o)}return t.tr.insertText(i,r,o)}):e};function Fo(t,e,n,r,o,i){if(t.composing)return!1;var s=t.state,a=s.doc.resolve(e);if(a.parent.type.spec.code)return!1;for(var c=a.parent.textBetween(Math.max(0,a.parentOffset-500),a.parentOffset,null,"￼")+r,p=0;p<o.length;p++){var h=o[p].match.exec(c),l=h&&o[p].handler(s,h,e-(h[0].length-r.length),n);if(l)return t.dispatch(l.setMeta(i,{transform:l,from:e,to:n,text:r})),!0}return!1}new $o(/--$/,"—");var Lo=new $o(/\.\.\.$/,"…"),jo=[new $o(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/,"“"),new $o(/"$/,"”"),new $o(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/,"‘"),new $o(/'$/,"’")];var qo=["ol",0],Jo=["ul",0],Ho=["li",0],Wo={attrs:{order:{default:1}},parseDOM:[{tag:"ol",getAttrs:function(t){return{order:t.hasAttribute("start")?+t.getAttribute("start"):1}}}],toDOM:function(t){return 1==t.attrs.order?qo:["ol",{start:t.attrs.order},0]}},Ko={parseDOM:[{tag:"ul"}],toDOM:function(){return Jo}},Uo={parseDOM:[{tag:"li"}],toDOM:function(){return Ho},defining:!0};function Go(t,e){return function(n,r){var o=n.selection,i=o.$from,s=o.$to,a=i.blockRange(s),c=!1,p=a;if(!a)return!1;if(a.depth>=2&&i.node(a.depth-1).type.compatibleContent(t)&&0==a.startIndex){if(0==i.index(a.depth-1))return!1;var h=n.doc.resolve(a.start-2);p=new U(h,h,a.depth),a.endIndex<a.parent.childCount&&(a=new U(i,n.doc.resolve(s.end(a.depth)),a.depth)),c=!0}var l=Zt(p,t,e,a);return!!l&&(r&&r(function(t,e,n,r,o){for(var i=T.empty,s=n.length-1;s>=0;s--)i=T.from(n[s].type.create(n[s].attrs,i));t.step(new Gt(e.start-(r?2:0),e.end,e.start,e.end,new R(i,0,0),n.length,!0));for(var a=0,c=0;c<n.length;c++)n[c].type==o&&(a=c+1);for(var p=n.length-a,h=e.start+n.length-(r?2:0),l=e.parent,u=e.startIndex,f=e.endIndex,d=!0;u<f;u++,d=!1)!d&&ee(t.doc,h,p)&&(t.split(h,p),h+=2*p),h+=l.child(u).nodeSize;return t}(n.tr,a,l,c,t).scrollIntoView()),!0)}}function Qo(t){return function(e,n){var r=e.selection,o=r.$from,i=r.$to,s=o.blockRange(i,(function(e){return e.childCount&&e.firstChild.type==t}));return!!s&&(!n||(o.node(s.depth-1).type==t?function(t,e,n,r){var o=t.tr,i=r.end,s=r.$to.end(r.depth);i<s&&(o.step(new Gt(i-1,s,i,s,new R(T.from(n.create(null,r.parent.copy())),1,0),1,!0)),r=new U(o.doc.resolve(r.$from.pos),o.doc.resolve(s),r.depth));return e(o.lift(r,Xt(r)).scrollIntoView()),!0}(e,n,t,s):function(t,e,n){for(var r=t.tr,o=n.parent,i=n.end,s=n.endIndex-1,a=n.startIndex;s>a;s--)i-=o.child(s).nodeSize,r.delete(i-1,i+1);var c=r.doc.resolve(n.start),p=c.nodeAfter,h=0==n.startIndex,l=n.endIndex==o.childCount,u=c.node(-1),f=c.index(-1);if(!u.canReplace(f+(h?0:1),f+1,p.content.append(l?T.empty:T.from(o))))return!1;var d=c.pos,m=d+p.nodeSize;return r.step(new Gt(d-(h?1:0),m+(l?1:0),d+1,m-1,new R((h?T.empty:T.from(o.copy(T.empty))).append(l?T.empty:T.from(o.copy(T.empty))),h?0:1,l?0:1),h?0:1)),e(r.scrollIntoView()),!0}(e,n,s)))}}var Yo=["p",0],Xo=["blockquote",0],Zo=["hr"],ti=["pre",["code",0]],ei=["br"],ni=["em",0],ri=["strong",0],oi=["code",0],ii={link:{attrs:{href:{},title:{default:null}},inclusive:!1,parseDOM:[{tag:"a[href]",getAttrs:function(t){return{href:t.getAttribute("href"),title:t.getAttribute("title")}}}],toDOM:function(t){var e=t.attrs;return["a",{href:e.href,title:e.title},0]}},em:{parseDOM:[{tag:"i"},{tag:"em"},{style:"font-style=italic"}],toDOM:function(){return ni}},strong:{parseDOM:[{tag:"strong"},{tag:"b",getAttrs:function(t){return"normal"!=t.style.fontWeight&&null}},{style:"font-weight",getAttrs:function(t){return/^(bold(er)?|[5-9]\d{2,})$/.test(t)&&null}}],toDOM:function(){return ri}},code:{parseDOM:[{tag:"code"}],toDOM:function(){return oi}}};new bt({nodes:{doc:{content:"block+"},paragraph:{content:"inline*",group:"block",parseDOM:[{tag:"p"}],toDOM:function(){return Yo}},blockquote:{content:"block+",group:"block",defining:!0,parseDOM:[{tag:"blockquote"}],toDOM:function(){return Xo}},horizontal_rule:{group:"block",parseDOM:[{tag:"hr"}],toDOM:function(){return Zo}},heading:{attrs:{level:{default:1}},content:"inline*",group:"block",defining:!0,parseDOM:[{tag:"h1",attrs:{level:1}},{tag:"h2",attrs:{level:2}},{tag:"h3",attrs:{level:3}},{tag:"h4",attrs:{level:4}},{tag:"h5",attrs:{level:5}},{tag:"h6",attrs:{level:6}}],toDOM:function(t){return["h"+t.attrs.level,0]}},code_block:{content:"text*",marks:"",group:"block",code:!0,defining:!0,parseDOM:[{tag:"pre",preserveWhitespace:"full"}],toDOM:function(){return ti}},text:{group:"inline"},image:{inline:!0,attrs:{src:{},alt:{default:null},title:{default:null}},group:"inline",draggable:!0,parseDOM:[{tag:"img[src]",getAttrs:function(t){return{src:t.getAttribute("src"),title:t.getAttribute("title"),alt:t.getAttribute("alt")}}}],toDOM:function(t){var e=t.attrs;return["img",{src:e.src,alt:e.alt,title:e.title}]}},hard_break:{inline:!0,group:"inline",selectable:!1,parseDOM:[{tag:"br"}],toDOM:function(){return ei}}},marks:ii});const si={content:"inline*",defining:!0,group:"block",toDOM:t=>["h1",{class:"sn-editor"},0],parseDOM:[{tag:"h1"}]},ai={content:"inline*",defining:!0,group:"block",toDOM:t=>["h2",{class:"sn-editor"},0],parseDOM:[{tag:"h2"}]},ci=new bt({nodes:{doc:{content:"block+",toDOM:t=>["main",{class:"sn-editor"},0],parseDOM:[{tag:"main"}]},paragraph:{content:"inline*",group:"block",marks:"_",toDOM:t=>["p",{class:"sn-editor"},0],parseDOM:[{tag:"p"}]},checklist_item:{attrs:{checked:{default:!1}},content:"inline*",defining:!0,group:"block",marks:"_",toDOM:t=>["div",{class:"checklist-item"},["input",Object.assign({type:"checkbox"},t.attrs.checked&&{checked:"true"})],["p",0]],parseDOM:[{contentElement:"p",tag:"div.checklist-item",getAttrs:t=>({checked:!!t.querySelector("input").checked})}]},unordered_list:Object.assign(Object.assign({},Ko),{content:"list_item+",group:"block"}),ordered_list:Object.assign(Object.assign({},Wo),{content:"list_item+",group:"block"}),list_item:Object.assign(Object.assign({},Uo),{content:"paragraph+"}),heading1:si,heading2:ai,text:{group:"inline"}},marks:{link:Object.assign(Object.assign({},ii.link),{inclusive:!1}),em:Object.assign(Object.assign({},ii.em),{inclusive:!1}),strong:Object.assign(Object.assign({},ii.strong),{inclusive:!1}),code:Object.assign(Object.assign({},ii.code),{inclusive:!1})}});function pi(t,e){return new $o(new RegExp(`${t}(.*?)${t}`),(t,n,r,o)=>{const[i,s]=n,{tr:a}=t;if(!s)return;const c=t.doc.resolve(r).marksAcross(t.doc.resolve(o));return a.replaceRangeWith(r,o,ci.text(s,[...c,e.create()]))})}function hi(t,e){return new $o(new RegExp(`^${t}`),(t,n,r,o)=>{const{$from:i}=t.selection;if(i.depth>1)return;const{tr:s}=t;return s.replaceRangeWith(r,o,e.createAndFill()),s.setSelection(ve.near(s.doc.resolve(r))),s})}const li=(ui={rules:[...jo,Lo,(mi=/^# /,vi=ci.nodes.heading2,new $o(mi,(function(t,e,n,r){var o=t.doc.resolve(n),i=gi instanceof Function?gi(e):gi;return o.node(-1).canReplaceWith(o.index(-1),o.indexAfter(-1),vi)?t.tr.delete(n,r).setBlockType(n,n,vi,i):null}))),pi("`",ci.marks.code),pi("\\*\\*",ci.marks.strong),pi("\\*",ci.marks.em),hi("1. ",ci.nodes.ordered_list),hi("- ",ci.nodes.unordered_list)]},fi=ui.rules,di=new Pe({state:{init:function(){return null},apply:function(t,e){var n=t.getMeta(this);return n||(t.selectionSet||t.docChanged?null:e)}},props:{handleTextInput:function(t,e,n,r){return Fo(t,e,n,r,fi,di)},handleDOMEvents:{compositionend:function(t){setTimeout((function(){var e=t.state.selection.$cursor;e&&Fo(t,e.pos,e.pos,"",fi,di)}))}}},isInputRules:!0}));var ui,fi,di,mi,vi,gi;function yi(t,e){return!t.selection.empty&&(e&&e(t.tr.deleteSelection().scrollIntoView()),!0)}function wi(t,e){for(;t;t="start"==e?t.firstChild:t.lastChild)if(t.isTextblock)return!0;return!1}function bi(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){if(t.index(e)>0)return t.doc.resolve(t.before(e+1));if(t.node(e).type.spec.isolating)break}return null}function ki(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){var n=t.node(e);if(t.index(e)+1<n.childCount)return t.doc.resolve(t.after(e+1));if(n.type.spec.isolating)break}return null}function xi(t){for(var e=0;e<t.edgeCount;e++){var n=t.edge(e).type;if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}function Si(t,e){var n=t.selection,r=n.$from,o=n.$to;if(t.selection instanceof ke&&t.selection.node.isBlock)return!(!r.parentOffset||!ee(t.doc,r.pos))&&(e&&e(t.tr.split(r.pos).scrollIntoView()),!0);if(!r.parent.isBlock)return!1;if(e){var i=o.parentOffset==o.parent.content.size,s=t.tr;t.selection instanceof we&&s.deleteSelection();var a=0==r.depth?null:xi(r.node(-1).contentMatchAt(r.indexAfter(-1))),c=i&&a?[{type:a}]:null,p=ee(s.doc,s.mapping.map(r.pos),1,c);c||p||!ee(s.doc,s.mapping.map(r.pos),1,a&&[{type:a}])||(c=[{type:a}],p=!0),p&&(s.split(s.mapping.map(r.pos),1,c),i||r.parentOffset||r.parent.type==a||!r.node(-1).canReplace(r.index(-1),r.indexAfter(-1),T.from(a.create(),r.parent))||s.setNodeMarkup(s.mapping.map(r.before()),a)),e(s.scrollIntoView())}return!0}function Mi(t,e,n){var r,o,i=e.nodeBefore,s=e.nodeAfter;if(i.type.spec.isolating||s.type.spec.isolating)return!1;if(function(t,e,n){var r=e.nodeBefore,o=e.nodeAfter,i=e.index();return!!(r&&o&&r.type.compatibleContent(o.type))&&(!r.content.size&&e.parent.canReplace(i-1,i)?(n&&n(t.tr.delete(e.pos-r.nodeSize,e.pos).scrollIntoView()),!0):!(!e.parent.canReplace(i,i+1)||!o.isTextblock&&!ne(t.doc,e.pos))&&(n&&n(t.tr.clearIncompatible(e.pos,r.type,r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()),!0))}(t,e,n))return!0;if(e.parent.canReplace(e.index(),e.index()+1)&&(r=(o=i.contentMatchAt(i.childCount)).findWrapping(s.type))&&o.matchType(r[0]||s.type).validEnd){if(n){for(var a=e.pos+s.nodeSize,c=T.empty,p=r.length-1;p>=0;p--)c=T.from(r[p].create(null,c));c=T.from(i.copy(c));var h=t.tr.step(new Gt(e.pos-1,a,e.pos,a,new R(c,1,0),r.length,!0)),l=a+2*r.length;ne(h.doc,l)&&h.join(l),n(h.scrollIntoView())}return!0}var u=ve.findFrom(e,1),f=u&&u.$from.blockRange(u.$to),d=f&&Xt(f);return null!=d&&d>=e.depth&&(n&&n(t.tr.lift(f,d).scrollIntoView()),!0)}function Oi(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return function(e,n,r){for(var o=0;o<t.length;o++)if(t[o](e,n,r))return!0;return!1}}var Ci=Oi(yi,(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("backward",t):r.parentOffset>0))return!1;var o=bi(r);if(!o){var i=r.blockRange(),s=i&&Xt(i);return null!=s&&(e&&e(t.tr.lift(i,s).scrollIntoView()),!0)}var a=o.nodeBefore;if(!a.type.spec.isolating&&Mi(t,o,e))return!0;if(0==r.parent.content.size&&(wi(a,"end")||ke.isSelectable(a))){if(e){var c=t.tr.deleteRange(r.before(),r.after());c.setSelection(wi(a,"end")?ve.findFrom(c.doc.resolve(c.mapping.map(o.pos,-1)),-1):ke.create(c.doc,o.pos-a.nodeSize)),e(c.scrollIntoView())}return!0}return!(!a.isAtom||o.depth!=r.depth-1)&&(e&&e(t.tr.delete(o.pos-a.nodeSize,o.pos).scrollIntoView()),!0)}),(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("backward",t):r.parentOffset>0))return!1;var o=bi(r),i=o&&o.nodeBefore;return!(!i||!ke.isSelectable(i))&&(e&&e(t.tr.setSelection(ke.create(t.doc,o.pos-i.nodeSize)).scrollIntoView()),!0)})),Ti=Oi(yi,(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=ki(r);if(!o)return!1;var i=o.nodeAfter;if(Mi(t,o,e))return!0;if(0==r.parent.content.size&&(wi(i,"start")||ke.isSelectable(i))){if(e){var s=t.tr.deleteRange(r.before(),r.after());s.setSelection(wi(i,"start")?ve.findFrom(s.doc.resolve(s.mapping.map(o.pos)),1):ke.create(s.doc,s.mapping.map(o.pos))),e(s.scrollIntoView())}return!0}return!(!i.isAtom||o.depth!=r.depth-1)&&(e&&e(t.tr.delete(o.pos,o.pos+i.nodeSize).scrollIntoView()),!0)}),(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=ki(r),i=o&&o.nodeAfter;return!(!i||!ke.isSelectable(i))&&(e&&e(t.tr.setSelection(ke.create(t.doc,o.pos)).scrollIntoView()),!0)})),Di={Enter:Oi((function(t,e){var n=t.selection,r=n.$head,o=n.$anchor;return!(!r.parent.type.spec.code||!r.sameParent(o))&&(e&&e(t.tr.insertText("\n").scrollIntoView()),!0)}),(function(t,e){var n=t.selection,r=n.$from,o=n.$to;if(r.parent.inlineContent||o.parent.inlineContent)return!1;var i=xi(r.parent.contentMatchAt(o.indexAfter()));if(!i||!i.isTextblock)return!1;if(e){var s=(!r.parentOffset&&o.index()<o.parent.childCount?r:o).pos,a=t.tr.insert(s,i.createAndFill());a.setSelection(we.create(a.doc,s+1)),e(a.scrollIntoView())}return!0}),(function(t,e){var n=t.selection.$cursor;if(!n||n.parent.content.size)return!1;if(n.depth>1&&n.after()!=n.end(-1)){var r=n.before();if(ee(t.doc,r))return e&&e(t.tr.split(r).scrollIntoView()),!0}var o=n.blockRange(),i=o&&Xt(o);return null!=i&&(e&&e(t.tr.lift(o,i).scrollIntoView()),!0)}),Si),"Mod-Enter":function(t,e){var n=t.selection,r=n.$head,o=n.$anchor;if(!r.parent.type.spec.code||!r.sameParent(o))return!1;var i=r.node(-1),s=r.indexAfter(-1),a=xi(i.contentMatchAt(s));if(!i.canReplaceWith(s,s,a))return!1;if(e){var c=r.after(),p=t.tr.replaceWith(c,c,a.createAndFill());p.setSelection(ve.near(p.doc.resolve(c),1)),e(p.scrollIntoView())}return!0},Backspace:Ci,"Mod-Backspace":Ci,Delete:Ti,"Mod-Delete":Ti,"Mod-a":function(t,e){return e&&e(t.tr.setSelection(new Se(t.doc))),!0}},Ni={"Ctrl-h":Di.Backspace,"Alt-Backspace":Di["Mod-Backspace"],"Ctrl-d":Di.Delete,"Ctrl-Alt-Backspace":Di["Mod-Delete"],"Alt-Delete":Di["Mod-Delete"],"Alt-d":Di["Mod-Delete"]};for(var Ei in Di)Ni[Ei]=Di[Ei];var Ai=("undefined"!=typeof navigator?/Mac/.test(navigator.platform):"undefined"!=typeof os&&"darwin"==os.platform())?Ni:Di;class Ii extends Pe{constructor(t,e){super({view:n=>(this.view=n,this.modalEl=e,t.addEventListener("click",this.handleToolbarClick),{destroy(){t.removeEventListener("click",this.handleToolbarClick)},update:(e,n)=>{const r=this.getSelectedFormatAttrs(n);r&&r.forEach(e=>{const n=t.querySelector(`[data-format=${e}]`);n&&n.classList.remove("selected")});const o=this.getSelectedFormatAttrs(e.state);o&&o.forEach(e=>{const n=t.querySelector(`[data-format=${e}]`);n&&n.classList.add("selected")})}}),props:{handleKeyDown:(t,e)=>{const n=84===e.which,r=e.ctrlKey;if(n&&r)return this.toggleChecklistItem(),!0;const o=55===e.which,i=e.metaKey;if(o&&i)return this.toggleList(ci.nodes.unordered_list,ci.nodes.list_item),!0;if(85===e.which&&r)return this.toggleList(ci.nodes.unordered_list,ci.nodes.list_item),!0;if(79===e.which&&r)return this.toggleList(ci.nodes.ordered_list,ci.nodes.list_item),!0;if(187===e.which&&r)return this.promoteHeading(this.view.state,this.view.dispatch),!0;if(74===e.which&&r)return this.swapTextBlock(ci.nodes.paragraph),!0;const s=32===e.which;if(r&&s)return function(t,e){const{$from:n,$to:r}=t.selection,o=n.blockRange(r);let i=!1;for(let t=o.startIndex,e=o.parent.child(t);t<o.endIndex;t+=1){if(e.type!==ci.nodes.checklist_item)return!1;if(e.attrs.checked){i=!0;break}}if(!e)return!0;const{tr:s}=t;for(let t=o.startIndex,e=o.parent.child(t),n=o.start;t<o.endIndex;t+=1)s.setNodeMarkup(n,void 0,{checked:!i}),n+=e.nodeSize;return e(s),!0}(this.view.state,this.view.dispatch);const a=90===e.which;if(i&&a)return c=this.view.state,p=this.view.dispatch,!(!(h=_o.getState(c))||0==h.done.eventCount||(p&&Io(h,c,p,!1),0));var c,p,h;const l=89===e.which;if(i&&l)return function(t,e){var n=_o.getState(t);return!(!n||0==n.undone.eventCount)&&(e&&Io(n,t,e,!0),!0)}(this.view.state,this.view.dispatch);const u=73===e.which;if(i&&u)return this.toggleMark(ci.marks.em),!0;const f=66===e.which;if(i&&f)return this.toggleMark(ci.marks.strong),!0;const d=222===e.which;if(i&&d)return this.toggleMark(ci.marks.code),!0;const m=75===e.which;return!(!i||!m)&&(this.activateLinkModal(this.view.state,this.view.dispatch),!0)}}}),this.swapTextBlock=t=>{let{dispatch:e,state:n}=this.view,{tr:r}=n;const{$from:o,$to:i,from:s,to:a}=n.selection;t!==ci.nodes.unordered_list&&Qo(ci.nodes.list_item)(n,e),({dispatch:e,state:n}=this.view),({tr:r}=n),r.setBlockType(s,a,t),e(r),this.view.focus()},this.promoteHeading=(t,e)=>{const{selection:n}=t;if(!n.empty)return;const{$from:{parent:{type:r}}}=n;let o;o=r===ci.nodes.heading2?ci.nodes.heading1:r===ci.nodes.heading1?ci.nodes.paragraph:ci.nodes.heading2,this.swapTextBlock(o)},this.toggleList=(t,e)=>{const{state:{selection:{$from:n,$to:r},tr:o}}=this.view;if(n.blockRange(r,e=>e.type===t)){const{dispatch:t,state:n}=this.view;Qo(e)(n,t)}else{const e=n.blockRange(r);for(let n=e.startIndex;n<e.endIndex;n+=1)if(e.parent.child(n).type===t)return;this.swapTextBlock(ci.nodes.paragraph);const{dispatch:o,state:i}=this.view;Go(t)(i,o)}},this.toggleChecklistItem=()=>{const{dispatch:t,state:e}=this.view,{doc:n,tr:r}=e,{$from:o,$to:i}=e.selection,s=o.blockRange(i);for(let t=s.startIndex;t<s.endIndex;t+=1)if(s.parent.child(t).type===ci.nodes.checklist_item)return void this.swapTextBlock(ci.nodes.paragraph);this.swapTextBlock(ci.nodes.checklist_item)},this.activateLinkModal=(t,e)=>{const{doc:n,selection:r}=t,{$from:o,$to:i}=r,s=o.marks().find(t=>t.type===ci.marks.link),a=i.marks().find(t=>t.type===ci.marks.link),c=s&&a;if(r.empty&&!c)return!1;if(s!==a)return!1;if(!e)return!0;const p=s;let h,l,u,f;if(p){const r=o.parent.nodeAt(o.parentOffset-o.textOffset);l=o.pos-o.textOffset,h=l+r.nodeSize,u=r.text,f=p.attrs.href;const i=new we(n.resolve(l),n.resolve(h));e(t.tr.setSelection(i))}else h=i.pos,l=o.pos,u=t.doc.textBetween(o.pos,i.pos),f="";new Ii.LinkModal(this.modalEl,{onConfirm:({text:t,url:e})=>{const n=ci.marks.link.create({href:e}),r=ci.text(t,[n]);this.view.dispatch(this.view.state.tr.replaceSelectionWith(r,!1))},text:u,url:f});return!0},this.toggleMark=t=>{var e,n;(e=t,function(t,r){var o=t.selection,i=o.empty,s=o.$cursor,a=o.ranges;if(i&&!s||!function(t,e,n){for(var r=function(r){var o=e[r],i=o.$from,s=o.$to,a=0==i.depth&&t.type.allowsMarkType(n);if(t.nodesBetween(i.pos,s.pos,(function(t){if(a)return!1;a=t.inlineContent&&t.type.allowsMarkType(n)})),a)return{v:!0}},o=0;o<e.length;o++){var i=r(o);if(i)return i.v}return!1}(t.doc,a,e))return!1;if(r)if(s)e.isInSet(t.storedMarks||s.marks())?r(t.tr.removeStoredMark(e)):r(t.tr.addStoredMark(e.create(n)));else{for(var c=!1,p=t.tr,h=0;!c&&h<a.length;h++){var l=a[h],u=l.$from,f=l.$to;c=t.doc.rangeHasMark(u.pos,f.pos,e)}for(var d=0;d<a.length;d++){var m=a[d],v=m.$from,g=m.$to;c?p.removeMark(v.pos,g.pos,e):p.addMark(v.pos,g.pos,e.create(n))}r(p.scrollIntoView())}return!0})(this.view.state,this.view.dispatch),this.view.focus()},this.getSelectedFormatAndMarks=t=>{if(!t.selection)return;const e=[],{$from:n,$to:r,content:o}=t.selection,i=n.blockRange(r,t=>t.type!==ci.nodes.list_item);let s=null;for(let t=i.startIndex;t<i.endIndex;t+=1){const e=i.parent.child(t),n=e.type===ci.nodes.list_item?i.parent.type:e.type;if(null!==s){if(s!==n){s=null;break}}else s=n}e.push(s);const a=n.marksAcross(r);return a&&e.push(...a.map(t=>t.type)),e},this.getSelectedFormatAttrs=t=>{const[e,...n]=this.getSelectedFormatAndMarks(t),r=[];switch(e){case ci.nodes.heading1:case ci.nodes.heading2:r.push("heading");break;case ci.nodes.paragraph:r.push("paragraph");break;case ci.nodes.unordered_list:r.push("unordered_list");break;case ci.nodes.ordered_list:r.push("ordered_list");break;case ci.nodes.checklist_item:r.push("checklist_item");break;default:r.push(null)}return n.forEach(t=>{switch(t){case ci.marks.link:r.push("link");break;case ci.marks.em:r.push("em");break;case ci.marks.strong:r.push("strong");break;case ci.marks.code:r.push("code")}}),r},this.handleToolbarClick=t=>{const e=t.target.closest("[data-format]");e&&this.applyFormat(e.getAttribute("data-format"))},this.applyFormat=t=>{switch(t){case"paragraph":this.swapTextBlock(ci.nodes.paragraph);break;case"heading":this.promoteHeading(this.view.state,this.view.dispatch);break;case"unordered_list":this.toggleList(ci.nodes.unordered_list,ci.nodes.list_item);break;case"ordered_list":this.toggleList(ci.nodes.ordered_list,ci.nodes.list_item);break;case"checklist_item":this.toggleChecklistItem();break;case"strong":case"em":case"code":this.toggleMark(ci.marks[t]);break;case"link":this.activateLinkModal(this.view.state,this.view.dispatch)}}}}Ii.LinkModal=class{constructor(t,{onConfirm:e,text:n,url:r}){this.showCls="active",this.handleConfirm=()=>{this.onConfirm({text:this.textInput.value,url:this.urlInput.value}),this.destroy()},this.handleCancel=()=>{this.destroy()},this.handleGlobalKeydown=t=>{const e=13===t.which;if(document.activeElement===this.textInput||document.activeElement===this.urlInput&&e)return void this.handleConfirm();t.which;27===t.which&&this.handleCancel()},this.destroy=()=>{this.confirmBtn.removeEventListener("click",this.handleConfirm),this.cancelBtn.removeEventListener("click",this.handleCancel),document.removeEventListener("keydown",this.handleGlobalKeydown),this.el.classList.remove(this.showCls)},this.el=t,this.textInput.value=this.text=n,this.urlInput.value=this.url=r,this.urlOpenLink.href=r,this.onConfirm=e,this.el.classList.add(this.showCls),this.confirmBtn.addEventListener("click",this.handleConfirm),this.cancelBtn.addEventListener("click",this.handleCancel),document.addEventListener("keydown",this.handleGlobalKeydown),this.urlInput.focus()}get textInput(){return this.el.querySelector("input#text")}get urlInput(){return this.el.querySelector("input#url")}get urlOpenLink(){return this.el.querySelector("label[for=url] a")}get confirmBtn(){return this.el.querySelector("button#confirm")}get cancelBtn(){return this.el.querySelector("button#cancel")}};var zi="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),Ri=new Uint8Array(16);function Pi(){if(!zi)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return zi(Ri)}for(var _i=[],Bi=0;Bi<256;++Bi)_i[Bi]=(Bi+256).toString(16).substr(1);var Vi=function(t,e){var n=e||0,r=_i;return[r[t[n++]],r[t[n++]],r[t[n++]],r[t[n++]],"-",r[t[n++]],r[t[n++]],"-",r[t[n++]],r[t[n++]],"-",r[t[n++]],r[t[n++]],"-",r[t[n++]],r[t[n++]],r[t[n++]],r[t[n++]],r[t[n++]],r[t[n++]]].join("")};var $i=function(t,e,n){var r=e&&n||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||Pi)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var i=0;i<16;++i)e[r+i]=o[i];return e||Vi(o)},Fi=n(11),Li=n.n(Fi);function ji(t){return t&&t.content&&t.content["com.dylanonelson.sn-editor"]||null}function qi(t){return t?t.uuid:null}class Ji{constructor(){let t;this._item=null,this.shouldCallListeners=(t,e)=>!t.isMetadataUpdate&&(qi(t)!==qi(e)||function(t){const e=ji(t);return e&&e.lastSavedBy?e.lastSavedBy:null}(t)!==this._id),this._id=$i(),this._listeners=[],this._ready=new Promise(e=>{t=e}),this.componentManager=new Li.a([{name:"stream-context-item"}],()=>{this.componentManager.streamContextItem(e=>{console.debug("streamContextItem update:",e);const n=this.shouldCallListeners(e,this._item);this._item=e,n&&this._listeners.forEach(t=>{t(e)}),t()})})}get latestDoc(){return function(t){const e=ji(t);return e&&e.doc?e.doc:null}(this._item)}onUpdate(t){return this._listeners.push(t),()=>{this._listeners=this._listeners.filter(e=>e!==t)}}ready(){return this._ready}saveNote(t){const e=Object.assign(Object.assign({},this._item),{content:Object.assign(Object.assign({},this._item.content),{"com.dylanonelson.sn-editor":{doc:t,lastSavedBy:this._id}})});this.componentManager.saveItemWithPresave(e)}}Ji.SN_ITEM_SAVE_KEY="com.dylanonelson.sn-editor",Ji.itemSelectors={};const Hi=new Ji,Wi={checklist_item(t,e,n){const r=document.createElement("div");r.classList.add("checklist-item");const i=document.createElement("span");i.classList.add("checkbox"),t.attrs.checked?(i.classList.add("is-checked"),i.innerHTML=o.a):i.innerHTML=s.a,i.contentEditable="false";const a=document.createElement("p");r.appendChild(i),r.appendChild(a);const c=t=>{const{relatedTarget:n,target:r}=t;n===i&&r===e.dom&&e.focus()},p=t=>{if(!1===i.contains(t.target))return;const r=i.classList.contains("is-checked"),{tr:o}=e.state,s=n();o.setNodeMarkup(s,void 0,{checked:!r}),e.dispatch(o)};return e.dom.addEventListener("blur",c),e.dom.addEventListener("click",p),{dom:r,contentDOM:a,destroy(){e.dom.removeEventListener("blur",c),e.dom.removeEventListener("click",p)}}}};for(var Ki={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},Ui=Ki,Gi={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:";",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},Qi="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),Yi="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),Xi="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),Zi="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),ts="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),es=Qi&&(Zi||+Qi[1]<57)||Xi&&Zi,ns=0;ns<10;ns++)Ki[48+ns]=Ki[96+ns]=String(ns);for(ns=1;ns<=24;ns++)Ki[ns+111]="F"+ns;for(ns=65;ns<=90;ns++)Ki[ns]=String.fromCharCode(ns+32),Gi[ns]=String.fromCharCode(ns);for(var rs in Ki)Gi.hasOwnProperty(rs)||(Gi[rs]=Ki[rs]);var is=function(t){var e=!(es&&(t.ctrlKey||t.altKey||t.metaKey)||(Yi||ts)&&t.shiftKey&&t.key&&1==t.key.length)&&t.key||(t.shiftKey?Gi:Ki)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e},ss="undefined"!=typeof navigator&&/Mac/.test(navigator.platform);function as(t){var e,n,r,o,i=t.split(/-(?!$)/),s=i[i.length-1];"Space"==s&&(s=" ");for(var a=0;a<i.length-1;a++){var c=i[a];if(/^(cmd|meta|m)$/i.test(c))o=!0;else if(/^a(lt)?$/i.test(c))e=!0;else if(/^(c|ctrl|control)$/i.test(c))n=!0;else if(/^s(hift)?$/i.test(c))r=!0;else{if(!/^mod$/i.test(c))throw new Error("Unrecognized modifier name: "+c);ss?o=!0:n=!0}}return e&&(s="Alt-"+s),n&&(s="Ctrl-"+s),o&&(s="Meta-"+s),r&&(s="Shift-"+s),s}function cs(t,e,n){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==n&&e.shiftKey&&(t="Shift-"+t),t}function ps(t){return new Pe({props:{handleKeyDown:hs(t)}})}function hs(t){var e=function(t){var e=Object.create(null);for(var n in t)e[as(n)]=t[n];return e}(t);return function(t,n){var r,o=is(n),i=1==o.length&&" "!=o,s=e[cs(o,n,!i)];if(s&&s(t.state,t.dispatch,t))return!0;if(i&&(n.shiftKey||n.altKey||n.metaKey)&&(r=Ui[n.keyCode])&&r!=o){var a=e[cs(r,n,!0)];if(a&&a(t.state,t.dispatch,t))return!0}else if(i&&n.shiftKey){var c=e[cs(o,n,!0)];if(c&&c(t.state,t.dispatch,t))return!0}return!1}}const ls=[ps({Enter:(us=ci.nodes.list_item,function(t,e){var n=t.selection,r=n.$from,o=n.$to,i=n.node;if(i&&i.isBlock||r.depth<2||!r.sameParent(o))return!1;var s=r.node(-1);if(s.type!=us)return!1;if(0==r.parent.content.size){if(2==r.depth||r.node(-3).type!=us||r.index(-2)!=r.node(-2).childCount-1)return!1;if(e){for(var a=T.empty,c=r.index(-1)>0,p=r.depth-(c?1:2);p>=r.depth-3;p--)a=T.from(r.node(p).copy(a));a=a.append(T.from(us.createAndFill()));var h=t.tr.replace(r.before(c?null:-1),r.after(-3),new R(a,c?3:2,2));h.setSelection(t.selection.constructor.near(h.doc.resolve(r.pos+(c?3:2)))),e(h.scrollIntoView())}return!0}var l=o.pos==r.end()?s.contentMatchAt(0).defaultType:null,u=t.tr.delete(r.pos,o.pos),f=l&&[null,{type:l}];return!!ee(u.doc,r.pos,2,f)&&(e&&e(u.split(r.pos,2,f).scrollIntoView()),!0)})}),ps({Enter(t,e){const{selection:{$from:n,from:r},tr:o}=t;if(n.parent.type!==ci.nodes.checklist_item)return!1;o.deleteSelection();const i=o.doc.resolve(r);if(2===i.parent.nodeSize){const t=i.pos;return o.replaceWith(t-1,t+1,ci.nodes.paragraph.createAndFill()),e(o),!0}return o.split(r,void 0,[{type:ci.nodes.checklist_item,attrs:{checked:!1}}]),e(o),!0}}),ps(Ai)];var us,fs=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};function ds(){return Hi.latestDoc?ci.nodeFromJSON(Hi.latestDoc):ci.topNodeType.createAndFill()}!function(){fs(this,void 0,void 0,(function*(){yield Hi.ready();const t=window.view=new vo(document.querySelector("#editor"),{state:Ie.create({doc:ds(),plugins:[...ls,new Ii(document.querySelector("#toolbar"),document.querySelector("#link-modal")),new Pe({props:{nodeViews:Wi}}),li,Vo()]}),dispatchTransaction(e){const n=t.state.apply(e);t.updateState(n),Hi.saveNote(n.doc.toJSON())}});Hi.onUpdate(e=>{t.setProps({state:Ie.create({doc:ds(),plugins:t.state.plugins})})})}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,