!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sentMessages=[],this.messageQueue=[],this.loggingEnabled=!1,this.acceptsThemes=!0,this.activeThemes=[],this.initialPermissions=t,this.onReadyCallback=n,this.coallesedSaving=!0,this.coallesedSavingDelay=250,this.registerMessageHandler()}var t,n,a;return t=e,(n=[{key:"registerMessageHandler",value:function(){var e=this,t=function(t){if(e.loggingEnabled&&console.log("Components API Message received:",t.data),!document.referrer||new URL(document.referrer).origin===new URL(t.origin).origin){if(e.origin){if(t.origin!==e.origin)return}else e.origin=t.origin;var n=t.data,i="string"==typeof n?JSON.parse(n):n;e.handleMessage(i)}};document.addEventListener("message",(function(e){t(e)}),!1),window.addEventListener("message",(function(e){t(e)}),!1)}},{key:"handleMessage",value:function(e){if("component-registered"===e.action)this.sessionKey=e.sessionKey,this.componentData=e.componentData,this.onReady(e.data),this.loggingEnabled&&console.log("Component successfully registered with payload:",e);else if("themes"===e.action)this.acceptsThemes&&this.activateThemes(e.data.themes);else if(e.original){var t=this.sentMessages.filter((function(t){return t.messageId===e.original.messageId}))[0];t||alert("This extension is attempting to communicate with Standard Notes, but an error is preventing it from doing so. Please restart this extension and try again."),t.callback&&t.callback(e.data)}}},{key:"onReady",value:function(e){this.environment=e.environment,this.platform=e.platform,this.uuid=e.uuid,this.isMobile="mobile"==this.environment,this.initialPermissions&&this.initialPermissions.length>0&&this.requestPermissions(this.initialPermissions);var t=!0,n=!1,i=void 0;try{for(var a,s=this.messageQueue[Symbol.iterator]();!(t=(a=s.next()).done);t=!0){var o=a.value;this.postMessage(o.action,o.data,o.callback)}}catch(e){n=!0,i=e}finally{try{t||null==s.return||s.return()}finally{if(n)throw i}}this.messageQueue=[],this.loggingEnabled&&console.log("onReadyData",e),this.activateThemes(e.activeThemeUrls||[]),this.onReadyCallback&&this.onReadyCallback()}},{key:"getSelfComponentUUID",value:function(){return this.uuid}},{key:"isRunningInDesktopApplication",value:function(){return"desktop"===this.environment}},{key:"setComponentDataValueForKey",value:function(e,t){this.componentData[e]=t,this.postMessage("set-component-data",{componentData:this.componentData},(function(e){}))}},{key:"clearComponentData",value:function(){this.componentData={},this.postMessage("set-component-data",{componentData:this.componentData},(function(e){}))}},{key:"componentDataValueForKey",value:function(e){return this.componentData[e]}},{key:"postMessage",value:function(e,t,n){if(this.sessionKey){var i={action:e,data:t,messageId:this.generateUUID(),sessionKey:this.sessionKey,api:"component"},a=JSON.parse(JSON.stringify(i));a.callback=n,this.sentMessages.push(a),this.isMobile&&(i=JSON.stringify(i)),this.loggingEnabled&&console.log("Posting message:",i),window.parent.postMessage(i,this.origin)}else this.messageQueue.push({action:e,data:t,callback:n})}},{key:"setSize",value:function(e,t,n){this.postMessage("set-size",{type:e,width:t,height:n},(function(e){}))}},{key:"requestPermissions",value:function(e,t){this.postMessage("request-permissions",{permissions:e},function(e){t&&t()}.bind(this))}},{key:"streamItems",value:function(e,t){Array.isArray(e)||(e=[e]),this.postMessage("stream-items",{content_types:e},function(e){t(e.items)}.bind(this))}},{key:"streamContextItem",value:function(e){var t=this;this.postMessage("stream-context-item",null,(function(n){var i=n.item;(!t.lastStreamedItem||t.lastStreamedItem.uuid!==i.uuid)&&t.pendingSaveTimeout&&(clearTimeout(t.pendingSaveTimeout),t._performSavingOfItems(t.pendingSaveParams),t.pendingSaveTimeout=null,t.pendingSaveParams=null),t.lastStreamedItem=i,e(t.lastStreamedItem)}))}},{key:"selectItem",value:function(e){this.postMessage("select-item",{item:this.jsonObjectForItem(e)})}},{key:"createItem",value:function(e,t){this.postMessage("create-item",{item:this.jsonObjectForItem(e)},function(e){var n=e.item;!n&&e.items&&e.items.length>0&&(n=e.items[0]),this.associateItem(n),t&&t(n)}.bind(this))}},{key:"createItems",value:function(e,t){var n=this,i=e.map((function(e){return n.jsonObjectForItem(e)}));this.postMessage("create-items",{items:i},function(e){t&&t(e.items)}.bind(this))}},{key:"associateItem",value:function(e){this.postMessage("associate-item",{item:this.jsonObjectForItem(e)})}},{key:"deassociateItem",value:function(e){this.postMessage("deassociate-item",{item:this.jsonObjectForItem(e)})}},{key:"clearSelection",value:function(){this.postMessage("clear-selection",{content_type:"Tag"})}},{key:"deleteItem",value:function(e,t){this.deleteItems([e],t)}},{key:"deleteItems",value:function(e,t){var n={items:e.map(function(e){return this.jsonObjectForItem(e)}.bind(this))};this.postMessage("delete-items",n,(function(e){t&&t(e)}))}},{key:"sendCustomEvent",value:function(e,t,n){this.postMessage(e,t,function(e){n&&n(e)}.bind(this))}},{key:"saveItem",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.saveItems([e],t,n)}},{key:"saveItemWithPresave",value:function(e,t,n){this.saveItemsWithPresave([e],t,n)}},{key:"saveItemsWithPresave",value:function(e,t,n){this.saveItems(e,n,!1,t)}},{key:"_performSavingOfItems",value:function(e){var t=e.items,n=e.presave,i=e.callback;n&&n();var a=[],s=!0,o=!1,r=void 0;try{for(var c,u=t[Symbol.iterator]();!(s=(c=u.next()).done);s=!0){var l=c.value;a.push(this.jsonObjectForItem(l))}}catch(e){o=!0,r=e}finally{try{s||null==u.return||u.return()}finally{if(o)throw r}}this.postMessage("save-items",{items:a},(function(e){i&&i()}))}},{key:"saveItems",value:function(e,t){var n=this,i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=arguments.length>3?arguments[3]:void 0;if(this.pendingSaveItems||(this.pendingSaveItems=[]),1!=this.coallesedSaving||i)this._performSavingOfItems({items:e,presave:a,callback:t});else{this.pendingSaveTimeout&&clearTimeout(this.pendingSaveTimeout);var s=e.map((function(e){return e.uuid})),o=this.pendingSaveItems.filter((function(e){return!s.includes(e.uuid)}));this.pendingSaveItems=o.concat(e),this.pendingSaveParams={items:this.pendingSaveItems,presave:a,callback:t},this.pendingSaveTimeout=setTimeout((function(){n._performSavingOfItems(n.pendingSaveParams),n.pendingSaveItems=[],n.pendingSaveTimeout=null,n.pendingSaveParams=null}),this.coallesedSavingDelay)}}},{key:"jsonObjectForItem",value:function(e){var t=Object.assign({},e);return t.children=null,t.parent=null,t}},{key:"getItemAppDataValue",value:function(e,t){var n=e.content.appData&&e.content.appData["org.standardnotes.sn"];return n?n[t]:null}},{key:"activateThemes",value:function(e){if(this.loggingEnabled&&console.log("Incoming themes",e),this.activeThemes.sort().toString()!=e.sort().toString()){var t=e||[],n=[],i=!0,a=!1,s=void 0;try{for(var o,r=this.activeThemes[Symbol.iterator]();!(i=(o=r.next()).done);i=!0){var c=o.value;e.includes(c)?t=t.filter((function(e){return e!=c})):n.push(c)}}catch(e){a=!0,s=e}finally{try{i||null==r.return||r.return()}finally{if(a)throw s}}this.loggingEnabled&&(console.log("Deactivating themes:",n),console.log("Activating themes:",t));for(var u=0,l=n;u<l.length;u++){var m=l[u];this.deactivateTheme(m)}this.activeThemes=e;var f=!0,d=!1,h=void 0;try{for(var v,p=t[Symbol.iterator]();!(f=(v=p.next()).done);f=!0){var g=v.value;if(g){var y=document.createElement("link");y.id=btoa(g),y.href=g,y.type="text/css",y.rel="stylesheet",y.media="screen,print",y.className="custom-theme",document.getElementsByTagName("head")[0].appendChild(y)}}}catch(e){d=!0,h=e}finally{try{f||null==p.return||p.return()}finally{if(d)throw h}}}}},{key:"themeElementForUrl",value:function(e){return Array.from(document.getElementsByClassName("custom-theme")).slice().find((function(t){return t.id==btoa(e)}))}},{key:"deactivateTheme",value:function(e){var t=this.themeElementForUrl(e);t&&(t.disabled=!0,t.parentNode.removeChild(t))}},{key:"generateUUID",value:function(){var e=window.crypto||window.msCrypto;if(e){var t=new Uint32Array(4);e.getRandomValues(t);var n=-1;return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){n++;var i=t[n>>3]>>n%8*4&15;return("x"==e?i:3&i|8).toString(16)}))}var i=(new Date).getTime();return window.performance&&"function"==typeof window.performance.now&&(i+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=(i+16*Math.random())%16|0;return i=Math.floor(i/16),("x"==e?t:3&t|8).toString(16)}))}}])&&i(t.prototype,n),a&&i(t,a),e}();void 0!==e.exports&&(e.exports=a),window&&(window.ComponentManager=a)},function(e,t,n){var i=n(2),a=n(3);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var s={insert:"head",singleton:!1},o=(i(a,s),a.locals?a.locals:{});e.exports=o},function(e,t,n){"use strict";var i,a=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},s=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function r(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},i=[],a=0;a<e.length;a++){var s=e[a],c=t.base?s[0]+t.base:s[0],u=n[c]||0,l="".concat(c," ").concat(u);n[c]=u+1;var m=r(l),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==m?(o[m].references++,o[m].updater(f)):o.push({identifier:l,updater:p(f,t),references:1}),i.push(l)}return i}function u(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var a=n.nc;a&&(i.nonce=a)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var o=s(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var l,m=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function f(e,t,n,i){var a=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=m(t,a);else{var s=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(s,o[t]):e.appendChild(s)}}function d(e,t,n){var i=n.css,a=n.media,s=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),s&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var h=null,v=0;function p(e,t){var n,i,a;if(t.singleton){var s=v++;n=h||(h=u(t)),i=f.bind(null,n,s,!1),a=f.bind(null,n,s,!0)}else n=u(t),i=d.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var a=r(n[i]);o[a].references--}for(var s=c(e,t),u=0;u<n.length;u++){var l=r(n[u]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}n=s}}}},function(e,t,n){(t=n(4)(!1)).push([e.i,".ed-cls {\n  background: var(--sn-stylekit-editor-foreground-color);\n}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var a=(o=i,r=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),"/*# ".concat(c," */")),s=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(s).concat([a]).join("\n")}var o,r,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(i)for(var s=0;s<this.length;s++){var o=this[s][0];null!=o&&(a[o]=!0)}for(var r=0;r<e.length;r++){var c=[].concat(e[r]);i&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";n.r(t);n.p,n(1);var i=n(0);!function(){const e=new i;console.log(e)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NuLWNvbXBvbmVudHMtYXBpL2Rpc3QvZGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzLmNzcz80NGIyIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5odG1sIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb21wb25lbnRNYW5hZ2VyIiwicGVybWlzc2lvbnMiLCJvblJlYWR5IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJzZW50TWVzc2FnZXMiLCJtZXNzYWdlUXVldWUiLCJsb2dnaW5nRW5hYmxlZCIsImFjY2VwdHNUaGVtZXMiLCJhY3RpdmVUaGVtZXMiLCJpbml0aWFsUGVybWlzc2lvbnMiLCJvblJlYWR5Q2FsbGJhY2siLCJjb2FsbGVzZWRTYXZpbmciLCJjb2FsbGVzZWRTYXZpbmdEZWxheSIsInJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfdGhpcyIsIm1lc3NhZ2VIYW5kbGVyIiwiZXZlbnQiLCJjb25zb2xlIiwibG9nIiwiZGF0YSIsImRvY3VtZW50IiwicmVmZXJyZXIiLCJVUkwiLCJvcmlnaW4iLCJwYXJzZWREYXRhIiwiSlNPTiIsInBhcnNlIiwiaGFuZGxlTWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ3aW5kb3ciLCJwYXlsb2FkIiwiYWN0aW9uIiwic2Vzc2lvbktleSIsImNvbXBvbmVudERhdGEiLCJhY3RpdmF0ZVRoZW1lcyIsInRoZW1lcyIsIm9yaWdpbmFsIiwib3JpZ2luYWxNZXNzYWdlIiwiZmlsdGVyIiwibWVzc2FnZSIsIm1lc3NhZ2VJZCIsImFsZXJ0IiwiY2FsbGJhY2siLCJlbnZpcm9ubWVudCIsInBsYXRmb3JtIiwidXVpZCIsImlzTW9iaWxlIiwicmVxdWVzdFBlcm1pc3Npb25zIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJ1bmRlZmluZWQiLCJfc3RlcCIsIl9pdGVyYXRvciIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJwb3N0TWVzc2FnZSIsImVyciIsImFjdGl2ZVRoZW1lVXJscyIsImdlbmVyYXRlVVVJRCIsImFwaSIsInNlbnRNZXNzYWdlIiwic3RyaW5naWZ5IiwicHVzaCIsInBhcmVudCIsInR5cGUiLCJ3aWR0aCIsImhlaWdodCIsImNvbnRlbnRUeXBlcyIsIkFycmF5IiwiaXNBcnJheSIsImNvbnRlbnRfdHlwZXMiLCJpdGVtcyIsIl90aGlzMiIsIml0ZW0iLCJsYXN0U3RyZWFtZWRJdGVtIiwicGVuZGluZ1NhdmVUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiX3BlcmZvcm1TYXZpbmdPZkl0ZW1zIiwicGVuZGluZ1NhdmVQYXJhbXMiLCJqc29uT2JqZWN0Rm9ySXRlbSIsImFzc29jaWF0ZUl0ZW0iLCJfdGhpczMiLCJtYXBwZWQiLCJtYXAiLCJjb250ZW50X3R5cGUiLCJkZWxldGVJdGVtcyIsInBhcmFtcyIsInNraXBEZWJvdW5jZXIiLCJhcmd1bWVudHMiLCJzYXZlSXRlbXMiLCJwcmVzYXZlIiwic2F2ZUl0ZW1zV2l0aFByZXNhdmUiLCJfcmVmIiwibWFwcGVkSXRlbXMiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJfdGhpczQiLCJwZW5kaW5nU2F2ZUl0ZW1zIiwiaW5jb21pbmdJZHMiLCJwcmVleGlzdGluZ0l0ZW1zIiwiaW5jbHVkZXMiLCJjb25jYXQiLCJzZXRUaW1lb3V0IiwiY29weSIsImFzc2lnbiIsImNoaWxkcmVuIiwiY29udGVudCIsImFwcERhdGEiLCJpbmNvbWluZ1VybHMiLCJzb3J0IiwidG9TdHJpbmciLCJ0aGVtZXNUb0FjdGl2YXRlIiwidGhlbWVzVG9EZWFjdGl2YXRlIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMiLCJfZGlkSXRlcmF0b3JFcnJvcjMiLCJfaXRlcmF0b3JFcnJvcjMiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwiYWN0aXZlVXJsIiwiY2FuZGlkYXRlIiwiX2kiLCJfdGhlbWVzVG9EZWFjdGl2YXRlIiwidGhlbWUiLCJkZWFjdGl2YXRlVGhlbWUiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uNCIsIl9kaWRJdGVyYXRvckVycm9yNCIsIl9pdGVyYXRvckVycm9yNCIsIl9zdGVwNCIsIl9pdGVyYXRvcjQiLCJ1cmwiLCJsaW5rIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYnRvYSIsImhyZWYiLCJyZWwiLCJtZWRpYSIsImNsYXNzTmFtZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJmcm9tIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInNsaWNlIiwiZmluZCIsImVsZW1lbnQiLCJ0aGVtZUVsZW1lbnRGb3JVcmwiLCJkaXNhYmxlZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNyeXB0byIsIm1zQ3J5cHRvIiwiYnVmIiwiVWludDMyQXJyYXkiLCJnZXRSYW5kb21WYWx1ZXMiLCJpZHgiLCJyZXBsYWNlIiwiRGF0ZSIsImdldFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIk1hdGgiLCJyYW5kb20iLCJmbG9vciIsImRlZmF1bHQiLCJvcHRpb25zIiwiZXhwb3J0ZWQiLCJsb2NhbHMiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwibGlzdCIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsImJhc2U2NCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImNvbXBvbmVudE1hbmFnZXIiLCJpbml0Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVos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QUFTLE1BRzdCLElBQUlxUyxFQUF5QixHQUU3QixHQUFJRCxFQUNGLElBQUssSUFBSXRTLEVBQUksRUFBR0EsRUFBSThDLEtBQUtYLE9BQVFuQyxJQUFLLENBRXBDLElBQUlzTCxFQUFLeEksS0FBSzlDLEdBQUcsR0FFUCxNQUFOc0wsSUFDRmlILEVBQXVCakgsSUFBTSxHQUtuQyxJQUFLLElBQUlaLEVBQUssRUFBR0EsRUFBS3hLLEVBQVFpQyxPQUFRdUksSUFBTSxDQUMxQyxJQUFJbEQsRUFBTyxHQUFHK0IsT0FBT3JKLEVBQVF3SyxJQUV6QjRILEdBQVVDLEVBQXVCL0ssRUFBSyxNQUt0QzZLLElBQ0c3SyxFQUFLLEdBR1JBLEVBQUssR0FBSyxHQUFHK0IsT0FBTzhJLEVBQVksU0FBUzlJLE9BQU8vQixFQUFLLElBRnJEQSxFQUFLLEdBQUs2SyxHQU1kM0QsRUFBSzdILEtBQUtXLE1BSVBrSCxJLG9DQ2hFTSxJLEtBQUEsSSxRQ0lmLFdBQ0UsTUFBTThELEVBQW1CLElBQUksRUFDN0IxTyxRQUFRQyxJQUFJeU8sR0FHZEMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDUpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIENvbXBvbmVudE1hbmFnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb21wb25lbnRNYW5hZ2VyKHBlcm1pc3Npb25zLCBvblJlYWR5KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvbmVudE1hbmFnZXIpO1xuXG4gICAgdGhpcy5zZW50TWVzc2FnZXMgPSBbXTtcbiAgICB0aGlzLm1lc3NhZ2VRdWV1ZSA9IFtdO1xuICAgIHRoaXMubG9nZ2luZ0VuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmFjY2VwdHNUaGVtZXMgPSB0cnVlO1xuICAgIHRoaXMuYWN0aXZlVGhlbWVzID0gW107XG4gICAgdGhpcy5pbml0aWFsUGVybWlzc2lvbnMgPSBwZXJtaXNzaW9ucztcbiAgICB0aGlzLm9uUmVhZHlDYWxsYmFjayA9IG9uUmVhZHk7XG4gICAgdGhpcy5jb2FsbGVzZWRTYXZpbmcgPSB0cnVlO1xuICAgIHRoaXMuY29hbGxlc2VkU2F2aW5nRGVsYXkgPSAyNTA7XG4gICAgdGhpcy5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29tcG9uZW50TWFuYWdlciwgW3tcbiAgICBrZXk6IFwicmVnaXN0ZXJNZXNzYWdlSGFuZGxlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG1lc3NhZ2VIYW5kbGVyID0gZnVuY3Rpb24gbWVzc2FnZUhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzLmxvZ2dpbmdFbmFibGVkKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJDb21wb25lbnRzIEFQSSBNZXNzYWdlIHJlY2VpdmVkOlwiLCBldmVudC5kYXRhKTtcbiAgICAgICAgfSAvLyBXZSBkb24ndCBoYXZlIGFjY2VzcyB0byB3aW5kb3cucGFyZW50Lm9yaWdpbiBkdWUgdG8gY3Jvc3MtZG9tYWluIHJlc3RyaWN0aW9ucy5cbiAgICAgICAgLy8gQ2hlY2sgcmVmZXJyZXIgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgZGVmZXIgdG8gY2hlY2tpbmcgZm9yIGZpcnN0LXJ1biB2YWx1ZS5cbiAgICAgICAgLy8gQ3JhZnQgVVJMIG9iamVjdHMgc28gdGhhdCBleGFtcGxlLmNvbSA9PT0gZXhhbXBsZS5jb20vXG5cblxuICAgICAgICBpZiAoZG9jdW1lbnQucmVmZXJyZXIpIHtcbiAgICAgICAgICB2YXIgcmVmZXJyZXIgPSBuZXcgVVJMKGRvY3VtZW50LnJlZmVycmVyKS5vcmlnaW47XG4gICAgICAgICAgdmFyIGV2ZW50T3JpZ2luID0gbmV3IFVSTChldmVudC5vcmlnaW4pLm9yaWdpbjtcblxuICAgICAgICAgIGlmIChyZWZlcnJlciAhPT0gZXZlbnRPcmlnaW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gVGhlIGZpcnN0IG1lc3NhZ2Ugd2lsbCBiZSB0aGUgbW9zdCByZWxpYWJsZSBvbmUsIHNvIHdlIHdvbid0IGNoYW5nZSBpdCBhZnRlciBhbnkgc3Vic2VxdWVudCBldmVudHMsXG4gICAgICAgIC8vIGluIGNhc2UgeW91IHJlY2VpdmUgYW4gZXZlbnQgZnJvbSBhbm90aGVyIHdpbmRvdy5cblxuXG4gICAgICAgIGlmICghX3RoaXMub3JpZ2luKSB7XG4gICAgICAgICAgX3RoaXMub3JpZ2luID0gZXZlbnQub3JpZ2luO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50Lm9yaWdpbiAhPT0gX3RoaXMub3JpZ2luKSB7XG4gICAgICAgICAgLy8gSWYgZXZlbnQgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggZmlyc3QtcnVuIHZhbHVlLCByZXR1cm4uXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIE1vYmlsZSBlbnZpcm9ubWVudCBzZW5kcyBkYXRhIGFzIEpTT04gc3RyaW5nXG5cblxuICAgICAgICB2YXIgZGF0YSA9IGV2ZW50LmRhdGE7XG4gICAgICAgIHZhciBwYXJzZWREYXRhID0gdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKGRhdGEpIDogZGF0YTtcblxuICAgICAgICBfdGhpcy5oYW5kbGVNZXNzYWdlKHBhcnNlZERhdGEpO1xuICAgICAgfTtcbiAgICAgIC8qXG4gICAgICAgIE1vYmlsZSAoUmVhY3QgTmF0aXZlKSB1c2VzIGBkb2N1bWVudGAsIHdlYi9kZXNrdG9wIHVzZXMgYHdpbmRvd2AuYWRkRXZlbnRMaXN0ZW5lclxuICAgICAgICBmb3IgcG9zdE1lc3NhZ2UgQVBJIHRvIHdvcmsgcHJvcGVybHkuXG4gICAgICAgICBVcGRhdGUgTWF5IDIwMTk6XG4gICAgICAgIEFzIHBhcnQgb2YgdHJhbnNpdGlvbmluZyBSZWFjdCBOYXRpdmUgd2VidmlldyBpbnRvIHRoZSBjb21tdW5pdHkgcGFja2FnZSxcbiAgICAgICAgd2UnbGwgbm93IG9ubHkgbmVlZCB0byB1c2Ugd2luZG93LmFkZEV2ZW50TGlzdGVuZXIuXG4gICAgICAgICBIb3dldmVyLCB3ZSB3YW50IHRvIG1haW50YWluIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgZm9yIE1vYmlsZSA8IHYzLjAuNSwgc28gd2UnbGwga2VlcCBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyXG4gICAgICAgICBBbHNvLCBldmVuIHdpdGggdGhlIG5ldyB2ZXJzaW9uIG9mIHJlYWN0LW5hdGl2ZS13ZWJ2aWV3LCBBbmRyb2lkIG1heSBzdGlsbCByZXF1aXJlIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKHdoaWxlIGlPUyBzdGlsbCBvbmx5IHJlcXVpcmVzIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKVxuICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNvbW11bml0eS9yZWFjdC1uYXRpdmUtd2Vidmlldy9pc3N1ZXMvMzIzI2lzc3VlY29tbWVudC00Njc3Njc5MzNcbiAgICAgICAqL1xuXG5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBtZXNzYWdlSGFuZGxlcihldmVudCk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIG1lc3NhZ2VIYW5kbGVyKGV2ZW50KTtcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFuZGxlTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKHBheWxvYWQpIHtcbiAgICAgIGlmIChwYXlsb2FkLmFjdGlvbiA9PT0gXCJjb21wb25lbnQtcmVnaXN0ZXJlZFwiKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbktleSA9IHBheWxvYWQuc2Vzc2lvbktleTtcbiAgICAgICAgdGhpcy5jb21wb25lbnREYXRhID0gcGF5bG9hZC5jb21wb25lbnREYXRhO1xuICAgICAgICB0aGlzLm9uUmVhZHkocGF5bG9hZC5kYXRhKTtcblxuICAgICAgICBpZiAodGhpcy5sb2dnaW5nRW5hYmxlZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29tcG9uZW50IHN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkIHdpdGggcGF5bG9hZDpcIiwgcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5hY3Rpb24gPT09IFwidGhlbWVzXCIpIHtcbiAgICAgICAgaWYgKHRoaXMuYWNjZXB0c1RoZW1lcykge1xuICAgICAgICAgIHRoaXMuYWN0aXZhdGVUaGVtZXMocGF5bG9hZC5kYXRhLnRoZW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGF5bG9hZC5vcmlnaW5hbCkge1xuICAgICAgICAvLyBnZXQgY2FsbGJhY2sgZnJvbSBxdWV1ZVxuICAgICAgICB2YXIgb3JpZ2luYWxNZXNzYWdlID0gdGhpcy5zZW50TWVzc2FnZXMuZmlsdGVyKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgcmV0dXJuIG1lc3NhZ2UubWVzc2FnZUlkID09PSBwYXlsb2FkLm9yaWdpbmFsLm1lc3NhZ2VJZDtcbiAgICAgICAgfSlbMF07XG5cbiAgICAgICAgaWYgKCFvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgICAvLyBDb25uZWN0aW9uIG11c3QgaGF2ZSBiZWVuIHJlc2V0LiBBbGVydCB0aGUgdXNlci5cbiAgICAgICAgICBhbGVydChcIlRoaXMgZXh0ZW5zaW9uIGlzIGF0dGVtcHRpbmcgdG8gY29tbXVuaWNhdGUgd2l0aCBTdGFuZGFyZCBOb3RlcywgYnV0IGFuIGVycm9yIGlzIHByZXZlbnRpbmcgaXQgZnJvbSBkb2luZyBzby4gUGxlYXNlIHJlc3RhcnQgdGhpcyBleHRlbnNpb24gYW5kIHRyeSBhZ2Fpbi5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JpZ2luYWxNZXNzYWdlLmNhbGxiYWNrKSB7XG4gICAgICAgICAgb3JpZ2luYWxNZXNzYWdlLmNhbGxiYWNrKHBheWxvYWQuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25SZWFkeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblJlYWR5KGRhdGEpIHtcbiAgICAgIHRoaXMuZW52aXJvbm1lbnQgPSBkYXRhLmVudmlyb25tZW50O1xuICAgICAgdGhpcy5wbGF0Zm9ybSA9IGRhdGEucGxhdGZvcm07XG4gICAgICB0aGlzLnV1aWQgPSBkYXRhLnV1aWQ7XG4gICAgICB0aGlzLmlzTW9iaWxlID0gdGhpcy5lbnZpcm9ubWVudCA9PSBcIm1vYmlsZVwiO1xuXG4gICAgICBpZiAodGhpcy5pbml0aWFsUGVybWlzc2lvbnMgJiYgdGhpcy5pbml0aWFsUGVybWlzc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLnJlcXVlc3RQZXJtaXNzaW9ucyh0aGlzLmluaXRpYWxQZXJtaXNzaW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSB0aGlzLm1lc3NhZ2VRdWV1ZVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgICAgIHRoaXMucG9zdE1lc3NhZ2UobWVzc2FnZS5hY3Rpb24sIG1lc3NhZ2UuZGF0YSwgbWVzc2FnZS5jYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yW1wicmV0dXJuXCJdICE9IG51bGwpIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcltcInJldHVyblwiXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm1lc3NhZ2VRdWV1ZSA9IFtdO1xuXG4gICAgICBpZiAodGhpcy5sb2dnaW5nRW5hYmxlZCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm9uUmVhZHlEYXRhXCIsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFjdGl2YXRlVGhlbWVzKGRhdGEuYWN0aXZlVGhlbWVVcmxzIHx8IFtdKTtcblxuICAgICAgaWYgKHRoaXMub25SZWFkeUNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMub25SZWFkeUNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFNlbGZDb21wb25lbnRVVUlEXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlbGZDb21wb25lbnRVVUlEKCkge1xuICAgICAgcmV0dXJuIHRoaXMudXVpZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNSdW5uaW5nSW5EZXNrdG9wQXBwbGljYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNSdW5uaW5nSW5EZXNrdG9wQXBwbGljYXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbnZpcm9ubWVudCA9PT0gXCJkZXNrdG9wXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldENvbXBvbmVudERhdGFWYWx1ZUZvcktleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb21wb25lbnREYXRhVmFsdWVGb3JLZXkoa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpcy5jb21wb25lbnREYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXCJzZXQtY29tcG9uZW50LWRhdGFcIiwge1xuICAgICAgICBjb21wb25lbnREYXRhOiB0aGlzLmNvbXBvbmVudERhdGFcbiAgICAgIH0sIGZ1bmN0aW9uIChkYXRhKSB7fSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyQ29tcG9uZW50RGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhckNvbXBvbmVudERhdGEoKSB7XG4gICAgICB0aGlzLmNvbXBvbmVudERhdGEgPSB7fTtcbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXCJzZXQtY29tcG9uZW50LWRhdGFcIiwge1xuICAgICAgICBjb21wb25lbnREYXRhOiB0aGlzLmNvbXBvbmVudERhdGFcbiAgICAgIH0sIGZ1bmN0aW9uIChkYXRhKSB7fSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERhdGFWYWx1ZUZvcktleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREYXRhVmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wb25lbnREYXRhW2tleV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBvc3RNZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGFjdGlvbiwgZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgIGlmICghdGhpcy5zZXNzaW9uS2V5KSB7XG4gICAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLnB1c2goe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgbWVzc2FnZUlkOiB0aGlzLmdlbmVyYXRlVVVJRCgpLFxuICAgICAgICBzZXNzaW9uS2V5OiB0aGlzLnNlc3Npb25LZXksXG4gICAgICAgIGFwaTogXCJjb21wb25lbnRcIlxuICAgICAgfTtcbiAgICAgIHZhciBzZW50TWVzc2FnZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgICAgc2VudE1lc3NhZ2UuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgIHRoaXMuc2VudE1lc3NhZ2VzLnB1c2goc2VudE1lc3NhZ2UpOyAvLyBNb2JpbGUgKFJlYWN0IE5hdGl2ZSkgcmVxdWlyZXMgYSBzdHJpbmcgZm9yIHRoZSBwb3N0TWVzc2FnZSBBUEkuXG5cbiAgICAgIGlmICh0aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubG9nZ2luZ0VuYWJsZWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJQb3N0aW5nIG1lc3NhZ2U6XCIsIG1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRoaXMub3JpZ2luKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0U2l6ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTaXplKHR5cGUsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXCJzZXQtc2l6ZVwiLCB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0sIGZ1bmN0aW9uIChkYXRhKSB7fSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlcXVlc3RQZXJtaXNzaW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0UGVybWlzc2lvbnMocGVybWlzc2lvbnMsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnBvc3RNZXNzYWdlKFwicmVxdWVzdC1wZXJtaXNzaW9uc1wiLCB7XG4gICAgICAgIHBlcm1pc3Npb25zOiBwZXJtaXNzaW9uc1xuICAgICAgfSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0cmVhbUl0ZW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0cmVhbUl0ZW1zKGNvbnRlbnRUeXBlcywgY2FsbGJhY2spIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShjb250ZW50VHlwZXMpKSB7XG4gICAgICAgIGNvbnRlbnRUeXBlcyA9IFtjb250ZW50VHlwZXNdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBvc3RNZXNzYWdlKFwic3RyZWFtLWl0ZW1zXCIsIHtcbiAgICAgICAgY29udGVudF90eXBlczogY29udGVudFR5cGVzXG4gICAgICB9LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBjYWxsYmFjayhkYXRhLml0ZW1zKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInN0cmVhbUNvbnRleHRJdGVtXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0cmVhbUNvbnRleHRJdGVtKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5wb3N0TWVzc2FnZShcInN0cmVhbS1jb250ZXh0LWl0ZW1cIiwgbnVsbCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBkYXRhLml0ZW07XG4gICAgICAgIC8qXG4gICAgICAgICAgSWYgdGhpcyBpcyBhIG5ldyBjb250ZXh0IGl0ZW0gdGhhbiB0aGUgY29udGV4dCBpdGVtIHRoZSBjb21wb25lbnQgd2FzIGN1cnJlbnRseSBlbnRlcnRhaW5pbmcsXG4gICAgICAgICAgd2Ugd2FudCB0byBpbW1lZGlhdGVseSBjb21taXQgYW55IHBlbmRpbmcgc2F2ZXMsIGJlY2F1c2UgaWYgeW91IHNlbmQgdGhlIG5ldyBjb250ZXh0IGl0ZW0gdG8gdGhlXG4gICAgICAgICAgY29tcG9uZW50IGJlZm9yZSBpdCBoYXMgY29tbWl0ZWQgaXRzIHByZXNhdmUsIGl0IHdpbGwgZW5kIHVwIGZpcnN0IHJlcGxhY2luZyB0aGUgVUkgd2l0aCBuZXcgY29udGV4dCBpdGVtLFxuICAgICAgICAgIGFuZCB3aGVuIHRoZSBkZWJvdW5jZXIgZXhlY3V0ZXMgdG8gcmVhZCB0aGUgY29tcG9uZW50IFVJLCBpdCB3aWxsIGJlIHJlYWRpbmcgdGhlIG5ldyBVSSBmb3IgdGhlIHByZXZpb3VzIGl0ZW0uXG4gICAgICAgICovXG5cbiAgICAgICAgdmFyIGlzTmV3SXRlbSA9ICFfdGhpczIubGFzdFN0cmVhbWVkSXRlbSB8fCBfdGhpczIubGFzdFN0cmVhbWVkSXRlbS51dWlkICE9PSBpdGVtLnV1aWQ7XG5cbiAgICAgICAgaWYgKGlzTmV3SXRlbSAmJiBfdGhpczIucGVuZGluZ1NhdmVUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMi5wZW5kaW5nU2F2ZVRpbWVvdXQpO1xuXG4gICAgICAgICAgX3RoaXMyLl9wZXJmb3JtU2F2aW5nT2ZJdGVtcyhfdGhpczIucGVuZGluZ1NhdmVQYXJhbXMpO1xuXG4gICAgICAgICAgX3RoaXMyLnBlbmRpbmdTYXZlVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgX3RoaXMyLnBlbmRpbmdTYXZlUGFyYW1zID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5sYXN0U3RyZWFtZWRJdGVtID0gaXRlbTtcbiAgICAgICAgY2FsbGJhY2soX3RoaXMyLmxhc3RTdHJlYW1lZEl0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNlbGVjdEl0ZW1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0SXRlbShpdGVtKSB7XG4gICAgICB0aGlzLnBvc3RNZXNzYWdlKFwic2VsZWN0LWl0ZW1cIiwge1xuICAgICAgICBpdGVtOiB0aGlzLmpzb25PYmplY3RGb3JJdGVtKGl0ZW0pXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlSXRlbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVJdGVtKGl0ZW0sIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnBvc3RNZXNzYWdlKFwiY3JlYXRlLWl0ZW1cIiwge1xuICAgICAgICBpdGVtOiB0aGlzLmpzb25PYmplY3RGb3JJdGVtKGl0ZW0pXG4gICAgICB9LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgaXRlbSA9IGRhdGEuaXRlbTsgLy8gQSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoZSBTTiBhcHAgaGFkIGFuIGlzc3VlIHdoZXJlIHRoZSBpdGVtIGluIHRoZSByZXBseSB0byBjcmVhdGUtaXRlbVxuICAgICAgICAvLyB3b3VsZCBiZSBuZXN0ZWQgaW5zaWRlIFwiaXRlbXNcIiBhbmQgbm90IFwiaXRlbVwiLiBTbyBoYW5kbGUgYm90aCBjYXNlcyBoZXJlLlxuXG4gICAgICAgIGlmICghaXRlbSAmJiBkYXRhLml0ZW1zICYmIGRhdGEuaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGl0ZW0gPSBkYXRhLml0ZW1zWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hc3NvY2lhdGVJdGVtKGl0ZW0pO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpdGVtKTtcbiAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZUl0ZW1zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUl0ZW1zKGl0ZW1zLCBjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBtYXBwZWQgPSBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy5qc29uT2JqZWN0Rm9ySXRlbShpdGVtKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wb3N0TWVzc2FnZShcImNyZWF0ZS1pdGVtc1wiLCB7XG4gICAgICAgIGl0ZW1zOiBtYXBwZWRcbiAgICAgIH0sIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGRhdGEuaXRlbXMpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXNzb2NpYXRlSXRlbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NvY2lhdGVJdGVtKGl0ZW0pIHtcbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXCJhc3NvY2lhdGUtaXRlbVwiLCB7XG4gICAgICAgIGl0ZW06IHRoaXMuanNvbk9iamVjdEZvckl0ZW0oaXRlbSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkZWFzc29jaWF0ZUl0ZW1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVhc3NvY2lhdGVJdGVtKGl0ZW0pIHtcbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UoXCJkZWFzc29jaWF0ZS1pdGVtXCIsIHtcbiAgICAgICAgaXRlbTogdGhpcy5qc29uT2JqZWN0Rm9ySXRlbShpdGVtKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNsZWFyU2VsZWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgICAgdGhpcy5wb3N0TWVzc2FnZShcImNsZWFyLXNlbGVjdGlvblwiLCB7XG4gICAgICAgIGNvbnRlbnRfdHlwZTogXCJUYWdcIlxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImRlbGV0ZUl0ZW1cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlSXRlbShpdGVtLCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5kZWxldGVJdGVtcyhbaXRlbV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVsZXRlSXRlbXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlSXRlbXMoaXRlbXMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBpdGVtczogaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuanNvbk9iamVjdEZvckl0ZW0oaXRlbSk7XG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICAgIH07XG4gICAgICB0aGlzLnBvc3RNZXNzYWdlKFwiZGVsZXRlLWl0ZW1zXCIsIHBhcmFtcywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2VuZEN1c3RvbUV2ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRDdXN0b21FdmVudChhY3Rpb24sIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnBvc3RNZXNzYWdlKGFjdGlvbiwgZGF0YSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZGF0YSk7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzYXZlSXRlbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlSXRlbShpdGVtLCBjYWxsYmFjaykge1xuICAgICAgdmFyIHNraXBEZWJvdW5jZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgICAgdGhpcy5zYXZlSXRlbXMoW2l0ZW1dLCBjYWxsYmFjaywgc2tpcERlYm91bmNlcik7XG4gICAgfVxuICAgIC8qIFByZXNhdmUgYWxsb3dzIGNsaWVudHMgdG8gcGVyZm9ybSBhbnkgYWN0aW9ucyBsYXN0IHNlY29uZCBiZWZvcmUgdGhlIHNhdmUgYWN0dWFsbHkgb2NjdXJzIChsaWtlIHNldHRpbmcgcHJldmlld3MpLlxuICAgICAgIFNhdmVzIGRlYm91bmNlIGJ5IGRlZmF1bHQsIHNvIGlmIGEgY2xpZW50IG5lZWRzIHRvIGNvbXB1dGUgYSBwcm9wZXJ0eSBvbiBhbiBpdGVtIGJlZm9yZSBzYXZpbmcsIGl0J3MgYmVzdCB0b1xuICAgICAgIGhvb2sgaW50byB0aGUgZGVib3VuY2UgY3ljbGUgc28gdGhhdCBjbGllbnRzIGRvbid0IGhhdmUgdG8gaW1wbGVtZW50IHRoZWlyIG93biBkZWJvdW5jaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwic2F2ZUl0ZW1XaXRoUHJlc2F2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlSXRlbVdpdGhQcmVzYXZlKGl0ZW0sIHByZXNhdmUsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnNhdmVJdGVtc1dpdGhQcmVzYXZlKFtpdGVtXSwgcHJlc2F2ZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzYXZlSXRlbXNXaXRoUHJlc2F2ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlSXRlbXNXaXRoUHJlc2F2ZShpdGVtcywgcHJlc2F2ZSwgY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuc2F2ZUl0ZW1zKGl0ZW1zLCBjYWxsYmFjaywgZmFsc2UsIHByZXNhdmUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcGVyZm9ybVNhdmluZ09mSXRlbXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BlcmZvcm1TYXZpbmdPZkl0ZW1zKF9yZWYpIHtcbiAgICAgIHZhciBpdGVtcyA9IF9yZWYuaXRlbXMsXG4gICAgICAgICAgcHJlc2F2ZSA9IF9yZWYucHJlc2F2ZSxcbiAgICAgICAgICBjYWxsYmFjayA9IF9yZWYuY2FsbGJhY2s7XG4gICAgICAvLyBwcmVzYXZlIGJsb2NrIGFsbG93cyBjbGllbnQgdG8gZ2FpbiB0aGUgYmVuZWZpdCBvZiBwZXJmb3JtaW5nIHNvbWV0aGluZyBpbiB0aGUgZGVib3VuY2UgY3ljbGUuXG4gICAgICBwcmVzYXZlICYmIHByZXNhdmUoKTtcbiAgICAgIHZhciBtYXBwZWRJdGVtcyA9IFtdO1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBpdGVtc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgIG1hcHBlZEl0ZW1zLnB1c2godGhpcy5qc29uT2JqZWN0Rm9ySXRlbShpdGVtKSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMltcInJldHVyblwiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IyW1wicmV0dXJuXCJdKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3N0TWVzc2FnZShcInNhdmUtaXRlbXNcIiwge1xuICAgICAgICBpdGVtczogbWFwcGVkSXRlbXNcbiAgICAgIH0sIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLypcbiAgICBza2lwRGVib3VuY2VyIGFsbG93cyBzYXZlcyB0byBnbyB0aHJvdWdoIHJpZ2h0IGF3YXkgcmF0aGVyIHRoYW4gd2FpdGluZyBmb3IgdGltZW91dC5cbiAgICBUaGlzIHNob3VsZCBiZSB1c2VkIHdoZW4gc2F2aW5nIGl0ZW1zIHZpYSBvdGhlciBtZWFucyBiZXNpZGVzIGtleXN0cm9rZXMuXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInNhdmVJdGVtc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlSXRlbXMoaXRlbXMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdmFyIHNraXBEZWJvdW5jZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgICAgdmFyIHByZXNhdmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDtcblxuICAgICAgLy8gV2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCB3aGVuIHdlIGNsZWFyIGEgcGVuZGluZyBzYXZlIHRpbWVvdXQsXG4gICAgICAvLyB3ZSBjYXJyeSBvdmVyIHRob3NlIHBlbmRpbmcgaXRlbXMgaW50byB0aGUgbmV3IHNhdmUuXG4gICAgICBpZiAoIXRoaXMucGVuZGluZ1NhdmVJdGVtcykge1xuICAgICAgICB0aGlzLnBlbmRpbmdTYXZlSXRlbXMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY29hbGxlc2VkU2F2aW5nID09IHRydWUgJiYgIXNraXBEZWJvdW5jZXIpIHtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1NhdmVUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGVuZGluZ1NhdmVUaW1lb3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmNvbWluZ0lkcyA9IGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLnV1aWQ7XG4gICAgICAgIH0pOyAvLyBSZXBsYWNlIGFueSBleGlzdGluZyBzYXZlIGl0ZW1zIHdpdGggaW5jb21pbmcgdmFsdWVzXG4gICAgICAgIC8vIE9ubHkga2VlcCBpdGVtcyBoZXJlIHdobyBhcmUgbm90IGluIGluY29taW5nSWRzXG5cbiAgICAgICAgdmFyIHByZWV4aXN0aW5nSXRlbXMgPSB0aGlzLnBlbmRpbmdTYXZlSXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuICFpbmNvbWluZ0lkcy5pbmNsdWRlcyhpdGVtLnV1aWQpO1xuICAgICAgICB9KTsgLy8gQWRkIG5ldyBpdGVtcywgbm93IHRoYXQgd2UndmUgbWFkZSBzdXJlIGl0J3MgY2xlYXJlZCBvZiBpbmNvbWluZyBpdGVtcy5cblxuICAgICAgICB0aGlzLnBlbmRpbmdTYXZlSXRlbXMgPSBwcmVleGlzdGluZ0l0ZW1zLmNvbmNhdChpdGVtcyk7IC8vIFdlJ2xsIHBvdGVudGlhbGx5IG5lZWQgdG8gY29tbWl0IGVhcmx5IGlmIHN0cmVhbS1jb250ZXh0LWl0ZW0gbWVzc2FnZSBjb21lcyBpblxuXG4gICAgICAgIHRoaXMucGVuZGluZ1NhdmVQYXJhbXMgPSB7XG4gICAgICAgICAgaXRlbXM6IHRoaXMucGVuZGluZ1NhdmVJdGVtcyxcbiAgICAgICAgICBwcmVzYXZlOiBwcmVzYXZlLFxuICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBlbmRpbmdTYXZlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzNC5fcGVyZm9ybVNhdmluZ09mSXRlbXMoX3RoaXM0LnBlbmRpbmdTYXZlUGFyYW1zKTtcblxuICAgICAgICAgIF90aGlzNC5wZW5kaW5nU2F2ZUl0ZW1zID0gW107XG4gICAgICAgICAgX3RoaXM0LnBlbmRpbmdTYXZlVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgX3RoaXM0LnBlbmRpbmdTYXZlUGFyYW1zID0gbnVsbDtcbiAgICAgICAgfSwgdGhpcy5jb2FsbGVzZWRTYXZpbmdEZWxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wZXJmb3JtU2F2aW5nT2ZJdGVtcyh7XG4gICAgICAgICAgaXRlbXM6IGl0ZW1zLFxuICAgICAgICAgIHByZXNhdmU6IHByZXNhdmUsXG4gICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJqc29uT2JqZWN0Rm9ySXRlbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBqc29uT2JqZWN0Rm9ySXRlbShpdGVtKSB7XG4gICAgICB2YXIgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgY29weS5jaGlsZHJlbiA9IG51bGw7XG4gICAgICBjb3B5LnBhcmVudCA9IG51bGw7XG4gICAgICByZXR1cm4gY29weTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0SXRlbUFwcERhdGFWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJdGVtQXBwRGF0YVZhbHVlKGl0ZW0sIGtleSkge1xuICAgICAgdmFyIEFwcERvbWFpbiA9IFwib3JnLnN0YW5kYXJkbm90ZXMuc25cIjtcbiAgICAgIHZhciBkYXRhID0gaXRlbS5jb250ZW50LmFwcERhdGEgJiYgaXRlbS5jb250ZW50LmFwcERhdGFbQXBwRG9tYWluXTtcblxuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBUaGVtZXMgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImFjdGl2YXRlVGhlbWVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFjdGl2YXRlVGhlbWVzKGluY29taW5nVXJscykge1xuICAgICAgaWYgKHRoaXMubG9nZ2luZ0VuYWJsZWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJJbmNvbWluZyB0aGVtZXNcIiwgaW5jb21pbmdVcmxzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYWN0aXZlVGhlbWVzLnNvcnQoKS50b1N0cmluZygpID09IGluY29taW5nVXJscy5zb3J0KCkudG9TdHJpbmcoKSkge1xuICAgICAgICAvLyBpbmNvbWluZyBhcmUgc2FtZSBhcyBhY3RpdmUsIGRvIG5vdGhpbmdcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGhlbWVzVG9BY3RpdmF0ZSA9IGluY29taW5nVXJscyB8fCBbXTtcbiAgICAgIHZhciB0aGVtZXNUb0RlYWN0aXZhdGUgPSBbXTtcbiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IzID0gdW5kZWZpbmVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gdGhpcy5hY3RpdmVUaGVtZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICB2YXIgYWN0aXZlVXJsID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKCFpbmNvbWluZ1VybHMuaW5jbHVkZXMoYWN0aXZlVXJsKSkge1xuICAgICAgICAgICAgLy8gYWN0aXZlIG5vdCBwcmVzZW50IGluIGluY29taW5nLCBkZWFjdGl2YXRlIGl0XG4gICAgICAgICAgICB0aGVtZXNUb0RlYWN0aXZhdGUucHVzaChhY3RpdmVVcmwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhbHJlYWR5IHByZXNlbnQgaW4gYWN0aXZlIHRoZW1lcywgcmVtb3ZlIGl0IGZyb20gdGhlbWVzVG9BY3RpdmF0ZVxuICAgICAgICAgICAgdGhlbWVzVG9BY3RpdmF0ZSA9IHRoZW1lc1RvQWN0aXZhdGUuZmlsdGVyKGZ1bmN0aW9uIChjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPSBhY3RpdmVVcmw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yM1tcInJldHVyblwiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IzW1wicmV0dXJuXCJdKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubG9nZ2luZ0VuYWJsZWQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJEZWFjdGl2YXRpbmcgdGhlbWVzOlwiLCB0aGVtZXNUb0RlYWN0aXZhdGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFjdGl2YXRpbmcgdGhlbWVzOlwiLCB0aGVtZXNUb0FjdGl2YXRlKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2kgPSAwLCBfdGhlbWVzVG9EZWFjdGl2YXRlID0gdGhlbWVzVG9EZWFjdGl2YXRlOyBfaSA8IF90aGVtZXNUb0RlYWN0aXZhdGUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciB0aGVtZSA9IF90aGVtZXNUb0RlYWN0aXZhdGVbX2ldO1xuICAgICAgICB0aGlzLmRlYWN0aXZhdGVUaGVtZSh0aGVtZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWN0aXZlVGhlbWVzID0gaW5jb21pbmdVcmxzO1xuICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gdHJ1ZTtcbiAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjQgPSBmYWxzZTtcbiAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjQgPSB0aGVtZXNUb0FjdGl2YXRlW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA0OyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb240ID0gKF9zdGVwNCA9IF9pdGVyYXRvcjQubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgPSB0cnVlKSB7XG4gICAgICAgICAgdmFyIHVybCA9IF9zdGVwNC52YWx1ZTtcblxuICAgICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgICAgIGxpbmsuaWQgPSBidG9hKHVybCk7XG4gICAgICAgICAgbGluay5ocmVmID0gdXJsO1xuICAgICAgICAgIGxpbmsudHlwZSA9IFwidGV4dC9jc3NcIjtcbiAgICAgICAgICBsaW5rLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuICAgICAgICAgIGxpbmsubWVkaWEgPSBcInNjcmVlbixwcmludFwiO1xuICAgICAgICAgIGxpbmsuY2xhc3NOYW1lID0gXCJjdXN0b20tdGhlbWVcIjtcbiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjQgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvcjQgPSBlcnI7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjQgJiYgX2l0ZXJhdG9yNFtcInJldHVyblwiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3I0W1wicmV0dXJuXCJdKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjQpIHtcbiAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yNDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGhlbWVFbGVtZW50Rm9yVXJsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRoZW1lRWxlbWVudEZvclVybCh1cmwpIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IEFycmF5LmZyb20oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImN1c3RvbS10aGVtZVwiKSkuc2xpY2UoKTtcbiAgICAgIHJldHVybiBlbGVtZW50cy5maW5kKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIC8vIFdlIHVzZWQgdG8gc2VhcmNoIGhlcmUgYnkgYGhyZWZgLCBidXQgb24gZGVza3RvcCwgd2l0aCBsb2NhbCBmaWxlOi8vIHVybHMsIHRoYXQgZGlkbid0IHdvcmsgZm9yIHNvbWUgcmVhc29uLlxuICAgICAgICByZXR1cm4gZWxlbWVudC5pZCA9PSBidG9hKHVybCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGVhY3RpdmF0ZVRoZW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlYWN0aXZhdGVUaGVtZSh1cmwpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy50aGVtZUVsZW1lbnRGb3JVcmwodXJsKTtcblxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogVGhlbWUgY2FjaGluZyBpcyBjdXJyZW50bHkgZGlzYWJsZWQuIE1pZ2h0IGJlIGVuYWJsZWQgaW4gdGhlIGZ1dHVyZSBpZiBuZWNjZXNzYXJ5LiAqL1xuXG4gICAgLypcbiAgICBhY3RpdmF0ZUNhY2hlZFRoZW1lcygpIHtcbiAgICAgIGxldCB0aGVtZXMgPSB0aGlzLmdldENhY2hlZFRoZW1lVXJscygpO1xuICAgICAgbGV0IHdyaXRlVG9DYWNoZSA9IGZhbHNlO1xuICAgICAgaWYodGhpcy5sb2dnaW5nRW5hYmxlZCkgeyBjb25zb2xlLmxvZyhcIkFjdGl2YXRpbmcgY2FjaGVkIHRoZW1lc1wiLCB0aGVtZXMpOyB9XG4gICAgICB0aGlzLmFjdGl2YXRlVGhlbWVzKHRoZW1lcywgd3JpdGVUb0NhY2hlKTtcbiAgICB9XG4gICAgIGNhY2hlVGhlbWVVcmxzKHVybHMpIHtcbiAgICAgIGlmKHRoaXMubG9nZ2luZ0VuYWJsZWQpIHsgY29uc29sZS5sb2coXCJDYWNoaW5nIHRoZW1lIHVybHNcIiwgdXJscyk7IH1cbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY2FjaGVkVGhlbWVVcmxzXCIsIEpTT04uc3RyaW5naWZ5KHVybHMpKTtcbiAgICB9XG4gICAgIGRlY2FjaGVUaGVtZVVybHMoKSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImNhY2hlZFRoZW1lVXJsc1wiKTtcbiAgICB9XG4gICAgIGdldENhY2hlZFRoZW1lVXJscygpIHtcbiAgICAgIGxldCB1cmxzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjYWNoZWRUaGVtZVVybHNcIik7XG4gICAgICBpZih1cmxzKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHVybHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH1cbiAgICAqL1xuXG4gICAgLyogVXRpbGl0aWVzICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZW5lcmF0ZVVVSURcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xuICAgICAgdmFyIGNyeXB0byA9IHdpbmRvdy5jcnlwdG8gfHwgd2luZG93Lm1zQ3J5cHRvO1xuXG4gICAgICBpZiAoY3J5cHRvKSB7XG4gICAgICAgIHZhciBidWYgPSBuZXcgVWludDMyQXJyYXkoNCk7XG4gICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnVmKTtcbiAgICAgICAgdmFyIGlkeCA9IC0xO1xuICAgICAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgIGlkeCsrO1xuICAgICAgICAgIHZhciByID0gYnVmW2lkeCA+PiAzXSA+PiBpZHggJSA4ICogNCAmIDE1O1xuICAgICAgICAgIHZhciB2ID0gYyA9PSAneCcgPyByIDogciAmIDB4MyB8IDB4ODtcbiAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgICAgICBpZiAod2luZG93LnBlcmZvcm1hbmNlICYmIHR5cGVvZiB3aW5kb3cucGVyZm9ybWFuY2Uubm93ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBkICs9IHBlcmZvcm1hbmNlLm5vdygpOyAvL3VzZSBoaWdoLXByZWNpc2lvbiB0aW1lciBpZiBhdmFpbGFibGVcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1dWlkID0gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgIHZhciByID0gKGQgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYgfCAwO1xuICAgICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICAgICAgcmV0dXJuIChjID09ICd4JyA/IHIgOiByICYgMHgzIHwgMHg4KS50b1N0cmluZygxNik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdXVpZDtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29tcG9uZW50TWFuYWdlcjtcbn0oKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT0gXCJ1bmRlZmluZWRcIikge1xuICBtb2R1bGUuZXhwb3J0cyA9IENvbXBvbmVudE1hbmFnZXI7XG59XG5cbmlmICh3aW5kb3cpIHtcbiAgd2luZG93LkNvbXBvbmVudE1hbmFnZXIgPSBDb21wb25lbnRNYW5hZ2VyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdC5qcy5tYXBcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZWQtY2xzIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLXNuLXN0eWxla2l0LWVkaXRvci1mb3JlZ3JvdW5kLWNvbG9yKTtcXG59XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbmRleC5odG1sXCI7IiwiaW1wb3J0ICcuL2luZGV4Lmh0bWwnO1xuaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xuaW1wb3J0ICogYXMgQ29tcG9uZW50TWFuYWdlciBmcm9tICdzbi1jb21wb25lbnRzLWFwaSc7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIGNvbnN0IGNvbXBvbmVudE1hbmFnZXIgPSBuZXcgQ29tcG9uZW50TWFuYWdlcigpO1xuICBjb25zb2xlLmxvZyhjb21wb25lbnRNYW5hZ2VyKTtcbn1cblxuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==