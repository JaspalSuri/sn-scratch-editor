!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);n.p,n.p,n.p,n.p,n.p,n.p,n.p,n.p;function r(t){this.content=t}r.prototype={constructor:r,find:function(t){for(var e=0;e<this.content.length;e+=2)if(this.content[e]===t)return e;return-1},get:function(t){var e=this.find(t);return-1==e?void 0:this.content[e+1]},update:function(t,e,n){var o=n&&n!=t?this.remove(n):this,i=o.find(t),s=o.content.slice();return-1==i?s.push(n||t,e):(s[i+1]=e,n&&(s[i]=n)),new r(s)},remove:function(t){var e=this.find(t);if(-1==e)return this;var n=this.content.slice();return n.splice(e,2),new r(n)},addToStart:function(t,e){return new r([t,e].concat(this.remove(t).content))},addToEnd:function(t,e){var n=this.remove(t).content.slice();return n.push(t,e),new r(n)},addBefore:function(t,e,n){var o=this.remove(e),i=o.content.slice(),s=o.find(t);return i.splice(-1==s?i.length:s,0,e,n),new r(i)},forEach:function(t){for(var e=0;e<this.content.length;e+=2)t(this.content[e],this.content[e+1])},prepend:function(t){return(t=r.from(t)).size?new r(t.content.concat(this.subtract(t).content)):this},append:function(t){return(t=r.from(t)).size?new r(this.subtract(t).content.concat(t.content)):this},subtract:function(t){var e=this;t=r.from(t);for(var n=0;n<t.content.length;n+=2)e=e.remove(t.content[n]);return e},get size(){return this.content.length>>1}},r.from=function(t){if(t instanceof r)return t;var e=[];if(t)for(var n in t)e.push(n,t[n]);return new r(e)};var o=r;var i=function(t,e){if(this.content=t,this.size=e||0,null==e)for(var n=0;n<t.length;n++)this.size+=t[n].nodeSize},s={firstChild:{configurable:!0},lastChild:{configurable:!0},childCount:{configurable:!0}};i.prototype.nodesBetween=function(t,e,n,r,o){void 0===r&&(r=0);for(var i=0,s=0;s<e;i++){var a=this.content[i],c=s+a.nodeSize;if(c>t&&!1!==n(a,r+s,o,i)&&a.content.size){var p=s+1;a.nodesBetween(Math.max(0,t-p),Math.min(a.content.size,e-p),n,r+p)}s=c}},i.prototype.descendants=function(t){this.nodesBetween(0,this.size,t)},i.prototype.textBetween=function(t,e,n,r){var o="",i=!0;return this.nodesBetween(t,e,(function(s,a){s.isText?(o+=s.text.slice(Math.max(t,a)-a,e-a),i=!n):s.isLeaf&&r?(o+=r,i=!n):!i&&s.isBlock&&(o+=n,i=!0)}),0),o},i.prototype.append=function(t){if(!t.size)return this;if(!this.size)return t;var e=this.lastChild,n=t.firstChild,r=this.content.slice(),o=0;for(e.isText&&e.sameMarkup(n)&&(r[r.length-1]=e.withText(e.text+n.text),o=1);o<t.content.length;o++)r.push(t.content[o]);return new i(r,this.size+t.size)},i.prototype.cut=function(t,e){if(null==e&&(e=this.size),0==t&&e==this.size)return this;var n=[],r=0;if(e>t)for(var o=0,s=0;s<e;o++){var a=this.content[o],c=s+a.nodeSize;c>t&&((s<t||c>e)&&(a=a.isText?a.cut(Math.max(0,t-s),Math.min(a.text.length,e-s)):a.cut(Math.max(0,t-s-1),Math.min(a.content.size,e-s-1))),n.push(a),r+=a.nodeSize),s=c}return new i(n,r)},i.prototype.cutByIndex=function(t,e){return t==e?i.empty:0==t&&e==this.content.length?this:new i(this.content.slice(t,e))},i.prototype.replaceChild=function(t,e){var n=this.content[t];if(n==e)return this;var r=this.content.slice(),o=this.size+e.nodeSize-n.nodeSize;return r[t]=e,new i(r,o)},i.prototype.addToStart=function(t){return new i([t].concat(this.content),this.size+t.nodeSize)},i.prototype.addToEnd=function(t){return new i(this.content.concat(t),this.size+t.nodeSize)},i.prototype.eq=function(t){if(this.content.length!=t.content.length)return!1;for(var e=0;e<this.content.length;e++)if(!this.content[e].eq(t.content[e]))return!1;return!0},s.firstChild.get=function(){return this.content.length?this.content[0]:null},s.lastChild.get=function(){return this.content.length?this.content[this.content.length-1]:null},s.childCount.get=function(){return this.content.length},i.prototype.child=function(t){var e=this.content[t];if(!e)throw new RangeError("Index "+t+" out of range for "+this);return e},i.prototype.maybeChild=function(t){return this.content[t]},i.prototype.forEach=function(t){for(var e=0,n=0;e<this.content.length;e++){var r=this.content[e];t(r,n,e),n+=r.nodeSize}},i.prototype.findDiffStart=function(t,e){return void 0===e&&(e=0),function t(e,n,r){for(var o=0;;o++){if(o==e.childCount||o==n.childCount)return e.childCount==n.childCount?null:r;var i=e.child(o),s=n.child(o);if(i!=s){if(!i.sameMarkup(s))return r;if(i.isText&&i.text!=s.text){for(var a=0;i.text[a]==s.text[a];a++)r++;return r}if(i.content.size||s.content.size){var c=t(i.content,s.content,r+1);if(null!=c)return c}r+=i.nodeSize}else r+=i.nodeSize}}(this,t,e)},i.prototype.findDiffEnd=function(t,e,n){return void 0===e&&(e=this.size),void 0===n&&(n=t.size),function t(e,n,r,o){for(var i=e.childCount,s=n.childCount;;){if(0==i||0==s)return i==s?null:{a:r,b:o};var a=e.child(--i),c=n.child(--s),p=a.nodeSize;if(a!=c){if(!a.sameMarkup(c))return{a:r,b:o};if(a.isText&&a.text!=c.text){for(var h=0,l=Math.min(a.text.length,c.text.length);h<l&&a.text[a.text.length-h-1]==c.text[c.text.length-h-1];)h++,r--,o--;return{a:r,b:o}}if(a.content.size||c.content.size){var f=t(a.content,c.content,r-1,o-1);if(f)return f}r-=p,o-=p}else r-=p,o-=p}}(this,t,e,n)},i.prototype.findIndex=function(t,e){if(void 0===e&&(e=-1),0==t)return c(0,t);if(t==this.size)return c(this.content.length,t);if(t>this.size||t<0)throw new RangeError("Position "+t+" outside of fragment ("+this+")");for(var n=0,r=0;;n++){var o=r+this.child(n).nodeSize;if(o>=t)return o==t||e>0?c(n+1,o):c(n,r);r=o}},i.prototype.toString=function(){return"<"+this.toStringInner()+">"},i.prototype.toStringInner=function(){return this.content.join(", ")},i.prototype.toJSON=function(){return this.content.length?this.content.map((function(t){return t.toJSON()})):null},i.fromJSON=function(t,e){if(!e)return i.empty;if(!Array.isArray(e))throw new RangeError("Invalid input for Fragment.fromJSON");return new i(e.map(t.nodeFromJSON))},i.fromArray=function(t){if(!t.length)return i.empty;for(var e,n=0,r=0;r<t.length;r++){var o=t[r];n+=o.nodeSize,r&&o.isText&&t[r-1].sameMarkup(o)?(e||(e=t.slice(0,r)),e[e.length-1]=o.withText(e[e.length-1].text+o.text)):e&&e.push(o)}return new i(e||t,n)},i.from=function(t){if(!t)return i.empty;if(t instanceof i)return t;if(Array.isArray(t))return this.fromArray(t);if(t.attrs)return new i([t],t.nodeSize);throw new RangeError("Can not convert "+t+" to a Fragment"+(t.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))},Object.defineProperties(i.prototype,s);var a={index:0,offset:0};function c(t,e){return a.index=t,a.offset=e,a}function p(t,e){if(t===e)return!0;if(!t||"object"!=typeof t||!e||"object"!=typeof e)return!1;var n=Array.isArray(t);if(Array.isArray(e)!=n)return!1;if(n){if(t.length!=e.length)return!1;for(var r=0;r<t.length;r++)if(!p(t[r],e[r]))return!1}else{for(var o in t)if(!(o in e&&p(t[o],e[o])))return!1;for(var i in e)if(!(i in t))return!1}return!0}i.empty=new i([],0);var h=function(t,e){this.type=t,this.attrs=e};function l(t){var e=Error.call(this,t);return e.__proto__=l.prototype,e}h.prototype.addToSet=function(t){for(var e,n=!1,r=0;r<t.length;r++){var o=t[r];if(this.eq(o))return t;if(this.type.excludes(o.type))e||(e=t.slice(0,r));else{if(o.type.excludes(this.type))return t;!n&&o.type.rank>this.type.rank&&(e||(e=t.slice(0,r)),e.push(this),n=!0),e&&e.push(o)}}return e||(e=t.slice()),n||e.push(this),e},h.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return t.slice(0,e).concat(t.slice(e+1));return t},h.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(this.eq(t[e]))return!0;return!1},h.prototype.eq=function(t){return this==t||this.type==t.type&&p(this.attrs,t.attrs)},h.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return t},h.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Mark.fromJSON");var n=t.marks[e.type];if(!n)throw new RangeError("There is no mark type "+e.type+" in this schema");return n.create(e.attrs)},h.sameSet=function(t,e){if(t==e)return!0;if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].eq(e[n]))return!1;return!0},h.setFrom=function(t){if(!t||0==t.length)return h.none;if(t instanceof h)return[t];var e=t.slice();return e.sort((function(t,e){return t.type.rank-e.type.rank})),e},h.none=[],l.prototype=Object.create(Error.prototype),l.prototype.constructor=l,l.prototype.name="ReplaceError";var f=function(t,e,n){this.content=t,this.openStart=e,this.openEnd=n},d={size:{configurable:!0}};function u(t,e,n){if(n.openStart>t.depth)throw new l("Inserted content deeper than insertion position");if(t.depth-n.openStart!=e.depth-n.openEnd)throw new l("Inconsistent open depths");return function t(e,n,r,o){var s=e.index(o),a=e.node(o);if(s==n.index(o)&&o<e.depth-r.openStart){var c=t(e,n,r,o+1);return a.copy(a.content.replaceChild(s,c))}if(r.content.size){if(r.openStart||r.openEnd||e.depth!=o||n.depth!=o){var p=function(t,e){for(var n=e.depth-t.openStart,r=e.node(n).copy(t.content),o=n-1;o>=0;o--)r=e.node(o).copy(i.from(r));return{start:r.resolveNoCache(t.openStart+n),end:r.resolveNoCache(r.content.size-t.openEnd-n)}}(r,e),h=p.start,l=p.end;return w(a,function t(e,n,r,o,s){var a=e.depth>s&&v(e,n,s+1),c=o.depth>s&&v(r,o,s+1),p=[];y(null,e,s,p),a&&c&&n.index(s)==r.index(s)?(m(a,c),g(w(a,t(e,n,r,o,s+1)),p)):(a&&g(w(a,b(e,n,s+1)),p),y(n,r,s,p),c&&g(w(c,b(r,o,s+1)),p));return y(o,null,s,p),new i(p)}(e,h,l,n,o))}var f=e.parent,d=f.content;return w(f,d.cut(0,e.parentOffset).append(r.content).append(d.cut(n.parentOffset)))}return w(a,b(e,n,o))}(t,e,n,0)}function m(t,e){if(!e.type.compatibleContent(t.type))throw new l("Cannot join "+e.type.name+" onto "+t.type.name)}function v(t,e,n){var r=t.node(n);return m(r,e.node(n)),r}function g(t,e){var n=e.length-1;n>=0&&t.isText&&t.sameMarkup(e[n])?e[n]=t.withText(e[n].text+t.text):e.push(t)}function y(t,e,n,r){var o=(e||t).node(n),i=0,s=e?e.index(n):o.childCount;t&&(i=t.index(n),t.depth>n?i++:t.textOffset&&(g(t.nodeAfter,r),i++));for(var a=i;a<s;a++)g(o.child(a),r);e&&e.depth==n&&e.textOffset&&g(e.nodeBefore,r)}function w(t,e){if(!t.type.validContent(e))throw new l("Invalid content for node "+t.type.name);return t.copy(e)}function b(t,e,n){var r=[];(y(null,t,n,r),t.depth>n)&&g(w(v(t,e,n+1),b(t,e,n+1)),r);return y(e,null,n,r),new i(r)}d.size.get=function(){return this.content.size-this.openStart-this.openEnd},f.prototype.insertAt=function(t,e){var n=function t(e,n,r,o){var i=e.findIndex(n),s=i.index,a=i.offset,c=e.maybeChild(s);if(a==n||c.isText)return o&&!o.canReplace(s,s,r)?null:e.cut(0,n).append(r).append(e.cut(n));var p=t(c.content,n-a-1,r);return p&&e.replaceChild(s,c.copy(p))}(this.content,t+this.openStart,e,null);return n&&new f(n,this.openStart,this.openEnd)},f.prototype.removeBetween=function(t,e){return new f(function t(e,n,r){var o=e.findIndex(n),i=o.index,s=o.offset,a=e.maybeChild(i),c=e.findIndex(r),p=c.index,h=c.offset;if(s==n||a.isText){if(h!=r&&!e.child(p).isText)throw new RangeError("Removing non-flat range");return e.cut(0,n).append(e.cut(r))}if(i!=p)throw new RangeError("Removing non-flat range");return e.replaceChild(i,a.copy(t(a.content,n-s-1,r-s-1)))}(this.content,t+this.openStart,e+this.openStart),this.openStart,this.openEnd)},f.prototype.eq=function(t){return this.content.eq(t.content)&&this.openStart==t.openStart&&this.openEnd==t.openEnd},f.prototype.toString=function(){return this.content+"("+this.openStart+","+this.openEnd+")"},f.prototype.toJSON=function(){if(!this.content.size)return null;var t={content:this.content.toJSON()};return this.openStart>0&&(t.openStart=this.openStart),this.openEnd>0&&(t.openEnd=this.openEnd),t},f.fromJSON=function(t,e){if(!e)return f.empty;var n=e.openStart||0,r=e.openEnd||0;if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid input for Slice.fromJSON");return new f(i.fromJSON(t,e.content),e.openStart||0,e.openEnd||0)},f.maxOpen=function(t,e){void 0===e&&(e=!0);for(var n=0,r=0,o=t.firstChild;o&&!o.isLeaf&&(e||!o.type.spec.isolating);o=o.firstChild)n++;for(var i=t.lastChild;i&&!i.isLeaf&&(e||!i.type.spec.isolating);i=i.lastChild)r++;return new f(t,n,r)},Object.defineProperties(f.prototype,d),f.empty=new f(i.empty,0,0);var k=function(t,e,n){this.pos=t,this.path=e,this.depth=e.length/3-1,this.parentOffset=n},x={parent:{configurable:!0},doc:{configurable:!0},textOffset:{configurable:!0},nodeAfter:{configurable:!0},nodeBefore:{configurable:!0}};k.prototype.resolveDepth=function(t){return null==t?this.depth:t<0?this.depth+t:t},x.parent.get=function(){return this.node(this.depth)},x.doc.get=function(){return this.node(0)},k.prototype.node=function(t){return this.path[3*this.resolveDepth(t)]},k.prototype.index=function(t){return this.path[3*this.resolveDepth(t)+1]},k.prototype.indexAfter=function(t){return t=this.resolveDepth(t),this.index(t)+(t!=this.depth||this.textOffset?1:0)},k.prototype.start=function(t){return 0==(t=this.resolveDepth(t))?0:this.path[3*t-1]+1},k.prototype.end=function(t){return t=this.resolveDepth(t),this.start(t)+this.node(t).content.size},k.prototype.before=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position before the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]},k.prototype.after=function(t){if(!(t=this.resolveDepth(t)))throw new RangeError("There is no position after the top-level node");return t==this.depth+1?this.pos:this.path[3*t-1]+this.path[3*t].nodeSize},x.textOffset.get=function(){return this.pos-this.path[this.path.length-1]},x.nodeAfter.get=function(){var t=this.parent,e=this.index(this.depth);if(e==t.childCount)return null;var n=this.pos-this.path[this.path.length-1],r=t.child(e);return n?t.child(e).cut(n):r},x.nodeBefore.get=function(){var t=this.index(this.depth),e=this.pos-this.path[this.path.length-1];return e?this.parent.child(t).cut(0,e):0==t?null:this.parent.child(t-1)},k.prototype.marks=function(){var t=this.parent,e=this.index();if(0==t.content.size)return h.none;if(this.textOffset)return t.child(e).marks;var n=t.maybeChild(e-1),r=t.maybeChild(e);if(!n){var o=n;n=r,r=o}for(var i=n.marks,s=0;s<i.length;s++)!1!==i[s].type.spec.inclusive||r&&i[s].isInSet(r.marks)||(i=i[s--].removeFromSet(i));return i},k.prototype.marksAcross=function(t){var e=this.parent.maybeChild(this.index());if(!e||!e.isInline)return null;for(var n=e.marks,r=t.parent.maybeChild(t.index()),o=0;o<n.length;o++)!1!==n[o].type.spec.inclusive||r&&n[o].isInSet(r.marks)||(n=n[o--].removeFromSet(n));return n},k.prototype.sharedDepth=function(t){for(var e=this.depth;e>0;e--)if(this.start(e)<=t&&this.end(e)>=t)return e;return 0},k.prototype.blockRange=function(t,e){if(void 0===t&&(t=this),t.pos<this.pos)return t.blockRange(this);for(var n=this.depth-(this.parent.inlineContent||this.pos==t.pos?1:0);n>=0;n--)if(t.pos<=this.end(n)&&(!e||e(this.node(n))))return new M(this,t,n)},k.prototype.sameParent=function(t){return this.pos-this.parentOffset==t.pos-t.parentOffset},k.prototype.max=function(t){return t.pos>this.pos?t:this},k.prototype.min=function(t){return t.pos<this.pos?t:this},k.prototype.toString=function(){for(var t="",e=1;e<=this.depth;e++)t+=(t?"/":"")+this.node(e).type.name+"_"+this.index(e-1);return t+":"+this.parentOffset},k.resolve=function(t,e){if(!(e>=0&&e<=t.content.size))throw new RangeError("Position "+e+" out of range");for(var n=[],r=0,o=e,i=t;;){var s=i.content.findIndex(o),a=s.index,c=s.offset,p=o-c;if(n.push(i,a,r+c),!p)break;if((i=i.child(a)).isText)break;o=p-1,r+=c+1}return new k(e,n,o)},k.resolveCached=function(t,e){for(var n=0;n<S.length;n++){var r=S[n];if(r.pos==e&&r.doc==t)return r}var o=S[O]=k.resolve(t,e);return O=(O+1)%C,o},Object.defineProperties(k.prototype,x);var S=[],O=0,C=12,M=function(t,e,n){this.$from=t,this.$to=e,this.depth=n},N={start:{configurable:!0},end:{configurable:!0},parent:{configurable:!0},startIndex:{configurable:!0},endIndex:{configurable:!0}};N.start.get=function(){return this.$from.before(this.depth+1)},N.end.get=function(){return this.$to.after(this.depth+1)},N.parent.get=function(){return this.$from.node(this.depth)},N.startIndex.get=function(){return this.$from.index(this.depth)},N.endIndex.get=function(){return this.$to.indexAfter(this.depth)},Object.defineProperties(M.prototype,N);var T=Object.create(null),D=function(t,e,n,r){this.type=t,this.attrs=e,this.content=n||i.empty,this.marks=r||h.none},E={nodeSize:{configurable:!0},childCount:{configurable:!0},textContent:{configurable:!0},firstChild:{configurable:!0},lastChild:{configurable:!0},isBlock:{configurable:!0},isTextblock:{configurable:!0},inlineContent:{configurable:!0},isInline:{configurable:!0},isText:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};E.nodeSize.get=function(){return this.isLeaf?1:2+this.content.size},E.childCount.get=function(){return this.content.childCount},D.prototype.child=function(t){return this.content.child(t)},D.prototype.maybeChild=function(t){return this.content.maybeChild(t)},D.prototype.forEach=function(t){this.content.forEach(t)},D.prototype.nodesBetween=function(t,e,n,r){void 0===r&&(r=0),this.content.nodesBetween(t,e,n,r,this)},D.prototype.descendants=function(t){this.nodesBetween(0,this.content.size,t)},E.textContent.get=function(){return this.textBetween(0,this.content.size,"")},D.prototype.textBetween=function(t,e,n,r){return this.content.textBetween(t,e,n,r)},E.firstChild.get=function(){return this.content.firstChild},E.lastChild.get=function(){return this.content.lastChild},D.prototype.eq=function(t){return this==t||this.sameMarkup(t)&&this.content.eq(t.content)},D.prototype.sameMarkup=function(t){return this.hasMarkup(t.type,t.attrs,t.marks)},D.prototype.hasMarkup=function(t,e,n){return this.type==t&&p(this.attrs,e||t.defaultAttrs||T)&&h.sameSet(this.marks,n||h.none)},D.prototype.copy=function(t){return void 0===t&&(t=null),t==this.content?this:new this.constructor(this.type,this.attrs,t,this.marks)},D.prototype.mark=function(t){return t==this.marks?this:new this.constructor(this.type,this.attrs,this.content,t)},D.prototype.cut=function(t,e){return 0==t&&e==this.content.size?this:this.copy(this.content.cut(t,e))},D.prototype.slice=function(t,e,n){if(void 0===e&&(e=this.content.size),void 0===n&&(n=!1),t==e)return f.empty;var r=this.resolve(t),o=this.resolve(e),i=n?0:r.sharedDepth(e),s=r.start(i),a=r.node(i).content.cut(r.pos-s,o.pos-s);return new f(a,r.depth-i,o.depth-i)},D.prototype.replace=function(t,e,n){return u(this.resolve(t),this.resolve(e),n)},D.prototype.nodeAt=function(t){for(var e=this;;){var n=e.content.findIndex(t),r=n.index,o=n.offset;if(!(e=e.maybeChild(r)))return null;if(o==t||e.isText)return e;t-=o+1}},D.prototype.childAfter=function(t){var e=this.content.findIndex(t),n=e.index,r=e.offset;return{node:this.content.maybeChild(n),index:n,offset:r}},D.prototype.childBefore=function(t){if(0==t)return{node:null,index:0,offset:0};var e=this.content.findIndex(t),n=e.index,r=e.offset;if(r<t)return{node:this.content.child(n),index:n,offset:r};var o=this.content.child(n-1);return{node:o,index:n-1,offset:r-o.nodeSize}},D.prototype.resolve=function(t){return k.resolveCached(this,t)},D.prototype.resolveNoCache=function(t){return k.resolve(this,t)},D.prototype.rangeHasMark=function(t,e,n){var r=!1;return e>t&&this.nodesBetween(t,e,(function(t){return n.isInSet(t.marks)&&(r=!0),!r})),r},E.isBlock.get=function(){return this.type.isBlock},E.isTextblock.get=function(){return this.type.isTextblock},E.inlineContent.get=function(){return this.type.inlineContent},E.isInline.get=function(){return this.type.isInline},E.isText.get=function(){return this.type.isText},E.isLeaf.get=function(){return this.type.isLeaf},E.isAtom.get=function(){return this.type.isAtom},D.prototype.toString=function(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);var t=this.type.name;return this.content.size&&(t+="("+this.content.toStringInner()+")"),R(this.marks,t)},D.prototype.contentMatchAt=function(t){var e=this.type.contentMatch.matchFragment(this.content,0,t);if(!e)throw new Error("Called contentMatchAt on a node with invalid content");return e},D.prototype.canReplace=function(t,e,n,r,o){void 0===n&&(n=i.empty),void 0===r&&(r=0),void 0===o&&(o=n.childCount);var s=this.contentMatchAt(t).matchFragment(n,r,o),a=s&&s.matchFragment(this.content,e);if(!a||!a.validEnd)return!1;for(var c=r;c<o;c++)if(!this.type.allowsMarks(n.child(c).marks))return!1;return!0},D.prototype.canReplaceWith=function(t,e,n,r){if(r&&!this.type.allowsMarks(r))return!1;var o=this.contentMatchAt(t).matchType(n),i=o&&o.matchFragment(this.content,e);return!!i&&i.validEnd},D.prototype.canAppend=function(t){return t.content.size?this.canReplace(this.childCount,this.childCount,t.content):this.type.compatibleContent(t.type)},D.prototype.check=function(){if(!this.type.validContent(this.content))throw new RangeError("Invalid content for node "+this.type.name+": "+this.content.toString().slice(0,50));this.content.forEach((function(t){return t.check()}))},D.prototype.toJSON=function(){var t={type:this.type.name};for(var e in this.attrs){t.attrs=this.attrs;break}return this.content.size&&(t.content=this.content.toJSON()),this.marks.length&&(t.marks=this.marks.map((function(t){return t.toJSON()}))),t},D.fromJSON=function(t,e){if(!e)throw new RangeError("Invalid input for Node.fromJSON");var n=null;if(e.marks){if(!Array.isArray(e.marks))throw new RangeError("Invalid mark data for Node.fromJSON");n=e.marks.map(t.markFromJSON)}if("text"==e.type){if("string"!=typeof e.text)throw new RangeError("Invalid text node in JSON");return t.text(e.text,n)}var r=i.fromJSON(t,e.content);return t.nodeType(e.type).create(e.attrs,r,n)},Object.defineProperties(D.prototype,E);var A=function(t){function e(e,n,r,o){if(t.call(this,e,n,null,o),!r)throw new RangeError("Empty text nodes are not allowed");this.text=r}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={textContent:{configurable:!0},nodeSize:{configurable:!0}};return e.prototype.toString=function(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):R(this.marks,JSON.stringify(this.text))},n.textContent.get=function(){return this.text},e.prototype.textBetween=function(t,e){return this.text.slice(t,e)},n.nodeSize.get=function(){return this.text.length},e.prototype.mark=function(t){return t==this.marks?this:new e(this.type,this.attrs,this.text,t)},e.prototype.withText=function(t){return t==this.text?this:new e(this.type,this.attrs,t,this.marks)},e.prototype.cut=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.text.length),0==t&&e==this.text.length?this:this.withText(this.text.slice(t,e))},e.prototype.eq=function(t){return this.sameMarkup(t)&&this.text==t.text},e.prototype.toJSON=function(){var e=t.prototype.toJSON.call(this);return e.text=this.text,e},Object.defineProperties(e.prototype,n),e}(D);function R(t,e){for(var n=t.length-1;n>=0;n--)e=t[n].type.name+"("+e+")";return e}var I=function(t){this.validEnd=t,this.next=[],this.wrapCache=[]},z={inlineContent:{configurable:!0},defaultType:{configurable:!0},edgeCount:{configurable:!0}};I.parse=function(t,e){var n=new P(t,e);if(null==n.next)return I.empty;var r=$(n);n.next&&n.err("Unexpected trailing text");var o=function(t){var e=Object.create(null);return function n(r){var o=[];r.forEach((function(e){t[e].forEach((function(e){var n=e.term,r=e.to;if(n){var i=o.indexOf(n),s=i>-1&&o[i+1];J(t,r).forEach((function(t){s||o.push(n,s=[]),-1==s.indexOf(t)&&s.push(t)}))}}))}));for(var i=e[r.join(",")]=new I(r.indexOf(t.length-1)>-1),s=0;s<o.length;s+=2){var a=o[s+1].sort(L);i.next.push(o[s],e[a.join(",")]||n(a))}return i}(J(t,0))}(function(t){var e=[[]];return o(function t(e,i){if("choice"==e.type)return e.exprs.reduce((function(e,n){return e.concat(t(n,i))}),[]);if("seq"==e.type)for(var s=0;;s++){var a=t(e.exprs[s],i);if(s==e.exprs.length-1)return a;o(a,i=n())}else{if("star"==e.type){var c=n();return r(i,c),o(t(e.expr,c),c),[r(c)]}if("plus"==e.type){var p=n();return o(t(e.expr,i),p),o(t(e.expr,p),p),[r(p)]}if("opt"==e.type)return[r(i)].concat(t(e.expr,i));if("range"==e.type){for(var h=i,l=0;l<e.min;l++){var f=n();o(t(e.expr,h),f),h=f}if(-1==e.max)o(t(e.expr,h),h);else for(var d=e.min;d<e.max;d++){var u=n();r(h,u),o(t(e.expr,h),u),h=u}return[r(h)]}if("name"==e.type)return[r(i,null,e.value)]}}(t,0),n()),e;function n(){return e.push([])-1}function r(t,n,r){var o={term:r,to:n};return e[t].push(o),o}function o(t,e){t.forEach((function(t){return t.to=e}))}}(r));return function(t,e){for(var n=0,r=[t];n<r.length;n++){for(var o=r[n],i=!o.validEnd,s=[],a=0;a<o.next.length;a+=2){var c=o.next[a],p=o.next[a+1];s.push(c.name),!i||c.isText||c.hasRequiredAttrs()||(i=!1),-1==r.indexOf(p)&&r.push(p)}i&&e.err("Only non-generatable nodes ("+s.join(", ")+") in a required position")}}(o,n),o},I.prototype.matchType=function(t){for(var e=0;e<this.next.length;e+=2)if(this.next[e]==t)return this.next[e+1];return null},I.prototype.matchFragment=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.childCount);for(var r=this,o=e;r&&o<n;o++)r=r.matchType(t.child(o).type);return r},z.inlineContent.get=function(){var t=this.next[0];return!!t&&t.isInline},z.defaultType.get=function(){for(var t=0;t<this.next.length;t+=2){var e=this.next[t];if(!e.isText&&!e.hasRequiredAttrs())return e}},I.prototype.compatible=function(t){for(var e=0;e<this.next.length;e+=2)for(var n=0;n<t.next.length;n+=2)if(this.next[e]==t.next[n])return!0;return!1},I.prototype.fillBefore=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=0);var r=[this];return function o(s,a){var c=s.matchFragment(t,n);if(c&&(!e||c.validEnd))return i.from(a.map((function(t){return t.createAndFill()})));for(var p=0;p<s.next.length;p+=2){var h=s.next[p],l=s.next[p+1];if(!h.isText&&!h.hasRequiredAttrs()&&-1==r.indexOf(l)){r.push(l);var f=o(l,a.concat(h));if(f)return f}}}(this,[])},I.prototype.findWrapping=function(t){for(var e=0;e<this.wrapCache.length;e+=2)if(this.wrapCache[e]==t)return this.wrapCache[e+1];var n=this.computeWrapping(t);return this.wrapCache.push(t,n),n},I.prototype.computeWrapping=function(t){for(var e=Object.create(null),n=[{match:this,type:null,via:null}];n.length;){var r=n.shift(),o=r.match;if(o.matchType(t)){for(var i=[],s=r;s.type;s=s.via)i.push(s.type);return i.reverse()}for(var a=0;a<o.next.length;a+=2){var c=o.next[a];c.isLeaf||c.hasRequiredAttrs()||c.name in e||r.type&&!o.next[a+1].validEnd||(n.push({match:c.contentMatch,type:c,via:r}),e[c.name]=!0)}}},z.edgeCount.get=function(){return this.next.length>>1},I.prototype.edge=function(t){var e=t<<1;if(e>=this.next.length)throw new RangeError("There's no "+t+"th edge in this content match");return{type:this.next[e],next:this.next[e+1]}},I.prototype.toString=function(){var t=[];return function e(n){t.push(n);for(var r=1;r<n.next.length;r+=2)-1==t.indexOf(n.next[r])&&e(n.next[r])}(this),t.map((function(e,n){for(var r=n+(e.validEnd?"*":" ")+" ",o=0;o<e.next.length;o+=2)r+=(o?", ":"")+e.next[o].name+"->"+t.indexOf(e.next[o+1]);return r})).join("\n")},Object.defineProperties(I.prototype,z),I.empty=new I(!0);var P=function(t,e){this.string=t,this.nodeTypes=e,this.inline=null,this.pos=0,this.tokens=t.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.unshift()},B={next:{configurable:!0}};function $(t){var e=[];do{e.push(F(t))}while(t.eat("|"));return 1==e.length?e[0]:{type:"choice",exprs:e}}function F(t){var e=[];do{e.push(V(t))}while(t.next&&")"!=t.next&&"|"!=t.next);return 1==e.length?e[0]:{type:"seq",exprs:e}}function V(t){for(var e=function(t){if(t.eat("(")){var e=$(t);return t.eat(")")||t.err("Missing closing paren"),e}if(!/\W/.test(t.next)){var n=function(t,e){var n=t.nodeTypes,r=n[e];if(r)return[r];var o=[];for(var i in n){var s=n[i];s.groups.indexOf(e)>-1&&o.push(s)}0==o.length&&t.err("No node type or group '"+e+"' found");return o}(t,t.next).map((function(e){return null==t.inline?t.inline=e.isInline:t.inline!=e.isInline&&t.err("Mixing inline and block content"),{type:"name",value:e}}));return t.pos++,1==n.length?n[0]:{type:"choice",exprs:n}}t.err("Unexpected token '"+t.next+"'")}(t);;)if(t.eat("+"))e={type:"plus",expr:e};else if(t.eat("*"))e={type:"star",expr:e};else if(t.eat("?"))e={type:"opt",expr:e};else{if(!t.eat("{"))break;e=j(t,e)}return e}function _(t){/\D/.test(t.next)&&t.err("Expected number, got '"+t.next+"'");var e=Number(t.next);return t.pos++,e}function j(t,e){var n=_(t),r=n;return t.eat(",")&&(r="}"!=t.next?_(t):-1),t.eat("}")||t.err("Unclosed braced range"),{type:"range",min:n,max:r,expr:e}}function L(t,e){return e-t}function J(t,e){var n=[];return function e(r){var o=t[r];if(1==o.length&&!o[0].term)return e(o[0].to);n.push(r);for(var i=0;i<o.length;i++){var s=o[i],a=s.term,c=s.to;a||-1!=n.indexOf(c)||e(c)}}(e),n.sort(L)}function q(t){var e=Object.create(null);for(var n in t){var r=t[n];if(!r.hasDefault)return null;e[n]=r.default}return e}function W(t,e){var n=Object.create(null);for(var r in t){var o=e&&e[r];if(void 0===o){var i=t[r];if(!i.hasDefault)throw new RangeError("No value supplied for attribute "+r);o=i.default}n[r]=o}return n}function K(t){var e=Object.create(null);if(t)for(var n in t)e[n]=new G(t[n]);return e}B.next.get=function(){return this.tokens[this.pos]},P.prototype.eat=function(t){return this.next==t&&(this.pos++||!0)},P.prototype.err=function(t){throw new SyntaxError(t+" (in content expression '"+this.string+"')")},Object.defineProperties(P.prototype,B);var H=function(t,e,n){this.name=t,this.schema=e,this.spec=n,this.groups=n.group?n.group.split(" "):[],this.attrs=K(n.attrs),this.defaultAttrs=q(this.attrs),this.contentMatch=null,this.markSet=null,this.inlineContent=null,this.isBlock=!(n.inline||"text"==t),this.isText="text"==t},U={isInline:{configurable:!0},isTextblock:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};U.isInline.get=function(){return!this.isBlock},U.isTextblock.get=function(){return this.isBlock&&this.inlineContent},U.isLeaf.get=function(){return this.contentMatch==I.empty},U.isAtom.get=function(){return this.isLeaf||this.spec.atom},H.prototype.hasRequiredAttrs=function(){for(var t in this.attrs)if(this.attrs[t].isRequired)return!0;return!1},H.prototype.compatibleContent=function(t){return this==t||this.contentMatch.compatible(t.contentMatch)},H.prototype.computeAttrs=function(t){return!t&&this.defaultAttrs?this.defaultAttrs:W(this.attrs,t)},H.prototype.create=function(t,e,n){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new D(this,this.computeAttrs(t),i.from(e),h.setFrom(n))},H.prototype.createChecked=function(t,e,n){if(e=i.from(e),!this.validContent(e))throw new RangeError("Invalid content for node "+this.name);return new D(this,this.computeAttrs(t),e,h.setFrom(n))},H.prototype.createAndFill=function(t,e,n){if(t=this.computeAttrs(t),(e=i.from(e)).size){var r=this.contentMatch.fillBefore(e);if(!r)return null;e=r.append(e)}var o=this.contentMatch.matchFragment(e).fillBefore(i.empty,!0);return o?new D(this,t,e.append(o),h.setFrom(n)):null},H.prototype.validContent=function(t){var e=this.contentMatch.matchFragment(t);if(!e||!e.validEnd)return!1;for(var n=0;n<t.childCount;n++)if(!this.allowsMarks(t.child(n).marks))return!1;return!0},H.prototype.allowsMarkType=function(t){return null==this.markSet||this.markSet.indexOf(t)>-1},H.prototype.allowsMarks=function(t){if(null==this.markSet)return!0;for(var e=0;e<t.length;e++)if(!this.allowsMarkType(t[e].type))return!1;return!0},H.prototype.allowedMarks=function(t){if(null==this.markSet)return t;for(var e,n=0;n<t.length;n++)this.allowsMarkType(t[n].type)?e&&e.push(t[n]):e||(e=t.slice(0,n));return e?e.length?e:h.empty:t},H.compile=function(t,e){var n=Object.create(null);t.forEach((function(t,r){return n[t]=new H(t,e,r)}));var r=e.spec.topNode||"doc";if(!n[r])throw new RangeError("Schema is missing its top node type ('"+r+"')");if(!n.text)throw new RangeError("Every schema needs a 'text' type");for(var o in n.text.attrs)throw new RangeError("The text node type should not have attributes");return n},Object.defineProperties(H.prototype,U);var G=function(t){this.hasDefault=Object.prototype.hasOwnProperty.call(t,"default"),this.default=t.default},X={isRequired:{configurable:!0}};X.isRequired.get=function(){return!this.hasDefault},Object.defineProperties(G.prototype,X);var Y=function(t,e,n,r){this.name=t,this.schema=n,this.spec=r,this.attrs=K(r.attrs),this.rank=e,this.excluded=null;var o=q(this.attrs);this.instance=o&&new h(this,o)};Y.prototype.create=function(t){return!t&&this.instance?this.instance:new h(this,W(this.attrs,t))},Y.compile=function(t,e){var n=Object.create(null),r=0;return t.forEach((function(t,o){return n[t]=new Y(t,r++,e,o)})),n},Y.prototype.removeFromSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t.slice(0,e).concat(t.slice(e+1));return t},Y.prototype.isInSet=function(t){for(var e=0;e<t.length;e++)if(t[e].type==this)return t[e]},Y.prototype.excludes=function(t){return this.excluded.indexOf(t)>-1};var Q=function(t){for(var e in this.spec={},t)this.spec[e]=t[e];this.spec.nodes=o.from(t.nodes),this.spec.marks=o.from(t.marks),this.nodes=H.compile(this.spec.nodes,this),this.marks=Y.compile(this.spec.marks,this);var n=Object.create(null);for(var r in this.nodes){if(r in this.marks)throw new RangeError(r+" can not be both a node and a mark");var i=this.nodes[r],s=i.spec.content||"",a=i.spec.marks;i.contentMatch=n[s]||(n[s]=I.parse(s,this.nodes)),i.inlineContent=i.contentMatch.inlineContent,i.markSet="_"==a?null:a?Z(this,a.split(" ")):""!=a&&i.inlineContent?null:[]}for(var c in this.marks){var p=this.marks[c],h=p.spec.excludes;p.excluded=null==h?[p]:""==h?[]:Z(this,h.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached=Object.create(null),this.cached.wrappings=Object.create(null)};function Z(t,e){for(var n=[],r=0;r<e.length;r++){var o=e[r],i=t.marks[o],s=i;if(i)n.push(i);else for(var a in t.marks){var c=t.marks[a];("_"==o||c.spec.group&&c.spec.group.split(" ").indexOf(o)>-1)&&n.push(s=c)}if(!s)throw new SyntaxError("Unknown mark type: '"+e[r]+"'")}return n}Q.prototype.node=function(t,e,n,r){if("string"==typeof t)t=this.nodeType(t);else{if(!(t instanceof H))throw new RangeError("Invalid node type: "+t);if(t.schema!=this)throw new RangeError("Node type from different schema used ("+t.name+")")}return t.createChecked(e,n,r)},Q.prototype.text=function(t,e){var n=this.nodes.text;return new A(n,n.defaultAttrs,t,h.setFrom(e))},Q.prototype.mark=function(t,e){return"string"==typeof t&&(t=this.marks[t]),t.create(e)},Q.prototype.nodeFromJSON=function(t){return D.fromJSON(this,t)},Q.prototype.markFromJSON=function(t){return h.fromJSON(this,t)},Q.prototype.nodeType=function(t){var e=this.nodes[t];if(!e)throw new RangeError("Unknown node type: "+t);return e};var tt=function(t,e){var n=this;this.schema=t,this.rules=e,this.tags=[],this.styles=[],e.forEach((function(t){t.tag?n.tags.push(t):t.style&&n.styles.push(t)}))};tt.prototype.parse=function(t,e){void 0===e&&(e={});var n=new st(this,e,!1);return n.addAll(t,null,e.from,e.to),n.finish()},tt.prototype.parseSlice=function(t,e){void 0===e&&(e={});var n=new st(this,e,!0);return n.addAll(t,null,e.from,e.to),f.maxOpen(n.finish())},tt.prototype.matchTag=function(t,e){for(var n=0;n<this.tags.length;n++){var r=this.tags[n];if(ct(t,r.tag)&&(void 0===r.namespace||t.namespaceURI==r.namespace)&&(!r.context||e.matchesContext(r.context))){if(r.getAttrs){var o=r.getAttrs(t);if(!1===o)continue;r.attrs=o}return r}}},tt.prototype.matchStyle=function(t,e,n){for(var r=0;r<this.styles.length;r++){var o=this.styles[r];if(!(0!=o.style.indexOf(t)||o.context&&!n.matchesContext(o.context)||o.style.length>t.length&&(61!=o.style.charCodeAt(t.length)||o.style.slice(t.length+1)!=e))){if(o.getAttrs){var i=o.getAttrs(e);if(!1===i)continue;o.attrs=i}return o}}},tt.schemaRules=function(t){var e=[];function n(t){for(var n=null==t.priority?50:t.priority,r=0;r<e.length;r++){var o=e[r];if((null==o.priority?50:o.priority)<n)break}e.splice(r,0,t)}var r=function(e){var r=t.marks[e].spec.parseDOM;r&&r.forEach((function(t){n(t=pt(t)),t.mark=e}))};for(var o in t.marks)r(o);var i;for(var s in t.nodes)i=void 0,(i=t.nodes[s].spec.parseDOM)&&i.forEach((function(t){n(t=pt(t)),t.node=s}));return e},tt.fromSchema=function(t){return t.cached.domParser||(t.cached.domParser=new tt(t,tt.schemaRules(t)))};var et={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},nt={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},rt={ol:!0,ul:!0};function ot(t){return(t?1:0)|("full"===t?2:0)}var it=function(t,e,n,r,o,i,s){this.type=t,this.attrs=e,this.solid=o,this.match=i||(4&s?null:t.contentMatch),this.options=s,this.content=[],this.marks=n,this.activeMarks=h.none,this.pendingMarks=r};it.prototype.findWrapping=function(t){if(!this.match){if(!this.type)return[];var e=this.type.contentMatch.fillBefore(i.from(t));if(!e){var n,r=this.type.contentMatch;return(n=r.findWrapping(t.type))?(this.match=r,n):null}this.match=this.type.contentMatch.matchFragment(e)}return this.match.findWrapping(t.type)},it.prototype.finish=function(t){if(!(1&this.options)){var e,n=this.content[this.content.length-1];n&&n.isText&&(e=/[ \t\r\n\u000c]+$/.exec(n.text))&&(n.text.length==e[0].length?this.content.pop():this.content[this.content.length-1]=n.withText(n.text.slice(0,n.text.length-e[0].length)))}var r=i.from(this.content);return!t&&this.match&&(r=r.append(this.match.fillBefore(i.empty,!0))),this.type?this.type.create(this.attrs,r,this.marks):r},it.prototype.applyPending=function(t){for(var e=0,n=this.pendingMarks;e<n.length;e++){var r=n[e];(this.type?this.type.allowsMarkType(r.type):ht(r.type,t))&&!r.isInSet(this.activeMarks)&&(this.activeMarks=r.addToSet(this.activeMarks),this.pendingMarks=r.removeFromSet(this.pendingMarks))}};var st=function(t,e,n){this.parser=t,this.options=e,this.isOpen=n;var r,o=e.topNode,i=ot(e.preserveWhitespace)|(n?4:0);r=o?new it(o.type,o.attrs,h.none,h.none,!0,e.topMatch||o.type.contentMatch,i):new it(n?null:t.schema.topNodeType,null,h.none,h.none,!0,null,i),this.nodes=[r],this.open=0,this.find=e.findPositions,this.needsBlock=!1},at={top:{configurable:!0},currentPos:{configurable:!0}};function ct(t,e){return(t.matches||t.msMatchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector).call(t,e)}function pt(t){var e={};for(var n in t)e[n]=t[n];return e}function ht(t,e){var n=e.schema.nodes,r=function(r){var o=n[r];if(o.allowsMarkType(t)){var i=[],s=function(t){i.push(t);for(var n=0;n<t.edgeCount;n++){var r=t.edge(n),o=r.type,a=r.next;if(o==e)return!0;if(i.indexOf(a)<0&&s(a))return!0}};return s(o.contentMatch)?{v:!0}:void 0}};for(var o in n){var i=r(o);if(i)return i.v}}at.top.get=function(){return this.nodes[this.open]},st.prototype.addDOM=function(t){if(3==t.nodeType)this.addTextNode(t);else if(1==t.nodeType){var e=t.getAttribute("style"),n=e?this.readStyles(function(t){var e,n=/\s*([\w-]+)\s*:\s*([^;]+)/g,r=[];for(;e=n.exec(t);)r.push(e[1],e[2].trim());return r}(e)):null,r=this.top;if(null!=n)for(var o=0;o<n.length;o++)this.addPendingMark(n[o]);if(this.addElement(t),null!=n)for(var i=0;i<n.length;i++)this.removePendingMark(n[i],r)}},st.prototype.addTextNode=function(t){var e=t.nodeValue,n=this.top;if((n.type?n.type.inlineContent:n.content.length&&n.content[0].isInline)||/[^ \t\r\n\u000c]/.test(e)){if(1&n.options)2&n.options||(e=e.replace(/\r?\n|\r/g," "));else if(e=e.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(e)&&this.open==this.nodes.length-1){var r=n.content[n.content.length-1],o=t.previousSibling;(!r||o&&"BR"==o.nodeName||r.isText&&/[ \t\r\n\u000c]$/.test(r.text))&&(e=e.slice(1))}e&&this.insertNode(this.parser.schema.text(e)),this.findInText(t)}else this.findInside(t)},st.prototype.addElement=function(t){var e=t.nodeName.toLowerCase();rt.hasOwnProperty(e)&&function(t){for(var e=t.firstChild,n=null;e;e=e.nextSibling){var r=1==e.nodeType?e.nodeName.toLowerCase():null;r&&rt.hasOwnProperty(r)&&n?(n.appendChild(e),e=n):"li"==r?n=e:r&&(n=null)}}(t);var n=this.options.ruleFromNode&&this.options.ruleFromNode(t)||this.parser.matchTag(t,this);if(n?n.ignore:nt.hasOwnProperty(e))this.findInside(t);else if(!n||n.skip){n&&n.skip.nodeType&&(t=n.skip);var r,o=this.top,i=this.needsBlock;if(et.hasOwnProperty(e))r=!0,o.type||(this.needsBlock=!0);else if(!t.firstChild)return void this.leafFallback(t);this.addAll(t),r&&this.sync(o),this.needsBlock=i}else this.addElementByRule(t,n)},st.prototype.leafFallback=function(t){"BR"==t.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(t.ownerDocument.createTextNode("\n"))},st.prototype.readStyles=function(t){for(var e=h.none,n=0;n<t.length;n+=2){var r=this.parser.matchStyle(t[n],t[n+1],this);if(r){if(r.ignore)return null;e=this.parser.schema.marks[r.mark].create(r.attrs).addToSet(e)}}return e},st.prototype.addElementByRule=function(t,e){var n,r,o,i=this;e.node?(r=this.parser.schema.nodes[e.node]).isLeaf?this.insertNode(r.create(e.attrs))||this.leafFallback(t):n=this.enter(r,e.attrs,e.preserveWhitespace):(o=this.parser.schema.marks[e.mark].create(e.attrs),this.addPendingMark(o));var s=this.top;if(r&&r.isLeaf)this.findInside(t);else if(e.getContent)this.findInside(t),e.getContent(t,this.parser.schema).forEach((function(t){return i.insertNode(t)}));else{var a=e.contentElement;"string"==typeof a?a=t.querySelector(a):"function"==typeof a&&(a=a(t)),a||(a=t),this.findAround(t,a,!0),this.addAll(a,n)}n&&(this.sync(s),this.open--),o&&this.removePendingMark(o,s)},st.prototype.addAll=function(t,e,n,r){for(var o=n||0,i=n?t.childNodes[n]:t.firstChild,s=null==r?null:t.childNodes[r];i!=s;i=i.nextSibling,++o)this.findAtPoint(t,o),this.addDOM(i),e&&et.hasOwnProperty(i.nodeName.toLowerCase())&&this.sync(e);this.findAtPoint(t,o)},st.prototype.findPlace=function(t){for(var e,n,r=this.open;r>=0;r--){var o=this.nodes[r],i=o.findWrapping(t);if(i&&(!e||e.length>i.length)&&(e=i,n=o,!i.length))break;if(o.solid)break}if(!e)return!1;this.sync(n);for(var s=0;s<e.length;s++)this.enterInner(e[s],null,!1);return!0},st.prototype.insertNode=function(t){if(t.isInline&&this.needsBlock&&!this.top.type){var e=this.textblockFromContext();e&&this.enterInner(e)}if(this.findPlace(t)){this.closeExtra();var n=this.top;n.applyPending(t.type),n.match&&(n.match=n.match.matchType(t.type));for(var r=n.activeMarks,o=0;o<t.marks.length;o++)n.type&&!n.type.allowsMarkType(t.marks[o].type)||(r=t.marks[o].addToSet(r));return n.content.push(t.mark(r)),!0}return!1},st.prototype.enter=function(t,e,n){var r=this.findPlace(t.create(e));return r&&this.enterInner(t,e,!0,n),r},st.prototype.enterInner=function(t,e,n,r){this.closeExtra();var o=this.top;o.applyPending(t),o.match=o.match&&o.match.matchType(t,e);var i=null==r?-5&o.options:ot(r);4&o.options&&0==o.content.length&&(i|=4),this.nodes.push(new it(t,e,o.activeMarks,o.pendingMarks,n,null,i)),this.open++},st.prototype.closeExtra=function(t){var e=this.nodes.length-1;if(e>this.open){for(;e>this.open;e--)this.nodes[e-1].content.push(this.nodes[e].finish(t));this.nodes.length=this.open+1}},st.prototype.finish=function(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)},st.prototype.sync=function(t){for(var e=this.open;e>=0;e--)if(this.nodes[e]==t)return void(this.open=e)},at.currentPos.get=function(){this.closeExtra();for(var t=0,e=this.open;e>=0;e--){for(var n=this.nodes[e].content,r=n.length-1;r>=0;r--)t+=n[r].nodeSize;e&&t++}return t},st.prototype.findAtPoint=function(t,e){if(this.find)for(var n=0;n<this.find.length;n++)this.find[n].node==t&&this.find[n].offset==e&&(this.find[n].pos=this.currentPos)},st.prototype.findInside=function(t){if(this.find)for(var e=0;e<this.find.length;e++)null==this.find[e].pos&&1==t.nodeType&&t.contains(this.find[e].node)&&(this.find[e].pos=this.currentPos)},st.prototype.findAround=function(t,e,n){if(t!=e&&this.find)for(var r=0;r<this.find.length;r++){if(null==this.find[r].pos&&1==t.nodeType&&t.contains(this.find[r].node))e.compareDocumentPosition(this.find[r].node)&(n?2:4)&&(this.find[r].pos=this.currentPos)}},st.prototype.findInText=function(t){if(this.find)for(var e=0;e<this.find.length;e++)this.find[e].node==t&&(this.find[e].pos=this.currentPos-(t.nodeValue.length-this.find[e].offset))},st.prototype.matchesContext=function(t){var e=this;if(t.indexOf("|")>-1)return t.split(/\s*\|\s*/).some(this.matchesContext,this);var n=t.split("/"),r=this.options.context,o=!(this.isOpen||r&&r.parent.type!=this.nodes[0].type),i=-(r?r.depth+1:0)+(o?0:1),s=function(t,a){for(;t>=0;t--){var c=n[t];if(""==c){if(t==n.length-1||0==t)continue;for(;a>=i;a--)if(s(t-1,a))return!0;return!1}var p=a>0||0==a&&o?e.nodes[a].type:r&&a>=i?r.node(a-i).type:null;if(!p||p.name!=c&&-1==p.groups.indexOf(c))return!1;a--}return!0};return s(n.length-1,this.open)},st.prototype.textblockFromContext=function(){var t=this.options.context;if(t)for(var e=t.depth;e>=0;e--){var n=t.node(e).contentMatchAt(t.indexAfter(e)).defaultType;if(n&&n.isTextblock&&n.defaultAttrs)return n}for(var r in this.parser.schema.nodes){var o=this.parser.schema.nodes[r];if(o.isTextblock&&o.defaultAttrs)return o}},st.prototype.addPendingMark=function(t){this.top.pendingMarks=t.addToSet(this.top.pendingMarks)},st.prototype.removePendingMark=function(t,e){for(var n=this.open;n>=0;n--){var r=this.nodes[n];if(r.pendingMarks.lastIndexOf(t)>-1?r.pendingMarks=t.removeFromSet(r.pendingMarks):r.activeMarks=t.removeFromSet(r.activeMarks),r==e)break}},Object.defineProperties(st.prototype,at);var lt=function(t,e){this.nodes=t||{},this.marks=e||{}};function ft(t){var e={};for(var n in t){var r=t[n].spec.toDOM;r&&(e[n]=r)}return e}function dt(t){return t.document||window.document}lt.prototype.serializeFragment=function(t,e,n){var r=this;void 0===e&&(e={}),n||(n=dt(e).createDocumentFragment());var o=n,i=null;return t.forEach((function(t){if(i||t.marks.length){i||(i=[]);for(var n=0,s=0;n<i.length&&s<t.marks.length;){var a=t.marks[s];if(r.marks[a.type.name]){if(!a.eq(i[n])||!1===a.type.spec.spanning)break;n+=2,s++}else s++}for(;n<i.length;)o=i.pop(),i.pop();for(;s<t.marks.length;){var c=t.marks[s++],p=r.serializeMark(c,t.isInline,e);p&&(i.push(c,o),o.appendChild(p.dom),o=p.contentDOM||p.dom)}}o.appendChild(r.serializeNode(t,e))})),n},lt.prototype.serializeNode=function(t,e){void 0===e&&(e={});var n=lt.renderSpec(dt(e),this.nodes[t.type.name](t)),r=n.dom,o=n.contentDOM;if(o){if(t.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");e.onContent?e.onContent(t,o,e):this.serializeFragment(t.content,e,o)}return r},lt.prototype.serializeNodeAndMarks=function(t,e){void 0===e&&(e={});for(var n=this.serializeNode(t,e),r=t.marks.length-1;r>=0;r--){var o=this.serializeMark(t.marks[r],t.isInline,e);o&&((o.contentDOM||o.dom).appendChild(n),n=o.dom)}return n},lt.prototype.serializeMark=function(t,e,n){void 0===n&&(n={});var r=this.marks[t.type.name];return r&&lt.renderSpec(dt(n),r(t,e))},lt.renderSpec=function(t,e,n){if(void 0===n&&(n=null),"string"==typeof e)return{dom:t.createTextNode(e)};if(null!=e.nodeType)return{dom:e};var r=e[0],o=r.indexOf(" ");o>0&&(n=r.slice(0,o),r=r.slice(o+1));var i=null,s=n?t.createElementNS(n,r):t.createElement(r),a=e[1],c=1;if(a&&"object"==typeof a&&null==a.nodeType&&!Array.isArray(a))for(var p in c=2,a)if(null!=a[p]){var h=p.indexOf(" ");h>0?s.setAttributeNS(p.slice(0,h),p.slice(h+1),a[p]):s.setAttribute(p,a[p])}for(var l=c;l<e.length;l++){var f=e[l];if(0===f){if(l<e.length-1||l>c)throw new RangeError("Content hole must be the only child of its parent node");return{dom:s,contentDOM:s}}var d=lt.renderSpec(t,f,n),u=d.dom,m=d.contentDOM;if(s.appendChild(u),m){if(i)throw new RangeError("Multiple content holes");i=m}}return{dom:s,contentDOM:i}},lt.fromSchema=function(t){return t.cached.domSerializer||(t.cached.domSerializer=new lt(this.nodesFromSchema(t),this.marksFromSchema(t)))},lt.nodesFromSchema=function(t){var e=ft(t.nodes);return e.text||(e.text=function(t){return t.text}),e},lt.marksFromSchema=function(t){return ft(t.marks)};var ut=Math.pow(2,16);function mt(t){return 65535&t}var vt=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=null),this.pos=t,this.deleted=e,this.recover=n},gt=function(t,e){void 0===e&&(e=!1),this.ranges=t,this.inverted=e};gt.prototype.recover=function(t){var e=0,n=mt(t);if(!this.inverted)for(var r=0;r<n;r++)e+=this.ranges[3*r+2]-this.ranges[3*r+1];return this.ranges[3*n]+e+function(t){return(t-(65535&t))/ut}(t)},gt.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},gt.prototype.map=function(t,e){return void 0===e&&(e=1),this._map(t,e,!0)},gt.prototype._map=function(t,e,n){for(var r=0,o=this.inverted?2:1,i=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var a=this.ranges[s]-(this.inverted?r:0);if(a>t)break;var c=this.ranges[s+o],p=this.ranges[s+i],h=a+c;if(t<=h){var l=a+r+((c?t==a?-1:t==h?1:e:e)<0?0:p);if(n)return l;var f=s/3+(t-a)*ut;return new vt(l,e<0?t!=a:t!=h,f)}r+=p-c}return n?t+r:new vt(t+r)},gt.prototype.touches=function(t,e){for(var n=0,r=mt(e),o=this.inverted?2:1,i=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var a=this.ranges[s]-(this.inverted?n:0);if(a>t)break;var c=this.ranges[s+o];if(t<=a+c&&s==3*r)return!0;n+=this.ranges[s+i]-c}return!1},gt.prototype.forEach=function(t){for(var e=this.inverted?2:1,n=this.inverted?1:2,r=0,o=0;r<this.ranges.length;r+=3){var i=this.ranges[r],s=i-(this.inverted?o:0),a=i+(this.inverted?0:o),c=this.ranges[r+e],p=this.ranges[r+n];t(s,s+c,a,a+p),o+=p-c}},gt.prototype.invert=function(){return new gt(this.ranges,!this.inverted)},gt.prototype.toString=function(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)},gt.offset=function(t){return 0==t?gt.empty:new gt(t<0?[0,-t,0]:[0,0,t])},gt.empty=new gt([]);var yt=function(t,e,n,r){this.maps=t||[],this.from=n||0,this.to=null==r?this.maps.length:r,this.mirror=e};function wt(t){var e=Error.call(this,t);return e.__proto__=wt.prototype,e}yt.prototype.slice=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=this.maps.length),new yt(this.maps,this.mirror,t,e)},yt.prototype.copy=function(){return new yt(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)},yt.prototype.appendMap=function(t,e){this.to=this.maps.push(t),null!=e&&this.setMirror(this.maps.length-1,e)},yt.prototype.appendMapping=function(t){for(var e=0,n=this.maps.length;e<t.maps.length;e++){var r=t.getMirror(e);this.appendMap(t.maps[e],null!=r&&r<e?n+r:null)}},yt.prototype.getMirror=function(t){if(this.mirror)for(var e=0;e<this.mirror.length;e++)if(this.mirror[e]==t)return this.mirror[e+(e%2?-1:1)]},yt.prototype.setMirror=function(t,e){this.mirror||(this.mirror=[]),this.mirror.push(t,e)},yt.prototype.appendMappingInverted=function(t){for(var e=t.maps.length-1,n=this.maps.length+t.maps.length;e>=0;e--){var r=t.getMirror(e);this.appendMap(t.maps[e].invert(),null!=r&&r>e?n-r-1:null)}},yt.prototype.invert=function(){var t=new yt;return t.appendMappingInverted(this),t},yt.prototype.map=function(t,e){if(void 0===e&&(e=1),this.mirror)return this._map(t,e,!0);for(var n=this.from;n<this.to;n++)t=this.maps[n].map(t,e);return t},yt.prototype.mapResult=function(t,e){return void 0===e&&(e=1),this._map(t,e,!1)},yt.prototype._map=function(t,e,n){for(var r=!1,o=null,i=this.from;i<this.to;i++){var s=this.maps[i],a=o&&o[i];if(null!=a&&s.touches(t,a))t=s.recover(a);else{var c=s.mapResult(t,e);if(null!=c.recover){var p=this.getMirror(i);if(null!=p&&p>i&&p<this.to){if(c.deleted){i=p,t=this.maps[p].recover(c.recover);continue}(o||(o=Object.create(null)))[p]=c.recover}}c.deleted&&(r=!0),t=c.pos}}return n?t:new vt(t,r)},wt.prototype=Object.create(Error.prototype),wt.prototype.constructor=wt,wt.prototype.name="TransformError";var bt=function(t){this.doc=t,this.steps=[],this.docs=[],this.mapping=new yt},kt={before:{configurable:!0},docChanged:{configurable:!0}};function xt(){throw new Error("Override me")}kt.before.get=function(){return this.docs.length?this.docs[0]:this.doc},bt.prototype.step=function(t){var e=this.maybeStep(t);if(e.failed)throw new wt(e.failed);return this},bt.prototype.maybeStep=function(t){var e=t.apply(this.doc);return e.failed||this.addStep(t,e.doc),e},kt.docChanged.get=function(){return this.steps.length>0},bt.prototype.addStep=function(t,e){this.docs.push(this.doc),this.steps.push(t),this.mapping.appendMap(t.getMap()),this.doc=e},Object.defineProperties(bt.prototype,kt);var St=Object.create(null),Ot=function(){};Ot.prototype.apply=function(t){return xt()},Ot.prototype.getMap=function(){return gt.empty},Ot.prototype.invert=function(t){return xt()},Ot.prototype.map=function(t){return xt()},Ot.prototype.merge=function(t){return null},Ot.prototype.toJSON=function(){return xt()},Ot.fromJSON=function(t,e){if(!e||!e.stepType)throw new RangeError("Invalid input for Step.fromJSON");var n=St[e.stepType];if(!n)throw new RangeError("No step type "+e.stepType+" defined");return n.fromJSON(t,e)},Ot.jsonID=function(t,e){if(t in St)throw new RangeError("Duplicate use of step JSON ID "+t);return St[t]=e,e.prototype.jsonID=t,e};var Ct=function(t,e){this.doc=t,this.failed=e};Ct.ok=function(t){return new Ct(t,null)},Ct.fail=function(t){return new Ct(null,t)},Ct.fromReplace=function(t,e,n,r){try{return Ct.ok(t.replace(e,n,r))}catch(t){if(t instanceof l)return Ct.fail(t.message);throw t}};var Mt=function(t){function e(e,n,r,o){t.call(this),this.from=e,this.to=n,this.slice=r,this.structure=!!o}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){return this.structure&&Tt(t,this.from,this.to)?Ct.fail("Structure replace would overwrite content"):Ct.fromReplace(t,this.from,this.to,this.slice)},e.prototype.getMap=function(){return new gt([this.from,this.to-this.from,this.slice.size])},e.prototype.invert=function(t){return new e(this.from,this.from+this.slice.size,t.slice(this.from,this.to))},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted?null:new e(n.pos,Math.max(n.pos,r.pos),this.slice)},e.prototype.merge=function(t){if(!(t instanceof e)||t.structure!=this.structure)return null;if(this.from+this.slice.size!=t.from||this.slice.openEnd||t.slice.openStart){if(t.to!=this.from||this.slice.openStart||t.slice.openEnd)return null;var n=this.slice.size+t.slice.size==0?f.empty:new f(t.slice.content.append(this.slice.content),t.slice.openStart,this.slice.openEnd);return new e(t.from,this.to,n,this.structure)}var r=this.slice.size+t.slice.size==0?f.empty:new f(this.slice.content.append(t.slice.content),this.slice.openStart,t.slice.openEnd);return new e(this.from,this.to+(t.to-t.from),r,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new e(n.from,n.to,f.fromJSON(t,n.slice),!!n.structure)},e}(Ot);Ot.jsonID("replace",Mt);var Nt=function(t){function e(e,n,r,o,i,s,a){t.call(this),this.from=e,this.to=n,this.gapFrom=r,this.gapTo=o,this.slice=i,this.insert=s,this.structure=!!a}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){if(this.structure&&(Tt(t,this.from,this.gapFrom)||Tt(t,this.gapTo,this.to)))return Ct.fail("Structure gap-replace would overwrite content");var e=t.slice(this.gapFrom,this.gapTo);if(e.openStart||e.openEnd)return Ct.fail("Gap is not a flat range");var n=this.slice.insertAt(this.insert,e.content);return n?Ct.fromReplace(t,this.from,this.to,n):Ct.fail("Content does not fit in gap")},e.prototype.getMap=function(){return new gt([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])},e.prototype.invert=function(t){var n=this.gapTo-this.gapFrom;return new e(this.from,this.from+this.slice.size+n,this.from+this.insert,this.from+this.insert+n,t.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1),o=t.map(this.gapFrom,-1),i=t.map(this.gapTo,1);return n.deleted&&r.deleted||o<n.pos||i>r.pos?null:new e(n.pos,r.pos,o,i,this.slice,this.insert,this.structure)},e.prototype.toJSON=function(){var t={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(t.slice=this.slice.toJSON()),this.structure&&(t.structure=!0),t},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to||"number"!=typeof n.gapFrom||"number"!=typeof n.gapTo||"number"!=typeof n.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new e(n.from,n.to,n.gapFrom,n.gapTo,f.fromJSON(t,n.slice),n.insert,!!n.structure)},e}(Ot);function Tt(t,e,n){for(var r=t.resolve(e),o=n-e,i=r.depth;o>0&&i>0&&r.indexAfter(i)==r.node(i).childCount;)i--,o--;if(o>0)for(var s=r.node(i).maybeChild(r.indexAfter(i));o>0;){if(!s||s.isLeaf)return!0;s=s.firstChild,o--}return!1}function Dt(t,e,n){return(0==e||t.canReplace(e,t.childCount))&&(n==t.childCount||t.canReplace(0,n))}function Et(t){for(var e=t.parent.content.cutByIndex(t.startIndex,t.endIndex),n=t.depth;;--n){var r=t.$from.node(n),o=t.$from.index(n),i=t.$to.indexAfter(n);if(n<t.depth&&r.canReplace(o,i,e))return n;if(0==n||r.type.spec.isolating||!Dt(r,o,i))break}}function At(t,e,n,r){void 0===r&&(r=t);var o=function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.contentMatchAt(r).findWrapping(e);if(!i)return null;var s=i.length?i[0]:e;return n.canReplaceWith(r,o,s)?i:null}(t,e),i=o&&function(t,e){var n=t.parent,r=t.startIndex,o=t.endIndex,i=n.child(r),s=e.contentMatch.findWrapping(i.type);if(!s)return null;for(var a=(s.length?s[s.length-1]:e).contentMatch,c=r;a&&c<o;c++)a=a.matchType(n.child(c).type);if(!a||!a.validEnd)return null;return s}(r,e);return i?o.map(Rt).concat({type:e,attrs:n}).concat(i.map(Rt)):null}function Rt(t){return{type:t,attrs:null}}function It(t,e,n,r){void 0===n&&(n=1);var o=t.resolve(e),i=o.depth-n,s=r&&r[r.length-1]||o.parent;if(i<0||o.parent.type.spec.isolating||!o.parent.canReplace(o.index(),o.parent.childCount)||!s.type.validContent(o.parent.content.cutByIndex(o.index(),o.parent.childCount)))return!1;for(var a=o.depth-1,c=n-2;a>i;a--,c--){var p=o.node(a),h=o.index(a);if(p.type.spec.isolating)return!1;var l=p.content.cutByIndex(h,p.childCount),f=r&&r[c]||p;if(f!=p&&(l=l.replaceChild(0,f.type.create(f.attrs))),!p.canReplace(h+1,p.childCount)||!f.type.validContent(l))return!1}var d=o.indexAfter(i),u=r&&r[0];return o.node(i).canReplaceWith(d,d,u?u.type:o.node(i+1).type)}function zt(t,e){var n=t.resolve(e),r=n.index();return Pt(n.nodeBefore,n.nodeAfter)&&n.parent.canReplace(r,r+1)}function Pt(t,e){return t&&e&&!t.isLeaf&&t.canAppend(e)}function Bt(t,e,n){for(var r=[],o=0;o<t.childCount;o++){var s=t.child(o);s.content.size&&(s=s.copy(Bt(s.content,e,s))),s.isInline&&(s=e(s,n,o)),r.push(s)}return i.fromArray(r)}Ot.jsonID("replaceAround",Nt),bt.prototype.lift=function(t,e){for(var n=t.$from,r=t.$to,o=t.depth,s=n.before(o+1),a=r.after(o+1),c=s,p=a,h=i.empty,l=0,d=o,u=!1;d>e;d--)u||n.index(d)>0?(u=!0,h=i.from(n.node(d).copy(h)),l++):c--;for(var m=i.empty,v=0,g=o,y=!1;g>e;g--)y||r.after(g+1)<r.end(g)?(y=!0,m=i.from(r.node(g).copy(m)),v++):p++;return this.step(new Nt(c,p,s,a,new f(h.append(m),l,v),h.size-l,!0))},bt.prototype.wrap=function(t,e){for(var n=i.empty,r=e.length-1;r>=0;r--)n=i.from(e[r].type.create(e[r].attrs,n));var o=t.start,s=t.end;return this.step(new Nt(o,s,o,s,new f(n,0,0),e.length,!0))},bt.prototype.setBlockType=function(t,e,n,r){var o=this;if(void 0===e&&(e=t),!n.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");var s=this.steps.length;return this.doc.nodesBetween(t,e,(function(t,e){if(t.isTextblock&&!t.hasMarkup(n,r)&&function(t,e,n){var r=t.resolve(e),o=r.index();return r.parent.canReplaceWith(o,o+1,n)}(o.doc,o.mapping.slice(s).map(e),n)){o.clearIncompatible(o.mapping.slice(s).map(e,1),n);var a=o.mapping.slice(s),c=a.map(e,1),p=a.map(e+t.nodeSize,1);return o.step(new Nt(c,p,c+1,p-1,new f(i.from(n.create(r,null,t.marks)),0,0),1,!0)),!1}})),this},bt.prototype.setNodeMarkup=function(t,e,n,r){var o=this.doc.nodeAt(t);if(!o)throw new RangeError("No node at given position");e||(e=o.type);var s=e.create(n,null,r||o.marks);if(o.isLeaf)return this.replaceWith(t,t+o.nodeSize,s);if(!e.validContent(o.content))throw new RangeError("Invalid content for node type "+e.name);return this.step(new Nt(t,t+o.nodeSize,t+1,t+o.nodeSize-1,new f(i.from(s),0,0),1,!0))},bt.prototype.split=function(t,e,n){void 0===e&&(e=1);for(var r=this.doc.resolve(t),o=i.empty,s=i.empty,a=r.depth,c=r.depth-e,p=e-1;a>c;a--,p--){o=i.from(r.node(a).copy(o));var h=n&&n[p];s=i.from(h?h.type.create(h.attrs,s):r.node(a).copy(s))}return this.step(new Mt(t,t,new f(o.append(s),e,e),!0))},bt.prototype.join=function(t,e){void 0===e&&(e=1);var n=new Mt(t-e,t+e,f.empty,!0);return this.step(n)};var $t=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),r=t.resolve(this.from),o=r.node(r.sharedDepth(this.to)),i=new f(Bt(n.content,(function(t,n){return n.type.allowsMarkType(e.mark.type)?t.mark(e.mark.addToSet(t.marks)):t}),o),n.openStart,n.openEnd);return Ct.fromReplace(t,this.from,this.to,i)},e.prototype.invert=function(){return new Ft(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(Ot);Ot.jsonID("addMark",$t);var Ft=function(t){function e(e,n,r){t.call(this),this.from=e,this.to=n,this.mark=r}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.apply=function(t){var e=this,n=t.slice(this.from,this.to),r=new f(Bt(n.content,(function(t){return t.mark(e.mark.removeFromSet(t.marks))})),n.openStart,n.openEnd);return Ct.fromReplace(t,this.from,this.to,r)},e.prototype.invert=function(){return new $t(this.from,this.to,this.mark)},e.prototype.map=function(t){var n=t.mapResult(this.from,1),r=t.mapResult(this.to,-1);return n.deleted&&r.deleted||n.pos>=r.pos?null:new e(n.pos,r.pos,this.mark)},e.prototype.merge=function(t){if(t instanceof e&&t.mark.eq(this.mark)&&this.from<=t.to&&this.to>=t.from)return new e(Math.min(this.from,t.from),Math.max(this.to,t.to),this.mark)},e.prototype.toJSON=function(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},e.fromJSON=function(t,n){if("number"!=typeof n.from||"number"!=typeof n.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new e(n.from,n.to,t.markFromJSON(n.mark))},e}(Ot);function Vt(t,e,n,r){if(void 0===n&&(n=e),void 0===r&&(r=f.empty),e==n&&!r.size)return null;var o=t.resolve(e),s=t.resolve(n);if(Lt(o,s,r))return new Mt(e,n,r);var a=function(t,e){var n=function t(e,n,r,o){var s=i.empty,a=0,c=r[n];if(e.depth>n){var p=t(e,n+1,r,o||c);a=p.openEnd+1,s=i.from(e.node(n+1).copy(p.content))}c&&(s=s.append(c.content),a=c.openEnd);o&&(s=s.append(e.node(n).contentMatchAt(e.indexAfter(n)).fillBefore(i.empty,!0)),a=0);return{content:s,openEnd:a}}(t,0,e,!1),r=n.content,o=n.openEnd;return new f(r,t.depth,o||0)}(o,function(t,e){for(var n=new Jt(t),r=1;e.size&&r<=3;r++){var o=n.placeSlice(e.content,e.openStart,e.openEnd,r);3==r&&o!=e&&o.size&&(r=0),e=o}for(;n.open.length;)n.closeNode();return n.placed}(o,r)),c=jt(o,s,a);if(!c)return null;if(a.size!=c.size&&function(t,e,n){if(!e.parent.isTextblock)return!1;var r,o=n.openEnd?function(t,e){for(var n=1;n<e;n++)t=t.lastChild.content;return t.lastChild}(n.content,n.openEnd):t.node(t.depth-(n.openStart-n.openEnd));if(!o.isTextblock)return!1;for(var i=e.index();i<e.parent.childCount;i++)if(!o.type.allowsMarks(e.parent.child(i).marks))return!1;n.openEnd?r=o.contentMatchAt(o.childCount):(r=o.contentMatchAt(o.childCount),n.size&&(r=r.matchFragment(n.content,n.openStart?1:0)));return(r=r.matchFragment(e.parent.content,e.index()))&&r.validEnd}(o,s,a)){for(var p=s.depth,h=s.after(p);p>1&&h==s.end(--p);)++h;var l=jt(o,t.resolve(h),a);if(l)return new Nt(e,h,n,s.end(),l,a.size)}return c.size||e!=n?new Mt(e,n,c):null}function _t(t,e,n,r,o,s,a){var c,p=t.childCount,h=p-(a>0?1:0),l=s<0?e:n.node(o);c=s<0?l.contentMatchAt(h):1==p&&a>0?l.contentMatchAt(s?n.index(o):n.indexAfter(o)):l.contentMatchAt(n.indexAfter(o)).matchFragment(t,p>0&&s?1:0,h);var f=r.node(o);if(a>0&&o<r.depth){var d=f.content.cutByIndex(r.indexAfter(o)).addToStart(t.lastChild),u=c.fillBefore(d,!0);if(u&&u.size&&s>0&&1==p&&(u=null),u){var m=_t(t.lastChild.content,t.lastChild,n,r,o+1,1==p?s-1:-1,a-1);if(m){var v=t.lastChild.copy(m);return u.size?t.cutByIndex(0,p-1).append(u).addToEnd(v):t.replaceChild(p-1,v)}}}a>0&&(c=c.matchType((1==p&&s>0?n.node(o+1):t.lastChild).type));var g=r.index(o);if(g==f.childCount&&!f.type.compatibleContent(e.type))return null;for(var y=c.fillBefore(f.content,!0,g),w=g;y&&w<f.content.childCount;w++)l.type.allowsMarks(f.content.child(w).marks)||(y=null);if(!y)return null;if(a>0){var b=function t(e,n,r,o,s){var a,c=e.content,p=c.childCount;a=s>=0?r.node(o).contentMatchAt(r.indexAfter(o)).matchFragment(c,s>0?1:0,p):e.contentMatchAt(p);if(n>0){var h=t(c.lastChild,n-1,r,o+1,1==p?s-1:-1);c=c.replaceChild(p-1,h)}return e.copy(c.append(a.fillBefore(i.empty,!0)))}(t.lastChild,a-1,n,o+1,1==p?s-1:-1);t=t.replaceChild(p-1,b)}return t=t.append(y),r.depth>o&&(t=t.addToEnd(function t(e,n){var r=e.node(n),o=r.contentMatchAt(0).fillBefore(r.content,!0,e.index(n));e.depth>n&&(o=o.addToEnd(t(e,n+1)));return r.copy(o)}(r,o+1))),t}function jt(t,e,n){var r=_t(n.content,t.node(0),t,e,0,n.openStart,n.openEnd);return r?function(t,e,n){for(;e>0&&n>0&&1==t.childCount;)t=t.firstChild.content,e--,n--;return new f(t,e,n)}(r,n.openStart,e.depth):null}function Lt(t,e,n){return!n.openStart&&!n.openEnd&&t.start()==e.start()&&t.parent.canReplace(t.index(),e.index(),n.content)}Ot.jsonID("removeMark",Ft),bt.prototype.addMark=function(t,e,n){var r=this,o=[],i=[],s=null,a=null;return this.doc.nodesBetween(t,e,(function(r,c,p){if(r.isInline){var h=r.marks;if(!n.isInSet(h)&&p.type.allowsMarkType(n.type)){for(var l=Math.max(c,t),f=Math.min(c+r.nodeSize,e),d=n.addToSet(h),u=0;u<h.length;u++)h[u].isInSet(d)||(s&&s.to==l&&s.mark.eq(h[u])?s.to=f:o.push(s=new Ft(l,f,h[u])));a&&a.to==l?a.to=f:i.push(a=new $t(l,f,n))}}})),o.forEach((function(t){return r.step(t)})),i.forEach((function(t){return r.step(t)})),this},bt.prototype.removeMark=function(t,e,n){var r=this;void 0===n&&(n=null);var o=[],i=0;return this.doc.nodesBetween(t,e,(function(r,s){if(r.isInline){i++;var a=null;if(n instanceof Y){var c=n.isInSet(r.marks);c&&(a=[c])}else n?n.isInSet(r.marks)&&(a=[n]):a=r.marks;if(a&&a.length)for(var p=Math.min(s+r.nodeSize,e),h=0;h<a.length;h++){for(var l=a[h],f=void 0,d=0;d<o.length;d++){var u=o[d];u.step==i-1&&l.eq(o[d].style)&&(f=u)}f?(f.to=p,f.step=i):o.push({style:l,from:Math.max(s,t),to:p,step:i})}}})),o.forEach((function(t){return r.step(new Ft(t.from,t.to,t.style))})),this},bt.prototype.clearIncompatible=function(t,e,n){void 0===n&&(n=e.contentMatch);for(var r=this.doc.nodeAt(t),o=[],s=t+1,a=0;a<r.childCount;a++){var c=r.child(a),p=s+c.nodeSize,h=n.matchType(c.type,c.attrs);if(h){n=h;for(var l=0;l<c.marks.length;l++)e.allowsMarkType(c.marks[l].type)||this.step(new Ft(s,p,c.marks[l]))}else o.push(new Mt(s,p,f.empty));s=p}if(!n.validEnd){var d=n.fillBefore(i.empty,!0);this.replace(s,s,new f(d,0,0))}for(var u=o.length-1;u>=0;u--)this.step(o[u]);return this},bt.prototype.replace=function(t,e,n){void 0===e&&(e=t),void 0===n&&(n=f.empty);var r=Vt(this.doc,t,e,n);return r&&this.step(r),this},bt.prototype.replaceWith=function(t,e,n){return this.replace(t,e,new f(i.from(n),0,0))},bt.prototype.delete=function(t,e){return this.replace(t,e,f.empty)},bt.prototype.insert=function(t,e){return this.replaceWith(t,t,e)};var Jt=function(t){this.open=[];for(var e=0;e<=t.depth;e++){var n=t.node(e),r=n.contentMatchAt(t.indexAfter(e));this.open.push({parent:n,match:r,content:i.empty,wrapper:!1,openEnd:0,depth:e})}this.placed=[]};function qt(t,e,n){var r=t.content;if(e>1){var o=qt(t.firstChild,e-1,1==t.childCount?n-1:0);r=t.content.replaceChild(0,o)}var i=t.type.contentMatch.fillBefore(r,0==n);return t.copy(i.append(r))}function Wt(t,e,n,r,o){if(e<n){var s=t.firstChild;t=t.replaceChild(0,s.copy(Wt(s.content,e+1,n,r,s)))}if(e>r){var a=o.contentMatchAt(0),c=a.fillBefore(t).append(t);t=c.append(a.matchFragment(c).fillBefore(i.empty,!0))}return t}function Kt(t,e){for(var n=[],r=Math.min(t.depth,e.depth);r>=0;r--){var o=t.start(r);if(o<t.pos-(t.depth-r)||e.end(r)>e.pos+(e.depth-r)||t.node(r).type.spec.isolating||e.node(r).type.spec.isolating)break;o==e.start(r)&&n.push(r)}return n}Jt.prototype.placeSlice=function(t,e,n,r,o){if(e>0){var s=t.firstChild,a=this.placeSlice(s.content,Math.max(0,e-1),n&&1==t.childCount?n-1:0,r,s);a.content!=s.content&&(a.content.size?(t=t.replaceChild(0,s.copy(a.content)),e=a.openStart+1):(1==t.childCount&&(n=0),t=t.cutByIndex(1),e=0))}var c=this.placeContent(t,e,n,r,o);if(r>2&&c.size&&0==e){var p=c.content.firstChild,h=1==c.content.childCount;this.placeContent(p.content,0,n&&h?n-1:0,r,p),c=h?i.empty:new f(c.content.cutByIndex(1),0,n)}return c},Jt.prototype.placeContent=function(t,e,n,r,o){for(var s=0;s<t.childCount;s++){for(var a=t.child(s),c=!1,p=s==t.childCount-1,h=this.open.length-1;h>=0;h--){var l=this.open[h],d=void 0;if(r>1&&(d=l.match.findWrapping(a.type))&&(!o||!d.length||d[d.length-1]!=o.type)){for(;this.open.length-1>h;)this.closeNode();for(var u=0;u<d.length;u++)l.match=l.match.matchType(d[u]),h++,l={parent:d[u].create(),match:d[u].contentMatch,content:i.empty,wrapper:!0,openEnd:0,depth:h+u},this.open.push(l)}var m=l.match.matchType(a.type);if(!m){var v=l.match.fillBefore(i.from(a));if(!v){if(o&&l.match.matchType(o.type))break;continue}for(var g=0;g<v.childCount;g++){var y=v.child(g);this.addNode(l,y,0),m=l.match.matchFragment(y)}}for(;this.open.length-1>h;)this.closeNode();a=a.mark(l.parent.type.allowedMarks(a.marks)),e&&(a=qt(a,e,p?n:0),e=0),this.addNode(l,a,p?n:0),l.match=m,p&&(n=0),c=!0;break}if(!c)break}return this.open.length>1&&(s>0&&s==t.childCount||o&&this.open[this.open.length-1].parent.type==o.type)&&this.closeNode(),new f(t.cutByIndex(s),e,n)},Jt.prototype.addNode=function(t,e,n){var r,o;t.content=(r=t.content,o=t.openEnd,o?r.replaceChild(r.childCount-1,function t(e,n){var r=e.content;if(n>1){var o=t(e.lastChild,n-1);r=e.content.replaceChild(e.childCount-1,o)}var s=e.contentMatchAt(e.childCount).fillBefore(i.empty,!0);return e.copy(r.append(s))}(r.lastChild,o)):r).addToEnd(e),t.openEnd=n},Jt.prototype.closeNode=function(){var t=this.open.pop();0==t.content.size||(t.wrapper?this.addNode(this.open[this.open.length-1],t.parent.copy(t.content),t.openEnd+1):this.placed[t.depth]={depth:t.depth,content:t.content,openEnd:t.openEnd})},bt.prototype.replaceRange=function(t,e,n){if(!n.size)return this.deleteRange(t,e);var r=this.doc.resolve(t),o=this.doc.resolve(e);if(Lt(r,o,n))return this.step(new Mt(t,e,n));var i=Kt(r,this.doc.resolve(e));0==i[i.length-1]&&i.pop();var s=-(r.depth+1);i.unshift(s);for(var a=r.depth,c=r.pos-1;a>0;a--,c--){var p=r.node(a).type.spec;if(p.defining||p.isolating)break;i.indexOf(a)>-1?s=a:r.before(a)==c&&i.splice(1,0,-a)}for(var h=i.indexOf(s),l=[],d=n.openStart,u=n.content,m=0;;m++){var v=u.firstChild;if(l.push(v),m==n.openStart)break;u=v.content}d>0&&l[d-1].type.spec.defining&&r.node(h).type!=l[d-1].type?d-=1:d>=2&&l[d-1].isTextblock&&l[d-2].type.spec.defining&&r.node(h).type!=l[d-2].type&&(d-=2);for(var g=n.openStart;g>=0;g--){var y=(g+d+1)%(n.openStart+1),w=l[y];if(w)for(var b=0;b<i.length;b++){var k=i[(b+h)%i.length],x=!0;k<0&&(x=!1,k=-k);var S=r.node(k-1),O=r.index(k-1);if(S.canReplaceWith(O,O,w.type,w.marks))return this.replace(r.before(k),x?o.after(k):e,new f(Wt(n.content,0,n.openStart,y),y,n.openEnd))}}for(var C=this.steps.length,M=i.length-1;M>=0&&(this.replace(t,e,n),!(this.steps.length>C));M--){var N=i[M];M<0||(t=r.before(N),e=o.after(N))}return this},bt.prototype.replaceRangeWith=function(t,e,n){if(!n.isInline&&t==e&&this.doc.resolve(t).parent.content.size){var r=function(t,e,n){var r=t.resolve(e);if(r.parent.canReplaceWith(r.index(),r.index(),n))return e;if(0==r.parentOffset)for(var o=r.depth-1;o>=0;o--){var i=r.index(o);if(r.node(o).canReplaceWith(i,i,n))return r.before(o+1);if(i>0)return null}if(r.parentOffset==r.parent.content.size)for(var s=r.depth-1;s>=0;s--){var a=r.indexAfter(s);if(r.node(s).canReplaceWith(a,a,n))return r.after(s+1);if(a<r.node(s).childCount)return null}}(this.doc,t,n.type);null!=r&&(t=e=r)}return this.replaceRange(t,e,new f(i.from(n),0,0))},bt.prototype.deleteRange=function(t,e){for(var n=this.doc.resolve(t),r=this.doc.resolve(e),o=Kt(n,r),i=0;i<o.length;i++){var s=o[i],a=i==o.length-1;if(a&&0==s||n.node(s).type.contentMatch.validEnd)return this.delete(n.start(s),r.end(s));if(s>0&&(a||n.node(s-1).canReplace(n.index(s-1),r.indexAfter(s-1))))return this.delete(n.before(s),r.after(s))}for(var c=1;c<=n.depth&&c<=r.depth;c++)if(t-n.start(c)==n.depth-c&&e>n.end(c)&&r.end(c)-e!=r.depth-c)return this.delete(n.before(c),e);return this.delete(t,e)};var Ht=Object.create(null),Ut=function(t,e,n){this.ranges=n||[new Xt(t.min(e),t.max(e))],this.$anchor=t,this.$head=e},Gt={anchor:{configurable:!0},head:{configurable:!0},from:{configurable:!0},to:{configurable:!0},$from:{configurable:!0},$to:{configurable:!0},empty:{configurable:!0}};Gt.anchor.get=function(){return this.$anchor.pos},Gt.head.get=function(){return this.$head.pos},Gt.from.get=function(){return this.$from.pos},Gt.to.get=function(){return this.$to.pos},Gt.$from.get=function(){return this.ranges[0].$from},Gt.$to.get=function(){return this.ranges[0].$to},Gt.empty.get=function(){for(var t=this.ranges,e=0;e<t.length;e++)if(t[e].$from.pos!=t[e].$to.pos)return!1;return!0},Ut.prototype.content=function(){return this.$from.node(0).slice(this.from,this.to,!0)},Ut.prototype.replace=function(t,e){void 0===e&&(e=f.empty);for(var n=e.content.lastChild,r=null,o=0;o<e.openEnd;o++)r=n,n=n.lastChild;for(var i=t.steps.length,s=this.ranges,a=0;a<s.length;a++){var c=s[a],p=c.$from,h=c.$to,l=t.mapping.slice(i);t.replaceRange(l.map(p.pos),l.map(h.pos),a?f.empty:e),0==a&&oe(t,i,(n?n.isInline:r&&r.isTextblock)?-1:1)}},Ut.prototype.replaceWith=function(t,e){for(var n=t.steps.length,r=this.ranges,o=0;o<r.length;o++){var i=r[o],s=i.$from,a=i.$to,c=t.mapping.slice(n),p=c.map(s.pos),h=c.map(a.pos);o?t.deleteRange(p,h):(t.replaceRangeWith(p,h,e),oe(t,n,e.isInline?-1:1))}},Ut.findFrom=function(t,e,n){var r=t.parent.inlineContent?new Yt(t):re(t.node(0),t.parent,t.pos,t.index(),e,n);if(r)return r;for(var o=t.depth-1;o>=0;o--){var i=e<0?re(t.node(0),t.node(o),t.before(o+1),t.index(o),e,n):re(t.node(0),t.node(o),t.after(o+1),t.index(o)+1,e,n);if(i)return i}},Ut.near=function(t,e){return void 0===e&&(e=1),this.findFrom(t,e)||this.findFrom(t,-e)||new ee(t.node(0))},Ut.atStart=function(t){return re(t,t,0,0,1)||new ee(t)},Ut.atEnd=function(t){return re(t,t,t.content.size,t.childCount,-1)||new ee(t)},Ut.fromJSON=function(t,e){if(!e||!e.type)throw new RangeError("Invalid input for Selection.fromJSON");var n=Ht[e.type];if(!n)throw new RangeError("No selection type "+e.type+" defined");return n.fromJSON(t,e)},Ut.jsonID=function(t,e){if(t in Ht)throw new RangeError("Duplicate use of selection JSON ID "+t);return Ht[t]=e,e.prototype.jsonID=t,e},Ut.prototype.getBookmark=function(){return Yt.between(this.$anchor,this.$head).getBookmark()},Object.defineProperties(Ut.prototype,Gt),Ut.prototype.visible=!0;var Xt=function(t,e){this.$from=t,this.$to=e},Yt=function(t){function e(e,n){void 0===n&&(n=e),t.call(this,e,n)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={$cursor:{configurable:!0}};return n.$cursor.get=function(){return this.$anchor.pos==this.$head.pos?this.$head:null},e.prototype.map=function(n,r){var o=n.resolve(r.map(this.head));if(!o.parent.inlineContent)return t.near(o);var i=n.resolve(r.map(this.anchor));return new e(i.parent.inlineContent?i:o,o)},e.prototype.replace=function(e,n){if(void 0===n&&(n=f.empty),t.prototype.replace.call(this,e,n),n==f.empty){var r=this.$from.marksAcross(this.$to);r&&e.ensureMarks(r)}},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor&&t.head==this.head},e.prototype.getBookmark=function(){return new Qt(this.anchor,this.head)},e.prototype.toJSON=function(){return{type:"text",anchor:this.anchor,head:this.head}},e.fromJSON=function(t,n){if("number"!=typeof n.anchor||"number"!=typeof n.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new e(t.resolve(n.anchor),t.resolve(n.head))},e.create=function(t,e,n){void 0===n&&(n=e);var r=t.resolve(e);return new this(r,n==e?r:t.resolve(n))},e.between=function(n,r,o){var i=n.pos-r.pos;if(o&&!i||(o=i>=0?1:-1),!r.parent.inlineContent){var s=t.findFrom(r,o,!0)||t.findFrom(r,-o,!0);if(!s)return t.near(r,o);r=s.$head}return n.parent.inlineContent||(0==i?n=r:(n=(t.findFrom(n,-o,!0)||t.findFrom(n,o,!0)).$anchor).pos<r.pos!=i<0&&(n=r)),new e(n,r)},Object.defineProperties(e.prototype,n),e}(Ut);Ut.jsonID("text",Yt);var Qt=function(t,e){this.anchor=t,this.head=e};Qt.prototype.map=function(t){return new Qt(t.map(this.anchor),t.map(this.head))},Qt.prototype.resolve=function(t){return Yt.between(t.resolve(this.anchor),t.resolve(this.head))};var Zt=function(t){function e(e){var n=e.nodeAfter,r=e.node(0).resolve(e.pos+n.nodeSize);t.call(this,e,r),this.node=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.map=function(n,r){var o=r.mapResult(this.anchor),i=o.deleted,s=o.pos,a=n.resolve(s);return i?t.near(a):new e(a)},e.prototype.content=function(){return new f(i.from(this.node),0,0)},e.prototype.eq=function(t){return t instanceof e&&t.anchor==this.anchor},e.prototype.toJSON=function(){return{type:"node",anchor:this.anchor}},e.prototype.getBookmark=function(){return new te(this.anchor)},e.fromJSON=function(t,n){if("number"!=typeof n.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new e(t.resolve(n.anchor))},e.create=function(t,e){return new this(t.resolve(e))},e.isSelectable=function(t){return!t.isText&&!1!==t.type.spec.selectable},e}(Ut);Zt.prototype.visible=!1,Ut.jsonID("node",Zt);var te=function(t){this.anchor=t};te.prototype.map=function(t){var e=t.mapResult(this.anchor),n=e.deleted,r=e.pos;return n?new Qt(r,r):new te(r)},te.prototype.resolve=function(t){var e=t.resolve(this.anchor),n=e.nodeAfter;return n&&Zt.isSelectable(n)?new Zt(e):Ut.near(e)};var ee=function(t){function e(e){t.call(this,e.resolve(0),e.resolve(e.content.size))}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.toJSON=function(){return{type:"all"}},e.fromJSON=function(t){return new e(t)},e.prototype.map=function(t){return new e(t)},e.prototype.eq=function(t){return t instanceof e},e.prototype.getBookmark=function(){return ne},e}(Ut);Ut.jsonID("all",ee);var ne={map:function(){return this},resolve:function(t){return new ee(t)}};function re(t,e,n,r,o,i){if(e.inlineContent)return Yt.create(t,n);for(var s=r-(o>0?0:1);o>0?s<e.childCount:s>=0;s+=o){var a=e.child(s);if(a.isAtom){if(!i&&Zt.isSelectable(a))return Zt.create(t,n-(o<0?a.nodeSize:0))}else{var c=re(t,a,n+o,o<0?a.childCount:0,o,i);if(c)return c}n+=a.nodeSize*o}}function oe(t,e,n){var r=t.steps.length-1;if(!(r<e)){var o,i=t.steps[r];if(i instanceof Mt||i instanceof Nt)t.mapping.maps[r].forEach((function(t,e,n,r){null==o&&(o=r)})),t.setSelection(Ut.near(t.doc.resolve(o),n))}}var ie=function(t){function e(e){t.call(this,e.doc),this.time=Date.now(),this.curSelection=e.selection,this.curSelectionFor=0,this.storedMarks=e.storedMarks,this.updated=0,this.meta=Object.create(null)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={selection:{configurable:!0},selectionSet:{configurable:!0},storedMarksSet:{configurable:!0},isGeneric:{configurable:!0},scrolledIntoView:{configurable:!0}};return n.selection.get=function(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection},e.prototype.setSelection=function(t){if(t.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=t,this.curSelectionFor=this.steps.length,this.updated=-3&(1|this.updated),this.storedMarks=null,this},n.selectionSet.get=function(){return(1&this.updated)>0},e.prototype.setStoredMarks=function(t){return this.storedMarks=t,this.updated|=2,this},e.prototype.ensureMarks=function(t){return h.sameSet(this.storedMarks||this.selection.$from.marks(),t)||this.setStoredMarks(t),this},e.prototype.addStoredMark=function(t){return this.ensureMarks(t.addToSet(this.storedMarks||this.selection.$head.marks()))},e.prototype.removeStoredMark=function(t){return this.ensureMarks(t.removeFromSet(this.storedMarks||this.selection.$head.marks()))},n.storedMarksSet.get=function(){return(2&this.updated)>0},e.prototype.addStep=function(e,n){t.prototype.addStep.call(this,e,n),this.updated=-3&this.updated,this.storedMarks=null},e.prototype.setTime=function(t){return this.time=t,this},e.prototype.replaceSelection=function(t){return this.selection.replace(this,t),this},e.prototype.replaceSelectionWith=function(t,e){var n=this.selection;return!1!==e&&(t=t.mark(this.storedMarks||(n.empty?n.$from.marks():n.$from.marksAcross(n.$to)||h.none))),n.replaceWith(this,t),this},e.prototype.deleteSelection=function(){return this.selection.replace(this),this},e.prototype.insertText=function(t,e,n){void 0===n&&(n=e);var r=this.doc.type.schema;if(null==e)return t?this.replaceSelectionWith(r.text(t),!0):this.deleteSelection();if(!t)return this.deleteRange(e,n);var o=this.storedMarks;if(!o){var i=this.doc.resolve(e);o=n==e?i.marks():i.marksAcross(this.doc.resolve(n))}return this.replaceRangeWith(e,n,r.text(t,o)),this.selection.empty||this.setSelection(Ut.near(this.selection.$to)),this},e.prototype.setMeta=function(t,e){return this.meta["string"==typeof t?t:t.key]=e,this},e.prototype.getMeta=function(t){return this.meta["string"==typeof t?t:t.key]},n.isGeneric.get=function(){for(var t in this.meta)return!1;return!0},e.prototype.scrollIntoView=function(){return this.updated|=4,this},n.scrolledIntoView.get=function(){return(4&this.updated)>0},Object.defineProperties(e.prototype,n),e}(bt);function se(t,e){return e&&t?t.bind(e):t}var ae=function(t,e,n){this.name=t,this.init=se(e.init,n),this.apply=se(e.apply,n)},ce=[new ae("doc",{init:function(t){return t.doc||t.schema.topNodeType.createAndFill()},apply:function(t){return t.doc}}),new ae("selection",{init:function(t,e){return t.selection||Ut.atStart(e.doc)},apply:function(t){return t.selection}}),new ae("storedMarks",{init:function(t){return t.storedMarks||null},apply:function(t,e,n,r){return r.selection.$cursor?t.storedMarks:null}}),new ae("scrollToSelection",{init:function(){return 0},apply:function(t,e){return t.scrolledIntoView?e+1:e}})],pe=function(t,e){var n=this;this.schema=t,this.fields=ce.concat(),this.plugins=[],this.pluginsByKey=Object.create(null),e&&e.forEach((function(t){if(n.pluginsByKey[t.key])throw new RangeError("Adding different instances of a keyed plugin ("+t.key+")");n.plugins.push(t),n.pluginsByKey[t.key]=t,t.spec.state&&n.fields.push(new ae(t.key,t.spec.state,t))}))},he=function(t){this.config=t},le={schema:{configurable:!0},plugins:{configurable:!0},tr:{configurable:!0}};le.schema.get=function(){return this.config.schema},le.plugins.get=function(){return this.config.plugins},he.prototype.apply=function(t){return this.applyTransaction(t).state},he.prototype.filterTransaction=function(t,e){void 0===e&&(e=-1);for(var n=0;n<this.config.plugins.length;n++)if(n!=e){var r=this.config.plugins[n];if(r.spec.filterTransaction&&!r.spec.filterTransaction.call(r,t,this))return!1}return!0},he.prototype.applyTransaction=function(t){if(!this.filterTransaction(t))return{state:this,transactions:[]};for(var e=[t],n=this.applyInner(t),r=null;;){for(var o=!1,i=0;i<this.config.plugins.length;i++){var s=this.config.plugins[i];if(s.spec.appendTransaction){var a=r?r[i].n:0,c=r?r[i].state:this,p=a<e.length&&s.spec.appendTransaction.call(s,a?e.slice(a):e,c,n);if(p&&n.filterTransaction(p,i)){if(p.setMeta("appendedTransaction",t),!r){r=[];for(var h=0;h<this.config.plugins.length;h++)r.push(h<i?{state:n,n:e.length}:{state:this,n:0})}e.push(p),n=n.applyInner(p),o=!0}r&&(r[i]={state:n,n:e.length})}}if(!o)return{state:n,transactions:e}}},he.prototype.applyInner=function(t){if(!t.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");for(var e=new he(this.config),n=this.config.fields,r=0;r<n.length;r++){var o=n[r];e[o.name]=o.apply(t,this[o.name],this,e)}for(var i=0;i<fe.length;i++)fe[i](this,t,e);return e},le.tr.get=function(){return new ie(this)},he.create=function(t){for(var e=new pe(t.schema||t.doc.type.schema,t.plugins),n=new he(e),r=0;r<e.fields.length;r++)n[e.fields[r].name]=e.fields[r].init(t,n);return n},he.prototype.reconfigure=function(t){for(var e=new pe(t.schema||this.schema,t.plugins),n=e.fields,r=new he(e),o=0;o<n.length;o++){var i=n[o].name;r[i]=this.hasOwnProperty(i)?this[i]:n[o].init(t,r)}return r},he.prototype.toJSON=function(t){var e={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(e.storedMarks=this.storedMarks.map((function(t){return t.toJSON()}))),t&&"object"==typeof t)for(var n in t){if("doc"==n||"selection"==n)throw new RangeError("The JSON fields `doc` and `selection` are reserved");var r=t[n],o=r.spec.state;o&&o.toJSON&&(e[n]=o.toJSON.call(r,this[r.key]))}return e},he.fromJSON=function(t,e,n){if(!e)throw new RangeError("Invalid input for EditorState.fromJSON");if(!t.schema)throw new RangeError("Required config field 'schema' missing");var r=new pe(t.schema,t.plugins),o=new he(r);return r.fields.forEach((function(r){if("doc"==r.name)o.doc=D.fromJSON(t.schema,e.doc);else if("selection"==r.name)o.selection=Ut.fromJSON(o.doc,e.selection);else if("storedMarks"==r.name)e.storedMarks&&(o.storedMarks=e.storedMarks.map(t.schema.markFromJSON));else{if(n)for(var i in n){var s=n[i],a=s.spec.state;if(s.key==r.name&&a&&a.fromJSON&&Object.prototype.hasOwnProperty.call(e,i))return void(o[r.name]=a.fromJSON.call(s,t,e[i],o))}o[r.name]=r.init(t,o)}})),o},he.addApplyListener=function(t){fe.push(t)},he.removeApplyListener=function(t){var e=fe.indexOf(t);e>-1&&fe.splice(e,1)},Object.defineProperties(he.prototype,le);var fe=[];var de=function(t){this.props={},t.props&&function t(e,n,r){for(var o in e){var i=e[o];i instanceof Function?i=i.bind(n):"handleDOMEvents"==o&&(i=t(i,n,{})),r[o]=i}return r}(t.props,this,this.props),this.spec=t,this.key=t.key?t.key.key:me("plugin")};de.prototype.getState=function(t){return t[this.key]};var ue=Object.create(null);function me(t){return t in ue?t+"$"+ ++ue[t]:(ue[t]=0,t+"$")}var ve=function(t){void 0===t&&(t="key"),this.key=me(t)};ve.prototype.get=function(t){return t.config.pluginsByKey[this.key]},ve.prototype.getState=function(t){return t[this.key]};var ge={};if("undefined"!=typeof navigator&&"undefined"!=typeof document){var ye=/Edge\/(\d+)/.exec(navigator.userAgent),we=/MSIE \d/.test(navigator.userAgent),be=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);ge.mac=/Mac/.test(navigator.platform);var ke=ge.ie=!!(we||be||ye);ge.ie_version=we?document.documentMode||6:be?+be[1]:ye?+ye[1]:null,ge.gecko=!ke&&/gecko\/(\d+)/i.test(navigator.userAgent),ge.gecko_version=ge.gecko&&+(/Firefox\/(\d+)/.exec(navigator.userAgent)||[0,0])[1];var xe=!ke&&/Chrome\/(\d+)/.exec(navigator.userAgent);ge.chrome=!!xe,ge.chrome_version=xe&&+xe[1],ge.ios=!ke&&/AppleWebKit/.test(navigator.userAgent)&&/Mobile\/\w+/.test(navigator.userAgent),ge.android=/Android \d/.test(navigator.userAgent),ge.webkit=!ke&&"WebkitAppearance"in document.documentElement.style,ge.safari=/Apple Computer/.test(navigator.vendor),ge.webkit_version=ge.webkit&&+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]}var Se=function(t){for(var e=0;;e++)if(!(t=t.previousSibling))return e},Oe=function(t){var e=t.parentNode;return e&&11==e.nodeType?e.host:e},Ce=function(t,e,n){var r=document.createRange();return r.setEnd(t,null==n?t.nodeValue.length:n),r.setStart(t,e||0),r},Me=function(t,e,n,r){return n&&(Te(t,e,n,r,-1)||Te(t,e,n,r,1))},Ne=/^(img|br|input|textarea|hr)$/i;function Te(t,e,n,r,o){for(;;){if(t==n&&e==r)return!0;if(e==(o<0?0:De(t))){var i=t.parentNode;if(1!=i.nodeType||Ee(t)||Ne.test(t.nodeName)||"false"==t.contentEditable)return!1;e=Se(t)+(o<0?0:1),t=i}else{if(1!=t.nodeType)return!1;if("false"==(t=t.childNodes[e+(o<0?-1:0)]).contentEditable)return!1;e=o<0?De(t):0}}}function De(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function Ee(t){for(var e,n=t;n&&!(e=n.pmViewDesc);n=n.parentNode);return e&&e.node&&e.node.isBlock&&(e.dom==t||e.contentDOM==t)}var Ae=function(t){var e=t.isCollapsed;return e&&ge.chrome&&t.rangeCount&&!t.getRangeAt(0).collapsed&&(e=!1),e};function Re(t,e){var n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=t,n.key=n.code=e,n}function Ie(t){return{left:0,right:t.innerWidth,top:0,bottom:t.innerHeight}}function ze(t,e){return"number"==typeof t?t:t[e]}function Pe(t,e,n){for(var r=t.someProp("scrollThreshold")||0,o=t.someProp("scrollMargin")||5,i=t.dom.ownerDocument,s=i.defaultView,a=n||t.dom;a;a=Oe(a))if(1==a.nodeType){var c=a==i.body||1!=a.nodeType,p=c?Ie(s):a.getBoundingClientRect(),h=0,l=0;if(e.top<p.top+ze(r,"top")?l=-(p.top-e.top+ze(o,"top")):e.bottom>p.bottom-ze(r,"bottom")&&(l=e.bottom-p.bottom+ze(o,"bottom")),e.left<p.left+ze(r,"left")?h=-(p.left-e.left+ze(o,"left")):e.right>p.right-ze(r,"right")&&(h=e.right-p.right+ze(o,"right")),(h||l)&&(c?s.scrollBy(h,l):(l&&(a.scrollTop+=l),h&&(a.scrollLeft+=h),e={left:e.left-h,top:e.top-l,right:e.right-h,bottom:e.bottom-l})),c)break}}function Be(t){for(var e=[],n=t.ownerDocument;t&&(e.push({dom:t,top:t.scrollTop,left:t.scrollLeft}),t!=n);t=Oe(t));return e}function $e(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=r.dom,i=r.top,s=r.left;o.scrollTop!=i+e&&(o.scrollTop=i+e),o.scrollLeft!=s&&(o.scrollLeft=s)}}var Fe=null;function Ve(t,e){for(var n,r,o=2e8,i=0,s=e.top,a=e.top,c=t.firstChild,p=0;c;c=c.nextSibling,p++){var h=void 0;if(1==c.nodeType)h=c.getClientRects();else{if(3!=c.nodeType)continue;h=Ce(c).getClientRects()}for(var l=0;l<h.length;l++){var f=h[l];if(f.top<=s&&f.bottom>=a){s=Math.max(f.bottom,s),a=Math.min(f.top,a);var d=f.left>e.left?f.left-e.left:f.right<e.left?e.left-f.right:0;if(d<o){n=c,o=d,r=d&&3==n.nodeType?{left:f.right<e.left?f.right:f.left,top:e.top}:e,1==c.nodeType&&d&&(i=p+(e.left>=(f.left+f.right)/2?1:0));continue}}!n&&(e.left>=f.right&&e.top>=f.top||e.left>=f.left&&e.top>=f.bottom)&&(i=p+1)}}return n&&3==n.nodeType?function(t,e){for(var n=t.nodeValue.length,r=document.createRange(),o=0;o<n;o++){r.setEnd(t,o+1),r.setStart(t,o);var i=Le(r,1);if(i.top!=i.bottom&&_e(e,i))return{node:t,offset:o+(e.left>=(i.left+i.right)/2?1:0)}}return{node:t,offset:0}}(n,r):!n||o&&1==n.nodeType?{node:t,offset:i}:Ve(n,r)}function _e(t,e){return t.left>=e.left-1&&t.left<=e.right+1&&t.top>=e.top-1&&t.top<=e.bottom+1}function je(t,e){var n,r,o,i,s=t.root;if(s.caretPositionFromPoint)try{var a=s.caretPositionFromPoint(e.left,e.top);a&&(o=(n=a).offsetNode,i=n.offset)}catch(t){}if(!o&&s.caretRangeFromPoint){var c=s.caretRangeFromPoint(e.left,e.top);c&&(o=(r=c).startContainer,i=r.startOffset)}var p,h=s.elementFromPoint(e.left,e.top+1);if(!h||!t.dom.contains(1!=h.nodeType?h.parentNode:h)){var l=t.dom.getBoundingClientRect();if(!_e(e,l))return null;if(!(h=function t(e,n,r){var o=e.childNodes.length;if(o&&r.top<r.bottom)for(var i=Math.max(0,Math.min(o-1,Math.floor(o*(n.top-r.top)/(r.bottom-r.top))-2)),s=i;;){var a=e.childNodes[s];if(1==a.nodeType)for(var c=a.getClientRects(),p=0;p<c.length;p++){var h=c[p];if(_e(n,h))return t(a,n,h)}if((s=(s+1)%o)==i)break}return e}(t.dom,e,l)))return null}if(h=function(t,e){var n=t.parentNode;return n&&/^li$/i.test(n.nodeName)&&e.left<t.getBoundingClientRect().left?n:t}(h,e),o){if(ge.gecko&&1==o.nodeType&&(i=Math.min(i,o.childNodes.length))<o.childNodes.length){var f,d=o.childNodes[i];"IMG"==d.nodeName&&(f=d.getBoundingClientRect()).right<=e.left&&f.bottom>e.top&&i++}o==t.dom&&i==o.childNodes.length-1&&1==o.lastChild.nodeType&&e.top>o.lastChild.getBoundingClientRect().bottom?p=t.state.doc.content.size:0!=i&&1==o.nodeType&&"BR"==o.childNodes[i-1].nodeName||(p=function(t,e,n,r){for(var o=-1,i=e;i!=t.dom;){var s=t.docView.nearestDesc(i,!0);if(!s)return null;if(s.node.isBlock&&s.parent){var a=s.dom.getBoundingClientRect();if(a.left>r.left||a.top>r.top)o=s.posBefore;else{if(!(a.right<r.left||a.bottom<r.top))break;o=s.posAfter}}i=s.dom.parentNode}return o>-1?o:t.docView.posFromDOM(e,n)}(t,o,i,e))}null==p&&(p=function(t,e,n){var r=Ve(e,n),o=r.node,i=r.offset,s=-1;if(1==o.nodeType&&!o.firstChild){var a=o.getBoundingClientRect();s=a.left!=a.right&&n.left>(a.left+a.right)/2?1:-1}return t.docView.posFromDOM(o,i,s)}(t,h,e));var u=t.docView.nearestDesc(h,!0);return{pos:p,inside:u?u.posAtStart-u.border:-1}}function Le(t,e){var n=t.getClientRects();return n.length?n[e<0?0:n.length-1]:t.getBoundingClientRect()}function Je(t,e){var n=t.docView.domFromPos(e),r=n.node,o=n.offset;if(3==r.nodeType&&(ge.chrome||ge.gecko)){var i=Le(Ce(r,o,o),0);if(ge.gecko&&o&&/\s/.test(r.nodeValue[o-1])&&o<r.nodeValue.length){var s=Le(Ce(r,o-1,o-1),-1);if(Math.abs(s.left-i.left)<1&&s.top==i.top){var a=Le(Ce(r,o,o+1),-1);return qe(a,a.left<s.left)}}return i}if(1==r.nodeType&&!t.state.doc.resolve(e).parent.inlineContent){var c,p=!0;if(o<r.childNodes.length){var h=r.childNodes[o];1==h.nodeType&&(c=h.getBoundingClientRect())}if(!c&&o){var l=r.childNodes[o-1];1==l.nodeType&&(c=l.getBoundingClientRect(),p=!1)}return function(t,e){if(0==t.height)return t;var n=e?t.top:t.bottom;return{top:n,bottom:n,left:t.left,right:t.right}}(c||r.getBoundingClientRect(),p)}for(var f=-1;f<2;f+=2)if(f<0&&o){var d=void 0,u=3==r.nodeType?Ce(r,o-1,o):3==(d=r.childNodes[o-1]).nodeType?Ce(d):1==d.nodeType&&"BR"!=d.nodeName?d:null;if(u){var m=Le(u,1);if(m.top<m.bottom)return qe(m,!1)}}else if(f>0&&o<De(r)){var v=void 0,g=3==r.nodeType?Ce(r,o,o+1):3==(v=r.childNodes[o]).nodeType?Ce(v):1==v.nodeType?v:null;if(g){var y=Le(g,-1);if(y.top<y.bottom)return qe(y,!0)}}return qe(Le(3==r.nodeType?Ce(r):r,0),!1)}function qe(t,e){if(0==t.width)return t;var n=e?t.left:t.right;return{top:t.top,bottom:t.bottom,left:n,right:n}}function We(t,e,n){var r=t.state,o=t.root.activeElement;r!=e&&t.updateState(e),o!=t.dom&&t.focus();try{return n()}finally{r!=e&&t.updateState(r),o!=t.dom&&o.focus()}}var Ke=/[\u0590-\u08ac]/;var He=null,Ue=null,Ge=!1;function Xe(t,e,n){return He==e&&Ue==n?Ge:(He=e,Ue=n,Ge="up"==n||"down"==n?function(t,e,n){var r=e.selection,o="up"==n?r.$anchor.min(r.$head):r.$anchor.max(r.$head);return We(t,e,(function(){for(var e=t.docView.domFromPos(o.pos).node;;){var r=t.docView.nearestDesc(e,!0);if(!r)break;if(r.node.isBlock){e=r.dom;break}e=r.dom.parentNode}for(var i=Je(t,o.pos),s=e.firstChild;s;s=s.nextSibling){var a=void 0;if(1==s.nodeType)a=s.getClientRects();else{if(3!=s.nodeType)continue;a=Ce(s,0,s.nodeValue.length).getClientRects()}for(var c=0;c<a.length;c++){var p=a[c];if(p.bottom>p.top&&("up"==n?p.bottom<i.top+1:p.top>i.bottom-1))return!1}}return!0}))}(t,e,n):function(t,e,n){var r=e.selection.$head;if(!r.parent.isTextblock)return!1;var o=r.parentOffset,i=!o,s=o==r.parent.content.size,a=getSelection();return Ke.test(r.parent.textContent)&&a.modify?We(t,e,(function(){var e=a.getRangeAt(0),o=a.focusNode,i=a.focusOffset,s=a.caretBidiLevel;a.modify("move",n,"character");var c=!(r.depth?t.docView.domAfterPos(r.before()):t.dom).contains(1==a.focusNode.nodeType?a.focusNode:a.focusNode.parentNode)||o==a.focusNode&&i==a.focusOffset;return a.removeAllRanges(),a.addRange(e),null!=s&&(a.caretBidiLevel=s),c})):"left"==n||"backward"==n?i:s}(t,e,n))}var Ye=function(t,e,n,r){this.parent=t,this.children=e,this.dom=n,n.pmViewDesc=this,this.contentDOM=r,this.dirty=0},Qe={beforePosition:{configurable:!0},size:{configurable:!0},border:{configurable:!0},posBefore:{configurable:!0},posAtStart:{configurable:!0},posAfter:{configurable:!0},posAtEnd:{configurable:!0},contentLost:{configurable:!0}};Ye.prototype.matchesWidget=function(){return!1},Ye.prototype.matchesMark=function(){return!1},Ye.prototype.matchesNode=function(){return!1},Ye.prototype.matchesHack=function(){return!1},Qe.beforePosition.get=function(){return!1},Ye.prototype.parseRule=function(){return null},Ye.prototype.stopEvent=function(){return!1},Qe.size.get=function(){for(var t=0,e=0;e<this.children.length;e++)t+=this.children[e].size;return t},Qe.border.get=function(){return 0},Ye.prototype.destroy=function(){this.parent=null,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=null);for(var t=0;t<this.children.length;t++)this.children[t].destroy()},Ye.prototype.posBeforeChild=function(t){for(var e=0,n=this.posAtStart;e<this.children.length;e++){var r=this.children[e];if(r==t)return n;n+=r.size}},Qe.posBefore.get=function(){return this.parent.posBeforeChild(this)},Qe.posAtStart.get=function(){return this.parent?this.parent.posBeforeChild(this)+this.border:0},Qe.posAfter.get=function(){return this.posBefore+this.size},Qe.posAtEnd.get=function(){return this.posAtStart+this.size-2*this.border},Ye.prototype.localPosFromDOM=function(t,e,n){if(this.contentDOM&&this.contentDOM.contains(1==t.nodeType?t:t.parentNode)){if(n<0){var r,o;if(t==this.contentDOM)r=t.childNodes[e-1];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;r=t.previousSibling}for(;r&&(!(o=r.pmViewDesc)||o.parent!=this);)r=r.previousSibling;return r?this.posBeforeChild(o)+o.size:this.posAtStart}var i,s;if(t==this.contentDOM)i=t.childNodes[e];else{for(;t.parentNode!=this.contentDOM;)t=t.parentNode;i=t.nextSibling}for(;i&&(!(s=i.pmViewDesc)||s.parent!=this);)i=i.nextSibling;return i?this.posBeforeChild(s):this.posAtEnd}var a;if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))a=2&t.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==e)for(var c=t;;c=c.parentNode){if(c==this.dom){a=!1;break}if(c.parentNode.firstChild!=c)break}if(null==a&&e==t.childNodes.length)for(var p=t;;p=p.parentNode){if(p==this.dom){a=!0;break}if(p.parentNode.lastChild!=p)break}}return(null==a?n>0:a)?this.posAtEnd:this.posAtStart},Ye.prototype.nearestDesc=function(t,e){for(var n=!0,r=t;r;r=r.parentNode){var o=this.getDesc(r);if(o&&(!e||o.node)){if(!n||!o.nodeDOM||(1==o.nodeDOM.nodeType?o.nodeDOM.contains(t):o.nodeDOM==t))return o;n=!1}}},Ye.prototype.getDesc=function(t){for(var e=t.pmViewDesc,n=e;n;n=n.parent)if(n==this)return e},Ye.prototype.posFromDOM=function(t,e,n){for(var r=t;;r=r.parentNode){var o=this.getDesc(r);if(o)return o.localPosFromDOM(t,e,n)}},Ye.prototype.descAt=function(t){for(var e=0,n=0;e<this.children.length;e++){var r=this.children[e],o=n+r.size;if(n==t&&o!=n){for(;!r.border&&r.children.length;)r=r.children[0];return r}if(t<o)return r.descAt(t-n-r.border);n=o}},Ye.prototype.domFromPos=function(t){if(!this.contentDOM)return{node:this.dom,offset:0};for(var e=0,n=0;;n++){if(e==t){for(;n<this.children.length&&(this.children[n].beforePosition||this.children[n].dom.parentNode!=this.contentDOM);)n++;return{node:this.contentDOM,offset:n==this.children.length?this.contentDOM.childNodes.length:Se(this.children[n].dom)}}if(n==this.children.length)throw new Error("Invalid position "+t);var r=this.children[n],o=e+r.size;if(t<o)return r.domFromPos(t-e-r.border);e=o}},Ye.prototype.parseRange=function(t,e,n){if(void 0===n&&(n=0),0==this.children.length)return{node:this.contentDOM,from:t,to:e,fromOffset:0,toOffset:this.contentDOM.childNodes.length};for(var r=-1,o=-1,i=n,s=0;;s++){var a=this.children[s],c=i+a.size;if(-1==r&&t<=c){var p=i+a.border;if(t>=p&&e<=c-a.border&&a.node&&a.contentDOM&&this.contentDOM.contains(a.contentDOM))return a.parseRange(t,e,p);t=i;for(var h=s;h>0;h--){var l=this.children[h-1];if(l.size&&l.dom.parentNode==this.contentDOM&&!l.emptyChildAt(1)){r=Se(l.dom)+1;break}t-=l.size}-1==r&&(r=0)}if(r>-1&&e<=c){e=c;for(var f=s+1;f<this.children.length;f++){var d=this.children[f];if(d.size&&d.dom.parentNode==this.contentDOM&&!d.emptyChildAt(-1)){o=Se(d.dom);break}e+=d.size}-1==o&&(o=this.contentDOM.childNodes.length);break}i=c}return{node:this.contentDOM,from:t,to:e,fromOffset:r,toOffset:o}},Ye.prototype.emptyChildAt=function(t){if(this.border||!this.contentDOM||!this.children.length)return!1;var e=this.children[t<0?0:this.children.length-1];return 0==e.size||e.emptyChildAt(t)},Ye.prototype.domAfterPos=function(t){var e=this.domFromPos(t),n=e.node,r=e.offset;if(1!=n.nodeType||r==n.childNodes.length)throw new RangeError("No node after pos "+t);return n.childNodes[r]},Ye.prototype.setSelection=function(t,e,n,r){for(var o=Math.min(t,e),i=Math.max(t,e),s=0,a=0;s<this.children.length;s++){var c=this.children[s],p=a+c.size;if(o>a&&i<p)return c.setSelection(t-a-c.border,e-a-c.border,n,r);a=p}var h=this.domFromPos(t),l=this.domFromPos(e),f=n.getSelection(),d=document.createRange();if(r||!Me(h.node,h.offset,f.anchorNode,f.anchorOffset)||!Me(l.node,l.offset,f.focusNode,f.focusOffset)){if(f.extend)d.setEnd(h.node,h.offset),d.collapse(!1);else{if(t>e){var u=h;h=l,l=u}d.setEnd(l.node,l.offset),d.setStart(h.node,h.offset)}f.removeAllRanges(),f.addRange(d),f.extend&&f.extend(l.node,l.offset)}},Ye.prototype.ignoreMutation=function(t){return!this.contentDOM&&"selection"!=t.type},Qe.contentLost.get=function(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)},Ye.prototype.markDirty=function(t,e){for(var n=0,r=0;r<this.children.length;r++){var o=this.children[r],i=n+o.size;if(n==i?t<=i&&e>=n:t<i&&e>n){var s=n+o.border,a=i-o.border;if(t>=s&&e<=a)return this.dirty=t==n||e==i?2:1,void(t!=s||e!=a||!o.contentLost&&o.dom.parentNode==this.contentDOM?o.markDirty(t-s,e-s):o.dirty=3);o.dirty=3}n=i}this.dirty=2},Ye.prototype.markParentsDirty=function(){for(var t=this.parent;t;t=t.parent){t.dirty<2&&(t.dirty=2)}},Object.defineProperties(Ye.prototype,Qe);var Ze=[],tn=function(t){function e(e,n,r,o){var i,s=n.type.toDOM;if("function"==typeof s&&(s=s(r,(function(){return i?i.parent?i.parent.posBeforeChild(i):void 0:o}))),!n.type.spec.raw){if(1!=s.nodeType){var a=document.createElement("span");a.appendChild(s),s=a}s.contentEditable=!1,s.classList.add("ProseMirror-widget")}t.call(this,e,Ze,s,null),this.widget=n,i=this}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={beforePosition:{configurable:!0}};return n.beforePosition.get=function(){return this.widget.type.side<0},e.prototype.matchesWidget=function(t){return 0==this.dirty&&t.type.eq(this.widget.type)},e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.stopEvent=function(t){var e=this.widget.spec.stopEvent;return!!e&&e(t)},e.prototype.ignoreMutation=function(t){return"selection"!=t.type||this.widget.spec.ignoreSelection},Object.defineProperties(e.prototype,n),e}(Ye),en=function(t){function e(e,n,r,o){t.call(this,e,Ze,n,null),this.textDOM=r,this.text=o}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0}};return n.size.get=function(){return this.text.length},e.prototype.localPosFromDOM=function(t,e){return t!=this.textDOM?this.posAtStart+(e?this.size:0):this.posAtStart+e},e.prototype.domFromPos=function(t){return{node:this.textDOM,offset:t}},e.prototype.ignoreMutation=function(t){return"characterData"===t.type&&t.target.nodeValue==t.oldValue},Object.defineProperties(e.prototype,n),e}(Ye),nn=function(t){function e(e,n,r,o){t.call(this,e,[],r,o),this.mark=n}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.create=function(t,n,r,o){var i=o.nodeViews[n.type.name],s=i&&i(n,o,r);return s&&s.dom||(s=lt.renderSpec(document,n.type.spec.toDOM(n,r))),new e(t,n,s.dom,s.contentDOM||s.dom)},e.prototype.parseRule=function(){return{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM}},e.prototype.matchesMark=function(t){return 3!=this.dirty&&this.mark.eq(t)},e.prototype.markDirty=function(e,n){if(t.prototype.markDirty.call(this,e,n),0!=this.dirty){for(var r=this.parent;!r.node;)r=r.parent;r.dirty<this.dirty&&(r.dirty=this.dirty),this.dirty=0}},e.prototype.slice=function(t,n,r){var o=e.create(this.parent,this.mark,!0,r),i=this.children,s=this.size;n<s&&(i=wn(i,n,s,r)),t>0&&(i=wn(i,0,t,r));for(var a=0;a<i.length;a++)i[a].parent=o;return o.children=i,o},e}(Ye),rn=function(t){function e(e,n,r,o,i,s,a,c,p){t.call(this,e,n.isLeaf?Ze:[],i,s),this.nodeDOM=a,this.node=n,this.outerDeco=r,this.innerDeco=o,s&&this.updateChildren(c,p)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={size:{configurable:!0},border:{configurable:!0}};return e.create=function(t,n,r,o,i,s){var a,c,p=i.nodeViews[n.type.name],h=p&&p(n,i,(function(){return c?c.parent?c.parent.posBeforeChild(c):void 0:s}),r),l=h&&h.dom,f=h&&h.contentDOM;if(n.isText)if(l){if(3!=l.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else l=document.createTextNode(n.text);else l||(l=(a=lt.renderSpec(document,n.type.spec.toDOM(n))).dom,f=a.contentDOM);f||n.isText||"BR"==l.nodeName||(l.hasAttribute("contenteditable")||(l.contentEditable=!1),n.type.spec.draggable&&(l.draggable=!0));var d=l;return l=un(l,r,n),h?c=new cn(t,n,r,o,l,f,d,h,i,s+1):n.isText?new sn(t,n,r,o,l,d,i):new e(t,n,r,o,l,f,d,i,s+1)},e.prototype.parseRule=function(){var t=this;if(this.node.type.spec.reparseInView)return null;var e={node:this.node.type.name,attrs:this.node.attrs};return this.node.type.spec.code&&(e.preserveWhitespace="full"),this.contentDOM&&!this.contentLost?e.contentElement=this.contentDOM:e.getContent=function(){return t.contentDOM?i.empty:t.node.content},e},e.prototype.matchesNode=function(t,e,n){return 0==this.dirty&&t.eq(this.node)&&mn(e,this.outerDeco)&&n.eq(this.innerDeco)},n.size.get=function(){return this.node.nodeSize},n.border.get=function(){return this.node.isLeaf?0:1},e.prototype.updateChildren=function(t,e){var n=this,r=this.node.inlineContent,o=e,i=r&&t.composing&&this.localCompositionNode(t,e),s=new gn(this,i&&i.node);!function(t,e,n,r){var o=e.locals(t),i=0;if(0==o.length){for(var s=0;s<t.childCount;s++){var a=t.child(s);r(a,o,e.forChild(i,a),s),i+=a.nodeSize}return}for(var c=0,p=[],h=null,l=0;;){if(c<o.length&&o[c].to==i){for(var f=o[c++],d=void 0;c<o.length&&o[c].to==i;)(d||(d=[f])).push(o[c++]);if(d){d.sort(yn);for(var u=0;u<d.length;u++)n(d[u],l,!!h)}else n(f,l,!!h)}var m=void 0,v=void 0;if(h)v=-1,m=h,h=null;else{if(!(l<t.childCount))break;v=l,m=t.child(l++)}for(var g=0;g<p.length;g++)p[g].to<=i&&p.splice(g--,1);for(;c<o.length&&o[c].from==i;)p.push(o[c++]);var y=i+m.nodeSize;if(m.isText){var w=y;c<o.length&&o[c].from<w&&(w=o[c].from);for(var b=0;b<p.length;b++)p[b].to<w&&(w=p[b].to);w<y&&(h=m.cut(w-i),m=m.cut(0,w-i),y=w,v=-1)}r(m,p.length?p.slice():Ze,e.forChild(i,m),v),i=y}}(this.node,this.innerDeco,(function(e,i,a){e.spec.marks?s.syncToMarks(e.spec.marks,r,t):e.type.side>=0&&!a&&s.syncToMarks(i==n.node.childCount?h.none:n.node.child(i).marks,r,t),s.placeWidget(e,t,o)}),(function(e,n,i,a){s.syncToMarks(e.marks,r,t),s.findNodeMatch(e,n,i,a)||s.updateNextNode(e,n,i,t,a)||s.addNode(e,n,i,t,o),o+=e.nodeSize})),s.syncToMarks(Ze,r,t),this.node.isTextblock&&s.addTextblockHacks(),s.destroyRest(),(s.changed||2==this.dirty)&&(i&&this.protectLocalComposition(t,i),this.renderChildren())},e.prototype.renderChildren=function(){!function t(e,n){for(var r=e.firstChild,o=0;o<n.length;o++){var i=n[o],s=i.dom;if(s.parentNode==e){for(;s!=r;)r=vn(r);r=r.nextSibling}else e.insertBefore(s,r);if(i instanceof nn){var a=r?r.previousSibling:e.lastChild;t(i.contentDOM,i.children),r=a?a.nextSibling:e.firstChild}}for(;r;)r=vn(r)}(this.contentDOM,this.children),ge.ios&&function(t){if("UL"==t.nodeName||"OL"==t.nodeName){var e=t.style.cssText;t.style.cssText=e+"; list-style: square !important",window.getComputedStyle(t).listStyle,t.style.cssText=e}}(this.dom)},e.prototype.localCompositionNode=function(t,e){var n=t.state.selection,r=n.from,o=n.to;if(!(!(t.state.selection instanceof Yt)||r<e||o>e+this.node.content.size)){var i=t.root.getSelection(),s=function(t,e){for(;;){if(3==t.nodeType)return t;if(1==t.nodeType&&e>0){if(t.childNodes.length>e&&3==t.childNodes[e].nodeType)return t.childNodes[e];t=t.childNodes[e-1],e=De(t)}else{if(!(1==t.nodeType&&e<t.childNodes.length))return null;t=t.childNodes[e],e=0}}}(i.focusNode,i.focusOffset);if(s&&this.dom.contains(s.parentNode)){var a=s.nodeValue,c=function(t,e,n,r){for(var o=0,i=0;o<t.childCount&&i<=r;){var s=t.child(o++),a=i;if(i+=s.nodeSize,s.isText){for(var c=s.text;o<t.childCount;){var p=t.child(o++);if(i+=p.nodeSize,!p.isText)break;c+=p.text}if(i>=n){var h=c.lastIndexOf(e,r-a);if(h>=0&&h+e.length+a>=n)return a+h}}}return-1}(this.node.content,a,r-e,o-e);return c<0?null:{node:s,pos:c,text:a}}}},e.prototype.protectLocalComposition=function(t,e){var n=e.node,r=e.pos,o=e.text;if(!this.getDesc(n)){for(var i=n;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=null)}var s=new en(this,i,n,o);t.compositionNodes.push(s),this.children=wn(this.children,r,r+o.length,t,s)}},e.prototype.update=function(t,e,n,r){return!(3==this.dirty||!t.sameMarkup(this.node))&&(this.updateInner(t,e,n,r),!0)},e.prototype.updateInner=function(t,e,n,r){this.updateOuterDeco(e),this.node=t,this.innerDeco=n,this.contentDOM&&this.updateChildren(r,this.posAtStart),this.dirty=0},e.prototype.updateOuterDeco=function(t){if(!mn(t,this.outerDeco)){var e=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=fn(this.dom,this.nodeDOM,ln(this.outerDeco,this.node,e),ln(t,this.node,e)),this.dom!=n&&(n.pmViewDesc=null,this.dom.pmViewDesc=this),this.outerDeco=t}},e.prototype.selectNode=function(){this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)},e.prototype.deselectNode=function(){this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!1)},Object.defineProperties(e.prototype,n),e}(Ye);function on(t,e,n,r,o){return un(r,e,t),new rn(null,t,e,n,r,r,r,o,0)}var sn=function(t){function e(e,n,r,o,i,s,a){t.call(this,e,n,r,o,i,null,s,a)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parseRule=function(){return{skip:this.nodeDOM.parentNode||!0}},e.prototype.update=function(t,e){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!t.sameMarkup(this.node))&&(this.updateOuterDeco(e),0==this.dirty&&t.text==this.node.text||t.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=t.text),this.node=t,this.dirty=0,!0)},e.prototype.inParent=function(){for(var t=this.parent.contentDOM,e=this.nodeDOM;e;e=e.parentNode)if(e==t)return!0;return!1},e.prototype.domFromPos=function(t){return{node:this.nodeDOM,offset:t}},e.prototype.localPosFromDOM=function(e,n,r){return e==this.nodeDOM?this.posAtStart+Math.min(n,this.node.text.length):t.prototype.localPosFromDOM.call(this,e,n,r)},e.prototype.ignoreMutation=function(t){return"characterData"!=t.type&&"selection"!=t.type},e.prototype.slice=function(t,n,r){var o=this.node.cut(t,n),i=document.createTextNode(o.text);return new e(this.parent,o,this.outerDeco,this.innerDeco,i,i,r)},e}(rn),an=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.parseRule=function(){return{ignore:!0}},e.prototype.matchesHack=function(){return 0==this.dirty},e}(Ye),cn=function(t){function e(e,n,r,o,i,s,a,c,p,h){t.call(this,e,n,r,o,i,s,a,p,h),this.spec=c}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.update=function(e,n,r,o){if(3==this.dirty)return!1;if(this.spec.update){var i=this.spec.update(e,n);return i&&this.updateInner(e,n,r,o),i}return!(!this.contentDOM&&!e.isLeaf)&&t.prototype.update.call(this,e,n,r,o)},e.prototype.selectNode=function(){this.spec.selectNode?this.spec.selectNode():t.prototype.selectNode.call(this)},e.prototype.deselectNode=function(){this.spec.deselectNode?this.spec.deselectNode():t.prototype.deselectNode.call(this)},e.prototype.setSelection=function(e,n,r,o){this.spec.setSelection?this.spec.setSelection(e,n,r):t.prototype.setSelection.call(this,e,n,r,o)},e.prototype.destroy=function(){this.spec.destroy&&this.spec.destroy(),t.prototype.destroy.call(this)},e.prototype.stopEvent=function(t){return!!this.spec.stopEvent&&this.spec.stopEvent(t)},e.prototype.ignoreMutation=function(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):t.prototype.ignoreMutation.call(this,e)},e}(rn);function pn(t){t&&(this.nodeName=t)}pn.prototype=Object.create(null);var hn=[new pn];function ln(t,e,n){if(0==t.length)return hn;for(var r=n?hn[0]:new pn,o=[r],i=0;i<t.length;i++){var s=t[i].type.attrs,a=r;if(s)for(var c in s.nodeName&&o.push(a=new pn(s.nodeName)),s){var p=s[c];null!=p&&(n&&1==o.length&&o.push(a=r=new pn(e.isInline?"span":"div")),"class"==c?a.class=(a.class?a.class+" ":"")+p:"style"==c?a.style=(a.style?a.style+";":"")+p:"nodeName"!=c&&(a[c]=p))}}return o}function fn(t,e,n,r){if(n==hn&&r==hn)return e;for(var o=e,i=0;i<r.length;i++){var s=r[i],a=n[i];if(i){var c=void 0;a&&a.nodeName==s.nodeName&&o!=t&&(c=o.parentNode)&&c.tagName.toLowerCase()==s.nodeName?o=c:((c=document.createElement(s.nodeName)).appendChild(o),a=hn[0],o=c)}dn(o,a||hn[0],s)}return o}function dn(t,e,n){for(var r in e)"class"==r||"style"==r||"nodeName"==r||r in n||t.removeAttribute(r);for(var o in n)"class"!=o&&"style"!=o&&"nodeName"!=o&&n[o]!=e[o]&&t.setAttribute(o,n[o]);if(e.class!=n.class){for(var i=e.class?e.class.split(" "):Ze,s=n.class?n.class.split(" "):Ze,a=0;a<i.length;a++)-1==s.indexOf(i[a])&&t.classList.remove(i[a]);for(var c=0;c<s.length;c++)-1==i.indexOf(s[c])&&t.classList.add(s[c])}if(e.style!=n.style){if(e.style)for(var p,h=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;p=h.exec(e.style);)t.style.removeProperty(p[1]);n.style&&(t.style.cssText+=n.style)}}function un(t,e,n){return fn(t,t,hn,ln(e,n,1!=t.nodeType))}function mn(t,e){if(t.length!=e.length)return!1;for(var n=0;n<t.length;n++)if(!t[n].type.eq(e[n].type))return!1;return!0}function vn(t){var e=t.nextSibling;return t.parentNode.removeChild(t),e}var gn=function(t,e){this.top=t,this.lock=e,this.index=0,this.stack=[],this.changed=!1;var n=function(t,e){for(var n=[],r=t.childCount,o=e.length-1;r>0&&o>=0;o--){var i=e[o],s=i.node;if(s){if(s!=t.child(r-1))break;n.push(i),--r}}return{nodes:n.reverse(),offset:r}}(t.node.content,t.children);this.preMatched=n.nodes,this.preMatchOffset=n.offset};function yn(t,e){return t.type.side-e.type.side}function wn(t,e,n,r,o){for(var i=[],s=0,a=0;s<t.length;s++){var c=t[s],p=a,h=a+=c.size;p>=n||h<=e?i.push(c):(p<e&&i.push(c.slice(0,e-p,r)),o&&(i.push(o),o=null),h>n&&i.push(c.slice(n-p,c.size,r)))}return i}function bn(t,e){var n=t.selection,r=n.$anchor,o=n.$head,i=e>0?r.max(o):r.min(o),s=i.parent.inlineContent?i.depth?t.doc.resolve(e>0?i.after():i.before()):null:i;return s&&Ut.findFrom(s,e)}function kn(t,e){return t.dispatch(t.state.tr.setSelection(e).scrollIntoView()),!0}function xn(t,e,n){var r=t.state.selection;if(r instanceof Yt){if(!r.empty||n.indexOf("s")>-1)return!1;if(t.endOfTextblock(e>0?"right":"left")){var o=bn(t.state,e);return!!(o&&o instanceof Zt)&&kn(t,o)}var i,s=r.$head,a=s.textOffset?null:e<0?s.nodeBefore:s.nodeAfter;if(!a||a.isText)return!1;var c=e<0?s.pos-a.nodeSize:s.pos;return!!(a.isAtom||(i=t.docView.descAt(c))&&!i.contentDOM)&&(Zt.isSelectable(a)?kn(t,new Zt(e<0?t.state.doc.resolve(s.pos-a.nodeSize):s)):!!ge.webkit&&kn(t,new Yt(t.state.doc.resolve(e<0?c:c+a.nodeSize))))}if(r instanceof Zt&&r.node.isInline)return kn(t,new Yt(e>0?r.$to:r.$from));var p=bn(t.state,e);return!!p&&kn(t,p)}function Sn(t){return 3==t.nodeType?t.nodeValue.length:t.childNodes.length}function On(t){var e=t.pmViewDesc;return e&&0==e.size&&(t.nextSibling||"BR"!=t.nodeName)}function Cn(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){var o,i,s=!1;for(ge.gecko&&1==n.nodeType&&r<Sn(n)&&On(n.childNodes[r])&&(s=!0);;)if(r>0){if(1!=n.nodeType)break;var a=n.childNodes[r-1];if(On(a))o=n,i=--r;else{if(3!=a.nodeType)break;r=(n=a).nodeValue.length}}else{if(Nn(n))break;for(var c=n.previousSibling;c&&On(c);)o=n.parentNode,i=Se(c),c=c.previousSibling;if(c)r=Sn(n=c);else{if((n=n.parentNode)==t.dom)break;r=0}}s?Tn(t,e,n,r):o&&Tn(t,e,o,i)}}function Mn(t){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n){for(var o,i,s=Sn(n);;)if(r<s){if(1!=n.nodeType)break;if(!On(n.childNodes[r]))break;o=n,i=++r}else{if(Nn(n))break;for(var a=n.nextSibling;a&&On(a);)o=a.parentNode,i=Se(a)+1,a=a.nextSibling;if(a)r=0,s=Sn(n=a);else{if((n=n.parentNode)==t.dom)break;r=s=0}}o&&Tn(t,e,o,i)}}function Nn(t){var e=t.pmViewDesc;return e&&e.node&&e.node.isBlock}function Tn(t,e,n,r){if(Ae(e)){var o=document.createRange();o.setEnd(n,r),o.setStart(n,r),e.removeAllRanges(),e.addRange(o)}else e.extend&&e.extend(n,r);t.domObserver.setCurSelection()}function Dn(t,e,n){var r=t.state.selection;if(r instanceof Yt&&!r.empty||n.indexOf("s")>-1)return!1;var o=r.$from,i=r.$to;if(!o.parent.inlineContent||t.endOfTextblock(e<0?"up":"down")){var s=bn(t.state,e);if(s&&s instanceof Zt)return kn(t,s)}if(!o.parent.inlineContent){var a=Ut.findFrom(e<0?o:i,e);return!a||kn(t,a)}return!1}function En(t,e){if(!(t.state.selection instanceof Yt))return!0;var n=t.state.selection,r=n.$head,o=n.$anchor,i=n.empty;if(!r.sameParent(o))return!0;if(!i)return!1;if(t.endOfTextblock(e>0?"forward":"backward"))return!0;var s=!r.textOffset&&(e<0?r.nodeBefore:r.nodeAfter);if(s&&!s.isText){var a=t.state.tr;return e<0?a.delete(r.pos-s.nodeSize,r.pos):a.delete(r.pos,r.pos+s.nodeSize),t.dispatch(a),!0}return!1}function An(t,e,n){t.domObserver.stop(),e.contentEditable=n,t.domObserver.start()}function Rn(t,e){var n=e.keyCode,r=function(t){var e="";return t.ctrlKey&&(e+="c"),t.metaKey&&(e+="m"),t.altKey&&(e+="a"),t.shiftKey&&(e+="s"),e}(e);return 8==n||ge.mac&&72==n&&"c"==r?En(t,-1)||Cn(t):46==n||ge.mac&&68==n&&"c"==r?En(t,1)||Mn(t):13==n&&!ge.ios||27==n||(37==n?xn(t,-1,r)||Cn(t):39==n?xn(t,1,r)||Mn(t):38==n?Dn(t,-1,r)||Cn(t):40==n?function(t){if(ge.chrome&&!(t.state.selection.$head.parentOffset>0)){var e=t.root.getSelection(),n=e.focusNode,r=e.focusOffset;if(n&&1==n.nodeType&&0==r&&n.firstChild&&"false"==n.firstChild.contentEditable){var o=n.firstChild;An(t,o,!0),setTimeout((function(){return An(t,o,!1)}),20)}}}(t)||Dn(t,1,r)||Mn(t):r==(ge.mac?"m":"c")&&(66==n||73==n||89==n||90==n))}function In(t,e){var n,r,o=t.root.getSelection(),i=t.state.doc,s=t.docView.nearestDesc(o.focusNode),a=s&&0==s.size,c=t.docView.posFromDOM(o.focusNode,o.focusOffset),p=i.resolve(c);if(Ae(o)){for(n=p;s&&!s.node;)s=s.parent;if(s&&s.node.isAtom&&Zt.isSelectable(s.node)&&s.parent&&(!s.node.isInline||!function(t,e,n){for(var r=0==e,o=e==De(t);r||o;){if(t==n)return!0;var i=Se(t);if(!(t=t.parentNode))return!1;r=r&&0==i,o=o&&i==De(t)}}(o.focusNode,o.focusOffset,s.dom))){var h=s.posBefore;r=new Zt(c==h?p:i.resolve(h))}}else n=i.resolve(t.docView.posFromDOM(o.anchorNode,o.anchorOffset));r||(r=jn(t,n,p,"pointer"==e||t.state.selection.head<p.pos&&!a?1:-1));return r}function zn(t,e){var n=t.state.selection;if(Vn(t,n),t.editable?t.hasFocus():Ln(t)&&document.activeElement.contains(t.dom)){if(t.domObserver.disconnectSelection(),t.cursorWrapper)!function(t){var e=t.root.getSelection(),n=document.createRange(),r=t.cursorWrapper.dom,o="IMG"==r.nodeName;o?n.setEnd(r.parentNode,Se(r)+1):n.setEnd(r,0);n.collapse(!1),e.removeAllRanges(),e.addRange(n),!o&&!t.state.selection.visible&&ge.ie&&ge.ie_version<=11&&(r.disabled=!0,r.disabled=!1)}(t);else{var r,o,i=n.anchor,s=n.head;!Pn||n instanceof Yt||(n.$from.parent.inlineContent||(r=Bn(t,n.from)),n.empty||n.$from.parent.inlineContent||(o=Bn(t,n.to))),t.docView.setSelection(i,s,t.root,e),Pn&&(r&&Fn(r),o&&Fn(o)),n.visible?t.dom.classList.remove("ProseMirror-hideselection"):i!=s&&(t.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(t){var e=t.dom.ownerDocument;e.removeEventListener("selectionchange",t.hideSelectionGuard);var n=t.root.getSelection(),r=n.anchorNode,o=n.anchorOffset;e.addEventListener("selectionchange",t.hideSelectionGuard=function(){n.anchorNode==r&&n.anchorOffset==o||(e.removeEventListener("selectionchange",t.hideSelectionGuard),t.dom.classList.remove("ProseMirror-hideselection"))})}(t))}t.domObserver.setCurSelection(),t.domObserver.connectSelection()}}gn.prototype.getPreMatch=function(t){return t>=this.preMatchOffset?this.preMatched[t-this.preMatchOffset]:null},gn.prototype.destroyBetween=function(t,e){if(t!=e){for(var n=t;n<e;n++)this.top.children[n].destroy();this.top.children.splice(t,e-t),this.changed=!0}},gn.prototype.destroyRest=function(){this.destroyBetween(this.index,this.top.children.length)},gn.prototype.syncToMarks=function(t,e,n){for(var r=0,o=this.stack.length>>1,i=Math.min(o,t.length);r<i&&(r==o-1?this.top:this.stack[r+1<<1]).matchesMark(t[r])&&!1!==t[r].type.spec.spanning;)r++;for(;r<o;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),o--;for(;o<t.length;){this.stack.push(this.top,this.index+1);for(var s=-1,a=this.index;a<Math.min(this.index+3,this.top.children.length);a++)if(this.top.children[a].matchesMark(t[o])){s=a;break}if(s>-1)s>this.index&&(this.changed=!0,this.destroyBetween(this.index,s)),this.top=this.top.children[this.index];else{var c=nn.create(this.top,t[o],e,n);this.top.children.splice(this.index,0,c),this.top=c,this.changed=!0}this.index=0,o++}},gn.prototype.findNodeMatch=function(t,e,n,r){var o=-1,i=r<0?void 0:this.getPreMatch(r),s=this.top.children;if(i&&i.matchesNode(t,e,n))o=s.indexOf(i);else for(var a=this.index,c=Math.min(s.length,a+5);a<c;a++){var p=s[a];if(p.matchesNode(t,e,n)&&this.preMatched.indexOf(p)<0){o=a;break}}return!(o<0)&&(this.destroyBetween(this.index,o),this.index++,!0)},gn.prototype.updateNextNode=function(t,e,n,r,o){if(this.index==this.top.children.length)return!1;var i=this.top.children[this.index];if(i instanceof rn){var s=this.preMatched.indexOf(i);if(s>-1&&s+this.preMatchOffset!=o)return!1;var a=i.dom;if(!(this.lock&&(a==this.lock||1==a.nodeType&&a.contains(this.lock.parentNode))&&!(t.isText&&i.node&&i.node.isText&&i.nodeDOM.nodeValue==t.text&&3!=i.dirty&&mn(e,i.outerDeco)))&&i.update(t,e,n,r))return i.dom!=a&&(this.changed=!0),this.index++,!0}return!1},gn.prototype.addNode=function(t,e,n,r,o){this.top.children.splice(this.index++,0,rn.create(this.top,t,e,n,r,o)),this.changed=!0},gn.prototype.placeWidget=function(t,e,n){if(this.index<this.top.children.length&&this.top.children[this.index].matchesWidget(t))this.index++;else{var r=new tn(this.top,t,e,n);this.top.children.splice(this.index++,0,r),this.changed=!0}},gn.prototype.addTextblockHacks=function(){for(var t=this.top.children[this.index-1];t instanceof nn;)t=t.children[t.children.length-1];if(!t||!(t instanceof sn)||/\n$/.test(t.node.text))if(this.index<this.top.children.length&&this.top.children[this.index].matchesHack())this.index++;else{var e=document.createElement("br");this.top.children.splice(this.index++,0,new an(this.top,Ze,e,null)),this.changed=!0}};var Pn=ge.safari||ge.chrome&&ge.chrome_version<63;function Bn(t,e){var n=t.docView.domFromPos(e),r=n.node,o=n.offset,i=o<r.childNodes.length?r.childNodes[o]:null,s=o?r.childNodes[o-1]:null;if(ge.safari&&i&&"false"==i.contentEditable)return $n(i);if(!(i&&"false"!=i.contentEditable||s&&"false"!=s.contentEditable)){if(i)return $n(i);if(s)return $n(s)}}function $n(t){return t.contentEditable="true",ge.safari&&t.draggable&&(t.draggable=!1,t.wasDraggable=!0),t}function Fn(t){t.contentEditable="false",t.wasDraggable&&(t.draggable=!0,t.wasDraggable=null)}function Vn(t,e){if(e instanceof Zt){var n=t.docView.descAt(e.from);n!=t.lastSelectedViewDesc&&(_n(t),n&&n.selectNode(),t.lastSelectedViewDesc=n)}else _n(t)}function _n(t){t.lastSelectedViewDesc&&(t.lastSelectedViewDesc.parent&&t.lastSelectedViewDesc.deselectNode(),t.lastSelectedViewDesc=null)}function jn(t,e,n,r){return t.someProp("createSelectionBetween",(function(r){return r(t,e,n)}))||Yt.between(e,n,r)}function Ln(t){var e=t.root.getSelection();if(!e.anchorNode)return!1;try{return t.dom.contains(3==e.anchorNode.nodeType?e.anchorNode.parentNode:e.anchorNode)&&(t.editable||t.dom.contains(3==e.focusNode.nodeType?e.focusNode.parentNode:e.focusNode))}catch(t){return!1}}function Jn(t){var e=t.pmViewDesc;if(e)return e.parseRule();if("BR"==t.nodeName&&t.parentNode){if(ge.safari&&/^(ul|ol)$/i.test(t.parentNode.nodeName)){var n=document.createElement("div");return n.appendChild(document.createElement("li")),{skip:n}}if(t.parentNode.lastChild==t||ge.safari&&/^(tr|table)$/i.test(t.parentNode.nodeName))return{ignore:!0}}else if("IMG"==t.nodeName&&t.getAttribute("mark-placeholder"))return{ignore:!0}}function qn(t,e,n,r,o){if(e<0){var s=t.lastSelectionTime>Date.now()-50?t.lastSelectionOrigin:null,a=In(t,s);if(!t.state.selection.eq(a)){var c=t.state.tr.setSelection(a);"pointer"==s?c.setMeta("pointer",!0):"key"==s&&c.scrollIntoView(),t.dispatch(c)}}else{var p=t.state.doc.resolve(e),h=p.sharedDepth(n);e=p.before(h+1),n=t.state.doc.resolve(n).after(h+1);var l,f,d=t.state.selection,u=function(t,e,n){var r=t.docView.parseRange(e,n),o=r.node,i=r.fromOffset,s=r.toOffset,a=r.from,c=r.to,p=t.root.getSelection(),h=null,l=p.anchorNode;if(l&&t.dom.contains(1==l.nodeType?l:l.parentNode)&&(h=[{node:l,offset:p.anchorOffset}],Ae(p)||h.push({node:p.focusNode,offset:p.focusOffset})),ge.chrome&&8===t.lastKeyCode)for(var f=s;f>i;f--){var d=o.childNodes[f-1],u=d.pmViewDesc;if("BR"==d.nodeType&&!u){s=f;break}if(!u||u.size)break}var m=t.state.doc,v=t.someProp("domParser")||tt.fromSchema(t.state.schema),g=m.resolve(a),y=null,w=v.parse(o,{topNode:g.parent,topMatch:g.parent.contentMatchAt(g.index()),topOpen:!0,from:i,to:s,preserveWhitespace:!g.parent.type.spec.code||"full",editableContent:!0,findPositions:h,ruleFromNode:Jn,context:g});if(h&&null!=h[0].pos){var b=h[0].pos,k=h[1]&&h[1].pos;null==k&&(k=b),y={anchor:b+a,head:k+a}}return{doc:w,sel:y,from:a,to:c}}(t,e,n),m=t.state.doc,v=m.slice(u.from,u.to);8===t.lastKeyCode&&Date.now()-100<t.lastKeyCodeTime?(l=t.state.selection.to,f="end"):(l=t.state.selection.from,f="start"),t.lastKeyCode=null;var g=function(t,e,n,r,o){var i=t.findDiffStart(e,n);if(null==i)return null;var s=t.findDiffEnd(e,n+t.size,n+e.size),a=s.a,c=s.b;if("end"==o){var p=Math.max(0,i-Math.min(a,c));r-=a+p-i}if(a<i&&t.size<e.size){c=(i-=r<=i&&r>=a?i-r:0)+(c-a),a=i}else if(c<i){a=(i-=r<=i&&r>=c?i-r:0)+(a-c),c=i}return{start:i,endA:a,endB:c}}(v.content,u.doc.content,u.from,l,f);if(!g){if(!(r&&d instanceof Yt&&!d.empty&&d.$head.sameParent(d.$anchor))||t.composing||u.sel&&u.sel.anchor!=u.sel.head){if(u.sel){var y=Wn(t,t.state.doc,u.sel);y&&!y.eq(t.state.selection)&&t.dispatch(t.state.tr.setSelection(y))}return}g={start:d.from,endA:d.to,endB:d.to}}t.domChangeCount++,t.state.selection.from<t.state.selection.to&&g.start==g.endB&&t.state.selection instanceof Yt&&(g.start>t.state.selection.from&&g.start<=t.state.selection.from+2?g.start=t.state.selection.from:g.endA<t.state.selection.to&&g.endA>=t.state.selection.to-2&&(g.endB+=t.state.selection.to-g.endA,g.endA=t.state.selection.to)),ge.ie&&ge.ie_version<=11&&g.endB==g.start+1&&g.endA==g.start&&g.start>u.from&&"  "==u.doc.textBetween(g.start-u.from-1,g.start-u.from+1)&&(g.start--,g.endA--,g.endB--);var w,b=u.doc.resolveNoCache(g.start-u.from),k=u.doc.resolveNoCache(g.endB-u.from);if((ge.ios&&t.lastIOSEnter>Date.now()-100&&(!b.sameParent(k)||o.some((function(t){return"DIV"==t.nodeName})))||!b.sameParent(k)&&b.pos<u.doc.content.size&&(w=Ut.findFrom(u.doc.resolve(b.pos+1),1,!0))&&w.head==k.pos)&&t.someProp("handleKeyDown",(function(e){return e(t,Re(13,"Enter"))})))t.lastIOSEnter=0;else if(t.state.selection.anchor>g.start&&function(t,e,n,r,o){if(!r.parent.isTextblock||n-e<=o.pos-r.pos||Kn(r,!0,!1)<o.pos)return!1;var i=t.resolve(e);if(i.parentOffset<i.parent.content.size||!i.parent.isTextblock)return!1;var s=t.resolve(Kn(i,!0,!0));if(!s.parent.isTextblock||s.pos>n||Kn(s,!0,!1)<n)return!1;return r.parent.content.cut(r.parentOffset).eq(s.parent.content)}(m,g.start,g.endA,b,k)&&t.someProp("handleKeyDown",(function(e){return e(t,Re(8,"Backspace"))})))ge.android&&ge.chrome&&t.domObserver.suppressSelectionUpdates();else{var x,S,O,C,M=g.start,N=g.endA;if(b.sameParent(k)&&b.parent.inlineContent)if(b.pos==k.pos)ge.ie&&ge.ie_version<=11&&0==b.parentOffset&&(t.domObserver.suppressSelectionUpdates(),setTimeout((function(){return zn(t)}),20)),x=t.state.tr.delete(M,N),S=m.resolve(g.start).marksAcross(m.resolve(g.endA));else if(g.endA==g.endB&&(C=m.resolve(g.start))&&(O=function(t,e){for(var n,r,o,s=t.firstChild.marks,a=e.firstChild.marks,c=s,p=a,h=0;h<a.length;h++)c=a[h].removeFromSet(c);for(var l=0;l<s.length;l++)p=s[l].removeFromSet(p);if(1==c.length&&0==p.length)r=c[0],n="add",o=function(t){return t.mark(r.addToSet(t.marks))};else{if(0!=c.length||1!=p.length)return null;r=p[0],n="remove",o=function(t){return t.mark(r.removeFromSet(t.marks))}}for(var f=[],d=0;d<e.childCount;d++)f.push(o(e.child(d)));if(i.from(f).eq(t))return{mark:r,type:n}}(b.parent.content.cut(b.parentOffset,k.parentOffset),C.parent.content.cut(C.parentOffset,g.endA-C.start()))))x=t.state.tr,"add"==O.type?x.addMark(M,N,O.mark):x.removeMark(M,N,O.mark);else if(b.parent.child(b.index()).isText&&b.index()==k.index()-(k.textOffset?0:1)){var T=b.parent.textBetween(b.parentOffset,k.parentOffset);if(t.someProp("handleTextInput",(function(e){return e(t,M,N,T)})))return;x=t.state.tr.insertText(T,M,N)}if(x||(x=t.state.tr.replace(M,N,u.doc.slice(g.start-u.from,g.endB-u.from))),u.sel){var D=Wn(t,x.doc,u.sel);D&&!(ge.chrome&&ge.android&&t.composing&&D.empty&&D.head==M||ge.ie&&D.empty&&D.head==M)&&x.setSelection(D)}S&&x.ensureMarks(S),t.dispatch(x.scrollIntoView())}}}function Wn(t,e,n){return Math.max(n.anchor,n.head)>e.content.size?null:jn(t,e.resolve(n.anchor),e.resolve(n.head))}function Kn(t,e,n){for(var r=t.depth,o=e?t.end():t.pos;r>0&&(e||t.indexAfter(r)==t.node(r).childCount);)r--,o++,e=!1;if(n)for(var i=t.node(r).maybeChild(t.indexAfter(r));i&&!i.isLeaf;)i=i.firstChild,o++;return o}function Hn(t,e){for(var n=[],r=e.content,o=e.openStart,i=e.openEnd;o>1&&i>1&&1==r.childCount&&1==r.firstChild.childCount;){o--,i--;var s=r.firstChild;n.push(s.type.name,s.type.hasRequiredAttrs()?s.attrs:null),r=s.content}var a=t.someProp("clipboardSerializer")||lt.fromSchema(t.state.schema),c=Zn(),p=c.createElement("div");p.appendChild(a.serializeFragment(r,{document:c}));for(var h,l=p.firstChild;l&&1==l.nodeType&&(h=Yn[l.nodeName.toLowerCase()]);){for(var f=h.length-1;f>=0;f--){for(var d=c.createElement(h[f]);p.firstChild;)d.appendChild(p.firstChild);p.appendChild(d)}l=p.firstChild}return l&&1==l.nodeType&&l.setAttribute("data-pm-slice",o+" "+i+" "+JSON.stringify(n)),{dom:p,text:t.someProp("clipboardTextSerializer",(function(t){return t(e)}))||e.content.textBetween(0,e.content.size,"\n\n")}}function Un(t,e,n,r,o){var s,a,c=o.parent.type.spec.code;if(!n&&!e)return null;var p=e&&(r||c||!n);if(p){if(t.someProp("transformPastedText",(function(t){e=t(e)})),c)return new f(i.from(t.state.schema.text(e)),0,0);var h=t.someProp("clipboardTextParser",(function(t){return t(e,o)}));h?a=h:(s=document.createElement("div"),e.trim().split(/(?:\r\n?|\n)+/).forEach((function(t){s.appendChild(document.createElement("p")).textContent=t})))}else t.someProp("transformPastedHTML",(function(t){n=t(n)})),s=function(t){var e=/(\s*<meta [^>]*>)*/.exec(t);e&&(t=t.slice(e[0].length));var n,r=Zn().createElement("div"),o=/(?:<meta [^>]*>)*<([a-z][^>\s]+)/i.exec(t),i=0;(n=o&&Yn[o[1].toLowerCase()])&&(t=n.map((function(t){return"<"+t+">"})).join("")+t+n.map((function(t){return"</"+t+">"})).reverse().join(""),i=n.length);r.innerHTML=t;for(var s=0;s<i;s++)r=r.firstChild;return r}(n);var l=s&&s.querySelector("[data-pm-slice]"),d=l&&/^(\d+) (\d+) (.*)/.exec(l.getAttribute("data-pm-slice"));if(!a){var u=t.someProp("clipboardParser")||t.someProp("domParser")||tt.fromSchema(t.state.schema);a=u.parseSlice(s,{preserveWhitespace:!(!p&&!d),context:o})}return a=d?function(t,e){if(!t.size)return t;var n,r=t.content.firstChild.type.schema;try{n=JSON.parse(e)}catch(e){return t}for(var o=t.content,s=t.openStart,a=t.openEnd,c=n.length-2;c>=0;c-=2){var p=r.nodes[n[c]];if(!p||p.hasRequiredAttrs())break;o=i.from(p.create(n[c+1],o)),s++,a++}return new f(o,s,a)}(function(t,e,n){e<t.openStart&&(t=new f(Xn(t.content,-1,e,t.openStart,0,t.openEnd),e,t.openEnd));n<t.openEnd&&(t=new f(Xn(t.content,1,n,t.openEnd,0,0),t.openStart,n));return t}(a,+d[1],+d[2]),d[3]):f.maxOpen(function(t,e){if(t.childCount<2)return t;for(var n=function(n){var r=e.node(n).contentMatchAt(e.index(n)),o=void 0,s=[];if(t.forEach((function(t){if(s){var e,n=r.findWrapping(t.type);if(!n)return s=null;if(e=s.length&&o.length&&function t(e,n,r,o,s){if(s<e.length&&s<n.length&&e[s]==n[s]){var a=t(e,n,r,o.lastChild,s+1);if(a)return o.copy(o.content.replaceChild(o.childCount-1,a));if(o.contentMatchAt(o.childCount).matchType(s==e.length-1?r.type:e[s+1]))return o.copy(o.content.append(i.from(Gn(r,e,s+1))))}}(n,o,t,s[s.length-1],0))s[s.length-1]=e;else{s.length&&(s[s.length-1]=function t(e,n){if(0==n)return e;var r=e.content.replaceChild(e.childCount-1,t(e.lastChild,n-1)),o=e.contentMatchAt(e.childCount).fillBefore(i.empty,!0);return e.copy(r.append(o))}(s[s.length-1],o.length));var a=Gn(t,n);s.push(a),r=r.matchType(a.type,a.attrs),o=n}}})),s)return{v:i.from(s)}},r=e.depth;r>=0;r--){var o=n(r);if(o)return o.v}return t}(a.content,o),!1),t.someProp("transformPasted",(function(t){a=t(a)})),a}function Gn(t,e,n){void 0===n&&(n=0);for(var r=e.length-1;r>=n;r--)t=e[r].create(null,i.from(t));return t}function Xn(t,e,n,r,o,s){var a=e<0?t.firstChild:t.lastChild,c=a.content;return o<r-1&&(c=Xn(c,e,n,r,o+1,s)),o>=n&&(c=e<0?a.contentMatchAt(0).fillBefore(c,t.childCount>1||s<=o).append(c):c.append(a.contentMatchAt(a.childCount).fillBefore(i.empty,!0))),t.replaceChild(e<0?0:t.childCount-1,a.copy(c))}var Yn={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]},Qn=null;function Zn(){return Qn||(Qn=document.implementation.createHTMLDocument("title"))}var tr={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},er=ge.ie&&ge.ie_version<=11,nr=function(){this.anchorNode=this.anchorOffset=this.focusNode=this.focusOffset=null};nr.prototype.set=function(t){this.anchorNode=t.anchorNode,this.anchorOffset=t.anchorOffset,this.focusNode=t.focusNode,this.focusOffset=t.focusOffset},nr.prototype.eq=function(t){return t.anchorNode==this.anchorNode&&t.anchorOffset==this.anchorOffset&&t.focusNode==this.focusNode&&t.focusOffset==this.focusOffset};var rr=function(t,e){var n=this;this.view=t,this.handleDOMChange=e,this.queue=[],this.flushingSoon=!1,this.observer=window.MutationObserver&&new window.MutationObserver((function(t){for(var e=0;e<t.length;e++)n.queue.push(t[e]);ge.ie&&ge.ie_version<=11&&t.some((function(t){return"childList"==t.type&&t.removedNodes.length||"characterData"==t.type&&t.oldValue.length>t.target.nodeValue.length}))?n.flushSoon():n.flush()})),this.currentSelection=new nr,er&&(this.onCharData=function(t){n.queue.push({target:t.target,type:"characterData",oldValue:t.prevValue}),n.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.suppressingSelectionUpdates=!1};rr.prototype.flushSoon=function(){var t=this;this.flushingSoon||(this.flushingSoon=!0,window.setTimeout((function(){t.flushingSoon=!1,t.flush()}),20))},rr.prototype.start=function(){this.observer&&this.observer.observe(this.view.dom,tr),er&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()},rr.prototype.stop=function(){var t=this;if(this.observer){var e=this.observer.takeRecords();if(e.length){for(var n=0;n<e.length;n++)this.queue.push(e[n]);window.setTimeout((function(){return t.flush()}),20)}this.observer.disconnect()}er&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()},rr.prototype.connectSelection=function(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)},rr.prototype.disconnectSelection=function(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)},rr.prototype.suppressSelectionUpdates=function(){var t=this;this.suppressingSelectionUpdates=!0,setTimeout((function(){return t.suppressingSelectionUpdates=!1}),50)},rr.prototype.onSelectionChange=function(){if((!(t=this.view).editable||t.root.activeElement==t.dom)&&Ln(t)){var t;if(this.suppressingSelectionUpdates)return zn(this.view);if(ge.ie&&ge.ie_version<=11&&!this.view.state.selection.empty){var e=this.view.root.getSelection();if(e.focusNode&&Me(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset))return this.flushSoon()}this.flush()}},rr.prototype.setCurSelection=function(){this.currentSelection.set(this.view.root.getSelection())},rr.prototype.ignoreSelectionChange=function(t){if(0==t.rangeCount)return!0;var e=t.getRangeAt(0).commonAncestorContainer,n=this.view.docView.nearestDesc(e);return n&&n.ignoreMutation({type:"selection",target:3==e.nodeType?e.parentNode:e})?(this.setCurSelection(),!0):void 0},rr.prototype.flush=function(){if(this.view.docView&&!this.flushingSoon){var t=this.observer?this.observer.takeRecords():[];this.queue.length&&(t=this.queue.concat(t),this.queue.length=0);var e=this.view.root.getSelection(),n=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(e)&&Ln(this.view)&&!this.ignoreSelectionChange(e),r=-1,o=-1,i=!1,s=[];if(this.view.editable)for(var a=0;a<t.length;a++){var c=this.registerMutation(t[a],s);c&&(r=r<0?c.from:Math.min(c.from,r),o=o<0?c.to:Math.max(c.to,o),c.typeOver&&!this.view.composing&&(i=!0))}if(ge.gecko&&s.length>1){var p=s.filter((function(t){return"BR"==t.nodeName}));if(2==p.length){var h=p[0],l=p[1];h.parentNode&&h.parentNode.parentNode==l.parentNode?l.remove():h.remove()}}(r>-1||n)&&(r>-1&&(this.view.docView.markDirty(r,o),function(t){if(or)return;or=!0,"normal"==getComputedStyle(t.dom).whiteSpace&&console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.")}(this.view)),this.handleDOMChange(r,o,i,s),this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(e)||zn(this.view))}},rr.prototype.registerMutation=function(t,e){if(e.indexOf(t.target)>-1)return null;var n=this.view.docView.nearestDesc(t.target);if("attributes"==t.type&&(n==this.view.docView||"contenteditable"==t.attributeName||"style"==t.attributeName&&!t.oldValue&&!t.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(t))return null;if("childList"==t.type){var r=t.previousSibling,o=t.nextSibling;if(ge.ie&&ge.ie_version<=11&&t.addedNodes.length)for(var i=0;i<t.addedNodes.length;i++){var s=t.addedNodes[i],a=s.previousSibling,c=s.nextSibling;(!a||Array.prototype.indexOf.call(t.addedNodes,a)<0)&&(r=a),(!c||Array.prototype.indexOf.call(t.addedNodes,c)<0)&&(o=c)}for(var p=r&&r.parentNode==t.target?Se(r)+1:0,h=n.localPosFromDOM(t.target,p,-1),l=o&&o.parentNode==t.target?Se(o):t.target.childNodes.length,f=0;f<t.addedNodes.length;f++)e.push(t.addedNodes[f]);return{from:h,to:n.localPosFromDOM(t.target,l,1)}}return"attributes"==t.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:{from:n.posAtStart,to:n.posAtEnd,typeOver:t.target.nodeValue==t.oldValue}};var or=!1;var ir={},sr={};function ar(t,e){t.lastSelectionOrigin=e,t.lastSelectionTime=Date.now()}function cr(t){t.someProp("handleDOMEvents",(function(e){for(var n in e)t.eventHandlers[n]||t.dom.addEventListener(n,t.eventHandlers[n]=function(e){return pr(t,e)})}))}function pr(t,e){return t.someProp("handleDOMEvents",(function(n){var r=n[e.type];return!!r&&(r(t,e)||e.defaultPrevented)}))}function hr(t){return{left:t.clientX,top:t.clientY}}function lr(t,e,n,r,o){if(-1==r)return!1;for(var i=t.state.doc.resolve(r),s=function(r){if(t.someProp(e,(function(e){return r>i.depth?e(t,n,i.nodeAfter,i.before(r),o,!0):e(t,n,i.node(r),i.before(r),o,!1)})))return{v:!0}},a=i.depth+1;a>0;a--){var c=s(a);if(c)return c.v}return!1}function fr(t,e,n){t.focused||t.focus();var r=t.state.tr.setSelection(e);"pointer"==n&&r.setMeta("pointer",!0),t.dispatch(r)}function dr(t,e,n,r,o){return lr(t,"handleClickOn",e,n,r)||t.someProp("handleClick",(function(n){return n(t,e,r)}))||(o?function(t,e){if(-1==e)return!1;var n,r,o=t.state.selection;o instanceof Zt&&(n=o.node);for(var i=t.state.doc.resolve(e),s=i.depth+1;s>0;s--){var a=s>i.depth?i.nodeAfter:i.node(s);if(Zt.isSelectable(a)){r=n&&o.$from.depth>0&&s>=o.$from.depth&&i.before(o.$from.depth+1)==o.$from.pos?i.before(o.$from.depth):i.before(s);break}}return null!=r&&(fr(t,Zt.create(t.state.doc,r),"pointer"),!0)}(t,n):function(t,e){if(-1==e)return!1;var n=t.state.doc.resolve(e),r=n.nodeAfter;return!!(r&&r.isAtom&&Zt.isSelectable(r))&&(fr(t,new Zt(n),"pointer"),!0)}(t,n))}function ur(t,e,n,r){return lr(t,"handleDoubleClickOn",e,n,r)||t.someProp("handleDoubleClick",(function(n){return n(t,e,r)}))}function mr(t,e,n,r){return lr(t,"handleTripleClickOn",e,n,r)||t.someProp("handleTripleClick",(function(n){return n(t,e,r)}))||function(t,e){var n=t.state.doc;if(-1==e)return!!n.inlineContent&&(fr(t,Yt.create(n,0,n.content.size),"pointer"),!0);for(var r=n.resolve(e),o=r.depth+1;o>0;o--){var i=o>r.depth?r.nodeAfter:r.node(o),s=r.before(o);if(i.inlineContent)fr(t,Yt.create(n,s+1,s+1+i.content.size),"pointer");else{if(!Zt.isSelectable(i))continue;fr(t,Zt.create(n,s),"pointer")}return!0}}(t,n)}function vr(t){return xr(t)}sr.keydown=function(t,e){t.shiftKey=16==e.keyCode||e.shiftKey,wr(t,e)||(t.lastKeyCode=e.keyCode,t.lastKeyCodeTime=Date.now(),!ge.ios||13!=e.keyCode||e.ctrlKey||e.altKey||e.metaKey?t.someProp("handleKeyDown",(function(n){return n(t,e)}))||Rn(t,e)?e.preventDefault():ar(t,"key"):t.lastIOSEnter=Date.now())},sr.keyup=function(t,e){16==e.keyCode&&(t.shiftKey=!1)},sr.keypress=function(t,e){if(!(wr(t,e)||!e.charCode||e.ctrlKey&&!e.altKey||ge.mac&&e.metaKey))if(t.someProp("handleKeyPress",(function(n){return n(t,e)})))e.preventDefault();else{var n=t.state.selection;if(!(n instanceof Yt&&n.$from.sameParent(n.$to))){var r=String.fromCharCode(e.charCode);t.someProp("handleTextInput",(function(e){return e(t,n.$from.pos,n.$to.pos,r)}))||t.dispatch(t.state.tr.insertText(r).scrollIntoView()),e.preventDefault()}}};var gr=ge.mac?"metaKey":"ctrlKey";ir.mousedown=function(t,e){t.shiftKey=e.shiftKey;var n=vr(t),r=Date.now(),o="singleClick";r-t.lastClick.time<500&&function(t,e){var n=e.x-t.clientX,r=e.y-t.clientY;return n*n+r*r<100}(e,t.lastClick)&&!e[gr]&&("singleClick"==t.lastClick.type?o="doubleClick":"doubleClick"==t.lastClick.type&&(o="tripleClick")),t.lastClick={time:r,x:e.clientX,y:e.clientY,type:o};var i=t.posAtCoords(hr(e));i&&("singleClick"==o?t.mouseDown=new yr(t,i,e,n):("doubleClick"==o?ur:mr)(t,i.pos,i.inside,e)?e.preventDefault():ar(t,"pointer"))};var yr=function(t,e,n,r){var o,i,s=this;if(this.view=t,this.startDoc=t.state.doc,this.pos=e,this.event=n,this.flushed=r,this.selectNode=n[gr],this.allowDefault=n.shiftKey,e.inside>-1)o=t.state.doc.nodeAt(e.inside),i=e.inside;else{var a=t.state.doc.resolve(e.pos);o=a.parent,i=a.depth?a.before():0}this.mightDrag=null;var c=r?null:n.target,p=c?t.docView.nearestDesc(c,!0):null;this.target=p?p.dom:null,(o.type.spec.draggable&&!1!==o.type.spec.selectable||t.state.selection instanceof Zt&&i==t.state.selection.from)&&(this.mightDrag={node:o,pos:i,addAttr:this.target&&!this.target.draggable,setUneditable:this.target&&ge.gecko&&!this.target.hasAttribute("contentEditable")}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((function(){return s.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),t.root.addEventListener("mouseup",this.up=this.up.bind(this)),t.root.addEventListener("mousemove",this.move=this.move.bind(this)),ar(t,"pointer")};function wr(t,e){return!!t.composing||!!(ge.safari&&Math.abs(e.timeStamp-t.compositionEndedAt)<500)&&(t.compositionEndedAt=-2e8,!0)}yr.prototype.done=function(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!1),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.view.mouseDown=null},yr.prototype.up=function(t){if(this.done(),this.view.dom.contains(3==t.target.nodeType?t.target.parentNode:t.target)){var e=this.pos;this.view.state.doc!=this.startDoc&&(e=this.view.posAtCoords(hr(t))),this.allowDefault||!e?ar(this.view,"pointer"):dr(this.view,e.pos,e.inside,t,this.selectNode)?t.preventDefault():!this.flushed&&(!ge.chrome||this.view.state.selection instanceof Yt||e.pos!=this.view.state.selection.from&&e.pos!=this.view.state.selection.to)?ar(this.view,"pointer"):(fr(this.view,Ut.near(this.view.state.doc.resolve(e.pos)),"pointer"),t.preventDefault())}},yr.prototype.move=function(t){!this.allowDefault&&(Math.abs(this.event.x-t.clientX)>4||Math.abs(this.event.y-t.clientY)>4)&&(this.allowDefault=!0),ar(this.view,"pointer")},ir.touchdown=function(t){vr(t),ar(t,"pointer")},ir.contextmenu=function(t){return vr(t)};var br=ge.android?5e3:-1;function kr(t,e){clearTimeout(t.composingTimeout),e>-1&&(t.composingTimeout=setTimeout((function(){return xr(t)}),e))}function xr(t,e){for(t.composing=!1;t.compositionNodes.length>0;)t.compositionNodes.pop().markParentsDirty();return!(!e&&!t.docView.dirty)&&(t.updateState(t.state),!0)}sr.compositionstart=sr.compositionupdate=function(t){if(!t.composing){t.domObserver.flush();var e=t.state,n=e.selection.$from;if(e.selection.empty&&(e.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((function(t){return!1===t.type.spec.inclusive}))))t.markCursor=t.state.storedMarks||n.marks(),xr(t,!0),t.markCursor=null;else if(xr(t),ge.gecko&&e.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length)for(var r=t.root.getSelection(),o=r.focusNode,i=r.focusOffset;o&&1==o.nodeType&&0!=i;){var s=i<0?o.lastChild:o.childNodes[i-1];if(!s)break;if(3==s.nodeType){r.collapse(s,s.nodeValue.length);break}o=s,i=-1}t.composing=!0}kr(t,br)},sr.compositionend=function(t,e){t.composing&&(t.composing=!1,t.compositionEndedAt=e.timeStamp,kr(t,20))};var Sr=ge.ie&&ge.ie_version<15||ge.ios&&ge.webkit_version<604;function Or(t,e,n,r){var o=Un(t,e,n,t.shiftKey,t.state.selection.$from);if(!t.someProp("handlePaste",(function(e){return e(t,r,o||f.empty)}))&&o){var i=function(t){return 0==t.openStart&&0==t.openEnd&&1==t.content.childCount?t.content.firstChild:null}(o),s=i?t.state.tr.replaceSelectionWith(i,t.shiftKey):t.state.tr.replaceSelection(o);t.dispatch(s.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste"))}}ir.copy=sr.cut=function(t,e){var n=t.state.selection,r="cut"==e.type;if(!n.empty){var o=Sr?null:e.clipboardData,i=Hn(t,n.content()),s=i.dom,a=i.text;o?(e.preventDefault(),o.clearData(),o.setData("text/html",s.innerHTML),o.setData("text/plain",a)):function(t,e){var n=t.dom.ownerDocument,r=n.body.appendChild(n.createElement("div"));r.appendChild(e),r.style.cssText="position: fixed; left: -10000px; top: 10px";var o=getSelection(),i=n.createRange();i.selectNodeContents(e),t.dom.blur(),o.removeAllRanges(),o.addRange(i),setTimeout((function(){n.body.removeChild(r),t.focus()}),50)}(t,s),r&&t.dispatch(t.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))}},sr.paste=function(t,e){var n=Sr?null:e.clipboardData,r=n&&n.getData("text/html"),o=n&&n.getData("text/plain");n&&(r||o||n.files.length)?(Or(t,o,r,e),e.preventDefault()):function(t,e){var n=t.dom.ownerDocument,r=t.shiftKey||t.state.selection.$from.parent.type.spec.code,o=n.body.appendChild(n.createElement(r?"textarea":"div"));r||(o.contentEditable="true"),o.style.cssText="position: fixed; left: -10000px; top: 10px",o.focus(),setTimeout((function(){t.focus(),n.body.removeChild(o),r?Or(t,o.value,null,e):Or(t,o.textContent,o.innerHTML,e)}),50)}(t,e)};var Cr=function(t,e){this.slice=t,this.move=e},Mr=ge.mac?"altKey":"ctrlKey";for(var Nr in ir.dragstart=function(t,e){var n=t.mouseDown;if(n&&n.done(),e.dataTransfer){var r=t.state.selection,o=r.empty?null:t.posAtCoords(hr(e));if(o&&o.pos>=r.from&&o.pos<=(r instanceof Zt?r.to-1:r.to));else if(n&&n.mightDrag)t.dispatch(t.state.tr.setSelection(Zt.create(t.state.doc,n.mightDrag.pos)));else if(e.target&&1==e.target.nodeType){var i=t.docView.nearestDesc(e.target,!0);if(!i||!i.node.type.spec.draggable||i==t.docView)return;t.dispatch(t.state.tr.setSelection(Zt.create(t.state.doc,i.posBefore)))}var s=t.state.selection.content(),a=Hn(t,s),c=a.dom,p=a.text;e.dataTransfer.clearData(),e.dataTransfer.setData(Sr?"Text":"text/html",c.innerHTML),Sr||e.dataTransfer.setData("text/plain",p),t.dragging=new Cr(s,!e[Mr])}},ir.dragend=function(t){window.setTimeout((function(){return t.dragging=null}),50)},sr.dragover=sr.dragenter=function(t,e){return e.preventDefault()},sr.drop=function(t,e){var n=t.dragging;if(t.dragging=null,e.dataTransfer){var r=t.posAtCoords(hr(e));if(r){var o=t.state.doc.resolve(r.pos);if(o){var i=n&&n.slice||Un(t,e.dataTransfer.getData(Sr?"Text":"text/plain"),Sr?null:e.dataTransfer.getData("text/html"),!1,o);if(i&&(e.preventDefault(),!t.someProp("handleDrop",(function(r){return r(t,e,i,n&&n.move)})))){var s=i?function(t,e,n){var r=t.resolve(e);if(!n.content.size)return e;for(var o=n.content,i=0;i<n.openStart;i++)o=o.firstChild.content;for(var s=1;s<=(0==n.openStart&&n.size?2:1);s++)for(var a=r.depth;a>=0;a--){var c=a==r.depth?0:r.pos<=(r.start(a+1)+r.end(a+1))/2?-1:1,p=r.index(a)+(c>0?1:0);if(1==s?r.node(a).canReplace(p,p,o):r.node(a).contentMatchAt(p).findWrapping(o.firstChild.type))return 0==c?r.pos:c<0?r.before(a+1):r.after(a+1)}return null}(t.state.doc,o.pos,i):o.pos;null==s&&(s=o.pos);var a=t.state.tr;n&&n.move&&a.deleteSelection();var c=a.mapping.map(s),p=0==i.openStart&&0==i.openEnd&&1==i.content.childCount,h=a.doc;if(p?a.replaceRangeWith(c,c,i.content.firstChild):a.replaceRange(c,c,i),!a.doc.eq(h)){var l=a.doc.resolve(c);p&&Zt.isSelectable(i.content.firstChild)&&l.nodeAfter&&l.nodeAfter.sameMarkup(i.content.firstChild)?a.setSelection(new Zt(l)):a.setSelection(jn(t,l,a.doc.resolve(a.mapping.map(s)))),t.focus(),t.dispatch(a.setMeta("uiEvent","drop"))}}}}}},ir.focus=function(t){t.focused||(t.domObserver.stop(),t.dom.classList.add("ProseMirror-focused"),t.domObserver.start(),t.focused=!0,setTimeout((function(){t.docView&&t.hasFocus()&&!t.domObserver.currentSelection.eq(t.root.getSelection())&&zn(t)}),20))},ir.blur=function(t){t.focused&&(t.domObserver.stop(),t.dom.classList.remove("ProseMirror-focused"),t.domObserver.start(),t.domObserver.currentSelection.set({}),t.focused=!1)},ir.beforeinput=function(t,e){if(ge.chrome&&ge.android&&"deleteContentBackward"==e.inputType){var n=t.domChangeCount;setTimeout((function(){if(t.domChangeCount==n&&(t.dom.blur(),t.focus(),!t.someProp("handleKeyDown",(function(e){return e(t,Re(8,"Backspace"))})))){var e=t.state.selection.$cursor;e&&e.pos>0&&t.dispatch(t.state.tr.delete(e.pos-1,e.pos).scrollIntoView())}}),50)}},sr)ir[Nr]=sr[Nr];function Tr(t,e){if(t==e)return!0;for(var n in t)if(t[n]!==e[n])return!1;for(var r in e)if(!(r in t))return!1;return!0}var Dr=function(t,e){this.spec=e||Pr,this.side=this.spec.side||0,this.toDOM=t};Dr.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,this.side<0?-1:1),i=o.pos;return o.deleted?null:new Rr(i-n,i-n,this)},Dr.prototype.valid=function(){return!0},Dr.prototype.eq=function(t){return this==t||t instanceof Dr&&(this.spec.key&&this.spec.key==t.spec.key||this.toDOM==t.toDOM&&Tr(this.spec,t.spec))};var Er=function(t,e){this.spec=e||Pr,this.attrs=t};Er.prototype.map=function(t,e,n,r){var o=t.map(e.from+r,this.spec.inclusiveStart?-1:1)-n,i=t.map(e.to+r,this.spec.inclusiveEnd?1:-1)-n;return o>=i?null:new Rr(o,i,this)},Er.prototype.valid=function(t,e){return e.from<e.to},Er.prototype.eq=function(t){return this==t||t instanceof Er&&Tr(this.attrs,t.attrs)&&Tr(this.spec,t.spec)},Er.is=function(t){return t.type instanceof Er};var Ar=function(t,e){this.spec=e||Pr,this.attrs=t};Ar.prototype.map=function(t,e,n,r){var o=t.mapResult(e.from+r,1);if(o.deleted)return null;var i=t.mapResult(e.to+r,-1);return i.deleted||i.pos<=o.pos?null:new Rr(o.pos-n,i.pos-n,this)},Ar.prototype.valid=function(t,e){var n=t.content.findIndex(e.from),r=n.index,o=n.offset;return o==e.from&&o+t.child(r).nodeSize==e.to},Ar.prototype.eq=function(t){return this==t||t instanceof Ar&&Tr(this.attrs,t.attrs)&&Tr(this.spec,t.spec)};var Rr=function(t,e,n){this.from=t,this.to=e,this.type=n},Ir={spec:{configurable:!0}};Rr.prototype.copy=function(t,e){return new Rr(t,e,this.type)},Rr.prototype.eq=function(t){return this.type.eq(t.type)&&this.from==t.from&&this.to==t.to},Rr.prototype.map=function(t,e,n){return this.type.map(t,this,e,n)},Rr.widget=function(t,e,n){return new Rr(t,t,new Dr(e,n))},Rr.inline=function(t,e,n,r){return new Rr(t,e,new Er(n,r))},Rr.node=function(t,e,n,r){return new Rr(t,e,new Ar(n,r))},Ir.spec.get=function(){return this.type.spec},Object.defineProperties(Rr.prototype,Ir);var zr=[],Pr={},Br=function(t,e){this.local=t&&t.length?t:zr,this.children=e&&e.length?e:zr};Br.create=function(t,e){return e.length?Lr(e,t,0,Pr):$r},Br.prototype.find=function(t,e,n){var r=[];return this.findInner(null==t?0:t,null==e?1e9:e,r,0,n),r},Br.prototype.findInner=function(t,e,n,r,o){for(var i=0;i<this.local.length;i++){var s=this.local[i];s.from<=e&&s.to>=t&&(!o||o(s.spec))&&n.push(s.copy(s.from+r,s.to+r))}for(var a=0;a<this.children.length;a+=3)if(this.children[a]<e&&this.children[a+1]>t){var c=this.children[a]+1;this.children[a+2].findInner(t-c,e-c,n,r+c,o)}},Br.prototype.map=function(t,e,n){return this==$r||0==t.maps.length?this:this.mapInner(t,e,0,0,n||Pr)},Br.prototype.mapInner=function(t,e,n,r,o){for(var i,s=0;s<this.local.length;s++){var a=this.local[s].map(t,n,r);a&&a.type.valid(e,a)?(i||(i=[])).push(a):o.onRemove&&o.onRemove(this.local[s].spec)}return this.children.length?function(t,e,n,r,o,i,s){for(var a=t.slice(),c=function(t,e,n,r){for(var s=0;s<a.length;s+=3){var c=a[s+1],p=void 0;-1==c||t>c+i||(e>=a[s]+i?a[s+1]=-1:(p=r-n-(e-t)+(i-o))&&(a[s]+=p,a[s+1]+=p))}},p=0;p<n.maps.length;p++)n.maps[p].forEach(c);for(var h=!1,l=0;l<a.length;l+=3)if(-1==a[l+1]){var f=n.map(a[l]+i),d=f-o;if(d<0||d>=r.content.size){h=!0;continue}var u=n.map(t[l+1]+i,-1)-o,m=r.content.findIndex(d),v=m.index,g=m.offset,y=r.maybeChild(v);if(y&&g==d&&g+y.nodeSize==u){var w=a[l+2].mapInner(n,y,f+1,a[l]+i+1,s);w!=$r?(a[l]=d,a[l+1]=u,a[l+2]=w):(a[l+1]=-2,h=!0)}else h=!0}if(h){var b=Lr(function(t,e,n,r,o,i,s){function a(t,e){for(var i=0;i<t.local.length;i++){var c=t.local[i].map(r,o,e);c?n.push(c):s.onRemove&&s.onRemove(t.local[i].spec)}for(var p=0;p<t.children.length;p+=3)a(t.children[p+2],t.children[p]+e+1)}for(var c=0;c<t.length;c+=3)-1==t[c+1]&&a(t[c+2],e[c]+i+1);return n}(a,t,e||[],n,o,i,s),r,0,s);e=b.local;for(var k=0;k<a.length;k+=3)a[k+1]<0&&(a.splice(k,3),k-=3);for(var x=0,S=0;x<b.children.length;x+=3){for(var O=b.children[x];S<a.length&&a[S]<O;)S+=3;a.splice(S,0,b.children[x],b.children[x+1],b.children[x+2])}}return new Br(e&&e.sort(Jr),a)}(this.children,i,t,e,n,r,o):i?new Br(i.sort(Jr)):$r},Br.prototype.add=function(t,e){return e.length?this==$r?Br.create(t,e):this.addInner(t,e,0):this},Br.prototype.addInner=function(t,e,n){var r,o=this,i=0;t.forEach((function(t,s){var a,c=s+n;if(a=_r(e,t,c)){for(r||(r=o.children.slice());i<r.length&&r[i]<s;)i+=3;r[i]==s?r[i+2]=r[i+2].addInner(t,a,c+1):r.splice(i,0,s,s+t.nodeSize,Lr(a,t,c+1,Pr)),i+=3}}));var s=Vr(i?jr(e):e,-n);return new Br(s.length?this.local.concat(s).sort(Jr):this.local,r||this.children)},Br.prototype.remove=function(t){return 0==t.length||this==$r?this:this.removeInner(t,0)},Br.prototype.removeInner=function(t,e){for(var n=this.children,r=this.local,o=0;o<n.length;o+=3){for(var i=void 0,s=n[o]+e,a=n[o+1]+e,c=0,p=void 0;c<t.length;c++)(p=t[c])&&p.from>s&&p.to<a&&(t[c]=null,(i||(i=[])).push(p));if(i){n==this.children&&(n=this.children.slice());var h=n[o+2].removeInner(i,s+1);h!=$r?n[o+2]=h:(n.splice(o,3),o-=3)}}if(r.length)for(var l=0,f=void 0;l<t.length;l++)if(f=t[l])for(var d=0;d<r.length;d++)r[d].type.eq(f.type)&&(r==this.local&&(r=this.local.slice()),r.splice(d--,1));return n==this.children&&r==this.local?this:r.length||n.length?new Br(r,n):$r},Br.prototype.forChild=function(t,e){if(this==$r)return this;if(e.isLeaf)return Br.empty;for(var n,r,o=0;o<this.children.length;o+=3)if(this.children[o]>=t){this.children[o]==t&&(n=this.children[o+2]);break}for(var i=t+1,s=i+e.content.size,a=0;a<this.local.length;a++){var c=this.local[a];if(c.from<s&&c.to>i&&c.type instanceof Er){var p=Math.max(i,c.from)-i,h=Math.min(s,c.to)-i;p<h&&(r||(r=[])).push(c.copy(p,h))}}if(r){var l=new Br(r.sort(Jr));return n?new Fr([l,n]):l}return n||$r},Br.prototype.eq=function(t){if(this==t)return!0;if(!(t instanceof Br)||this.local.length!=t.local.length||this.children.length!=t.children.length)return!1;for(var e=0;e<this.local.length;e++)if(!this.local[e].eq(t.local[e]))return!1;for(var n=0;n<this.children.length;n+=3)if(this.children[n]!=t.children[n]||this.children[n+1]!=t.children[n+1]||!this.children[n+2].eq(t.children[n+2]))return!1;return!0},Br.prototype.locals=function(t){return qr(this.localsInner(t))},Br.prototype.localsInner=function(t){if(this==$r)return zr;if(t.inlineContent||!this.local.some(Er.is))return this.local;for(var e=[],n=0;n<this.local.length;n++)this.local[n].type instanceof Er||e.push(this.local[n]);return e};var $r=new Br;Br.empty=$r,Br.removeOverlap=qr;var Fr=function(t){this.members=t};function Vr(t,e){if(!e||!t.length)return t;for(var n=[],r=0;r<t.length;r++){var o=t[r];n.push(new Rr(o.from+e,o.to+e,o.type))}return n}function _r(t,e,n){if(e.isLeaf)return null;for(var r=n+e.nodeSize,o=null,i=0,s=void 0;i<t.length;i++)(s=t[i])&&s.from>n&&s.to<r&&((o||(o=[])).push(s),t[i]=null);return o}function jr(t){for(var e=[],n=0;n<t.length;n++)null!=t[n]&&e.push(t[n]);return e}function Lr(t,e,n,r){var o=[],i=!1;e.forEach((function(e,s){var a=_r(t,e,s+n);if(a){i=!0;var c=Lr(a,e,n+s+1,r);c!=$r&&o.push(s,s+e.nodeSize,c)}}));for(var s=Vr(i?jr(t):t,-n).sort(Jr),a=0;a<s.length;a++)s[a].type.valid(e,s[a])||(r.onRemove&&r.onRemove(s[a].spec),s.splice(a--,1));return s.length||o.length?new Br(s,o):$r}function Jr(t,e){return t.from-e.from||t.to-e.to}function qr(t){for(var e=t,n=0;n<e.length-1;n++){var r=e[n];if(r.from!=r.to)for(var o=n+1;o<e.length;o++){var i=e[o];if(i.from!=r.from){i.from<r.to&&(e==t&&(e=t.slice()),e[n]=r.copy(r.from,i.from),Wr(e,o,r.copy(i.from,r.to)));break}i.to!=r.to&&(e==t&&(e=t.slice()),e[o]=i.copy(i.from,r.to),Wr(e,o+1,i.copy(r.to,i.to)))}}return e}function Wr(t,e,n){for(;e<t.length&&Jr(n,t[e])>0;)e++;t.splice(e,0,n)}function Kr(t){var e=[];return t.someProp("decorations",(function(n){var r=n(t.state);r&&r!=$r&&e.push(r)})),t.cursorWrapper&&e.push(Br.create(t.state.doc,[t.cursorWrapper.deco])),Fr.from(e)}Fr.prototype.forChild=function(t,e){if(e.isLeaf)return Br.empty;for(var n=[],r=0;r<this.members.length;r++){var o=this.members[r].forChild(t,e);o!=$r&&(o instanceof Fr?n=n.concat(o.members):n.push(o))}return Fr.from(n)},Fr.prototype.eq=function(t){if(!(t instanceof Fr)||t.members.length!=this.members.length)return!1;for(var e=0;e<this.members.length;e++)if(!this.members[e].eq(t.members[e]))return!1;return!0},Fr.prototype.locals=function(t){for(var e,n=!0,r=0;r<this.members.length;r++){var o=this.members[r].localsInner(t);if(o.length)if(e){n&&(e=e.slice(),n=!1);for(var i=0;i<o.length;i++)e.push(o[i])}else e=o}return e?qr(n?e:e.sort(Jr)):zr},Fr.from=function(t){switch(t.length){case 0:return $r;case 1:return t[0];default:return new Fr(t)}};var Hr=function(t,e){this._props=e,this.state=e.state,this.dispatch=this.dispatch.bind(this),this._root=null,this.focused=!1,this.dom=t&&t.mount||document.createElement("div"),t&&(t.appendChild?t.appendChild(this.dom):t.apply?t(this.dom):t.mount&&(this.mounted=!0)),this.editable=Yr(this),this.markCursor=null,this.cursorWrapper=null,Xr(this),this.nodeViews=Qr(this),this.docView=on(this.state.doc,Gr(this),Kr(this),this.dom,this),this.lastSelectedViewDesc=null,this.dragging=null,function(t){t.shiftKey=!1,t.mouseDown=null,t.lastKeyCode=null,t.lastKeyCodeTime=0,t.lastClick={time:0,x:0,y:0,type:""},t.lastSelectionOrigin=null,t.lastSelectionTime=0,t.lastIOSEnter=0,t.composing=!1,t.composingTimeout=null,t.compositionNodes=[],t.compositionEndedAt=-2e8,t.domObserver=new rr(t,(function(e,n,r,o){return qn(t,e,n,r,o)})),t.domObserver.start(),t.domChangeCount=0,t.eventHandlers=Object.create(null);var e=function(e){var n=ir[e];t.dom.addEventListener(e,t.eventHandlers[e]=function(e){!function(t,e){if(!e.bubbles)return!0;if(e.defaultPrevented)return!1;for(var n=e.target;n!=t.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(e))return!1;return!0}(t,e)||pr(t,e)||!t.editable&&e.type in sr||n(t,e)})};for(var n in ir)e(n);ge.safari&&t.dom.addEventListener("input",(function(){return null})),cr(t)}(this),this.pluginViews=[],this.updatePluginViews()},Ur={props:{configurable:!0},root:{configurable:!0}};function Gr(t){var e=Object.create(null);return e.class="ProseMirror",e.contenteditable=String(t.editable),t.someProp("attributes",(function(n){if("function"==typeof n&&(n=n(t.state)),n)for(var r in n)"class"==r?e.class+=" "+n[r]:e[r]||"contenteditable"==r||"nodeName"==r||(e[r]=String(n[r]))})),[Rr.node(0,t.state.doc.content.size,e)]}function Xr(t){var e=t.state.selection,n=e.$head,r=e.$anchor,o=e.visible;if(t.markCursor){var i=document.createElement("img");i.setAttribute("mark-placeholder","true"),t.cursorWrapper={dom:i,deco:Rr.widget(n.pos,i,{raw:!0,marks:t.markCursor})}}else if(o||n.pos!=r.pos)t.cursorWrapper=null;else{var s;!t.cursorWrapper||t.cursorWrapper.dom.childNodes.length?((s=document.createElement("div")).style.position="absolute",s.style.left="-100000px"):t.cursorWrapper.deco.pos!=n.pos&&(s=t.cursorWrapper.dom),s&&(t.cursorWrapper={dom:s,deco:Rr.widget(n.pos,s,{raw:!0})})}}function Yr(t){return!t.someProp("editable",(function(e){return!1===e(t.state)}))}function Qr(t){var e={};return t.someProp("nodeViews",(function(t){for(var n in t)Object.prototype.hasOwnProperty.call(e,n)||(e[n]=t[n])})),e}Ur.props.get=function(){if(this._props.state!=this.state){var t=this._props;for(var e in this._props={},t)this._props[e]=t[e];this._props.state=this.state}return this._props},Hr.prototype.update=function(t){t.handleDOMEvents!=this._props.handleDOMEvents&&cr(this),this._props=t,this.updateStateInner(t.state,!0)},Hr.prototype.setProps=function(t){var e={};for(var n in this._props)e[n]=this._props[n];for(var r in e.state=this.state,t)e[r]=t[r];this.update(e)},Hr.prototype.updateState=function(t){this.updateStateInner(t,this.state.plugins!=t.plugins)},Hr.prototype.updateStateInner=function(t,e){var n=this,r=this.state,o=!1;if(this.state=t,e){var i=Qr(this);(function(t,e){var n=0,r=0;for(var o in t){if(t[o]!=e[o])return!0;n++}for(var i in e)r++;return n!=r})(i,this.nodeViews)&&(this.nodeViews=i,o=!0),cr(this)}this.editable=Yr(this),Xr(this);var s,a,c,p,h,l,f,d,u,m,v,g=Kr(this),y=Gr(this),w=e?"reset":t.scrollToSelection>r.scrollToSelection?"to selection":"preserve",b=o||!this.docView.matchesNode(t.doc,y,g),k=b||!t.selection.eq(r.selection),x="preserve"==w&&k&&null==this.dom.style.overflowAnchor&&function(t){for(var e,n,r=t.dom.getBoundingClientRect(),o=Math.max(0,r.top),i=(r.left+r.right)/2,s=o+1;s<Math.min(innerHeight,r.bottom);s+=5){var a=t.root.elementFromPoint(i,s);if(a!=t.dom&&t.dom.contains(a)){var c=a.getBoundingClientRect();if(c.top>=o-20){e=a,n=c.top;break}}}return{refDOM:e,refTop:n,stack:Be(t.dom)}}(this);if(k){this.domObserver.stop();var S=b&&(ge.ie||ge.chrome)&&!r.selection.empty&&!t.selection.empty&&(p=r.selection,h=t.selection,l=Math.min(p.$anchor.sharedDepth(p.head),h.$anchor.sharedDepth(h.head)),p.$anchor.node(l)!=h.$anchor.node(l));b&&(!o&&this.docView.update(t.doc,y,g,this)||(this.docView.destroy(),this.docView=on(t.doc,y,g,this.dom,this))),S||!(this.mouseDown&&this.domObserver.currentSelection.eq(this.root.getSelection())&&(s=this,a=s.docView.domFromPos(s.state.selection.anchor),c=s.root.getSelection(),Me(a.node,a.offset,c.anchorNode,c.anchorOffset)))?zn(this,S):(Vn(this,t.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(r),"reset"==w)this.dom.scrollTop=0;else if("to selection"==w){var O=this.root.getSelection().focusNode;this.someProp("handleScrollToSelection",(function(t){return t(n)}))||(t.selection instanceof Zt?Pe(this,this.docView.domAfterPos(t.selection.from).getBoundingClientRect(),O):Pe(this,this.coordsAtPos(t.selection.head),O))}else x&&(d=(f=x).refDOM,u=f.refTop,m=f.stack,v=d?d.getBoundingClientRect().top:0,$e(m,0==v?0:v-u))},Hr.prototype.destroyPluginViews=function(){for(var t;t=this.pluginViews.pop();)t.destroy&&t.destroy()},Hr.prototype.updatePluginViews=function(t){if(t&&t.plugins==this.state.plugins)for(var e=0;e<this.pluginViews.length;e++){var n=this.pluginViews[e];n.update&&n.update(this,t)}else{this.destroyPluginViews();for(var r=0;r<this.state.plugins.length;r++){var o=this.state.plugins[r];o.spec.view&&this.pluginViews.push(o.spec.view(this))}}},Hr.prototype.someProp=function(t,e){var n,r=this._props&&this._props[t];if(null!=r&&(n=e?e(r):r))return n;var o=this.state.plugins;if(o)for(var i=0;i<o.length;i++){var s=o[i].props[t];if(null!=s&&(n=e?e(s):s))return n}},Hr.prototype.hasFocus=function(){return this.root.activeElement==this.dom},Hr.prototype.focus=function(){this.domObserver.stop(),this.editable&&function(t){if(t.setActive)return t.setActive();if(Fe)return t.focus(Fe);var e=Be(t);t.focus(null==Fe?{get preventScroll(){return Fe={preventScroll:!0},!0}}:void 0),Fe||(Fe=!1,$e(e,0))}(this.dom),zn(this),this.domObserver.start()},Ur.root.get=function(){var t=this._root;if(null==t)for(var e=this.dom.parentNode;e;e=e.parentNode)if(9==e.nodeType||11==e.nodeType&&e.host)return e.getSelection||(Object.getPrototypeOf(e).getSelection=function(){return document.getSelection()}),this._root=e;return t||document},Hr.prototype.posAtCoords=function(t){return je(this,t)},Hr.prototype.coordsAtPos=function(t){return Je(this,t)},Hr.prototype.domAtPos=function(t){return this.docView.domFromPos(t)},Hr.prototype.nodeDOM=function(t){var e=this.docView.descAt(t);return e?e.nodeDOM:null},Hr.prototype.posAtDOM=function(t,e,n){void 0===n&&(n=-1);var r=this.docView.posFromDOM(t,e,n);if(null==r)throw new RangeError("DOM position not inside the editor");return r},Hr.prototype.endOfTextblock=function(t,e){return Xe(this,e||this.state,t)},Hr.prototype.destroy=function(){this.docView&&(!function(t){for(var e in t.domObserver.stop(),t.eventHandlers)t.dom.removeEventListener(e,t.eventHandlers[e]);clearTimeout(t.composingTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],Kr(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)},Hr.prototype.dispatchEvent=function(t){return function(t,e){pr(t,e)||!ir[e.type]||!t.editable&&e.type in sr||ir[e.type](t,e)}(this,t)},Hr.prototype.dispatch=function(t){var e=this._props.dispatchTransaction;e?e.call(this,t):this.updateState(this.state.apply(t))},Object.defineProperties(Hr.prototype,Ur);var Zr=function(t,e){var n;this.match=t,this.handler="string"==typeof e?(n=e,function(t,e,r,o){var i=n;if(e[1]){var s=e[0].lastIndexOf(e[1]);i+=e[0].slice(s+e[1].length);var a=(r+=s)-o;a>0&&(i=e[0].slice(s-a,s)+i,r=o)}return t.tr.insertText(i,r,o)}):e};function to(t,e,n,r,o,i){if(t.composing)return!1;var s=t.state,a=s.doc.resolve(e);if(a.parent.type.spec.code)return!1;for(var c=a.parent.textBetween(Math.max(0,a.parentOffset-500),a.parentOffset,null,"￼")+r,p=0;p<o.length;p++){var h=o[p].match.exec(c),l=h&&o[p].handler(s,h,e-(h[0].length-r.length),n);if(l)return t.dispatch(l.setMeta(i,{transform:l,from:e,to:n,text:r})),!0}return!1}new Zr(/--$/,"—");var eo=new Zr(/\.\.\.$/,"…"),no=[new Zr(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/,"“"),new Zr(/"$/,"”"),new Zr(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/,"‘"),new Zr(/'$/,"’")];var ro=["ul",0],oo=["li",0],io={parseDOM:[{tag:"ul"}],toDOM:function(){return ro}},so={parseDOM:[{tag:"li"}],toDOM:function(){return oo},defining:!0};function ao(t,e){return function(n,r){var o=n.selection,s=o.$from,a=o.$to,c=s.blockRange(a),p=!1,h=c;if(!c)return!1;if(c.depth>=2&&s.node(c.depth-1).type.compatibleContent(t)&&0==c.startIndex){if(0==s.index(c.depth-1))return!1;var l=n.doc.resolve(c.start-2);h=new M(l,l,c.depth),c.endIndex<c.parent.childCount&&(c=new M(s,n.doc.resolve(a.end(c.depth)),c.depth)),p=!0}var d=At(h,t,e,c);return!!d&&(r&&r(function(t,e,n,r,o){for(var s=i.empty,a=n.length-1;a>=0;a--)s=i.from(n[a].type.create(n[a].attrs,s));t.step(new Nt(e.start-(r?2:0),e.end,e.start,e.end,new f(s,0,0),n.length,!0));for(var c=0,p=0;p<n.length;p++)n[p].type==o&&(c=p+1);for(var h=n.length-c,l=e.start+n.length-(r?2:0),d=e.parent,u=e.startIndex,m=e.endIndex,v=!0;u<m;u++,v=!1)!v&&It(t.doc,l,h)&&(t.split(l,h),l+=2*h),l+=d.child(u).nodeSize;return t}(n.tr,c,d,p,t).scrollIntoView()),!0)}}function co(t){return function(e,n){var r=e.selection,o=r.$from,s=r.$to,a=o.blockRange(s,(function(e){return e.childCount&&e.firstChild.type==t}));return!!a&&(!n||(o.node(a.depth-1).type==t?function(t,e,n,r){var o=t.tr,s=r.end,a=r.$to.end(r.depth);s<a&&(o.step(new Nt(s-1,a,s,a,new f(i.from(n.create(null,r.parent.copy())),1,0),1,!0)),r=new M(o.doc.resolve(r.$from.pos),o.doc.resolve(a),r.depth));return e(o.lift(r,Et(r)).scrollIntoView()),!0}(e,n,t,a):function(t,e,n){for(var r=t.tr,o=n.parent,s=n.end,a=n.endIndex-1,c=n.startIndex;a>c;a--)s-=o.child(a).nodeSize,r.delete(s-1,s+1);var p=r.doc.resolve(n.start),h=p.nodeAfter,l=0==n.startIndex,d=n.endIndex==o.childCount,u=p.node(-1),m=p.index(-1);if(!u.canReplace(m+(l?0:1),m+1,h.content.append(d?i.empty:i.from(o))))return!1;var v=p.pos,g=v+h.nodeSize;return r.step(new Nt(v-(l?1:0),g+(d?1:0),v+1,g-1,new f((l?i.empty:i.from(o.copy(i.empty))).append(d?i.empty:i.from(o.copy(i.empty))),l?0:1,d?0:1),l?0:1)),e(r.scrollIntoView()),!0}(e,n,a)))}}const po={content:"inline*",defining:!0,group:"block",toDOM:t=>["h1",{class:"sn-prose-editor"},0],parseDOM:[{tag:"h1"}]},ho={content:"inline*",defining:!0,group:"block",toDOM:t=>["h2",{class:"sn-prose-editor"},0],parseDOM:[{tag:"h2"}]},lo=new Q({nodes:{doc:{content:"block+",toDOM:t=>["main",{class:"sn-prose-editor"},0],parseDOM:[{tag:"main"}]},paragraph:{content:"inline*",group:"block",toDOM:t=>["p",{class:"sn-prose-editor"},0],parseDOM:[{tag:"p"}]},checklist_item:{attrs:{checked:{default:!1}},content:"inline*",defining:!0,group:"block",toDOM:t=>["div",{class:"checklist-item"},["input",Object.assign({type:"checkbox"},t.attrs.checked&&{checked:"true"})],["p",0]],parseDOM:[{contentElement:"p",tag:"div.checklist-item",getAttrs:t=>({checked:!!t.querySelector("input").checked})}]},unordered_list:Object.assign(Object.assign({},io),{content:"list_item+",group:"block"}),list_item:Object.assign(Object.assign({},so),{content:"paragraph+"}),heading1:po,heading2:ho,text:{group:"inline"}},marks:{}}),fo=(uo={rules:[...no,eo,(go=/^# /,yo=lo.nodes.heading2,new Zr(go,(function(t,e,n,r){var o=t.doc.resolve(n),i=wo instanceof Function?wo(e):wo;return o.node(-1).canReplaceWith(o.index(-1),o.indexAfter(-1),yo)?t.tr.delete(n,r).setBlockType(n,n,yo,i):null})))]},mo=uo.rules,vo=new de({state:{init:function(){return null},apply:function(t,e){var n=t.getMeta(this);return n||(t.selectionSet||t.docChanged?null:e)}},props:{handleTextInput:function(t,e,n,r){return to(t,e,n,r,mo,vo)},handleDOMEvents:{compositionend:function(t){setTimeout((function(){var e=t.state.selection.$cursor;e&&to(t,e.pos,e.pos,"",mo,vo)}))}}},isInputRules:!0}));var uo,mo,vo,go,yo,wo;class bo extends de{constructor(t){super({view:e=>(this.view=e,t.addEventListener("click",this.handleToolbarClick),{destroy(){t.removeEventListener("click",this.handleToolbarClick)},update:(e,n)=>{const r=this.getSelectedFormatAttr(n);r&&t.querySelector(`[data-format=${r}]`).classList.remove("selected");const o=this.getSelectedFormatAttr(e.state);o&&t.querySelector(`[data-format=${o}]`).classList.add("selected")}}),props:{handleKeyDown:(t,e)=>{const n=84===e.which,r=e.ctrlKey;if(n&&r)return this.toggleChecklistItem(),!0;const o=55===e.which,i=e.metaKey;return o&&i?(this.toggleList(lo.nodes.unordered_list,lo.nodes.list_item),!0):85===e.which&&r?(this.toggleList(lo.nodes.unordered_list,lo.nodes.list_item),!0):187===e.which&&r?(this.promoteHeading(this.view.state,this.view.dispatch),!0):!(74!==e.which||!r)&&(this.swapTextBlock(lo.nodes.paragraph),!0)}},state:{apply(t){},init(t,e){return{selectedFormat:this.getSelectedFormat(e.selection)}}}}),this.swapTextBlock=t=>{let{dispatch:e,state:n}=this.view,{tr:r}=n;const{$from:o,$to:i,from:s,to:a}=n.selection;t!==lo.nodes.unordered_list&&co(lo.nodes.list_item)(n,e),({dispatch:e,state:n}=this.view),({tr:r}=n),r.setBlockType(s,a,t),e(r),this.view.focus()},this.promoteHeading=(t,e)=>{const{selection:n}=t;if(!n.empty)return;const{$from:{parent:{type:r}}}=n;let o;o=r===lo.nodes.heading2?lo.nodes.heading1:r===lo.nodes.heading1?lo.nodes.paragraph:lo.nodes.heading2,this.swapTextBlock(o)},this.toggleList=(t,e)=>{const{state:{selection:{$from:n,$to:r},tr:o}}=this.view;if(n.blockRange(r,e=>e.type===t)){const{dispatch:t,state:n}=this.view;co(e)(n,t)}else{const e=n.blockRange(r);for(let n=e.startIndex;n<e.endIndex;n+=1)if(e.parent.child(n).type===t)return;this.swapTextBlock(lo.nodes.paragraph);const{dispatch:o,state:i}=this.view;ao(lo.nodes.unordered_list)(i,o)}},this.toggleChecklistItem=()=>{const{dispatch:t,state:e}=this.view,{doc:n,tr:r}=e,{$from:o,$to:i}=e.selection,s=o.blockRange(i);for(let t=s.startIndex;t<s.endIndex;t+=1)if(s.parent.child(t).type===lo.nodes.checklist_item)return void this.swapTextBlock(lo.nodes.paragraph);this.swapTextBlock(lo.nodes.checklist_item)},this.getSelectedFormat=t=>{if(!t.selection)return;const e=new M(t.selection.$from,t.selection.$to,0);let n=null;for(let t=e.startIndex;t<e.endIndex;t+=1){const r=e.parent.child(t).type;if(null!==n){if(n!==r)return null}else n=r}return n},this.getSelectedFormatAttr=t=>{let e=null;switch(this.getSelectedFormat(t)){case lo.nodes.heading1:case lo.nodes.heading2:e="heading";break;case lo.nodes.paragraph:e="paragraph";break;case lo.nodes.unordered_list:case lo.nodes.list_item:e="unordered_list";break;case lo.nodes.checklist_item:e="checklist_item"}return e},this.handleToolbarClick=t=>{const e=t.target.closest("[data-format]");e&&this.applyFormat(e.getAttribute("data-format"))},this.applyFormat=t=>{switch(t){case"paragraph":this.swapTextBlock(lo.nodes.paragraph);break;case"heading":this.promoteHeading(this.view.state,this.view.dispatch);break;case"unordered_list":this.toggleList(lo.nodes.unordered_list,lo.nodes.list_item);break;case"checklist_item":this.toggleChecklistItem()}}}}const ko=document.createElement("template");ko.innerHTML='<main>\n  <h1>\n    Alice’s Adventures in Wonderland\n  </h1>\n  <h2>\n    Characters\n  </h2>\n  <ul>\n    <li><p>Alice</p></li>\n    <li><p>The Mad Hatter</p></li>\n    <li><p>The March Hare</p></li>\n    <li><p>Bill</p></li>\n    <li><p>The Queen of Hearts</p></li>\n    <li><p>The King of Hearts</p></li>\n  </ul>\n  <h2>Chapter 1: Down the Rabbit Hole</h2>\n  <p>\n  Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, “and what is the use of a book,” thought Alice “without pictures or conversations?”\n  </p>\n  <p>\n  So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.\n  </p>\n  <div class="checklist-item" data-checked="true">\n    <input type="checkbox" />\n    <span>Drink the potion</span>\n  </div>\n  <div class="checklist-item">\n    <input type="checkbox" checked />\n    <span>Eat the cake</span>\n  </div>\n  <div class="checklist-item">\n    <input type="checkbox" />\n    <span>Nibble the mushroom</span>\n  </div>\n</main>\n';var xo=ko.content.firstElementChild;console.log("demo");const So=new class{constructor(){}get latestDoc(){return tt.fromSchema(lo).parse(xo).toJSON()}ready(){return Promise.resolve()}onUpdate(){}saveNote(){}},Oo={checklist_item(t,e,n){const r=document.createElement("div");r.classList.add("checklist-item");const o=document.createElement("input");o.type="checkbox",o.checked=t.attrs.checked,o.contentEditable="false";const i=document.createElement("p");r.appendChild(o),r.appendChild(i);const s=t=>{const{relatedTarget:n,target:r}=t;n===o&&r===e.dom&&e.focus()},a=t=>{if(t.target!==o)return;const r=o.checked,{tr:i}=e.state,s=n();i.setNodeMarkup(s,void 0,{checked:r}),e.dispatch(i)};return e.dom.addEventListener("blur",s),e.dom.addEventListener("click",a),{dom:r,contentDOM:i,destroy(){e.dom.removeEventListener("blur",s),e.dom.removeEventListener("click",a)}}}};function Co(t,e){return!t.selection.empty&&(e&&e(t.tr.deleteSelection().scrollIntoView()),!0)}function Mo(t,e){for(;t;t="start"==e?t.firstChild:t.lastChild)if(t.isTextblock)return!0;return!1}function No(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){if(t.index(e)>0)return t.doc.resolve(t.before(e+1));if(t.node(e).type.spec.isolating)break}return null}function To(t){if(!t.parent.type.spec.isolating)for(var e=t.depth-1;e>=0;e--){var n=t.node(e);if(t.index(e)+1<n.childCount)return t.doc.resolve(t.after(e+1));if(n.type.spec.isolating)break}return null}function Do(t){for(var e=0;e<t.edgeCount;e++){var n=t.edge(e).type;if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}function Eo(t,e){var n=t.selection,r=n.$from,o=n.$to;if(t.selection instanceof Zt&&t.selection.node.isBlock)return!(!r.parentOffset||!It(t.doc,r.pos))&&(e&&e(t.tr.split(r.pos).scrollIntoView()),!0);if(!r.parent.isBlock)return!1;if(e){var s=o.parentOffset==o.parent.content.size,a=t.tr;t.selection instanceof Yt&&a.deleteSelection();var c=0==r.depth?null:Do(r.node(-1).contentMatchAt(r.indexAfter(-1))),p=s&&c?[{type:c}]:null,h=It(a.doc,a.mapping.map(r.pos),1,p);p||h||!It(a.doc,a.mapping.map(r.pos),1,c&&[{type:c}])||(p=[{type:c}],h=!0),h&&(a.split(a.mapping.map(r.pos),1,p),s||r.parentOffset||r.parent.type==c||!r.node(-1).canReplace(r.index(-1),r.indexAfter(-1),i.from(c.create(),r.parent))||a.setNodeMarkup(a.mapping.map(r.before()),c)),e(a.scrollIntoView())}return!0}function Ao(t,e,n){var r,o,s=e.nodeBefore,a=e.nodeAfter;if(s.type.spec.isolating||a.type.spec.isolating)return!1;if(function(t,e,n){var r=e.nodeBefore,o=e.nodeAfter,i=e.index();return!!(r&&o&&r.type.compatibleContent(o.type))&&(!r.content.size&&e.parent.canReplace(i-1,i)?(n&&n(t.tr.delete(e.pos-r.nodeSize,e.pos).scrollIntoView()),!0):!(!e.parent.canReplace(i,i+1)||!o.isTextblock&&!zt(t.doc,e.pos))&&(n&&n(t.tr.clearIncompatible(e.pos,r.type,r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()),!0))}(t,e,n))return!0;if(e.parent.canReplace(e.index(),e.index()+1)&&(r=(o=s.contentMatchAt(s.childCount)).findWrapping(a.type))&&o.matchType(r[0]||a.type).validEnd){if(n){for(var c=e.pos+a.nodeSize,p=i.empty,h=r.length-1;h>=0;h--)p=i.from(r[h].create(null,p));p=i.from(s.copy(p));var l=t.tr.step(new Nt(e.pos-1,c,e.pos,c,new f(p,1,0),r.length,!0)),d=c+2*r.length;zt(l.doc,d)&&l.join(d),n(l.scrollIntoView())}return!0}var u=Ut.findFrom(e,1),m=u&&u.$from.blockRange(u.$to),v=m&&Et(m);return null!=v&&v>=e.depth&&(n&&n(t.tr.lift(m,v).scrollIntoView()),!0)}function Ro(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return function(e,n,r){for(var o=0;o<t.length;o++)if(t[o](e,n,r))return!0;return!1}}var Io=Ro(Co,(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("backward",t):r.parentOffset>0))return!1;var o=No(r);if(!o){var i=r.blockRange(),s=i&&Et(i);return null!=s&&(e&&e(t.tr.lift(i,s).scrollIntoView()),!0)}var a=o.nodeBefore;if(!a.type.spec.isolating&&Ao(t,o,e))return!0;if(0==r.parent.content.size&&(Mo(a,"end")||Zt.isSelectable(a))){if(e){var c=t.tr.deleteRange(r.before(),r.after());c.setSelection(Mo(a,"end")?Ut.findFrom(c.doc.resolve(c.mapping.map(o.pos,-1)),-1):Zt.create(c.doc,o.pos-a.nodeSize)),e(c.scrollIntoView())}return!0}return!(!a.isAtom||o.depth!=r.depth-1)&&(e&&e(t.tr.delete(o.pos-a.nodeSize,o.pos).scrollIntoView()),!0)}),(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("backward",t):r.parentOffset>0))return!1;var o=No(r),i=o&&o.nodeBefore;return!(!i||!Zt.isSelectable(i))&&(e&&e(t.tr.setSelection(Zt.create(t.doc,o.pos-i.nodeSize)).scrollIntoView()),!0)})),zo=Ro(Co,(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=To(r);if(!o)return!1;var i=o.nodeAfter;if(Ao(t,o,e))return!0;if(0==r.parent.content.size&&(Mo(i,"start")||Zt.isSelectable(i))){if(e){var s=t.tr.deleteRange(r.before(),r.after());s.setSelection(Mo(i,"start")?Ut.findFrom(s.doc.resolve(s.mapping.map(o.pos)),1):Zt.create(s.doc,s.mapping.map(o.pos))),e(s.scrollIntoView())}return!0}return!(!i.isAtom||o.depth!=r.depth-1)&&(e&&e(t.tr.delete(o.pos,o.pos+i.nodeSize).scrollIntoView()),!0)}),(function(t,e,n){var r=t.selection.$cursor;if(!r||(n?!n.endOfTextblock("forward",t):r.parentOffset<r.parent.content.size))return!1;var o=To(r),i=o&&o.nodeAfter;return!(!i||!Zt.isSelectable(i))&&(e&&e(t.tr.setSelection(Zt.create(t.doc,o.pos)).scrollIntoView()),!0)})),Po={Enter:Ro((function(t,e){var n=t.selection,r=n.$head,o=n.$anchor;return!(!r.parent.type.spec.code||!r.sameParent(o))&&(e&&e(t.tr.insertText("\n").scrollIntoView()),!0)}),(function(t,e){var n=t.selection,r=n.$from,o=n.$to;if(r.parent.inlineContent||o.parent.inlineContent)return!1;var i=Do(r.parent.contentMatchAt(o.indexAfter()));if(!i||!i.isTextblock)return!1;if(e){var s=(!r.parentOffset&&o.index()<o.parent.childCount?r:o).pos,a=t.tr.insert(s,i.createAndFill());a.setSelection(Yt.create(a.doc,s+1)),e(a.scrollIntoView())}return!0}),(function(t,e){var n=t.selection.$cursor;if(!n||n.parent.content.size)return!1;if(n.depth>1&&n.after()!=n.end(-1)){var r=n.before();if(It(t.doc,r))return e&&e(t.tr.split(r).scrollIntoView()),!0}var o=n.blockRange(),i=o&&Et(o);return null!=i&&(e&&e(t.tr.lift(o,i).scrollIntoView()),!0)}),Eo),"Mod-Enter":function(t,e){var n=t.selection,r=n.$head,o=n.$anchor;if(!r.parent.type.spec.code||!r.sameParent(o))return!1;var i=r.node(-1),s=r.indexAfter(-1),a=Do(i.contentMatchAt(s));if(!i.canReplaceWith(s,s,a))return!1;if(e){var c=r.after(),p=t.tr.replaceWith(c,c,a.createAndFill());p.setSelection(Ut.near(p.doc.resolve(c),1)),e(p.scrollIntoView())}return!0},Backspace:Io,"Mod-Backspace":Io,Delete:zo,"Mod-Delete":zo,"Mod-a":function(t,e){return e&&e(t.tr.setSelection(new ee(t.doc))),!0}},Bo={"Ctrl-h":Po.Backspace,"Alt-Backspace":Po["Mod-Backspace"],"Ctrl-d":Po.Delete,"Ctrl-Alt-Backspace":Po["Mod-Delete"],"Alt-Delete":Po["Mod-Delete"],"Alt-d":Po["Mod-Delete"]};for(var $o in Po)Bo[$o]=Po[$o];for(var Fo=("undefined"!=typeof navigator?/Mac/.test(navigator.platform):"undefined"!=typeof os&&"darwin"==os.platform())?Bo:Po,Vo={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},_o=Vo,jo={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:";",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},Lo="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),Jo="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),qo="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),Wo="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),Ko="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),Ho=Lo&&(Wo||+Lo[1]<57)||qo&&Wo,Uo=0;Uo<10;Uo++)Vo[48+Uo]=Vo[96+Uo]=String(Uo);for(Uo=1;Uo<=24;Uo++)Vo[Uo+111]="F"+Uo;for(Uo=65;Uo<=90;Uo++)Vo[Uo]=String.fromCharCode(Uo+32),jo[Uo]=String.fromCharCode(Uo);for(var Go in Vo)jo.hasOwnProperty(Go)||(jo[Go]=Vo[Go]);var Xo=function(t){var e=!(Ho&&(t.ctrlKey||t.altKey||t.metaKey)||(Jo||Ko)&&t.shiftKey&&t.key&&1==t.key.length)&&t.key||(t.shiftKey?jo:Vo)[t.keyCode]||t.key||"Unidentified";return"Esc"==e&&(e="Escape"),"Del"==e&&(e="Delete"),"Left"==e&&(e="ArrowLeft"),"Up"==e&&(e="ArrowUp"),"Right"==e&&(e="ArrowRight"),"Down"==e&&(e="ArrowDown"),e},Yo="undefined"!=typeof navigator&&/Mac/.test(navigator.platform);function Qo(t){var e,n,r,o,i=t.split(/-(?!$)/),s=i[i.length-1];"Space"==s&&(s=" ");for(var a=0;a<i.length-1;a++){var c=i[a];if(/^(cmd|meta|m)$/i.test(c))o=!0;else if(/^a(lt)?$/i.test(c))e=!0;else if(/^(c|ctrl|control)$/i.test(c))n=!0;else if(/^s(hift)?$/i.test(c))r=!0;else{if(!/^mod$/i.test(c))throw new Error("Unrecognized modifier name: "+c);Yo?o=!0:n=!0}}return e&&(s="Alt-"+s),n&&(s="Ctrl-"+s),o&&(s="Meta-"+s),r&&(s="Shift-"+s),s}function Zo(t,e,n){return e.altKey&&(t="Alt-"+t),e.ctrlKey&&(t="Ctrl-"+t),e.metaKey&&(t="Meta-"+t),!1!==n&&e.shiftKey&&(t="Shift-"+t),t}function ti(t){return new de({props:{handleKeyDown:ei(t)}})}function ei(t){var e=function(t){var e=Object.create(null);for(var n in t)e[Qo(n)]=t[n];return e}(t);return function(t,n){var r,o=Xo(n),i=1==o.length&&" "!=o,s=e[Zo(o,n,!i)];if(s&&s(t.state,t.dispatch,t))return!0;if(i&&(n.shiftKey||n.altKey||n.metaKey)&&(r=_o[n.keyCode])&&r!=o){var a=e[Zo(r,n,!0)];if(a&&a(t.state,t.dispatch,t))return!0}else if(i&&n.shiftKey){var c=e[Zo(o,n,!0)];if(c&&c(t.state,t.dispatch,t))return!0}return!1}}const ni=[ti({Enter:(ri=lo.nodes.list_item,function(t,e){var n=t.selection,r=n.$from,o=n.$to,s=n.node;if(s&&s.isBlock||r.depth<2||!r.sameParent(o))return!1;var a=r.node(-1);if(a.type!=ri)return!1;if(0==r.parent.content.size){if(2==r.depth||r.node(-3).type!=ri||r.index(-2)!=r.node(-2).childCount-1)return!1;if(e){for(var c=i.empty,p=r.index(-1)>0,h=r.depth-(p?1:2);h>=r.depth-3;h--)c=i.from(r.node(h).copy(c));c=c.append(i.from(ri.createAndFill()));var l=t.tr.replace(r.before(p?null:-1),r.after(-3),new f(c,p?3:2,2));l.setSelection(t.selection.constructor.near(l.doc.resolve(r.pos+(p?3:2)))),e(l.scrollIntoView())}return!0}var d=o.pos==r.end()?a.contentMatchAt(0).defaultType:null,u=t.tr.delete(r.pos,o.pos),m=d&&[null,{type:d}];return!!It(u.doc,r.pos,2,m)&&(e&&e(u.split(r.pos,2,m).scrollIntoView()),!0)})}),ti({Enter(t,e){const{selection:{$from:n,from:r},tr:o}=t;if(n.parent.type!==lo.nodes.checklist_item)return!1;o.deleteSelection();const i=o.doc.resolve(r);if(2===i.parent.nodeSize){const t=i.pos;return o.replaceWith(t-1,t+1,lo.nodes.paragraph.createAndFill()),e(o),!0}return o.split(r,void 0,[{type:lo.nodes.checklist_item,attrs:{checked:!1}}]),e(o),!0}}),ti(Fo)];var ri,oi=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};function ii(){return So.latestDoc?lo.nodeFromJSON(So.latestDoc):lo.topNodeType.createAndFill()}!function(){oi(this,void 0,void 0,(function*(){yield So.ready();const t=window.view=new Hr(document.querySelector("#editor"),{state:he.create({doc:ii(),plugins:[...ni,new bo(document.querySelector("#toolbar")),new de({props:{nodeViews:Oo}}),fo]}),dispatchTransaction(e){const n=t.state.apply(e);t.updateState(n),So.saveNote(n.doc.toJSON())}});So.onUpdate(e=>{t.setProps({state:he.create({doc:ii(),plugins:t.state.plugins})})})}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,